<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\core\casm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFDBG</name></cpp:macro> <cpp:value>if (0)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>RCoreAsmHit</name> <modifier>*</modifier></type> <name>find_addr</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>hits</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>prune_hits_in_hit_range</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>hits</name></decl></parameter>, <parameter><decl><type><name>RCoreAsmHit</name> <modifier>*</modifier></type><name>hit</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_hit_inrange</name><parameter_list>(<parameter><decl><type><name>RCoreAsmHit</name> <modifier>*</modifier></type><name>hit</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start_range</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end_range</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_addr_in_range</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start_range</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end_range</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_hit_to_sorted_hits</name><parameter_list>(<parameter><decl><type><name>RList</name><modifier>*</modifier></type> <name>hits</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>is_valid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>prune_hits_in_addr_range</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>hits</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>is_valid</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rcoreasm_address_comparator</name><parameter_list>(<parameter><decl><type><name>RCoreAsmHit</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RCoreAsmHit</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>addr</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RCoreAsmHit</name> <modifier>*</modifier></type><name>r_core_asm_hit_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCoreAsmHit</name> <modifier>*</modifier></type><name>hit</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCoreAsmHit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hit</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>hit</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_core_asm_hit_list_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>&amp;</operator><name>r_core_asm_hit_free</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_asm_hit_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_hit</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCoreAsmHit</name> <modifier>*</modifier></type><name>hit</name> <init>= <expr><name>_hit</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hit</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hit</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>hit</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name><modifier>*</modifier></type> <name>r_core_asm_search</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAsmCode</name> <modifier>*</modifier></type><name>acode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>acode</name> <operator>=</operator> <call><name>r_asm_massemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_asm_code_get_hex</name> <argument_list>(<argument><expr><name>acode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asm_code_free</name> <argument_list>(<argument><expr><name>acode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_core_asm_strsearch</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxhits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>regexp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>everyByte</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCoreAsmHit</name> <modifier>*</modifier></type><name>hit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAsmOp</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>hits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>at</name></decl>, <decl><type ref="prev"/><name>toff</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>align</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>search</name><operator>-&gt;</operator><name>align</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRegex</name><modifier>*</modifier></type> <name>rx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tok</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>tokens</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>code</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>tidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tokcount</name></decl>, <decl><type ref="prev"/><name>matchcount</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>matches</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>addrbytes</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>addrbytes</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>input</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>inp</name> <init>= <expr><call><name>r_str_trim_dup</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>inp_arg</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>inp</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>inp_arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>inp_arg</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>usrimm</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>inp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>usrimm2</name> <init>= <expr><ternary><condition><expr><name>inp_arg</name></expr>?</condition><then> <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>inp_arg</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>usrimm</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>usrimm</name> <operator>&gt;</operator> <name>usrimm2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: /ci : Invalid range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: block size too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><call><name>calloc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hits</name> <operator>=</operator> <call><name>r_core_asm_hit_list_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tokens</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>tokcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tokcount</name> <operator>&lt;</operator> <call><name>R_ARRAY_SIZE</name> <argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>tokcount</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><ternary><condition><expr><name>tokcount</name></expr>?</condition><then> <expr><name>NULL</name></expr></then><else>: <expr><name>ptr</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tok</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tokens</name><index>[<expr><name>tokcount</name></expr>]</index></name> <operator>=</operator> <name>tok</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>tokens</name><index>[<expr><name>tokcount</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>at</name> <operator>=</operator> <name>from</name></expr><operator>,</operator> <expr><name>matchcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>at</name> <operator>&lt;</operator> <name>to</name></expr>;</condition> <incr><expr><name>at</name> <operator>+=</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_io_is_valid_offset</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>matchcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>addrbytes</name> <operator>*</operator> <operator>(</operator><name>idx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name>at</name> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asm_set_pc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalOp</name></type> <name>analop</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>len</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>-</operator> <name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>analop</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_BASIC</name> <operator>|</operator> <name>R_ANAL_OP_MASK_DISASM</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>++</operator></expr>;</expr_stmt> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>val</name> <init>= <expr><name><name>analop</name><operator>.</operator><name>val</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>match</name> <init>= <expr><operator>(</operator><name>val</name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>&gt;=</operator> <name>usrimm</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;=</operator> <name>usrimm2</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>match</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>val</name> <init>= <expr><name><name>analop</name><operator>.</operator><name>disp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>&gt;=</operator> <name>usrimm</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;=</operator> <name>usrimm2</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>match</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>val</name> <init>= <expr><name><name>analop</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>&gt;=</operator> <name>usrimm</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;=</operator> <name>usrimm2</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hit</name> <operator>=</operator> <call><name>r_core_asm_hit_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>analop</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>hit</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_asm_hit_free</name> <argument_list>(<argument><expr><name>hit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asm_disassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>addrbytes</name> <operator>*</operator> <name>idx</name></expr></argument>,

<argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>-</operator> <name>addrbytes</name> <operator>*</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>buf_asm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>matchcount</name><operator>)</operator></expr>?</condition><then> <expr><name>tidx</name> <operator>+</operator> <literal type="number">1</literal></expr></then><else>: <expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>matchcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>hit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>analop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>++</operator></expr>;</expr_stmt> 

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalOp</name></type> <name>analop</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>analop</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_ESIL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>++</operator></expr>;</expr_stmt> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>opst</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>analop</name><operator>.</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>analop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>len</name> <operator>=</operator> <call><name>r_asm_disassemble</name> <argument_list>(

<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>,

<argument><expr><name>buf</name> <operator>+</operator> <name>addrbytes</name> <operator>*</operator> <name>idx</name></expr></argument>,

<argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>-</operator> <name>addrbytes</name> <operator>*</operator> <name>idx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>matchcount</name><operator>)</operator></expr>?</condition><then> <expr><name>tidx</name> <operator>+</operator> <literal type="number">1</literal></expr></then><else>: <expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>matchcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>opst</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>buf_asm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>opst</name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>opst</name></expr></argument>, <argument><expr><literal type="string">"unaligned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>matches</name> <operator>&amp;&amp;</operator> <name><name>tokens</name><index>[<expr><name>matchcount</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>matches</name> <operator>=</operator> <operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name>opst</name></expr></argument>, <argument><expr><name><name>tokens</name><index>[<expr><name>matchcount</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>matchcount</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>regexp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>opst</name></expr></argument>, <argument><expr><name><name>tokens</name><index>[<expr><name>matchcount</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rx</name> <operator>=</operator> <call><name>r_regex_new</name> <argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>matchcount</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_regex_comp</name> <argument_list>(<argument><expr><name>rx</name></expr></argument>, <argument><expr><name><name>tokens</name><index>[<expr><name>matchcount</name></expr>]</index></name></expr></argument>, <argument><expr><name>R_REGEX_EXTENDED</name><operator>|</operator><name>R_REGEX_NOSUB</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>r_regex_exec</name> <argument_list>(<argument><expr><name>rx</name></expr></argument>, <argument><expr><name>opst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_regex_free</name> <argument_list>(<argument><expr><name>rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>align</name> <operator>&amp;&amp;</operator> <name>align</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>%</operator> <name>align</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matches</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>matches</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"%s; "</literal></expr></argument>, <argument><expr><name>opst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>matchcount</name> <operator>==</operator> <name>tokcount</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tokcount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tidx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hit</name> <operator>=</operator> <call><name>r_core_asm_hit_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>idx</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>tidx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hit</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_asm_hit_free</name> <argument_list>(<argument><expr><name>hit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>code</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>hit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>matchcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>tidx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>maxhits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>maxhits</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>matchcount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tidx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>matchcount</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>matchcount</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>everyByte</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <ternary><condition><expr><name>matchcount</name></expr>?</condition><then> <expr><name>tidx</name> <operator>+</operator> <literal type="number">1</literal></expr></then><else>: <expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>+=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>matchcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>opst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asm_set_pc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>toff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>opst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hits</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_hit_to_sorted_hits</name><parameter_list>(<parameter><decl><type><name>RList</name><modifier>*</modifier></type> <name>hits</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>is_valid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCoreAsmHit</name> <modifier>*</modifier></type><name>hit</name> <init>= <expr><call><name>r_core_asm_hit_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hit</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"*** Inserting instruction (valid?: %d): instr_addr: 0x%"</literal><name>PFMT64x</name><literal type="string">" instr_len: %d\n"</literal></expr></argument>, <argument><expr><name>is_valid</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>is_valid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_add_sorted</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>hit</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RListComparator</name><operator>)</operator><name>rcoreasm_address_comparator</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_hit_to_hits</name><parameter_list>(<parameter><decl><type><name>RList</name><modifier>*</modifier></type> <name>hits</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>is_valid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCoreAsmHit</name> <modifier>*</modifier></type><name>hit</name> <init>= <expr><call><name>r_core_asm_hit_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hit</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"*** Inserting instruction (valid?: %d): instr_addr: 0x%"</literal><name>PFMT64x</name><literal type="string">" instr_len: %d\n"</literal></expr></argument>, <argument><expr><name>is_valid</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>is_valid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_append</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>hit</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prune_hits_in_addr_range</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>hits</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>is_valid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCoreAsmHit</name></type> <name>hit</name> <init>= <expr><name>R_EMPTY</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hit</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>.</operator><name>valid</name></name> <operator>=</operator> <name>is_valid</name></expr>;</expr_stmt>

<return>return <expr><call><name>prune_hits_in_hit_range</name><argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hit</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prune_hits_in_hit_range</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>hits</name></decl></parameter>, <parameter><decl><type><name>RCoreAsmHit</name> <modifier>*</modifier></type><name>hit</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCoreAsmHit</name> <modifier>*</modifier></type><name>to_check_hit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>start_range</name></decl>, <decl><type ref="prev"/><name>end_range</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hit</name> <operator>||</operator> <operator>!</operator><name>hits</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start_range</name> <operator>=</operator> <name><name>hit</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_range</name> <operator>=</operator> <name><name>hit</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>hit</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>hits</argument>, <argument>iter</argument>, <argument>iter_tmp</argument>, <argument>to_check_hit</argument>)</argument_list></macro><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>to_check_hit</name> <operator>&amp;&amp;</operator> <call><name>is_hit_inrange</name><argument_list>(<argument><expr><name>to_check_hit</name></expr></argument>, <argument><expr><name>start_range</name></expr></argument>, <argument><expr><name>end_range</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Found hit that clashed (start: 0x%"</literal><name>PFMT64x</name>

<literal type="string">" - end: 0x%"</literal><name>PFMT64x</name><literal type="string">" ), 0x%"</literal><name>PFMT64x</name><literal type="string">" len: %d (valid: %d 0x%"</literal><name>PFMT64x</name>

<literal type="string">" - 0x%"</literal><name>PFMT64x</name><literal type="string">")\n"</literal></expr></argument>, <argument><expr><name>start_range</name></expr></argument>, <argument><expr><name>end_range</name></expr></argument>, <argument><expr><name><name>to_check_hit</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,

<argument><expr><name><name>to_check_hit</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>to_check_hit</name><operator>-&gt;</operator><name>valid</name></name></expr></argument>, <argument><expr><name><name>to_check_hit</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,

<argument><expr><name><name>to_check_hit</name><operator>-&gt;</operator><name>addr</name></name><operator>+</operator><name><name>to_check_hit</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>to_check_hit</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RCoreAsmHit</name> <modifier>*</modifier></type> <name>find_addr</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>hits</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>addr_iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCoreAsmHit</name></type> <name>dummy_value</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dummy_value</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr_iter</name> <operator>=</operator> <call><name>r_list_find</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy_value</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RListComparator</name><operator>)</operator><name>rcoreasm_address_comparator</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_list_iter_get_data</name><argument_list>(<argument><expr><name>addr_iter</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_forward_disassemble</name><parameter_list>(<parameter><decl><type><name>RCore</name><modifier>*</modifier></type> <name>core</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>hits</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>current_buf_pos</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>current_instr_addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end_addr</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>RCoreAsmHit</name> <modifier>*</modifier></type><name>hit</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>found_addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>temp_instr_addr</name> <init>= <expr><name>current_instr_addr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>tmp_current_buf_pos</name> <init>= <expr><name>current_buf_pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>start_range</name> <init>= <expr><name>current_instr_addr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>end_range</name> <init>= <expr><name>end_addr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>temp_instr_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>is_valid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAsmOp</name></type> <name>op</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>end_addr</name> <operator>&lt;</operator> <name>current_instr_addr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>end_addr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asm_set_pc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>current_instr_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tmp_current_buf_pos</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>temp_instr_addr</name> <operator>&lt;</operator> <name>end_addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp_instr_len</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>tmp_current_buf_pos</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Current position: %"</literal><name>PFMT64d</name><literal type="string">" instr_addr: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tmp_current_buf_pos</name></expr></argument>, <argument><expr><name>temp_instr_addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>temp_instr_len</name> <operator>=</operator> <call><name>r_asm_disassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><name>tmp_current_buf_pos</name></expr></argument>, <argument><expr><name>temp_instr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp_instr_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>is_valid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_instr_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>is_valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>found_addr</name> <operator>=</operator> <call><name>find_addr</name><argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>temp_instr_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>temp_instr_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>temp_instr_addr</name> <operator>+</operator> <name>temp_instr_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_hit_to_sorted_hits</name><argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>temp_instr_addr</name></expr></argument>, <argument><expr><name>temp_instr_len</name></expr></argument>, <argument><expr><name>is_valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_valid</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>found_addr</name><operator>-&gt;</operator><name>valid</name></name> <operator>&amp;&amp;</operator> <call><name>is_addr_in_range</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>start_range</name></expr></argument>, <argument><expr><name>end_range</name></expr></argument> )</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>prune_results</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>prune_results</name> <operator>=</operator> <call><name>prune_hits_in_addr_range</name><argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>temp_instr_addr</name></expr></argument>, <argument><expr><name>temp_instr_len</name></expr></argument>, <argument><expr><name>is_valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_hit_to_sorted_hits</name><argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>temp_instr_addr</name></expr></argument>, <argument><expr><name>temp_instr_len</name></expr></argument>, <argument><expr><name>is_valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prune_results</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_add_sorted</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>hit</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RListComparator</name><operator>)</operator><name>rcoreasm_address_comparator</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Pruned %u hits from list in fwd sweep.\n"</literal></expr></argument>, <argument><expr><name>prune_results</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>hit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>temp_instr_addr</name> <operator>+=</operator> <name>temp_instr_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_current_buf_pos</name> <operator>+=</operator> <name>temp_instr_len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>temp_instr_addr</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static int handle_disassembly_overlap(RCore* core, RList *hits, ut8* buf, int len, ut64 current_buf_pos, ut64 current_instr_addr ) {

ut64 next_buf_pos = current_buf_pos,

end_addr = current_instr_addr + ( len - current_buf_pos - 1);

handle_forward_disassemble (core, hits, buf, len, current_buf_pos, current_instr_addr, end_addr );

next_buf_pos = current_buf_pos;

return next_buf_pos;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_addr_in_range</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start_range</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end_range</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name>start_range</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>start_range</name> <operator>&lt;</operator> <name>end_range</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start_range</name> <operator>&lt;=</operator> <name>start</name> <operator>&amp;&amp;</operator> <name>start</name> <operator>&lt;</operator> <name>end_range</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>start_range</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>end</name> <operator>&lt;</operator> <name>end_range</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>start</name> <operator>&lt;=</operator> <name>start_range</name> <operator>&amp;&amp;</operator> <name>end_range</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>start_range</name> <operator>&gt;</operator> <name>end_range</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end_range</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>end</name> <operator>&lt;=</operator> <name>end_range</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>start_range</name> <operator>&lt;=</operator> <name>start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>start_range</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name>end_range</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>end</name> <operator>&lt;=</operator> <name>end_range</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>start_range</name> <operator>&lt;=</operator> <name>start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>start_range</name> <operator>&lt;</operator> <name>end_range</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end_range</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>start</name> <operator>&lt;=</operator> <name>start_range</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>start_range</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_hit_inrange</name><parameter_list>(<parameter><decl><type><name>RCoreAsmHit</name> <modifier>*</modifier></type><name>hit</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start_range</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end_range</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>is_addr_in_range</name> <argument_list>(<argument><expr><name><name>hit</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,

<argument><expr><name><name>hit</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>hit</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,

<argument><expr><name>start_range</name></expr></argument>, <argument><expr><name>end_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_core_asm_bwdisassemble</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAsmOp</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>at</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hit_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numinstr</name></decl>, <decl><type ref="prev"/><name>asmlen</name></decl>, <decl><type ref="prev"/><name>ii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>addrbytes</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>addrbytes</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAsmCode</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>hits</name> <init>= <expr><call><name>r_core_asm_hit_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hits</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>len</name> <operator>-</operator> <name>len</name> <operator>%</operator> <name>addrbytes</name></expr></argument>, <argument><expr><name>addrbytes</name> <operator>*</operator> <name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>hits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name> <operator>-</operator> <name>len</name> <operator>/</operator> <name>addrbytes</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name>addrbytes</name></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>idx</name> <operator>+=</operator> <name>addrbytes</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>r_asm_mdisassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>idx</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>assembly</name></name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>assembly</name></name></expr></argument>, <argument><expr><literal type="string">".byte"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_asm_code_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>numinstr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>asmlen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>assembly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>asmlen</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>assembly</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>numinstr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_asm_code_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>numinstr</name> <operator>&gt;=</operator> <name>n</name> <operator>||</operator> <name>idx</name> <operator>&gt;</operator> <literal type="number">16</literal> <operator>*</operator> <name>n</name></expr>)</condition> <block>{<block_content> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>at</name> <operator>=</operator> <name>addr</name> <operator>-</operator> <name>idx</name> <operator>/</operator> <name>addrbytes</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asm_set_pc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hit_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hit_count</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>hit_count</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>instrlen</name> <init>= <expr><call><name>r_asm_disassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>,

<argument><expr><name>buf</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>addrbytes</name> <operator>*</operator> <operator>(</operator><name>addr</name> <operator>-</operator> <name>at</name><operator>)</operator></expr></argument>, <argument><expr><name>addrbytes</name> <operator>*</operator> <operator>(</operator><name>addr</name> <operator>-</operator> <name>at</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>add_hit_to_hits</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>instrlen</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>at</name> <operator>+=</operator> <name>instrlen</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hits</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>r_core_asm_back_disassemble_all</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max_hit_count</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>extra_padding</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>hits</name> <init>= <expr><call><name>r_core_asm_hit_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCoreAsmHit</name></type> <name>dummy_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCoreAsmHit</name> <modifier>*</modifier></type><name>hit</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAsmOp</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <name>extra_padding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>current_instr_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>current_instr_addr</name> <init>= <expr><name>addr</name></expr></init></decl>,

<decl><type ref="prev"/><name>current_buf_pos</name> <init>= <expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><type ref="prev"/><name>hit_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dummy_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RCoreAsmHit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hits</name> <operator>||</operator> <operator>!</operator><name>buf</name></expr> )</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name><operator>-</operator><operator>(</operator><name>len</name><operator>+</operator><name>extra_padding</name><operator>)</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>extra_padding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>hits</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asm_set_pc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>current_instr_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_instr_len</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>current_buf_pos</name> <operator>+</operator> <name>extra_padding</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">"current_buf_pos: 0x%"</literal><name>PFMT64x</name><literal type="string">", current_instr_len: %d\n"</literal></expr></argument>, <argument><expr><name>current_buf_pos</name></expr></argument>, <argument><expr><name>current_instr_len</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>current_instr_len</name> <operator>=</operator> <call><name>r_asm_disassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><name>current_buf_pos</name></expr></argument>, <argument><expr><name>current_instr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hit</name> <operator>=</operator> <call><name>r_core_asm_hit_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>current_instr_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>current_instr_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_add_sorted</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>hit</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RListComparator</name><operator>)</operator><name>rcoreasm_address_comparator</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_buf_pos</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>current_instr_addr</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>hit_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>( <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>current_buf_pos</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>current_buf_pos</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>hit_count</name> <operator>&lt;=</operator> <name>max_hit_count</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hits</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_core_asm_back_disassemble</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max_hit_count</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>disassmble_each_addr</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>extra_padding</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>hits</name></decl>;</decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>RAsmOp</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>max_invalid_b4_exit</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><type ref="prev"/><name>last_num_invalid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>current_instr_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>current_instr_addr</name> <init>= <expr><name>addr</name></expr></init></decl>,

<decl><type ref="prev"/><name>current_buf_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>next_buf_pos</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCoreAsmHit</name></type> <name>dummy_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>hit_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>disassmble_each_addr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_core_asm_back_disassemble_all</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>max_hit_count</name></expr></argument>, <argument><expr><name>extra_padding</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hits</name> <operator>=</operator> <call><name>r_core_asm_hit_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <name>extra_padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hits</name> <operator>||</operator> <operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><operator>(</operator><name>addr</name> <operator>+</operator> <name>extra_padding</name><operator>)</operator> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>extra_padding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dummy_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RCoreAsmHit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_buf_pos</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>extra_padding</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>next_buf_pos</name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>extra_padding</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current_instr_addr</name> <operator>=</operator> <name>addr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asm_set_pc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>current_instr_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_instr_len</name> <operator>=</operator> <name>next_buf_pos</name> <operator>-</operator> <name>current_buf_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_instr_len</name> <operator>=</operator> <call><name>r_asm_disassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><name>current_buf_pos</name></expr></argument>, <argument><expr><name>current_instr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>IFDBG</name></macro> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>byte_cnt</name> <init>= <expr><ternary><condition><expr><name>current_instr_len</name></expr> ?</condition><then> <expr><name>current_instr_len</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"current_instr_addr: 0x%"</literal><name>PFMT64x</name><literal type="string">", current_buf_pos: 0x%"</literal><name>PFMT64x</name><literal type="string">", current_instr_len: %d \n"</literal></expr></argument>, <argument><expr><name>current_instr_addr</name></expr></argument>, <argument><expr><name>current_buf_pos</name></expr></argument>, <argument><expr><name>current_instr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>hex_str</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><call><name>r_hex_bin2strdup</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><name>current_buf_pos</name></expr></argument>, <argument><expr><name>byte_cnt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"==== current_instr_bytes: %s "</literal></expr></argument>,<argument><expr><name>hex_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_instr_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"op.buf_asm: %s\n"</literal></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>buf_asm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"op.buf_asm: &lt;invalid&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hex_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>current_instr_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strstr</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>buf_asm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>current_instr_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>current_instr_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_hit_to_sorted_hits</name><argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>current_instr_addr</name></expr></argument>, <argument><expr><name>current_instr_len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hit_count</name> <operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>last_num_invalid</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>current_buf_pos</name> <operator>+</operator> <name>current_instr_len</name> <operator>==</operator> <name>next_buf_pos</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>purge_results</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>is_valid</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">" handling underlap case: current_instr_addr: 0x%"</literal><name>PFMT64x</name><literal type="string">".\n"</literal></expr></argument>, <argument><expr><name>current_instr_addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>purge_results</name> <operator>=</operator> <call><name>prune_hits_in_addr_range</name><argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>current_instr_addr</name></expr></argument>, <argument><expr><name>current_instr_len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>purge_results</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>handle_forward_disassemble</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>hits</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>current_buf_pos</name><operator>+</operator><name>current_instr_len</name></expr></argument>, <argument><expr><name>current_instr_addr</name><operator>+</operator><name>current_instr_len</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hit_count</name> <operator>=</operator> <call><name>r_list_length</name><argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_hit_to_sorted_hits</name><argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>current_instr_addr</name></expr></argument>, <argument><expr><name>current_instr_len</name></expr></argument>, <argument><expr><name>is_valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hit_count</name> <operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>next_buf_pos</name> <operator>=</operator> <name>current_buf_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_num_invalid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>current_buf_pos</name> <operator>+</operator> <name>current_instr_len</name> <operator>&lt;</operator> <name>next_buf_pos</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>purge_results</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>is_valid</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>purge_results</name> <operator>=</operator> <call><name>prune_hits_in_addr_range</name><argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>current_instr_addr</name></expr></argument>, <argument><expr><name>current_instr_len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_hit_to_sorted_hits</name><argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>current_instr_addr</name></expr></argument>, <argument><expr><name>current_instr_len</name></expr></argument>, <argument><expr><name>is_valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hit_count</name> <operator>&lt;</operator> <name>purge_results</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hit_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hit_count</name> <operator>-=</operator> <name>purge_results</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>next_buf_pos</name> <operator>=</operator> <name>current_buf_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_forward_disassemble</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>hits</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>extra_padding</name></expr></argument>, <argument><expr><name>current_buf_pos</name><operator>+</operator><name>current_instr_len</name></expr></argument>, <argument><expr><name>current_instr_addr</name><operator>+</operator><name>current_instr_len</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hit_count</name> <operator>=</operator> <call><name>r_list_length</name><argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_num_invalid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>current_buf_pos</name> <operator>+</operator> <name>current_instr_len</name> <operator>&gt;</operator> <name>next_buf_pos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_buf_pos</name> <operator>=</operator> <name>current_buf_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hit_count</name> <operator>=</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_num_invalid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">" current_instr_addr: 0x%"</literal><name>PFMT64x</name><literal type="string">" current_instr_len: %d next_instr_addr: 0x%04"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>current_instr_addr</name></expr></argument>, <argument><expr><name>current_instr_len</name></expr></argument>, <argument><expr><name>next_buf_pos</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name><argument_list>(<argument><expr><literal type="string">" hit count: %d \n"</literal></expr></argument>, <argument><expr><name>hit_count</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>current_instr_addr</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current_buf_pos</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hit_count</name> <operator>&gt;=</operator> <name>max_hit_count</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>last_num_invalid</name> <operator>&gt;=</operator> <name>max_invalid_b4_exit</name> <operator>||</operator> <name>last_num_invalid</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>current_buf_pos</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>current_buf_pos</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>r_asm_set_pc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hits</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_core_asm_back_disassemble_instr</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>hit_count</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>extra_padding</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>disassmble_each_addr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_core_asm_back_disassemble</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>hit_count</name></expr></argument>, <argument><expr><name>disassmble_each_addr</name></expr></argument>, <argument><expr><name>extra_padding</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_core_asm_back_disassemble_byte</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>hit_count</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>extra_padding</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>disassmble_each_addr</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_core_asm_back_disassemble</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>hit_count</name></expr></argument>, <argument><expr><name>disassmble_each_addr</name></expr></argument>, <argument><expr><name>extra_padding</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut32</name></type> <name>r_core_asm_bwdis_len</name><parameter_list>(<parameter><decl><type><name>RCore</name><modifier>*</modifier></type> <name>core</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>instr_len</name></decl></parameter>, <parameter><decl><type><name>ut64</name><modifier>*</modifier></type> <name>start_addr</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>nb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>instr_run</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCoreAsmHit</name> <modifier>*</modifier></type><name>hit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>hits</name> <init>= <expr><call><name>r_core_asm_bwdisassemble</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>instr_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>instr_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hits</name> <operator>&amp;&amp;</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hit</name> <operator>=</operator> <call><name>r_list_get_bottom</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>start_addr</name> <operator>=</operator> <name><name>hit</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>hits</argument>, <argument>iter</argument>, <argument>hit</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>instr_run</name> <operator>+=</operator> <name><name>hit</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>instr_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>instr_len</name> <operator>=</operator> <name>instr_run</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>hits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>instr_run</name></expr>;</return>

</block_content>}</block></function>

</unit>
