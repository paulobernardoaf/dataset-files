<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\core\vasm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_VISUAL_ASM_BUFSIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>blockbuf</name><index>[<expr><name>R_VISUAL_ASM_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>codebuf</name><index>[<expr><name>R_VISUAL_ASM_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>oplen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAsmCode</name> <modifier>*</modifier></type><name>acode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blocklen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name></decl>;</decl_stmt>

}</block></struct></type> <name>RCoreVisualAsm</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>readline_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCoreVisualAsm</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>_a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>core</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_clear00</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Write some %s-%d assembly...\n\n"</literal></expr></argument>,

<argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0&gt; ?\n\n"</literal>

<literal type="string">"Visual assembler help:\n\n"</literal>

<literal type="string">" assemble input while typing using asm.arch, asm.bits and cfg.bigendian\n"</literal>

<literal type="string">" press enter to quit (prompt if there are bytes to be written)\n"</literal>

<literal type="string">" this assembler supports various directives like .hex ...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_asm_code_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>acode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asm_set_pc</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>acode</name></name> <operator>=</operator> <call><name>r_asm_massemble</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>acode</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>hex</name> <init>= <expr><call><name>r_asm_code_get_hex</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>acode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"[VA:%d]&gt; %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>acode</name></name></expr>?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>acode</name><operator>-&gt;</operator><name>len</name></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>acode</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>acode</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"* %s\n\n"</literal></expr></argument>, <argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xlen</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>R_VISUAL_ASM_BUFSIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>codebuf</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>blockbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>codebuf</name></name></expr></argument>, <argument><expr><name>hex</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xlen</name> <operator>&gt;=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>blockbuf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>codebuf</name><index>[<expr><name>xlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"[VA:0]&gt; %s\n* ?\n\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>ocur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>acode</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>acode</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>acode</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"pd %d @x:%s @0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>rows</name> <operator>-</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>codebuf</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_core_cmd_str</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>core</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>r_str_ansi_crop</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cols</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>rows</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_visual_asm</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCoreVisualAsm</name></type> <name>cva</name> <init>= <expr><block>{

<expr><operator>.</operator><name>core</name> <operator>=</operator> <name>core</name></expr>,

<expr><operator>.</operator><name>off</name> <operator>=</operator> <name>off</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name><name>cva</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cva</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cva</name><operator>.</operator><name>blocklen</name></name> <operator>=</operator> <call><name>r_hex_bin2str</name> <argument_list>(<argument><expr><name><name>cva</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cva</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>cva</name><operator>.</operator><name>blockbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_line_readline_cb</name> <argument_list>(<argument><expr><name>readline_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cva</name><operator>.</operator><name>acode</name></name> <operator>&amp;&amp;</operator> <name><name>cva</name><operator>.</operator><name>acode</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_yesno</name> <argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>, <argument><expr><literal type="string">"Save changes? (Y/n)"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_io_write_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name><name>cva</name><operator>.</operator><name>acode</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>cva</name><operator>.</operator><name>acode</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ERROR: Cannot write in here, check map permissions or reopen the file with oo+\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_any_key</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

} else if (!cva.acode || cva.acode-&gt;len == 0) {

eprintf ("ERROR: Cannot assemble those instructions\n");

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asm_code_free</name> <argument_list>(<argument><expr><name><name>cva</name><operator>.</operator><name>acode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
