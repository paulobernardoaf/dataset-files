<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\core\panels.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_NUM_LIMIT</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_SYMBOLS</name></cpp:macro> <cpp:value>"Symbols"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_STACK</name></cpp:macro> <cpp:value>"Stack"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_XREFS_HERE</name></cpp:macro> <cpp:value>"Xrefs Here"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_XREFS</name></cpp:macro> <cpp:value>"Xrefs"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_REGISTERS</name></cpp:macro> <cpp:value>"Registers"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_DISASSEMBLY</name></cpp:macro> <cpp:value>"Disassembly"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_DISASMSUMMARY</name></cpp:macro> <cpp:value>"Disassemble Summary"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_ALL_DECOMPILER</name></cpp:macro> <cpp:value>"Show All Decompiler Output"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_DECOMPILER</name></cpp:macro> <cpp:value>"Decompiler"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_DECOMPILER_O</name></cpp:macro> <cpp:value>"Decompiler With Offsets"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_GRAPH</name></cpp:macro> <cpp:value>"Graph"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_TINY_GRAPH</name></cpp:macro> <cpp:value>"Tiny Graph"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_FUNCTIONS</name></cpp:macro> <cpp:value>"Functions"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_FUNCTIONCALLS</name></cpp:macro> <cpp:value>"Function Calls"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_BREAKPOINTS</name></cpp:macro> <cpp:value>"Breakpoints"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_STRINGS_DATA</name></cpp:macro> <cpp:value>"Strings in data sections"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_STRINGS_BIN</name></cpp:macro> <cpp:value>"Strings in the whole bin"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_SECTIONS</name></cpp:macro> <cpp:value>"Sections"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_SEGMENTS</name></cpp:macro> <cpp:value>"Segments"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_TITLE_COMMENTS</name></cpp:macro> <cpp:value>"Comments"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CMD_SYMBOLS</name></cpp:macro> <cpp:value>"isq"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CMD_XREFS_HERE</name></cpp:macro> <cpp:value>"ax."</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CMD_XREFS</name></cpp:macro> <cpp:value>"ax"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CMD_STACK</name></cpp:macro> <cpp:value>"px"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CMD_REGISTERS</name></cpp:macro> <cpp:value>"dr"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CMD_DISASSEMBLY</name></cpp:macro> <cpp:value>"pd"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CMD_DISASMSUMMARY</name></cpp:macro> <cpp:value>"pdsf"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CMD_DECOMPILER</name></cpp:macro> <cpp:value>"pdc"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CMD_DECOMPILER_O</name></cpp:macro> <cpp:value>"pddo"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CMD_FUNCTION</name></cpp:macro> <cpp:value>"afl"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CMD_GRAPH</name></cpp:macro> <cpp:value>"agf"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CMD_TINYGRAPH</name></cpp:macro> <cpp:value>"agft"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CMD_HEXDUMP</name></cpp:macro> <cpp:value>"xc"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CMD_CONSOLE</name></cpp:macro> <cpp:value>"$console"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CONFIG_MENU_MAX</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CONFIG_PAGE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CONFIG_SIDEPANEL_W</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CONFIG_RESIZE_W</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_CONFIG_RESIZE_H</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COUNT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof((x)) / sizeof((*x)) - 1)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>firstRun</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <block>{

<decl><name>LEFT</name></decl>,

<decl><name>RIGHT</name></decl>,

<decl><name>UP</name></decl>,

<decl><name>DOWN</name></decl>

}</block></enum></type> <name>Direction</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>panels_dynamic</name> <index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Disassembly"</literal></expr>, <expr><literal type="string">"Stack"</literal></expr>, <expr><literal type="string">"Registers"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>panels_static</name> <index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Disassembly"</literal></expr>, <expr><literal type="string">"Functions"</literal></expr>, <expr><literal type="string">"Symbols"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"File"</literal></expr>, <expr><literal type="string">"Settings"</literal></expr>, <expr><literal type="string">"Edit"</literal></expr>, <expr><literal type="string">"View"</literal></expr>, <expr><literal type="string">"Tools"</literal></expr>, <expr><literal type="string">"Search"</literal></expr>, <expr><literal type="string">"Emulate"</literal></expr>, <expr><literal type="string">"Debug"</literal></expr>, <expr><literal type="string">"Analyze"</literal></expr>, <expr><literal type="string">"Help"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus_File</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"New"</literal></expr>, <expr><literal type="string">"Open"</literal></expr>, <expr><literal type="string">"ReOpen"</literal></expr>, <expr><literal type="string">"Close"</literal></expr>, <expr><literal type="string">"Save Layout"</literal></expr>, <expr><literal type="string">"Load Layout"</literal></expr>, <expr><literal type="string">"Clear Saved Layouts"</literal></expr>, <expr><literal type="string">"Quit"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus_Settings</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Colors"</literal></expr>, <expr><literal type="string">"Decompiler"</literal></expr>, <expr><literal type="string">"Disassembly"</literal></expr>, <expr><literal type="string">"Screen"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus_ReOpen</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"In RW"</literal></expr>, <expr><literal type="string">"In Debugger"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus_loadLayout</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Saved"</literal></expr>, <expr><literal type="string">"Default"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus_Edit</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Copy"</literal></expr>, <expr><literal type="string">"Paste"</literal></expr>, <expr><literal type="string">"Clipboard"</literal></expr>, <expr><literal type="string">"Write String"</literal></expr>, <expr><literal type="string">"Write Hex"</literal></expr>, <expr><literal type="string">"Write Value"</literal></expr>, <expr><literal type="string">"Assemble"</literal></expr>, <expr><literal type="string">"Fill"</literal></expr>, <expr><literal type="string">"io.cache"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus_iocache</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"On"</literal></expr>, <expr><literal type="string">"Off"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus_View</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Console"</literal></expr>, <expr><literal type="string">"Hexdump"</literal></expr>, <expr><literal type="string">"Disassembly"</literal></expr>, <expr><literal type="string">"Disassemble Summary"</literal></expr>, <expr><literal type="string">"Decompiler"</literal></expr>, <expr><literal type="string">"Decompiler With Offsets"</literal></expr>, <expr><literal type="string">"Graph"</literal></expr>, <expr><literal type="string">"Tiny Graph"</literal></expr>,

<expr><literal type="string">"Functions"</literal></expr>, <expr><literal type="string">"Function Calls"</literal></expr>, <expr><literal type="string">"Sections"</literal></expr>, <expr><literal type="string">"Segments"</literal></expr>, <expr><name>PANEL_TITLE_STRINGS_DATA</name></expr>, <expr><name>PANEL_TITLE_STRINGS_BIN</name></expr>, <expr><literal type="string">"Symbols"</literal></expr>, <expr><literal type="string">"Imports"</literal></expr>,

<expr><literal type="string">"Info"</literal></expr>, <expr><literal type="string">"Database"</literal></expr>, <expr><literal type="string">"Breakpoints"</literal></expr>, <expr><literal type="string">"Comments"</literal></expr>, <expr><literal type="string">"Classes"</literal></expr>, <expr><literal type="string">"Entropy"</literal></expr>, <expr><literal type="string">"Entropy Fire"</literal></expr>, <expr><literal type="string">"Stack"</literal></expr>, <expr><literal type="string">"Xrefs Here"</literal></expr>, <expr><literal type="string">"Methods"</literal></expr>,

<expr><literal type="string">"Var READ address"</literal></expr>, <expr><literal type="string">"Var WRITE address"</literal></expr>, <expr><literal type="string">"Summary"</literal></expr>, <expr><literal type="string">"Relocs"</literal></expr>, <expr><literal type="string">"Headers"</literal></expr>, <expr><literal type="string">"File Hashes"</literal></expr>, <expr><name>PANEL_TITLE_ALL_DECOMPILER</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus_Tools</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Calculator"</literal></expr>, <expr><literal type="string">"R2 Shell"</literal></expr>, <expr><literal type="string">"System Shell"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus_Search</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"String (Whole Bin)"</literal></expr>, <expr><literal type="string">"String (Data Sections)"</literal></expr>, <expr><literal type="string">"ROP"</literal></expr>, <expr><literal type="string">"Code"</literal></expr>, <expr><literal type="string">"Hexpairs"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus_Emulate</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Step From"</literal></expr>, <expr><literal type="string">"Step To"</literal></expr>, <expr><literal type="string">"Step Range"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus_Debug</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Registers"</literal></expr>, <expr><literal type="string">"RegisterRefs"</literal></expr>, <expr><literal type="string">"DRX"</literal></expr>, <expr><literal type="string">"Breakpoints"</literal></expr>, <expr><literal type="string">"Watchpoints"</literal></expr>,

<expr><literal type="string">"Maps"</literal></expr>, <expr><literal type="string">"Modules"</literal></expr>, <expr><literal type="string">"Backtrace"</literal></expr>, <expr><literal type="string">"Locals"</literal></expr>, <expr><literal type="string">"Continue"</literal></expr>,

<expr><literal type="string">"Step"</literal></expr>, <expr><literal type="string">"Step Over"</literal></expr>, <expr><literal type="string">"Reload"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus_Analyze</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Function"</literal></expr>, <expr><literal type="string">"Symbols"</literal></expr>, <expr><literal type="string">"Program"</literal></expr>, <expr><literal type="string">"BasicBlocks"</literal></expr>, <expr><literal type="string">"Calls"</literal></expr>, <expr><literal type="string">"References"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus_Colors</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus_settings_disassembly</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"asm"</literal></expr>, <expr><literal type="string">"hex.section"</literal></expr>, <expr><literal type="string">"io.cache"</literal></expr>, <expr><literal type="string">"hex.pairs"</literal></expr>, <expr><literal type="string">"emu.str"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus_settings_disassembly_asm</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"asm.bytes"</literal></expr>, <expr><literal type="string">"asm.section"</literal></expr>, <expr><literal type="string">"asm.cmt.right"</literal></expr>, <expr><literal type="string">"asm.emu"</literal></expr>, <expr><literal type="string">"asm.var.summary"</literal></expr>,

<expr><literal type="string">"asm.pseudo"</literal></expr>, <expr><literal type="string">"asm.flags.inbytes"</literal></expr>, <expr><literal type="string">"asm.arch"</literal></expr>, <expr><literal type="string">"asm.bits"</literal></expr>, <expr><literal type="string">"asm.cpu"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus_settings_screen</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"scr.bgfill"</literal></expr>, <expr><literal type="string">"scr.color"</literal></expr>, <expr><literal type="string">"scr.utf8"</literal></expr>, <expr><literal type="string">"scr.utf8.curvy"</literal></expr>, <expr><literal type="string">"scr.wheel"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menus_Help</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Toggle Help"</literal></expr>,

<expr><literal type="string">"License"</literal></expr>, <expr><literal type="string">"Version"</literal></expr>,

<expr><literal type="string">"Fortune"</literal></expr>, <expr><literal type="string">"2048"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>entropy_rotate</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">""</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"F"</literal></expr>, <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"j"</literal></expr>, <expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"p"</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"z"</literal></expr>, <expr><literal type="string">"0"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>hexdump_rotate</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"xc"</literal></expr>, <expr><literal type="string">"pxa"</literal></expr>, <expr><literal type="string">"pxr"</literal></expr>, <expr><literal type="string">"prx"</literal></expr>, <expr><literal type="string">"pxb"</literal></expr>, <expr><literal type="string">"pxh"</literal></expr>, <expr><literal type="string">"pxw"</literal></expr>, <expr><literal type="string">"pxq"</literal></expr>, <expr><literal type="string">"pxd"</literal></expr>, <expr><literal type="string">"pxr"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>register_rotate</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">""</literal></expr>, <expr><literal type="string">"="</literal></expr>, <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"??"</literal></expr>, <expr><literal type="string">"C"</literal></expr>, <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"o"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>function_rotate</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"l"</literal></expr>, <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"x"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>cache_white_list_cmds</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"pdc"</literal></expr>, <expr><literal type="string">"pddo"</literal></expr>, <expr><literal type="string">"agf"</literal></expr>, <expr><literal type="string">"Help"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help_msg_panels</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"|"</literal></expr>, <expr><literal type="string">"split the current panel vertically"</literal></expr>,

<expr><literal type="string">"-"</literal></expr>, <expr><literal type="string">"split the current panel horizontally"</literal></expr>,

<expr><literal type="string">":"</literal></expr>, <expr><literal type="string">"run r2 command in prompt"</literal></expr>,

<expr><literal type="string">";"</literal></expr>, <expr><literal type="string">"add/remove comment"</literal></expr>,

<expr><literal type="string">"_"</literal></expr>, <expr><literal type="string">"start the hud input mode"</literal></expr>,

<expr><literal type="string">"\\"</literal></expr>, <expr><literal type="string">"show the user-friendly hud"</literal></expr>,

<expr><literal type="string">"?"</literal></expr>, <expr><literal type="string">"show this help"</literal></expr>,

<expr><literal type="string">"!"</literal></expr>, <expr><literal type="string">"run r2048 game"</literal></expr>,

<expr><literal type="string">"."</literal></expr>, <expr><literal type="string">"seek to PC or entrypoint"</literal></expr>,

<expr><literal type="string">"*"</literal></expr>, <expr><literal type="string">"show decompiler in the current panel"</literal></expr>,

<expr><literal type="string">"\""</literal></expr>, <expr><literal type="string">"create a panel from the list and replace the current one"</literal></expr>,

<expr><literal type="string">"/"</literal></expr>, <expr><literal type="string">"highlight the keyword"</literal></expr>,

<expr><literal type="string">"("</literal></expr>, <expr><literal type="string">"toggle snow"</literal></expr>,

<expr><literal type="string">"&amp;"</literal></expr>, <expr><literal type="string">"toggle cache"</literal></expr>,

<expr><literal type="string">"[1-9]"</literal></expr>, <expr><literal type="string">"follow jmp/call identified by shortcut (like ;[1])"</literal></expr>,

<expr><literal type="string">"' '"</literal></expr>, <expr><literal type="string">"(space) toggle graph / panels"</literal></expr>,

<expr><literal type="string">"tab"</literal></expr>, <expr><literal type="string">"go to the next panel"</literal></expr>,

<expr><literal type="string">"Enter"</literal></expr>, <expr><literal type="string">"start Zoom mode"</literal></expr>,

<expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"toggle auto update for decompiler"</literal></expr>,

<expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"browse symbols, flags, configurations, classes, ..."</literal></expr>,

<expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"toggle cursor"</literal></expr>,

<expr><literal type="string">"C"</literal></expr>, <expr><literal type="string">"toggle color"</literal></expr>,

<expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"define in the current address. Same as Vd"</literal></expr>,

<expr><literal type="string">"D"</literal></expr>, <expr><literal type="string">"show disassembly in the current panel"</literal></expr>,

<expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"change title and command of current panel"</literal></expr>,

<expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"set/add filter keywords"</literal></expr>,

<expr><literal type="string">"F"</literal></expr>, <expr><literal type="string">"remove all the filters"</literal></expr>,

<expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"go/seek to given offset"</literal></expr>,

<expr><literal type="string">"G"</literal></expr>, <expr><literal type="string">"go/seek to highlight"</literal></expr>,

<expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"insert hex"</literal></expr>,

<expr><literal type="string">"hjkl"</literal></expr>, <expr><literal type="string">"move around (left-down-up-right)"</literal></expr>,

<expr><literal type="string">"HJKL"</literal></expr>, <expr><literal type="string">"move around (left-down-up-right) by page"</literal></expr>,

<expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"select the menu panel"</literal></expr>,

<expr><literal type="string">"M"</literal></expr>, <expr><literal type="string">"open new custom frame"</literal></expr>,

<expr><literal type="string">"n/N"</literal></expr>, <expr><literal type="string">"seek next/prev function/flag/hit (scr.nkey)"</literal></expr>,

<expr><literal type="string">"p/P"</literal></expr>, <expr><literal type="string">"rotate panel layout"</literal></expr>,

<expr><literal type="string">"q"</literal></expr>, <expr><literal type="string">"quit, or close a tab"</literal></expr>,

<expr><literal type="string">"Q"</literal></expr>, <expr><literal type="string">"close all the tabs and quit"</literal></expr>,

<expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"toggle callhints/jmphints/leahints"</literal></expr>,

<expr><literal type="string">"R"</literal></expr>, <expr><literal type="string">"randomize color palette (ecr)"</literal></expr>,

<expr><literal type="string">"s/S"</literal></expr>, <expr><literal type="string">"step in / step over"</literal></expr>,

<expr><literal type="string">"t/T"</literal></expr>, <expr><literal type="string">"tab prompt / close a tab"</literal></expr>,

<expr><literal type="string">"u/U"</literal></expr>, <expr><literal type="string">"undo / redo seek"</literal></expr>,

<expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"start Window mode"</literal></expr>,

<expr><literal type="string">"V"</literal></expr>, <expr><literal type="string">"go to the graph mode"</literal></expr>,

<expr><literal type="string">"xX"</literal></expr>, <expr><literal type="string">"show xrefs/refs of current function from/to data/code"</literal></expr>,

<expr><literal type="string">"z"</literal></expr>, <expr><literal type="string">"swap current panel with the first one"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help_msg_panels_window</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">":"</literal></expr>, <expr><literal type="string">"run r2 command in prompt"</literal></expr>,

<expr><literal type="string">";"</literal></expr>, <expr><literal type="string">"add/remove comment"</literal></expr>,

<expr><literal type="string">"\""</literal></expr>, <expr><literal type="string">"create a panel from the list and replace the current one"</literal></expr>,

<expr><literal type="string">"?"</literal></expr>, <expr><literal type="string">"show this help"</literal></expr>,

<expr><literal type="string">"|"</literal></expr>, <expr><literal type="string">"split the current panel vertically"</literal></expr>,

<expr><literal type="string">"-"</literal></expr>, <expr><literal type="string">"split the current panel horizontally"</literal></expr>,

<expr><literal type="string">"tab"</literal></expr>, <expr><literal type="string">"go to the next panel"</literal></expr>,

<expr><literal type="string">"Enter"</literal></expr>, <expr><literal type="string">"start Zoom mode"</literal></expr>,

<expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"define in the current address. Same as Vd"</literal></expr>,

<expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"browse symbols, flags, configurations, classes, ..."</literal></expr>,

<expr><literal type="string">"hjkl"</literal></expr>, <expr><literal type="string">"move around (left-down-up-right)"</literal></expr>,

<expr><literal type="string">"HJKL"</literal></expr>, <expr><literal type="string">"resize panels vertically/horizontally"</literal></expr>,

<expr><literal type="string">"Q/q/w"</literal></expr>, <expr><literal type="string">"quit Window mode"</literal></expr>,

<expr><literal type="string">"p/P"</literal></expr>, <expr><literal type="string">"rotate panel layout"</literal></expr>,

<expr><literal type="string">"t/T"</literal></expr>, <expr><literal type="string">"rotate related commands in a panel"</literal></expr>,

<expr><literal type="string">"X"</literal></expr>, <expr><literal type="string">"close current panel"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help_msg_panels_zoom</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"?"</literal></expr>, <expr><literal type="string">"show this help"</literal></expr>,

<expr><literal type="string">":"</literal></expr>, <expr><literal type="string">"run r2 command in prompt"</literal></expr>,

<expr><literal type="string">";"</literal></expr>, <expr><literal type="string">"add/remove comment"</literal></expr>,

<expr><literal type="string">"\""</literal></expr>, <expr><literal type="string">"create a panel from the list and replace the current one"</literal></expr>,

<expr><literal type="string">"' '"</literal></expr>, <expr><literal type="string">"(space) toggle graph / panels"</literal></expr>,

<expr><literal type="string">"tab"</literal></expr>, <expr><literal type="string">"go to the next panel"</literal></expr>,

<expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"browse symbols, flags, configurations, classes, ..."</literal></expr>,

<expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"define in the current address. Same as Vd"</literal></expr>,

<expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"toggle cursor"</literal></expr>,

<expr><literal type="string">"C"</literal></expr>, <expr><literal type="string">"toggle color"</literal></expr>,

<expr><literal type="string">"hjkl"</literal></expr>, <expr><literal type="string">"move around (left-down-up-right)"</literal></expr>,

<expr><literal type="string">"p/P"</literal></expr>, <expr><literal type="string">"seek to next or previous scr.nkey"</literal></expr>,

<expr><literal type="string">"s/S"</literal></expr>, <expr><literal type="string">"step in / step over"</literal></expr>,

<expr><literal type="string">"t/T"</literal></expr>, <expr><literal type="string">"rotate related commands in a panel"</literal></expr>,

<expr><literal type="string">"xX"</literal></expr>, <expr><literal type="string">"show xrefs/refs of current function from/to data/code"</literal></expr>,

<expr><literal type="string">"q/Q/Enter"</literal></expr>,<expr><literal type="string">"quit Zoom mode"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__init_sdb</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__init_rotate_db</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__init_almighty_db</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__init_panels_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__init_panels</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__init_all_dbs</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__init_panel_param</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RPanels</name> <modifier>*</modifier></type><name>__panels_new</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__init_new_panels_root</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__init_menu_saved_layout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__init_menu_color_settings_layout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__init_menu_disasm_settings_layout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__init_menu_disasm_asm_settings_layout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__init_menu_screen_settings_layout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__create_default_panels</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RConsCanvas</name> <modifier>*</modifier></type><name>__create_new_canvas</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__free_panel_model</name><parameter_list>(<parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__free_menu_item</name><parameter_list>(<parameter><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RPanel</name> <modifier>*</modifier></type><name>__get_panel</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RPanel</name> <modifier>*</modifier></type><name>__get_cur_panel</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__get_panel_idx_in_pos</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RPanels</name> <modifier>*</modifier></type><name>__get_panels</name><parameter_list>(<parameter><decl><type><name>RPanelsRoot</name> <modifier>*</modifier></type><name>panels_root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_word_from_canvas</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_word_from_canvas_for_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__seek_all</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_curnode</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_refresh_all</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>clearCache</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force_refresh</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_addr_by_type</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_refresh_by_type</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>clearCache</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_cursor</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cur</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_dcb</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_rcb</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_pcb</name><parameter_list>(<parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_read_only</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_pos</name><parameter_list>(<parameter><decl><type><name>RPanelPos</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_size</name><parameter_list>(<parameter><decl><type><name>RPanelPos</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_geometry</name><parameter_list>(<parameter><decl><type><name>RPanelPos</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_panel_addr</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_root_state</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanelsRootState</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__reset_scroll_pos</name><parameter_list>(<parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__update_disassembly_or_open</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__update_help</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__update_menu_contents</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__update_edge_x</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__update_edge_y</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__check_panel_type</name><parameter_list>(<parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__panels_check_stackbase</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__check_panel_num</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__check_func</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__check_func_diff</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__check_root_state</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanelsRootState</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__check_if_addr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__check_if_cur_panel</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__check_if_mouse_x_illegal</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__check_if_mouse_y_illegal</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__check_if_mouse_x_on_edge</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__check_if_mouse_y_on_edge</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__check_edge</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__add_help_panel</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__add_visual_mark</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__add_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_name</name></decl></parameter>, <parameter><decl><type><name>RPanelsMenuCallback</name></type> <name>cb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__update_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <name>RPanelMenuUpdateCallback</name></type> <name>cb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__show_status</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__show_status_yesno</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>def</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__show_status_input</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__panel_prompt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__panels_layout_refresh</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__panels_layout</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__layout_default</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__layout_equal_hor</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_save_panels_layout</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_load_panels_layout</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__split_panel_vertical</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__split_panel_horizontal</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__panel_print</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__menu_panel_print</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__update_help_contents</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__update_help_title</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__update_panel_contents</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdstr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__update_panel_title</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__update_pdc_contents</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdstr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__default_panel_print</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__resize_panel_left</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__resize_panel_right</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__resize_panel_up</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__resize_panel_down</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__adjust_side_panels</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__insert_panel</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__dismantle_del_panel</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pi</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__dismantle_panel</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__panels_refresh</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__do_panels_resize</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__do_panels_refresh</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__do_panels_refreshOneShot</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__panel_all_clear</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__del_panel</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pi</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__del_invalid_panels</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__swap_panels</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__move_panel_to_dir</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__move_panel_to_left</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__move_panel_to_right</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__move_panel_to_up</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__move_panel_to_down</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__shrink_panels_forward</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__shrink_panels_backward</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__fix_layout</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__fix_layout_w</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__fix_layout_h</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__drag_and_resize</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__is_abnormal_cursor_type</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__is_normal_cursor_type</name><parameter_list>(<parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__activate_cursor</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ut64</name></type> <name>__parse_string_on_cursor</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__cursor_left</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__cursor_right</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__cursor_down</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__cursor_up</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__fix_cursor_up</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__fix_cursor_down</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__jmp_to_cursor_addr</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__cursor_del_breakpoints</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__insert_value</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_breakpoints_on_cursor</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_filter</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__reset_filter</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__renew_filter</name><parameter_list>(<parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__apply_filter_cmd</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__add_cmd_panel</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__add_cmdf_panel</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_cmd_str_cache</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_decompiler_cache</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__handle_cmd_str_cache</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force_cache</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__find_cmd_str_cache</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__load_cmdf</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__replace_cmd</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__rotate_panels</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__rotate_panel_cmds</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cmds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>cmdslen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__rotate_asmemu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__set_mode</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanelsMode</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__handle_zoom_mode</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__handle_window_mode</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__handle_cursor_mode</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__toggle_zoom_mode</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__toggle_window_mode</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__handle_mouse</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__handle_mouse_on_top</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__handle_mouse_on_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__handle_mouse_on_X</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__handle_mouse_on_panel</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__exec_almighty</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>RModal</name> <modifier>*</modifier></type><name>modal</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>menu_db</name></decl></parameter>, <parameter><decl><type><name>RPanelLayout</name></type> <name>dir</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__delete_almighty</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RModal</name> <modifier>*</modifier></type><name>modal</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>menu_db</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__create_almighty</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>menu_db</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__update_modal</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>menu_db</name></decl></parameter>, <parameter><decl><type><name>RModal</name> <modifier>*</modifier></type><name>modal</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__draw_modal</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RModal</name> <modifier>*</modifier></type><name>modal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>range_end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RModal</name> <modifier>*</modifier></type><name>__init_modal</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__free_modal</name><parameter_list>(<parameter><decl><type><name>RModal</name> <modifier>*</modifier><modifier>*</modifier></type><name>modal</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__open_menu_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__open_file_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__rw_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__debugger_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__load_layout_saved_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__load_layout_default_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__close_file_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__save_layout_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__clear_layout_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__copy_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__paste_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__write_str_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__write_hex_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__assemble_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__fill_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__config_toggle_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__config_value_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__calculator_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__r2_shell_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__system_shell_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__string_whole_bin_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__string_data_sec_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__rop_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__code_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__hexpairs_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__continue_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__esil_init_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__esil_step_to_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__esil_step_range_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__step_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__step_over_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__reload_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__function_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__symbols_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__program_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__basic_blocks_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__calls_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__break_points_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__watch_points_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__references_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__help_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__fortune_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__game_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__license_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__version_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__quit_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__io_cache_on_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__io_cache_off_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__settings_colors_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__settings_decompiler_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__show_all_decompiler_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__direction_default_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__direction_disassembly_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__direction_graph_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__direction_register_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__direction_stack_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__direction_hexdump_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__direction_panels_cursor_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__rotate_disasm_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__rotate_entropy_v_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__rotate_entropy_h_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__rotate_hexdump_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__rotate_register_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__rotate_function_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__print_default_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__print_decompiler_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__print_disassembly_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__print_disasmsummary_cb</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__print_graph_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__print_stack_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__print_hexdump_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__create_panel</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__create_panel_db</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__create_panel_input</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__replace_current_panel_input</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__search_strings_data_create</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__search_strings_bin_create</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__search_strings</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>whole</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__put_breakpoints_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__continue_almighty_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__step_almighty_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__step_over_almighty_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__delegate_show_all_decompiler_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__del_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__clear_panels_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__clear_panels_menuRec</name><parameter_list>(<parameter><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>pmi</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RStrBuf</name> <modifier>*</modifier></type><name>__draw_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__handle_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cmpstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>__sorted_list</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>menu</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__get_panels_config_dir_path</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__create_panels_config_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__load_config_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__parse_panels_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__file_history_up</name><parameter_list>(<parameter><decl><type><name>RLine</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__file_history_down</name><parameter_list>(<parameter><decl><type><name>RLine</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__hudstuff</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__esil_init</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__esil_step_to</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__panel_breakpoint</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__panel_single_step_in</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__panel_single_step_over</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__panel_continue</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__save_panel_pos</name><parameter_list>(<parameter><decl><type><name>RPanel</name><modifier>*</modifier></type> <name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__restore_panel_pos</name><parameter_list>(<parameter><decl><type><name>RPanel</name><modifier>*</modifier></type> <name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__maximize_panel_size</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__handle_tab</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__handle_tab_nth</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__handle_tab_next</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__handle_print_rotate</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__handle_tab_prev</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__handle_tab_name</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__handle_tab_new</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__handle_tab_new_with_cur_panel</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__del_panels</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__print_snow</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__reset_snow</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__panels_process</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__handle_console</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__toggle_cache</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>__move_to_direction</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>Direction</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__toggle_help</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__call_visual_graph</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__refresh_core_offset</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__search_db</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__handle_visual_mark</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__handle_tab_key</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>shift</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__handle_refs</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>tmp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__undo_seek</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__redo_seek</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__cache_white_list</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>search_db_check_panel_type</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>__update_edge_x</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmp_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>panels</name><operator>-&gt;</operator><name>mouse_orig_x</name></name> <operator>&amp;&amp;</operator>

<name><name>panels</name><operator>-&gt;</operator><name>mouse_orig_x</name></name> <operator>&lt;=</operator> <name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp_x</name> <operator>=</operator> <name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-=</operator> <name>x</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>p1</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name>tmp_x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p1</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__update_edge_y</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmp_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>panels</name><operator>-&gt;</operator><name>mouse_orig_y</name></name> <operator>&amp;&amp;</operator>

<name><name>panels</name><operator>-&gt;</operator><name>mouse_orig_y</name></name> <operator>&lt;=</operator> <name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp_y</name> <operator>=</operator> <name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-=</operator> <name>y</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>p1</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name>tmp_y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p1</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__check_if_mouse_x_illegal</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name> <init>= <expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>edge_x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>edge_x</name> <operator>||</operator> <name><name>can</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name>edge_x</name> <operator>&lt;=</operator> <name>x</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__check_if_mouse_y_illegal</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name> <init>= <expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>edge_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;=</operator> <name>edge_y</name> <operator>||</operator> <name><name>can</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>edge_y</name> <operator>&lt;=</operator> <name>y</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__check_if_mouse_x_on_edge</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>edge_x</name> <init>= <expr><ternary><condition><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.panelborder"</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">3</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>-</operator> <operator>(</operator><name>edge_x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>edge_x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_on_edge_x</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_orig_x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__check_if_mouse_y_on_edge</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>edge_y</name> <init>= <expr><ternary><condition><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.panelborder"</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">3</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>+</operator> <name>edge_y</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;=</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>edge_y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_on_edge_y</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_orig_y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__check_if_cur_panel</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>panel</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__check_if_addr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISNOTEMPTY</name> <argument_list>(<argument><expr><name>c</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>R_STR_ISNOTEMPTY</name> <argument_list>(<argument><expr><name>c</name><operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__check_edge</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>==</operator> <name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>can</name><operator>-&gt;</operator><name>w</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>edge</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>PANEL_EDGE_RIGHT</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>edge</name></name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>PANEL_EDGE_BOTTOM</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>==</operator> <name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>can</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>edge</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>PANEL_EDGE_BOTTOM</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>edge</name></name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>PANEL_EDGE_RIGHT</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__shrink_panels_forward</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>target</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__shrink_panels_backward</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>target</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__cache_white_list</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>COUNT</name> <argument_list>(<argument><expr><name>cache_white_list_cmds</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name><name>cache_white_list_cmds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>__search_db</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>panels</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__show_status</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>R_CONS_CLEAR_LINE</name><literal type="string">"%s[Status] %s"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_box2</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__show_status_yesno</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>def</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_cons_yesno</name> <argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><name>R_CONS_CLEAR_LINE</name><literal type="string">"%s[Status] %s"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_box2</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>__show_status_input</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>n_msg</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><name>R_CONS_CLEAR_LINE</name><literal type="string">"%s[Status] %s"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_box2</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>r_cons_input</name> <argument_list>(<argument><expr><name>n_msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>n_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__check_panel_type</name><parameter_list>(<parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name> <operator>||</operator> <operator>!</operator><name>type</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_str_new</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>r_str_split</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISEMPTY</name> <argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>strcmp</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>PANEL_CMD_DECOMPILER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>strcmp</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>PANEL_CMD_DECOMPILER_O</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>strcmp</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASMSUMMARY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>PANEL_CMD_STACK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>PANEL_CMD_STACK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>PANEL_CMD_HEXDUMP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>COUNT</name> <argument_list>(<argument><expr><name>hexdump_rotate</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>hexdump_rotate</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__check_root_state</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanelsRootState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>root_state</name></name> <operator>==</operator> <name>state</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>search_db_check_panel_type</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>__search_db</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>str</name> <operator>&amp;&amp;</operator> <call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__is_abnormal_cursor_type</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_CMD_SYMBOLS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_CMD_FUNCTION</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>search_db_check_panel_type</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_TITLE_DISASMSUMMARY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>search_db_check_panel_type</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_TITLE_STRINGS_DATA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>search_db_check_panel_type</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_TITLE_STRINGS_BIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>search_db_check_panel_type</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_TITLE_BREAKPOINTS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>search_db_check_panel_type</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_TITLE_SECTIONS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>search_db_check_panel_type</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_TITLE_SEGMENTS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>search_db_check_panel_type</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_TITLE_COMMENTS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__is_normal_cursor_type</name><parameter_list>(<parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_CMD_STACK</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_CMD_REGISTERS</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_CMD_HEXDUMP</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_cmd_str_cache</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmdStrCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmdStrCache</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_dcb</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_pcb</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_decompiler_cache</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>func</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>cur_pdc_cache</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>cur_pdc_cache</name></name></expr></argument>, <argument><expr><call><name>r_num_as_string</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>r_str_new</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name> <init>= <expr><call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pdc_now</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.pdc"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><call><name>r_num_as_string</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>r_str_new</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>cur_pdc_cache</name></name> <operator>=</operator> <name>sdb</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdb_exists</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>pdc_caches</name></name></expr></argument>, <argument><expr><name>pdc_now</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>pdc_caches</name></name></expr></argument>, <argument><expr><call><name>r_str_new</name> <argument_list>(<argument><expr><name>pdc_now</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_read_only</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>readOnly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>readOnly</name></name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_dcb</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_pcb</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_pos</name><parameter_list>(<parameter><decl><type><name>RPanelPos</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_size</name><parameter_list>(<parameter><decl><type><name>RPanelPos</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_geometry</name><parameter_list>(<parameter><decl><type><name>RPanelPos</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>__set_pos</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_size</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_panel_addr</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>RPanel</name> <modifier>*</modifier></type><name>__get_panel</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>panels</name> <operator>||</operator> <operator>(</operator><name>i</name> <operator>&gt;=</operator> <name>PANEL_NUM_LIMIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RPanel</name> <modifier>*</modifier></type><name>__get_cur_panel</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__get_panel_idx_in_pos</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__handlePrompt</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_visual_prompt_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__panel_print</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>can</name> <operator>||</operator> <operator>!</operator><name>panel</name><operator>||</operator> <operator>!</operator><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>can</name><operator>-&gt;</operator><name>w</name></name> <operator>&lt;=</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>||</operator> <name><name>can</name><operator>-&gt;</operator><name>h</name></name> <operator>&lt;=</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_fill</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PANEL_TYPE_MENU</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__menu_panel_print</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__default_panel_print</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>can</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>can</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_box</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_box2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_box</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_box</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__menu_panel_print</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_cons_canvas_gotoxy</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><call><name>r_str_ansi_crop</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__update_help_contents</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>read_only</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>readOnly</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name> <init>= <expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_cons_canvas_gotoxy</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>white</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>r_str_pad</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><operator>-</operator><name>sx</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>white</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>white</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>r_str_ansi_crop</name> <argument_list>(<argument><expr><name>read_only</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <name>sx</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name>sy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newText</name> <init>= <expr><call><name>r_str_prefix_all</name> <argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newText</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name>newText</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>r_str_ansi_crop</name> <argument_list>(<argument><expr><name>read_only</name></expr></argument>,

<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <name>sx</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name>sy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__update_help_title</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>cache_title</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_if_cur_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">"%s[X] %s"</literal><name>Color_RESET</name></expr></argument>,

<argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_box2</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>cache_title</name></expr></argument>, <argument><expr><literal type="string">"%s[Cache] N/A"</literal><name>Color_RESET</name></expr></argument>,

<argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_box2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">"[X] %s "</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>cache_title</name></expr></argument>, <argument><expr><literal type="string">"[Cache] N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_canvas_gotoxy</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_canvas_gotoxy</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name>

<operator>-</operator> <call><name>r_str_ansi_len</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>cache_title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>cache_title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>cache_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__update_panel_contents</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdstr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><call><name>__is_abnormal_cursor_type</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">2</literal></expr> </then><else>:<expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>can</name><operator>-&gt;</operator><name>w</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>can</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>graph_pad</name> <init>= <expr><ternary><condition><expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_CMD_GRAPH</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name> <init>= <expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_cons_canvas_gotoxy</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>white</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>r_str_pad</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><operator>-</operator><name>sx</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>white</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>white</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>r_str_ansi_crop</name> <argument_list>(<argument><expr><name>cmdstr</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sy</name> <operator>+</operator> <name>graph_pad</name></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <name>sx</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name>sy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newText</name> <init>= <expr><call><name>r_str_prefix_all</name> <argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newText</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name>newText</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>r_str_ansi_crop</name> <argument_list>(<argument><expr><name>cmdstr</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name> <operator>+</operator> <name>graph_pad</name></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <name>sx</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name>sy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sub</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>curpos</name></name> <operator>-</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_cons_canvas_gotoxy</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__update_panel_title</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>cache_title</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd_title</name> <init>= <expr><call><name>__apply_filter_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_if_cur_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name>cmd_title</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">"%s[X] %s"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_box2</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">"%s[X] %s (%s)"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_box2</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name>cmd_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>cache_title</name></expr></argument>, <argument><expr><literal type="string">"%s[Cache] %s"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_box2</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name></expr> ?</condition><then> <expr><literal type="string">"On"</literal></expr> </then><else>: <expr><literal type="string">"Off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name>cmd_title</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">"[X] %s "</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">"[X] %s (%s) "</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name>cmd_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>cache_title</name></expr></argument>, <argument><expr><literal type="string">"[Cache] %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name></expr> ?</condition><then> <expr><literal type="string">"On"</literal></expr> </then><else>: <expr><literal type="string">"Off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_slice</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_slice</name> <argument_list>(<argument><expr><name>cache_title</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_canvas_gotoxy</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_canvas_gotoxy</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <call><name>r_str_ansi_len</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>cache_title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>cache_title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>cache_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__update_pdc_contents</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdstr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name> <init>= <expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_cons_canvas_gotoxy</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>white</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>r_str_pad</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><operator>-</operator><name>sx</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>white</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>white</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>r_str_ansi_crop</name> <argument_list>(<argument><expr><name>cmdstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <name>sx</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name>sy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newText</name> <init>= <expr><call><name>r_str_prefix_all</name> <argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newText</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name>newText</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>r_str_ansi_crop</name> <argument_list>(<argument><expr><name>cmdstr</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <name>sx</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name>sy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__default_panel_print</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>o_cur</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name> <operator>=</operator> <name>o_cur</name> <operator>&amp;</operator> <operator>(</operator><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>panel</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>readOnly</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__update_help_contents</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_help_title</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>print_cb</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_panel_title</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name> <operator>=</operator> <name>o_cur</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__reset_scroll_pos</name><parameter_list>(<parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>__find_cmd_str_cache</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name><modifier>*</modifier></type> <name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name> <operator>&amp;&amp;</operator> <name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmdStrCache</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmdStrCache</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>__apply_filter_cmd</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>n_filter</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__show_status</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"filter is too big."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"~"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>__handle_cmd_str_cache</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force_cache</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>__apply_filter_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name> <operator>&amp;&amp;</operator> <call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>panel</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>r_core_cmd_str</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_echo</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>force_cache</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISNOTEMPTY</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__panel_all_clear</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>panels</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>panel</name> <operator>=</operator> <call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_fill</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_cons_canvas_print</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__panels_layout</name> <parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name><operator>-&gt;</operator><name>sx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name><operator>-&gt;</operator><name>sy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__layout_default</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__layout_default</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ph</name> <init>= <expr><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>colpos</name> <init>= <expr><name>w</name> <operator>-</operator> <name><name>panels</name><operator>-&gt;</operator><name>columnWidth</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>colpos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos_x</name> <init>= <expr><name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>total_h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmp_w</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><name>w</name> <operator>-</operator> <name>colpos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmp_h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp_h</name> <operator>=</operator> <name>h</name> <operator>-</operator> <name>total_h</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp_h</name> <operator>=</operator> <name>ph</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>pos_x</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>ph</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp_w</name></expr></argument>, <argument><expr><name>tmp_h</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total_h</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>ph</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>tmp_h</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__layout_equal_hor</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pw</name> <init>= <expr><name>w</name> <operator>/</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>cw</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pw</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cw</name> <operator>+=</operator> <name>pw</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pw</name> <operator>=</operator> <name>w</name> <operator>-</operator> <name>cw</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__adjust_side_panels</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>&gt;=</operator> <name>PANEL_CONFIG_SIDEPANEL_W</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>PANEL_CONFIG_SIDEPANEL_W</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-=</operator> <name>PANEL_CONFIG_SIDEPANEL_W</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__add_cmd_panel</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__check_panel_num</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>panels_menu</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>__search_db</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__adjust_side_panels</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__insert_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>PANEL_CONFIG_SIDEPANEL_W</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__add_help_panel</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>help</name> <init>= <expr><literal type="string">"Help"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__adjust_side_panels</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__insert_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>help</name></expr></argument>, <argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>PANEL_CONFIG_SIDEPANEL_W</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>__load_cmdf</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>__show_status_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_core_cmd_str</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__add_cmdf_panel</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__check_panel_num</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>panels_menu</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__adjust_side_panels</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__insert_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>PANEL_CONFIG_SIDEPANEL_W</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><call><name>__load_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__split_panel_vertical</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__check_panel_num</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__insert_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>owidth</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>owidth</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>next</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>owidth</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__fix_layout</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_refresh_all</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__split_panel_horizontal</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__check_panel_num</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__insert_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>oheight</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>curpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>oheight</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>next</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name>oheight</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__fix_layout</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_refresh_all</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__panels_layout_refresh</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>__del_invalid_panels</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__check_edge</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__panels_check_stackbase</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__panels_refresh</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__insert_panel</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>PANEL_NUM_LIMIT</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>panel</name> <init>= <expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name><name>panel</name><index>[<expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>panel</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>panel</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>panel</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__init_panel_param</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>panel</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_cursor</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cur</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPrint</name> <modifier>*</modifier></type><name>print</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__is_abnormal_cursor_type</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>curpos</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>curpos</name></name> <operator>=</operator> <name><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>print</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <ternary><condition><expr><name><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__activate_cursor</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>normal</name> <init>= <expr><call><name>__is_normal_cursor_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>abnormal</name> <init>= <expr><call><name>__is_abnormal_cursor_type</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>normal</name> <operator>||</operator> <name>abnormal</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>normal</name> <operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>__show_status_yesno</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"You need to turn off cache to use cursor. Turn off now?(Y/n)"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__show_status</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Cache is off and cursor is on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_cursor</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__reset_scroll_pos</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__show_status</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"You can always toggle cache by \'&amp;\' key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__set_cursor</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__show_status</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Cursor is not available for the current panel."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>ut64</name></type> <name>__parse_string_on_cursor</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmdStrCache</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmdStrCache</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>R_STR_ISNOTEMPTY</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>l</name> <operator>!=</operator> <name>idx</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><call><name>R_STR_ISNOTEMPTY</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>R_STR_ISNOTEMPTY</name> <argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append_n</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append_n</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>ut64</name></type> <name>ret</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__cursor_left</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPrint</name> <modifier>*</modifier></type><name>print</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_REGISTERS</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_STACK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>print</name><operator>-&gt;</operator><name>cur</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>print</name><operator>-&gt;</operator><name>cur</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__fix_cursor_up</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>print</name><operator>-&gt;</operator><name>cur</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__cursor_right</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPrint</name> <modifier>*</modifier></type><name>print</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_STACK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>&gt;=</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_REGISTERS</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_STACK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>print</name><operator>-&gt;</operator><name>cur</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>print</name><operator>-&gt;</operator><name>cur</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__fix_cursor_down</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>print</name><operator>-&gt;</operator><name>cur</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__cursor_up</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPrint</name> <modifier>*</modifier></type><name>print</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>oaddr</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_core_prevop_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>oaddr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>delta</name> <init>= <expr><name>oaddr</name> <operator>-</operator> <name>addr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>__fix_cursor_up</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__cursor_down</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPrint</name> <modifier>*</modifier></type><name>print</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>aop</name> <init>= <expr><call><name>r_core_anal_op</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_BASIC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>aop</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <name><name>aop</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_op_free</name> <argument_list>(<argument><expr><name>aop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>__fix_cursor_down</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__fix_cursor_up</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPrint</name> <modifier>*</modifier></type><name>print</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name>r_core_visual_prevopsz</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_core_seek_delta</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>-</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>print</name><operator>-&gt;</operator><name>ocur</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>print</name><operator>-&gt;</operator><name>ocur</name></name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__fix_cursor_down</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPrint</name> <modifier>*</modifier></type><name>print</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>cur_is_visible</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>+</operator> <literal type="number">32</literal> <operator>&lt;</operator> <name><name>print</name><operator>-&gt;</operator><name>screen_bounds</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur_is_visible</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RAsmOp</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name>r_asm_disassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_core_seek_delta</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>-</operator> <name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>print</name><operator>-&gt;</operator><name>ocur</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>print</name><operator>-&gt;</operator><name>ocur</name></name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>print</name><operator>-&gt;</operator><name>ocur</name></name> <operator>-</operator> <name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__handle_zoom_mode</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<case>case <expr><literal type="number">0x0d</literal></expr>:</case>

<expr_stmt><expr><call><name>__toggle_zoom_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<case>case <expr><literal type="char">';'</literal></expr>:</case>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<case>case <expr><literal type="char">'_'</literal></expr>:</case>

<case>case <expr><literal type="char">'/'</literal></expr>:</case>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>

<case>case <expr><literal type="char">'1'</literal></expr>:</case>

<case>case <expr><literal type="char">'2'</literal></expr>:</case>

<case>case <expr><literal type="char">'3'</literal></expr>:</case>

<case>case <expr><literal type="char">'4'</literal></expr>:</case>

<case>case <expr><literal type="char">'5'</literal></expr>:</case>

<case>case <expr><literal type="char">'6'</literal></expr>:</case>

<case>case <expr><literal type="char">'7'</literal></expr>:</case>

<case>case <expr><literal type="char">'8'</literal></expr>:</case>

<case>case <expr><literal type="char">'9'</literal></expr>:</case>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<case>case <expr><literal type="char">'N'</literal></expr>:</case>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>

<case>case <expr><literal type="char">'J'</literal></expr>:</case>

<case>case <expr><literal type="char">'K'</literal></expr>:</case>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>

<case>case <expr><literal type="char">':'</literal></expr>:</case>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<case>case <expr><literal type="char">']'</literal></expr>:</case>

<return>return <expr><name>false</name></expr>;</return>

<case>case <expr><literal type="number">9</literal></expr>:</case>

<expr_stmt><expr><call><name>__restore_panel_pos</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__handle_tab_key</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__save_panel_pos</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__maximize_panel_size</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case>

<expr_stmt><expr><call><name>__restore_panel_pos</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__handle_tab_key</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__save_panel_pos</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__maximize_panel_size</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>

<expr_stmt><expr><call><name>__toggle_zoom_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__toggle_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__toggle_zoom_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__handleComment</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4095</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_line_set_prompt</name> <argument_list>(<argument><expr><literal type="string">"[Comment]&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"CC "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_fgets</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>orig</name></decl>;</decl_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>orig</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"s 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"CC-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"CC-"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'!'</literal></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"CC!"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"CC "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>duped</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>duped</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>duped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>orig</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__set_refresh_by_type</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__handle_window_mode</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<case>case <expr><literal type="char">'w'</literal></expr>:</case>

<expr_stmt><expr><call><name>__toggle_window_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0d</literal></expr>:</case>

<expr_stmt><expr><call><name>__toggle_zoom_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case> 

<expr_stmt><expr><call><name>__handle_tab_key</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case> 

<expr_stmt><expr><call><name>__handle_tab_key</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>__show_status_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"New command: "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISNOTEMPTY</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__replace_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__move_to_direction</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>==</operator> <name>PANEL_FUN_SNOW</name> <operator>||</operator> <name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>==</operator> <name>PANEL_FUN_SAKURA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__reset_snow</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__move_to_direction</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>DOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>==</operator> <name>PANEL_FUN_SNOW</name> <operator>||</operator> <name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>==</operator> <name>PANEL_FUN_SAKURA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__reset_snow</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__move_to_direction</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>UP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>==</operator> <name>PANEL_FUN_SNOW</name> <operator>||</operator> <name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>==</operator> <name>PANEL_FUN_SAKURA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__reset_snow</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__move_to_direction</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>==</operator> <name>PANEL_FUN_SNOW</name> <operator>||</operator> <name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>==</operator> <name>PANEL_FUN_SAKURA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__reset_snow</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'H'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__resize_panel_left</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__resize_panel_right</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'J'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__resize_panel_down</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'K'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__resize_panel_up</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><call><name>__create_panel_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>VERTICAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'N'</literal></expr>:</case>

<expr_stmt><expr><call><name>__create_panel_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>HORIZONTAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>

<expr_stmt><expr><call><name>__dismantle_del_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<case>case <expr><literal type="char">':'</literal></expr>:</case>

<case>case <expr><literal type="char">';'</literal></expr>:</case>

<case>case <expr><literal type="char">'/'</literal></expr>:</case>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>

<case>case <expr><literal type="char">'|'</literal></expr>:</case>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__handle_cursor_mode</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPrint</name> <modifier>*</modifier></type><name>print</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>db_val</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">':'</literal></expr>:</case>

<case>case <expr><literal type="char">';'</literal></expr>:</case>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>

<case>case <expr><literal type="char">'J'</literal></expr>:</case>

<case>case <expr><literal type="char">'K'</literal></expr>:</case>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<case>case <expr><literal type="number">9</literal></expr>:</case>

<return>return <expr><name>false</name></expr>;</return>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>curpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__reset_scroll_pos</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">']'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_HEXDUMP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"hex.cols"</literal></expr></argument>, <argument><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"hex.cols"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmtcol</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cmt.col"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cmt.col"</literal></expr></argument>, <argument><expr><name>cmtcol</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_HEXDUMP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"hex.cols"</literal></expr></argument>, <argument><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"hex.cols"</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmtcol</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cmt.col"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmtcol</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cmt.col"</literal></expr></argument>, <argument><expr><name>cmtcol</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><call><name>__set_cursor</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>!</operator><name><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'w'</literal></expr>:</case>

<expr_stmt><expr><call><name>__toggle_window_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_cursor</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><call><name>__insert_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"dr PC=0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><name>db_val</name> <operator>=</operator> <call><name>__search_db</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Breakpoints"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>db_val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__cursor_del_breakpoints</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>db_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>db_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<expr_stmt><expr><call><name>__handle_refs</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><call><name>__parse_string_on_cursor</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>curpos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0d</literal></expr>:</case>

<expr_stmt><expr><call><name>__jmp_to_cursor_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<expr_stmt><expr><call><name>__set_breakpoints_on_cursor</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'H'</literal></expr>:</case>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>curpos</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__handle_mouse</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MENU_Y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__drag_and_resize</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>key</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_get_click</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>MENU_Y</name> <operator>&amp;&amp;</operator> <call><name>__handle_mouse_on_top</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_MENU</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__handle_mouse_on_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__handle_mouse_on_X</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_if_mouse_x_illegal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>__check_if_mouse_y_illegal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_on_edge_x</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_on_edge_y</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_on_edge_x</name></name> <operator>=</operator> <call><name>__check_if_mouse_x_on_edge</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_on_edge_y</name></name> <operator>=</operator> <call><name>__check_if_mouse_y_on_edge</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_on_edge_x</name></name> <operator>||</operator> <name><name>panels</name><operator>-&gt;</operator><name>mouse_on_edge_y</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__handle_mouse_on_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>h</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__split_panel_horizontal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>==</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__split_panel_vertical</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>==</operator> <name>INT8_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__handle_mouse_on_top</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>word</name> <init>= <expr><call><name>get_word_from_canvas</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panels</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>COUNT</name> <argument_list>(<argument><expr><name>menus</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name><name>menus</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__clear_panels_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name><name>panels</name><operator>-&gt;</operator><name>panels_menu</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><call><name><name>child</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="string">"Tab"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__handle_tab_new</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>word</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <name><name>word</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>word</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atoi</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__handle_tab_nth</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>word</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__handle_mouse_on_X</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx</name> <init>= <expr><call><name>__get_panel_idx_in_pos</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>word</name> <init>= <expr><call><name>get_word_from_canvas</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panels</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>ppos</name> <init>= <expr><call><name>__get_panel</name><argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>TITLE_Y</name> <init>= <expr><name><name>ppos</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>TITLE_Y</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="string">" X "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fx</name> <init>= <expr><name><name>ppos</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fX</name> <init>= <expr><name>fx</name> <operator>+</operator> <name><name>ppos</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_refresh_all</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <operator>(</operator><name>fX</name> <operator>-</operator> <literal type="number">13</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name>fX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__toggle_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>fx</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <operator>(</operator><name>fx</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__dismantle_del_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ppos</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__create_almighty</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>almighty_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__handle_mouse_on_panel</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx</name> <init>= <expr><call><name>__get_panel_idx_in_pos</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>word</name> <init>= <expr><call><name>get_word_from_canvas</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panels</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_refresh_all</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>ppos</name> <init>= <expr><call><name>__get_panel</name><argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>word</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_CMD_FUNCTION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>__check_if_addr</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_addr_by_type</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_flag_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><literal type="string">"panel.addr"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.highlight"</literal></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__seek_all</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>ppos</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name><name>ppos</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__handle_mouse_on_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>word</name> <init>= <expr><call><name>get_word_from_canvas_for_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panels</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name><name>panels</name><operator>-&gt;</operator><name>panels_menu</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>d</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>d</name><operator>--</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>parent</name><operator>-&gt;</operator><name>n_sub</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>]</index></name><operator>-&gt;</operator><call><name>cb</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_menu_contents</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>__del_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>__clear_panels_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__drag_and_resize</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_on_edge_x</name></name> <operator>||</operator> <name><name>panels</name><operator>-&gt;</operator><name>mouse_on_edge_y</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_get_click</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_on_edge_x</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__update_edge_x</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name><name>panels</name><operator>-&gt;</operator><name>mouse_orig_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_on_edge_y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__update_edge_y</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name><name>panels</name><operator>-&gt;</operator><name>mouse_orig_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_on_edge_x</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_on_edge_y</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__jmp_to_cursor_addr</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>__parse_string_on_cursor</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>curpos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_disassembly_or_open</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__cursor_del_breakpoints</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;dbg-&gt;bp-&gt;bps</argument>, <argument>iter</argument>, <argument>b</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>curpos</name></name> <operator>==</operator> <name>i</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_bp_del</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>bp</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__handle_visual_mark</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>act</name> <init>= <expr><call><name>__show_status</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Visual Mark s:set -:remove \':use: "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>act</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><call><name>__add_visual_mark</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_core_visual_mark_dump</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>R_CONS_CLEAR_LINE</name><literal type="string">"Remove a shortcut key from the list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_visual_mark_del</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\''</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_core_visual_mark_dump</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_visual_mark_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></switch>

<return>return;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__handle_refs</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>tmp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name>__show_status</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"xrefs:x refs:X "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_visual_refs</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_visual_refs</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__set_addr_by_type</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__add_visual_mark</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><name>R_CONS_CLEAR_LINE</name><literal type="string">"Set shortcut key for 0x%"</literal><name>PFMT64x</name><literal type="string">": "</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name>__show_status</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_visual_mark</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__resize_panel_left</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cx0</name></decl>, <decl><type ref="prev"/><name>cx1</name></decl>, <decl><type ref="prev"/><name>cy0</name></decl>, <decl><type ref="prev"/><name>cy1</name></decl>, <decl><type ref="prev"/><name>tx0</name></decl>, <decl><type ref="prev"/><name>tx1</name></decl>, <decl><type ref="prev"/><name>ty0</name></decl>, <decl><type ref="prev"/><name>ty1</name></decl>, <decl><type ref="prev"/><name>cur1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cx0</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cx1</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cy0</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cy1</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>targets1</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>targets2</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>targets3</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>targets4</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>targets1</name> <operator>||</operator> <operator>!</operator><name>targets2</name> <operator>||</operator> <operator>!</operator><name>targets3</name> <operator>||</operator> <operator>!</operator><name>targets4</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tx0</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tx1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ty0</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ty1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ty0</name> <operator>==</operator> <name>cy0</name> <operator>&amp;&amp;</operator> <name>ty1</name> <operator>==</operator> <name>cy1</name> <operator>&amp;&amp;</operator> <name>tx1</name> <operator>==</operator> <name>cx0</name> <operator>&amp;&amp;</operator> <name>tx1</name> <operator>-</operator> <name>PANEL_CONFIG_RESIZE_W</name> <operator>&gt;</operator> <name>tx0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>y_included</name> <init>= <expr><operator>(</operator><name>ty1</name> <operator>&gt;=</operator> <name>cy0</name> <operator>&amp;&amp;</operator> <name>cy1</name> <operator>&gt;=</operator> <name>ty1</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ty0</name> <operator>&gt;=</operator> <name>cy0</name> <operator>&amp;&amp;</operator> <name>cy1</name> <operator>&gt;=</operator> <name>ty0</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tx1</name> <operator>==</operator> <name>cx0</name> <operator>&amp;&amp;</operator> <name>y_included</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tx1</name> <operator>-</operator> <name>PANEL_CONFIG_RESIZE_W</name> <operator>&gt;</operator> <name>tx0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>targets1</name><index>[<expr><name>cur1</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tx0</name> <operator>==</operator> <name>cx1</name> <operator>&amp;&amp;</operator> <name>y_included</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tx0</name> <operator>-</operator> <name>PANEL_CONFIG_RESIZE_W</name> <operator>&gt;</operator> <name>cx0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>targets3</name><index>[<expr><name>cur3</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tx0</name> <operator>==</operator> <name>cx0</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tx0</name> <operator>-</operator> <name>PANEL_CONFIG_RESIZE_W</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>targets2</name><index>[<expr><name>cur2</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tx1</name> <operator>==</operator> <name>cx1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tx1</name> <operator>+</operator> <name>PANEL_CONFIG_RESIZE_W</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>can</name><operator>-&gt;</operator><name>w</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>targets4</name><index>[<expr><name>cur4</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>cur1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cur1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>targets1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cur2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>targets2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cur3</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cur3</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>targets3</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets3</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets3</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cur4</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>targets4</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets4</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>targets1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>targets2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>targets3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>targets4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__resize_panel_right</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>tx0</name></decl>, <decl><type ref="prev"/><name>tx1</name></decl>, <decl><type ref="prev"/><name>ty0</name></decl>, <decl><type ref="prev"/><name>ty1</name></decl>, <decl><type ref="prev"/><name>cur1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cx0</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cx1</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cy0</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cy1</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>targets1</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>targets2</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>targets3</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>targets4</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>targets1</name> <operator>||</operator> <operator>!</operator><name>targets2</name> <operator>||</operator> <operator>!</operator><name>targets3</name> <operator>||</operator> <operator>!</operator><name>targets4</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tx0</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tx1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ty0</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ty1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ty0</name> <operator>==</operator> <name>cy0</name> <operator>&amp;&amp;</operator> <name>ty1</name> <operator>==</operator> <name>cy1</name> <operator>&amp;&amp;</operator> <name>tx0</name> <operator>==</operator> <name>cx1</name> <operator>&amp;&amp;</operator> <name>tx0</name> <operator>+</operator> <name>PANEL_CONFIG_RESIZE_W</name> <operator>&lt;</operator> <name>tx1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>y_included</name> <init>= <expr><operator>(</operator><name>ty1</name> <operator>&gt;=</operator> <name>cy0</name> <operator>&amp;&amp;</operator> <name>cy1</name> <operator>&gt;=</operator> <name>ty1</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ty0</name> <operator>&gt;=</operator> <name>cy0</name> <operator>&amp;&amp;</operator> <name>cy1</name> <operator>&gt;=</operator> <name>ty0</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tx1</name> <operator>==</operator> <name>cx0</name> <operator>&amp;&amp;</operator> <name>y_included</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tx1</name> <operator>+</operator> <name>PANEL_CONFIG_RESIZE_W</name> <operator>&lt;</operator> <name>cx1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>targets1</name><index>[<expr><name>cur1</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tx0</name> <operator>==</operator> <name>cx1</name> <operator>&amp;&amp;</operator> <name>y_included</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tx0</name> <operator>+</operator> <name>PANEL_CONFIG_RESIZE_W</name> <operator>&lt;</operator> <name>tx1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>targets3</name><index>[<expr><name>cur3</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tx0</name> <operator>==</operator> <name>cx0</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tx0</name> <operator>+</operator> <name>PANEL_CONFIG_RESIZE_W</name> <operator>&lt;</operator> <name>tx1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>targets2</name><index>[<expr><name>cur2</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tx1</name> <operator>==</operator> <name>cx1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tx1</name> <operator>+</operator> <name>PANEL_CONFIG_RESIZE_W</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>can</name><operator>-&gt;</operator><name>w</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>targets4</name><index>[<expr><name>cur4</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>cur3</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cur3</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>targets3</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets3</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets3</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cur4</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>targets4</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets4</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cur1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cur1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>targets1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cur2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>targets2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>targets1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>targets2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>targets3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>targets4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__resize_panel_up</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>tx0</name></decl>, <decl><type ref="prev"/><name>tx1</name></decl>, <decl><type ref="prev"/><name>ty0</name></decl>, <decl><type ref="prev"/><name>ty1</name></decl>, <decl><type ref="prev"/><name>cur1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cx0</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cx1</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cy0</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cy1</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>targets1</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>targets2</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>targets3</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>targets4</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>targets1</name> <operator>||</operator> <operator>!</operator><name>targets2</name> <operator>||</operator> <operator>!</operator><name>targets3</name> <operator>||</operator> <operator>!</operator><name>targets4</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tx0</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tx1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ty0</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ty1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tx0</name> <operator>==</operator> <name>cx0</name> <operator>&amp;&amp;</operator> <name>tx1</name> <operator>==</operator> <name>cx1</name> <operator>&amp;&amp;</operator> <name>ty1</name> <operator>==</operator> <name>cy0</name> <operator>&amp;&amp;</operator> <name>ty1</name> <operator>-</operator> <name>PANEL_CONFIG_RESIZE_H</name> <operator>&gt;</operator> <name>ty0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>x_included</name> <init>= <expr><operator>(</operator><name>tx1</name> <operator>&gt;=</operator> <name>cx0</name> <operator>&amp;&amp;</operator> <name>cx1</name> <operator>&gt;=</operator> <name>tx1</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tx0</name> <operator>&gt;=</operator> <name>cx0</name> <operator>&amp;&amp;</operator> <name>cx1</name> <operator>&gt;=</operator> <name>tx0</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ty1</name> <operator>==</operator> <name>cy0</name> <operator>&amp;&amp;</operator> <name>x_included</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ty1</name> <operator>-</operator> <name>PANEL_CONFIG_RESIZE_H</name> <operator>&gt;</operator> <name>ty0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>targets1</name><index>[<expr><name>cur1</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ty0</name> <operator>==</operator> <name>cy1</name> <operator>&amp;&amp;</operator> <name>x_included</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ty0</name> <operator>-</operator> <name>PANEL_CONFIG_RESIZE_H</name> <operator>&gt;</operator> <name>cy0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>targets3</name><index>[<expr><name>cur3</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ty0</name> <operator>==</operator> <name>cy0</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ty0</name> <operator>-</operator> <name>PANEL_CONFIG_RESIZE_H</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>targets2</name><index>[<expr><name>cur2</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ty1</name> <operator>==</operator> <name>cy1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ty1</name> <operator>-</operator> <name>PANEL_CONFIG_RESIZE_H</name> <operator>&gt;</operator> <name>ty0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>targets4</name><index>[<expr><name>cur4</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>cur1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cur1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>targets1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cur2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>targets2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cur3</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cur3</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>targets3</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets3</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets3</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cur4</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>targets4</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets4</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>targets1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>targets2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>targets3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>targets4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__move_panel_to_dir</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__dismantle_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name>__show_status</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Move the current panel to direction (h/l): "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>r_cons_arrow_to_hjkl</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_refresh_all</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<expr_stmt><expr><call><name>__move_panel_to_left</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<expr_stmt><expr><call><name>__move_panel_to_right</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>

<expr_stmt><expr><call><name>__move_panel_to_up</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><call><name>__move_panel_to_down</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__move_panel_to_left</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__shrink_panels_backward</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>panel</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p_w</name> <init>= <expr><name>w</name> <operator>-</operator> <name><name>panels</name><operator>-&gt;</operator><name>columnWidth</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_w</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_w</name> <init>= <expr><name>w</name> <operator>-</operator> <name>p_w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p_w</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t_x</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>w</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>new_w</name> <operator>+</operator> <name>p_w</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t_w</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>w</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>new_w</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>t_x</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>t_w</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>__fix_layout</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__move_panel_to_right</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__shrink_panels_forward</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>panel</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p_w</name> <init>= <expr><name>w</name> <operator>-</operator> <name><name>panels</name><operator>-&gt;</operator><name>columnWidth</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_w</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p_x</name> <init>= <expr><name>w</name> <operator>-</operator> <name>p_w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>p_x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p_w</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_w</name> <init>= <expr><name>w</name> <operator>-</operator> <name>p_w</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t_x</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>w</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>new_w</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t_w</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>w</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>new_w</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>t_x</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>t_w</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>__fix_layout</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__move_panel_to_up</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__shrink_panels_backward</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>panel</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p_h</name> <init>= <expr><name>h</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_h</name> <init>= <expr><name>h</name> <operator>-</operator> <name>p_h</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>p_h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t_y</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>h</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>new_h</name> <operator>+</operator> <name>p_h</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t_h</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>h</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>new_h</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>t_y</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name>t_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>__fix_layout</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__move_panel_to_down</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__shrink_panels_forward</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>panel</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p_h</name> <init>= <expr><name>h</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_h</name> <init>= <expr><name>h</name> <operator>-</operator> <name>p_h</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>p_h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t_y</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>h</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>new_h</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t_h</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>h</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>new_h</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>t_y</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name>t_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>__fix_layout</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__fix_layout</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>__fix_layout_w</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__fix_layout_h</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__fix_layout_w</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>t</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tx</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tx</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><name>INT8_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>target_num</name> <init>= <expr><name>INT8_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>num</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>num</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>num</name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name>tx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sub</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>num</name> <operator>-</operator> <name>tx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&gt;</operator> <call><name>R_ABS</name> <argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>R_ABS</name> <argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>target_num</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>target_num</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>target_num</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__fix_layout_h</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>t</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ty</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>th</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ty</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>th</name> <operator>==</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><name>INT8_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>target_num</name> <init>= <expr><name>INT8_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>num</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>num</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>num</name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name>ty</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sub</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>num</name> <operator>-</operator> <name>ty</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&gt;</operator> <call><name>R_ABS</name> <argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>R_ABS</name> <argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>target_num</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>target_num</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>target_num</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__resize_panel_down</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>tx0</name></decl>, <decl><type ref="prev"/><name>tx1</name></decl>, <decl><type ref="prev"/><name>ty0</name></decl>, <decl><type ref="prev"/><name>ty1</name></decl>, <decl><type ref="prev"/><name>cur1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cx0</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cx1</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cy0</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cy1</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>targets1</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>targets2</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>targets3</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier><modifier>*</modifier></type><name>targets4</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>targets1</name> <operator>||</operator> <operator>!</operator><name>targets2</name> <operator>||</operator> <operator>!</operator><name>targets3</name> <operator>||</operator> <operator>!</operator><name>targets4</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tx0</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tx1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ty0</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ty1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tx0</name> <operator>==</operator> <name>cx0</name> <operator>&amp;&amp;</operator> <name>tx1</name> <operator>==</operator> <name>cx1</name> <operator>&amp;&amp;</operator> <name>ty0</name> <operator>==</operator> <name>cy1</name> <operator>&amp;&amp;</operator> <name>ty0</name> <operator>+</operator> <name>PANEL_CONFIG_RESIZE_H</name> <operator>&lt;</operator> <name>ty1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>x_included</name> <init>= <expr><operator>(</operator><name>tx1</name> <operator>&gt;=</operator> <name>cx0</name> <operator>&amp;&amp;</operator> <name>cx1</name> <operator>&gt;=</operator> <name>tx1</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tx0</name> <operator>&gt;=</operator> <name>cx0</name> <operator>&amp;&amp;</operator> <name>cx1</name> <operator>&gt;=</operator> <name>tx0</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ty1</name> <operator>==</operator> <name>cy0</name> <operator>&amp;&amp;</operator> <name>x_included</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ty1</name> <operator>+</operator> <name>PANEL_CONFIG_RESIZE_H</name> <operator>&lt;</operator> <name>cy1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>targets1</name><index>[<expr><name>cur1</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ty0</name> <operator>==</operator> <name>cy1</name> <operator>&amp;&amp;</operator> <name>x_included</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ty0</name> <operator>+</operator> <name>PANEL_CONFIG_RESIZE_H</name> <operator>&lt;</operator> <name>ty1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>targets3</name><index>[<expr><name>cur3</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ty0</name> <operator>==</operator> <name>cy0</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ty0</name> <operator>+</operator> <name>PANEL_CONFIG_RESIZE_H</name> <operator>&lt;</operator> <name>ty1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>targets2</name><index>[<expr><name>cur2</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ty1</name> <operator>==</operator> <name>cy1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ty1</name> <operator>+</operator> <name>PANEL_CONFIG_RESIZE_H</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>can</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>targets4</name><index>[<expr><name>cur4</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>cur3</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cur3</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>targets3</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets3</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets3</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cur4</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>targets4</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets4</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cur1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cur1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>targets1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cur2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>targets2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-=</operator> <name>PANEL_CONFIG_RESIZE_H</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>targets1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>targets2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>targets3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>targets4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__del_panel</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pi</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>pi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>pi</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__dismantle_del_panel</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pi</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__dismantle_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__del_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__del_invalid_panels</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__del_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__del_invalid_panels</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__del_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__del_invalid_panels</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__dismantle_panel</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>justLeftPanel</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>justRightPanel</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>justUpPanel</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>justDownPanel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>tmpPanel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>leftUpValid</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>leftDownValid</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>rightUpValid</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>rightDownValid</name> <init>= <expr><name>false</name></expr></init></decl>,

<decl><type ref="prev"/><name>upLeftValid</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>upRightValid</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>downLeftValid</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>downRightValid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>left</name><index>[<expr><name>PANEL_NUM_LIMIT</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>right</name><index>[<expr><name>PANEL_NUM_LIMIT</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>up</name><index>[<expr><name>PANEL_NUM_LIMIT</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>down</name><index>[<expr><name>PANEL_NUM_LIMIT</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>up</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>up</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>down</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>down</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ox</name></decl>, <decl><type ref="prev"/><name>oy</name></decl>, <decl><type ref="prev"/><name>ow</name></decl>, <decl><type ref="prev"/><name>oh</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ox</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>oy</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ow</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>oh</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmpPanel</name> <operator>=</operator> <call><name>__get_panel</name> <argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name>ox</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oy</name> <operator>==</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>leftUpValid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oh</name> <operator>==</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>justLeftPanel</name> <operator>=</operator> <name>tmpPanel</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>oy</name> <operator>+</operator> <name>oh</name> <operator>==</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>leftDownValid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name>ox</name> <operator>+</operator> <name>ow</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oy</name> <operator>==</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rightUpValid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oh</name> <operator>==</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rightDownValid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>justRightPanel</name> <operator>=</operator> <name>tmpPanel</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>oy</name> <operator>+</operator> <name>oh</name> <operator>==</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rightDownValid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name>oy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>up</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ox</name> <operator>==</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>upLeftValid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ow</name> <operator>==</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>upRightValid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>justUpPanel</name> <operator>=</operator> <name>tmpPanel</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ox</name> <operator>+</operator> <name>ow</name> <operator>==</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>upRightValid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name>oy</name> <operator>+</operator> <name>oh</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>down</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ox</name> <operator>==</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>downLeftValid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ow</name> <operator>==</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>downRightValid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>justDownPanel</name> <operator>=</operator> <name>tmpPanel</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ox</name> <operator>+</operator> <name>ow</name> <operator>==</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>downRightValid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>justLeftPanel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>justLeftPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>+=</operator> <name>ox</name> <operator>+</operator> <name>ow</name> <operator>-</operator> <operator>(</operator><name><name>justLeftPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>justLeftPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>justRightPanel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>justRightPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>justRightPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>justRightPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <name>ox</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>justRightPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>ox</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>justUpPanel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>justUpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <name>oy</name> <operator>+</operator> <name>oh</name> <operator>-</operator> <operator>(</operator><name><name>justUpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>justUpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>justDownPanel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>justDownPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>oh</name> <operator>+</operator> <name><name>justDownPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>justDownPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <operator>(</operator><name>oy</name> <operator>+</operator> <name>oh</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>justDownPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>oy</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>leftUpValid</name> <operator>&amp;&amp;</operator> <name>leftDownValid</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmpPanel</name> <operator>=</operator> <call><name>__get_panel</name> <argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>+=</operator> <name>ox</name> <operator>+</operator> <name>ow</name> <operator>-</operator> <operator>(</operator><name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rightUpValid</name> <operator>&amp;&amp;</operator> <name>rightDownValid</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmpPanel</name> <operator>=</operator> <call><name>__get_panel</name> <argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <name>ox</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>ox</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>upLeftValid</name> <operator>&amp;&amp;</operator> <name>upRightValid</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>up</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmpPanel</name> <operator>=</operator> <call><name>__get_panel</name> <argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <name>oy</name> <operator>+</operator> <name>oh</name> <operator>-</operator> <operator>(</operator><name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>downLeftValid</name> <operator>&amp;&amp;</operator> <name>downRightValid</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>down</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmpPanel</name> <operator>=</operator> <call><name>__get_panel</name> <argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>oh</name> <operator>+</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <operator>(</operator><name>oy</name> <operator>+</operator> <name>oh</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpPanel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>oy</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__replace_cmd</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__free_panel_model</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RPanelModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PANEL_TYPE_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_dcb</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_pcb</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_rcb</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__cache_white_list</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_refresh_all</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__swap_panels</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel0</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel1</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelModel</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>panel0</name><operator>-&gt;</operator><name>model</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>panel0</name><operator>-&gt;</operator><name>model</name></name> <operator>=</operator> <name><name>panel1</name><operator>-&gt;</operator><name>model</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panel1</name><operator>-&gt;</operator><name>model</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__call_visual_graph</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>__check_func</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_free</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ocolor</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_visual_graph</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>, <argument><expr><name>ocolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name> <operator>=</operator> <call><name>__create_new_canvas</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__check_func</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fun</name> <init>= <expr><call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fun</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_message</name> <argument_list>(<argument><expr><literal type="string">"Not in a function. Type 'df' to define it here"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_list_empty</name> <argument_list>(<argument><expr><name><name>fun</name><operator>-&gt;</operator><name>bbs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_message</name> <argument_list>(<argument><expr><literal type="string">"No basic blocks in this function. You may want to use 'afb+'."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__check_func_diff</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISEMPTY</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>funcName</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>funcName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>funcName</name></name> <operator>||</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>funcName</name></name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>funcName</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>funcName</name></name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__seek_all</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_refresh_all</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>clearCache</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force_refresh</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force_refresh</name> <operator>&amp;&amp;</operator> <call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_CMD_CONSOLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clearCache</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_refresh_by_type</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>clearCache</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clearCache</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_addr_by_type</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>__create_new_canvas</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name> <init>= <expr><call><name>r_cons_canvas_new</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>can</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot create RCons.canvas context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_fill</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>can</name><operator>-&gt;</operator><name>linemode</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"graph.linemode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>can</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>can</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__check_panel_num</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>PANEL_NUM_LIMIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><literal type="string">"panel limit exceeded."</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__show_status</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__init_panel_param</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanelModel</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>model</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelView</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>view</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PANEL_TYPE_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>rotate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>curpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>rotateCb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_read_only</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>funcName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>edge</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>title</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>__set_pcb</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISNOTEMPTY</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_dcb</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_rcb</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PANEL_CMD_STACK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><call><name>r_reg_get_name</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>R_REG_NAME_SP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>stackbase</name> <init>= <expr><call><name>r_reg_getv</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>baseAddr</name></name> <operator>=</operator> <name>stackbase</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>stackbase</name> <operator>-</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"stack.delta"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__cache_white_list</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_dcb</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>__is_abnormal_cursor_type</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name> <operator>=</operator> <name>__direction_panels_cursor_cb</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmdStrCache</name></name><operator>)</operator> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>readOnly</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name> <operator>=</operator> <name>__direction_default_cb</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PANEL_CMD_GRAPH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name> <operator>=</operator> <name>__direction_graph_cb</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PANEL_CMD_STACK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name> <operator>=</operator> <name>__direction_stack_cb</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name> <operator>=</operator> <name>__direction_disassembly_cb</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PANEL_CMD_REGISTERS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name> <operator>=</operator> <name>__direction_register_cb</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PANEL_CMD_HEXDUMP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name> <operator>=</operator> <name>__direction_hexdump_cb</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name> <operator>=</operator> <name>__direction_default_cb</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_rcb</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>sdb_iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>sdb_list</name> <init>= <expr><call><name>sdb_foreach_list</name> <argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>rotate_db</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>sdb_list</argument>, <argument>sdb_iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotateCb</name></name> <operator>=</operator> <operator>(</operator><name>RPanelRotateCallback</name><operator>)</operator><call><name>sdb_ptr_get</name> <argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>rotate_db</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>sdb_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_pcb</name><parameter_list>(<parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>print_cb</name></name> <operator>=</operator> <name>__print_disassembly_cb</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PANEL_CMD_STACK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>print_cb</name></name> <operator>=</operator> <name>__print_stack_cb</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PANEL_CMD_HEXDUMP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>print_cb</name></name> <operator>=</operator> <name>__print_hexdump_cb</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PANEL_CMD_DECOMPILER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>print_cb</name></name> <operator>=</operator> <name>__print_decompiler_cb</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PANEL_CMD_GRAPH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>print_cb</name></name> <operator>=</operator> <name>__print_graph_cb</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PANEL_CMD_TINYGRAPH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>print_cb</name></name> <operator>=</operator> <name>__print_graph_cb</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASMSUMMARY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>print_cb</name></name> <operator>=</operator> <name>__print_disasmsummary_cb</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>print_cb</name></name> <operator>=</operator> <name>__print_default_cb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__open_file_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>line</name><operator>-&gt;</operator><name>prompt_type</name></name> <operator>=</operator> <name>R_LINE_PROMPT_FILE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_line_set_hist_callback</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>__file_history_up</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>__file_history_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__add_cmdf_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"open file: "</literal></expr></argument>, <argument><expr><literal type="string">"o %s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>line</name><operator>-&gt;</operator><name>prompt_type</name></name> <operator>=</operator> <name>R_LINE_PROMPT_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_line_set_hist_callback</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_line_hist_cmd_up</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_line_hist_cmd_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__rw_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"oo+"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__debugger_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"oo"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__settings_decompiler_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsRoot</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>panels_menu</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pdc_next</name> <init>= <expr><name><name>child</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pdc_now</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.pdc"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>pdc_next</name></expr></argument>, <argument><expr><name>pdc_now</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>cur_pdc_cache</name></name> <operator>=</operator> <call><name>sdb_ptr_get</name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>pdc_caches</name></name></expr></argument>, <argument><expr><name>pdc_next</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>root</name><operator>-&gt;</operator><name>cur_pdc_cache</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name> <init>= <expr><call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sdb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>pdc_caches</name></name></expr></argument>, <argument><expr><name>pdc_next</name></expr></argument>, <argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>cur_pdc_cache</name></name> <operator>=</operator> <name>sdb</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.pdc"</literal></expr></argument>, <argument><expr><name>pdc_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"pdc"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdstr</name> <init>= <expr><call><name>r_core_cmd_strf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"pdc@0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__update_panel_contents</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>cmdstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__reset_scroll_pos</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmdstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>__set_refresh_all</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__show_all_decompiler_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanelsRoot</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pdc_now</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.pdc"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><call><name>r_core_cmd_str</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"e cmd.pdc=?"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>optl</name> <init>= <expr><call><name>r_str_split_list</name> <argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__handle_tab_new</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><call><name>__get_panels</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>optl</argument>, <argument>iter</argument>, <argument>opt</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISEMPTY</name> <argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.pdc"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_read_only</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><call><name>r_core_cmd_str</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>__layout_equal_hor</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>optl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.pdc"</literal></expr></argument>, <argument><expr><name>pdc_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>cur_panels</name></name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_root_state</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ROTATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__load_layout_saved_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>panels_menu</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_load_panels_layout</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__create_default_panels</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__panels_layout</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>panels_menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__load_layout_default_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__init_panels</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__create_default_panels</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__panels_layout</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>panels_menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__close_file_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"o-*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__save_layout_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_save_panels_layout</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__clear_panels_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__clear_layout_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__show_status_yesno</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Clear all the saved layouts?(y/n): "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir_path</name> <init>= <expr><call><name>__get_panels_config_dir_path</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>r_sys_dir</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>dir_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>dir</argument>, <argument>it</argument>, <argument>entry</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>dir_path</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_file_rm</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_file_rm</name> <argument_list>(<argument><expr><name>dir_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dir_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"File.Load Layout.Saved"</literal></expr></argument>, <argument><expr><name>__init_menu_saved_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__copy_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__add_cmdf_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"How many bytes? "</literal></expr></argument>, <argument><expr><literal type="string">"\"y %s\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__paste_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"yy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__write_str_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__add_cmdf_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"insert string: "</literal></expr></argument>, <argument><expr><literal type="string">"\"w %s\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__write_hex_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__add_cmdf_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"insert hexpairs: "</literal></expr></argument>, <argument><expr><literal type="string">"\"wx %s\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__assemble_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_visual_asm</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__fill_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__add_cmdf_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Fill with: "</literal></expr></argument>, <argument><expr><literal type="string">"wow %s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__settings_colors_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>panels_menu</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_ansi_filter</name> <argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"eco %s"</literal></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>menu</name><operator>-&gt;</operator><name>depth</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>refreshPanels</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>n_refresh</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>__update_menu</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Settings.Colors"</literal></expr></argument>, <argument><expr><name>__init_menu_color_settings_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__config_toggle_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>panels_menu</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_str_split</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_toggle</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><call><name>__draw_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>menu</name><operator>-&gt;</operator><name>depth</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>refreshPanels</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>n_refresh</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"asm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__update_menu</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Settings.Disassembly.asm"</literal></expr></argument>, <argument><expr><name>__init_menu_disasm_asm_settings_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Screen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__update_menu</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Settings.Screen"</literal></expr></argument>, <argument><expr><name>__init_menu_screen_settings_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__config_value_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>panels_menu</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_str_split</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>__show_status_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"New value: "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><call><name>__draw_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>menu</name><operator>-&gt;</operator><name>depth</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>refreshPanels</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>n_refresh</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"asm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__update_menu</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Settings.Disassembly.asm"</literal></expr></argument>, <argument><expr><name>__init_menu_disasm_asm_settings_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Screen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__update_menu</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Settings.Screen"</literal></expr></argument>, <argument><expr><name>__init_menu_screen_settings_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__calculator_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>__show_status_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"&gt; "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"? %s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__r2_shell_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>vmode</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_visual_prompt_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>vmode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__system_shell_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sys_cmd</name> <argument_list>(<argument><expr><literal type="string">"$SHELL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__string_whole_bin_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__add_cmdf_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"search strings in the whole binary: "</literal></expr></argument>, <argument><expr><literal type="string">"izzq~%s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__string_data_sec_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__add_cmdf_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"search string in data sections: "</literal></expr></argument>, <argument><expr><literal type="string">"izq~%s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__rop_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__add_cmdf_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"rop grep: "</literal></expr></argument>, <argument><expr><literal type="string">"\"/R %s\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__code_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__add_cmdf_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"search code: "</literal></expr></argument>, <argument><expr><literal type="string">"\"/c %s\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__hexpairs_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__add_cmdf_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"search hexpairs: "</literal></expr></argument>, <argument><expr><literal type="string">"\"/x %s\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__continue_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"dc"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__esil_init_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__esil_init</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__esil_step_to_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><call><name>__show_status_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"target addr: "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__esil_step_to</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__esil_step_range_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>rsb</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>, <argument><expr><literal type="string">"start addr: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>__show_status_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>, <argument><expr><literal type="string">" end addr: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>__show_status_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>s_a</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>d_a</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s_a</name> <operator>&gt;=</operator> <name>d_a</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>tmp</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>s_a</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__esil_init</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__esil_step_to</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>d_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__step_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__panel_single_step_in</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_disassembly_or_open</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__step_over_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__panel_single_step_over</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_disassembly_or_open</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__io_cache_on_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.cache"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__show_status</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"io.cache is on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__io_cache_off_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.cache"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__show_status</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"io.cache is off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__update_disassembly_or_open</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>create_new</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>create_new</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>create_new</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x0</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y0</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w0</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h0</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>threshold_w</name> <init>= <expr><name>x0</name> <operator>+</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><name>x0</name> <operator>+</operator> <name>w0</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w1</name> <init>= <expr><name>threshold_w</name> <operator>-</operator> <name>x1</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__insert_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PANEL_TITLE_DISASSEMBLY</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p0</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>w0</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>h0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p1</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>h0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_cursor</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_curnode</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>curpos</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_mode</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanelsMode</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_cursor</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__update_help</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"Help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>rsb</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PANEL_MODE_WINDOW</name></expr>:</case>

<expr_stmt><expr><name>title</name> <operator>=</operator> <literal type="string">"Panels Window mode help"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="string">"Window Mode Help"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <name>help_msg_panels_window</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PANEL_MODE_ZOOM</name></expr>:</case>

<expr_stmt><expr><name>title</name> <operator>=</operator> <literal type="string">"Panels Zoom mode help"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="string">"Zoom Mode Help"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <name>help_msg_panels_zoom</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>title</name> <operator>=</operator> <literal type="string">"Visual Ascii Art Panels"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="string">"Help"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <name>help_msg_panels</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_visual_append_help</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rsb</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>drained</name> <init>= <expr><call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_read_only</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>drained</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>drained</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__reload_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_file_reopen_debug</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_disassembly_or_open</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__function_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"af"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__symbols_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"aa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__program_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"aaa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__basic_blocks_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"aab"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__calls_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"aac"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__break_points_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name> <init>= <expr><literal type="string">"addr: "</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>line</name><operator>-&gt;</operator><name>prompt_type</name></name> <operator>=</operator> <name>R_LINE_PROMPT_OFFSET</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_line_set_hist_callback</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>line</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>r_line_hist_offset_up</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>r_line_hist_offset_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__panel_prompt</name> <argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_line_set_hist_callback</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_line_hist_cmd_up</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_line_hist_cmd_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>line</name><operator>-&gt;</operator><name>prompt_type</name></name> <operator>=</operator> <name>R_LINE_PROMPT_DEFAULT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"dbs 0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__watch_points_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>addrBuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>rw</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addrPrompt</name> <init>= <expr><literal type="string">"addr: "</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rwPrompt</name> <init>= <expr><literal type="string">"&lt;r/w/rw&gt;: "</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__panel_prompt</name> <argument_list>(<argument><expr><name>addrPrompt</name></expr></argument>, <argument><expr><name>addrBuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>addrBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__panel_prompt</name> <argument_list>(<argument><expr><name>rwPrompt</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>addrBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"dbw 0x%08"</literal><name>PFMT64x</name><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__references_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"aar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__fortune_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_core_cmd_str</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"fo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_message</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__game_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_2048</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>can</name><operator>-&gt;</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__help_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__toggle_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__license_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_message</name> <argument_list>(<argument><expr><literal type="string">"Copyright 2006-2019 - pancake - LGPL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__version_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_core_cmd_str</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"?V"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_message</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__writeValueCb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>__show_status_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"insert number: "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"\"wv %s\""</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__quit_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>__set_root_state</name> <argument_list>(<argument><expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></argument>, <argument><expr><name>QUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__direction_default_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>Direction</name><operator>)</operator><name>direction</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEFT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

<case>case <expr><name>RIGHT</name></expr>:</case>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><name>UP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

<case>case <expr><name>DOWN</name></expr>:</case>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__direction_disassembly_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cols</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>Direction</name><operator>)</operator><name>direction</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEFT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__cursor_left</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_block_read</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_ZOOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

<case>case <expr><name>RIGHT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__cursor_right</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_block_read</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_ZOOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

<case>case <expr><name>UP</name></expr>:</case>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__cursor_up</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_block_read</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_core_visual_disasm_up</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_seek_delta</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>-</operator><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

<case>case <expr><name>DOWN</name></expr>:</case>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__cursor_down</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_block_read</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>RAsmOp</name></type> <name>op</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_visual_disasm_down</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>cols</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__direction_graph_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>speed</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"graph.scroll"</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>Direction</name><operator>)</operator><name>direction</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEFT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name> <operator>-=</operator> <name>speed</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

<case>case <expr><name>RIGHT</name></expr>:</case>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name> <operator>+=</operator> <name>speed</name></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><name>UP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name> <operator>-=</operator> <name>speed</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

<case>case <expr><name>DOWN</name></expr>:</case>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name> <operator>+=</operator> <name>speed</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__direction_register_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>regcols</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <ternary><condition><expr><name>cols</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>cols</name></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>Direction</name><operator>)</operator><name>direction</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEFT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__cursor_left</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

<case>case <expr><name>RIGHT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__cursor_right</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

<case>case <expr><name>UP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>-=</operator> <name>cols</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

<case>case <expr><name>DOWN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <name>cols</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__direction_stack_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"hex.cols"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>Direction</name><operator>)</operator><name>direction</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEFT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__cursor_left</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

<case>case <expr><name>RIGHT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__cursor_right</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

<case>case <expr><name>UP</name></expr>:</case>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"stack.delta"</literal></expr></argument>,

<argument><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"stack.delta"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name> <operator>-=</operator> <name>cols</name></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><name>DOWN</name></expr>:</case>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"stack.delta"</literal></expr></argument>,

<argument><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"stack.delta"</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name> <operator>+=</operator> <name>cols</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__direction_hexdump_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"hex.cols"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>Direction</name><operator>)</operator><name>direction</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEFT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name> <operator>-=</operator> <name>cols</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <name>cols</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__cursor_left</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

<case>case <expr><name>RIGHT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>/</operator> <name>cols</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">5</literal>

<operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>%</operator> <name>cols</name> <operator>==</operator> <name>cols</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name> <operator>+=</operator> <name>cols</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>-=</operator> <name>cols</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__cursor_right</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

<case>case <expr><name>UP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>/</operator> <name>cols</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name> <operator>-=</operator> <name>cols</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>-=</operator> <name>cols</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name> <operator>&lt;=</operator> <name>cols</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name> <operator>-=</operator> <name>cols</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

<case>case <expr><name>DOWN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>/</operator> <name>cols</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name> <operator>+=</operator> <name>cols</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <name>cols</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name> <operator>+=</operator> <name>cols</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__direction_panels_cursor_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>THRESHOLD</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sub</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>Direction</name><operator>)</operator><name>direction</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEFT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name> <operator>-=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"graph.scroll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

<case>case <expr><name>RIGHT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sx</name></name> <operator>+=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"graph.scroll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><name>UP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>curpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>curpos</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>curpos</name></name> <operator>-</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sub</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>curpos</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

<case>case <expr><name>DOWN</name></expr>:</case>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>curpos</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>curpos</name></name> <operator>-</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sub</name> <operator>&gt;</operator> <name>THRESHOLD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>curpos</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>sy</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__print_default_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><operator>(</operator><name>RPanel</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>update</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>autoUpdate</name></name> <operator>&amp;&amp;</operator> <call><name>__check_func_diff</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdstr</name> <init>= <expr><call><name>__find_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>update</name> <operator>||</operator> <operator>!</operator><name>cmdstr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmdstr</name> <operator>=</operator> <call><name>__handle_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name> <operator>&amp;&amp;</operator> <name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmdStrCache</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__reset_scroll_pos</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__update_panel_contents</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>cmdstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__print_decompiler_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><operator>(</operator><name>RPanel</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>update</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>autoUpdate</name></name> <operator>&amp;&amp;</operator> <call><name>__check_func_diff</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>update</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmdstr</name> <operator>=</operator> <call><name>__find_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdstr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__update_pdc_contents</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>cmdstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>R_ANAL_FCN_TYPE_NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>func</name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>cur_pdc_cache</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmdstr</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sdb_ptr_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>cur_pdc_cache</name></name></expr></argument>,

<argument><expr><call><name>r_num_as_string</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdstr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>cmdstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__reset_scroll_pos</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_pdc_contents</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>cmdstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmdstr</name> <operator>=</operator> <call><name>__handle_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdstr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__reset_scroll_pos</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_decompiler_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmdstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_pdc_contents</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>cmdstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__print_disasmsummary_cb</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><operator>(</operator><name>RPanel</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>update</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>autoUpdate</name></name> <operator>&amp;&amp;</operator> <call><name>__check_func_diff</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdstr</name> <init>= <expr><call><name>__find_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>update</name> <operator>||</operator> <operator>!</operator><name>cmdstr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmdstr</name> <operator>=</operator> <call><name>__handle_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name> <operator>&amp;&amp;</operator> <name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmdStrCache</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__reset_scroll_pos</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__update_panel_contents</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>cmdstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__print_disassembly_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><operator>(</operator><name>RPanel</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>screen_bounds</name></name> <operator>=</operator> <literal type="number">1LL</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdstr</name> <init>= <expr><call><name>__find_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdstr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__update_panel_contents</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>cmdstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ocmd</name> <init>= <expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>o_offset</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">".dr*"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmdstr</name> <operator>=</operator> <call><name>__handle_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>o_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>ocmd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_panel_contents</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>cmdstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__print_graph_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><operator>(</operator><name>RPanel</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>update</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>autoUpdate</name></name> <operator>&amp;&amp;</operator> <call><name>__check_func_diff</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdstr</name> <init>= <expr><call><name>__find_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>update</name> <operator>||</operator> <operator>!</operator><name>cmdstr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmdstr</name> <operator>=</operator> <call><name>__handle_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>event_resize</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>event_data</name></name> <operator>=</operator> <name>core</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>event_resize</name></name> <operator>=</operator> <operator>(</operator><name>RConsEvent</name><operator>)</operator> <name>__do_panels_refreshOneShot</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_panel_contents</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>cmdstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__print_stack_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><operator>(</operator><name>RPanel</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>delta</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"stack.delta"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bits</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="char">'+'</literal></expr></then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>absdelta</name> <init>= <expr><call><name>R_ABS</name> <argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s "</literal></expr></argument>, <argument><expr><name>PANEL_CMD_STACK</name></expr></argument>, <argument><expr><ternary><condition><expr><name>bits</name> <operator>==</operator> <literal type="number">32</literal></expr> ?</condition><then> <expr><literal type="string">"w"</literal></expr> </then><else>: <expr><literal type="string">"q"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>r_str_split</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdstr</name> <init>= <expr><call><name>r_core_cmd_str</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%c%d"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>absdelta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__update_panel_contents</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>cmdstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__print_hexdump_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><operator>(</operator><name>RPanel</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdstr</name> <init>= <expr><call><name>__find_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmdstr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>o_offset</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_block_read</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>hexdump_rotate</name><index>[<expr><call><name>R_ABS</name><argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotate</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <call><name>COUNT</name> <argument_list>(<argument><expr><name>hexdump_rotate</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>r_str_split</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmdstr</name> <operator>=</operator> <call><name>__handle_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>o_offset</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__update_panel_contents</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>cmdstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__hudstuff</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_visual_hudstuff</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__esil_init</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"aeim"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"aeip"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__esil_step_to</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"aesu 0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__print_snow</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>panels</name><operator>-&gt;</operator><name>snows</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>snows</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>amount</name> <init>= <expr><call><name>r_num_rand</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>amount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>amount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanelsSnow</name> <modifier>*</modifier></type><name>snow</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RPanelsSnow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>snow</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>r_num_rand</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>snow</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>snows</name></name></expr></argument>, <argument><expr><name>snow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsSnow</name> <modifier>*</modifier></type><name>snow</name></decl>;</decl_stmt>

<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>panels-&gt;snows</argument>, <argument>iter</argument>, <argument>iter2</argument>, <argument>snow</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>r_num_rand</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>snow</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>snow</name><operator>-&gt;</operator><name>y</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>snow</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;=</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>+</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>||</operator> <name><name>snow</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;=</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>snows</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>snow</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;=</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>snows</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_canvas_gotoxy</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></argument>, <argument><expr><name><name>snow</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>snow</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>==</operator> <name>PANEL_FUN_SAKURA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></argument>, <argument><expr><name>Color_BMAGENTA</name><literal type="string">","</literal><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__reset_snow</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>snows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>snows</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__open_menu_cb</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name><modifier>*</modifier></type> <name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>panels_menu</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_pos</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>selectedIndex</name></name> <operator>*</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>parent2</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_pos</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>parent2</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>parent2</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>parent2</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>parent2</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr> </then><else>: <expr><name><name>parent2</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>__draw_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>=</operator> <call><name>r_str_bounds</name> <argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PANEL_TYPE_MENU</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>refreshPanels</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>n_refresh</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__add_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>RPanelsMenuCallback</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>p_item</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RPanelsMenuItem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>ht_pp_find</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>mht</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_item</name> <operator>=</operator> <operator>(</operator><name>RPanelsMenuItem</name> <operator>*</operator><operator>)</operator><name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ht_pp_insert</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>mht</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p_item</name> <operator>=</operator> <name><name>panels</name><operator>-&gt;</operator><name>panels_menu</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ht_pp_insert</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>mht</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>n_sub</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>selectedIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><call><name>r_str_new</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>sub</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RPanel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>p</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__free_menu_item</name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>model</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RPanelModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>view</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RPanelView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>model</name></name> <operator>||</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>view</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__free_menu_item</name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>n_sub</name></name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier><modifier>*</modifier></type><name>sub</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>sub</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanelsMenuItem</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>p_item</name><operator>-&gt;</operator><name>n_sub</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sub</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>sub</name></name> <operator>=</operator> <name>sub</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name><name>p_item</name><operator>-&gt;</operator><name>n_sub</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__free_menu_item</name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__update_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <name>RPanelMenuUpdateCallback</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>ht_pp_find</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>mht</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><operator>(</operator><name>RPanelsMenuItem</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_item</name><operator>-&gt;</operator><name>n_sub</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name><name>p_item</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ht_pp_delete</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>mht</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>sub</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>n_sub</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cb</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name><name>panels</name><operator>-&gt;</operator><name>panels_menu</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__update_menu_contents</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>, <argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__del_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name><name>panels</name><operator>-&gt;</operator><name>panels_menu</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name><operator>--</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>menu</name><operator>-&gt;</operator><name>depth</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>refreshPanels</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>n_refresh</name></name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>RStrBuf</name> <modifier>*</modifier></type><name>__draw_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>item</name><operator>-&gt;</operator><name>n_sub</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>item</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s&gt; %s"</literal><name>Color_RESET</name></expr></argument>,

<argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_box2</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__update_menu_contents</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>__draw_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_w</name> <init>= <expr><call><name>r_str_bounds</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>new_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PANEL_TYPE_MENU</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>refreshPanels</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>n_refresh</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__init_menu_saved_layout</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir_path</name> <init>= <expr><call><name>__get_panels_config_dir_path</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>r_sys_dir</name> <argument_list>(<argument><expr><name>dir_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dir_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>_core</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>dir</argument>, <argument>it</argument>, <argument>entry</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>__load_layout_saved_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dir_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__init_menu_color_settings_layout</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>_core</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_box2</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>now</name> <init>= <expr><call><name>r_core_cmd_str</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"eco."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_split</name> <argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <literal type="string">"Settings.Colors"</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>__sorted_list</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>menus_Colors</name></expr></argument>, <argument><expr><call><name>COUNT</name> <argument_list>(<argument><expr><name>menus_Colors</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>pos</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__settings_colors_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>__settings_colors_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__init_menu_disasm_settings_layout</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>_core</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>__sorted_list</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>menus_settings_disassembly</name></expr></argument>, <argument><expr><call><name>COUNT</name> <argument_list>(<argument><expr><name>menus_settings_disassembly</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>rsb</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>pos</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="string">"asm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>__open_menu_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__init_menu_disasm_asm_settings_layout</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Settings.Disassembly.asm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>, <argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__config_toggle_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__init_menu_disasm_asm_settings_layout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>_core</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>__sorted_list</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>menus_settings_disassembly_asm</name></expr></argument>, <argument><expr><call><name>COUNT</name> <argument_list>(<argument><expr><name>menus_settings_disassembly_asm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>rsb</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>pos</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>, <argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="string">"asm.var.summary"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="string">"asm.cpu"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__config_value_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__config_toggle_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__init_menu_screen_settings_layout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>_core</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>rsb</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>menus_settings_screen</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name><name>menus_settings_screen</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>, <argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_settings_screen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__config_value_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__config_toggle_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__init_panels_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>panels_menu</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RPanelsMenu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>panels_menu</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RPanelsMenuItem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>root</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>panels_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>panels_menu</name></name> <operator>=</operator> <name>panels_menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels_menu</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>n_sub</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>sub</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__load_config_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>menus</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>menus</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__open_menu_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><literal type="string">"File"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>menus_File</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_File</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Open"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_File</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__open_file_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_File</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ReOpen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_File</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__open_menu_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_File</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Close"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_File</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__close_file_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_File</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Save Layout"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_File</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__save_layout_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_File</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Load Layout"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_File</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__open_menu_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_File</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Clear Saved Layouts"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_File</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__clear_layout_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_File</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Quit"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_File</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__quit_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_File</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__add_cmd_panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <literal type="string">"Settings"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>menus_Settings</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Settings</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>__open_menu_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <literal type="string">"Edit"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Copy"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__copy_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Paste"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__paste_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Write String"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__write_str_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Write Hex"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__write_hex_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Write Value"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__writeValueCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Assemble"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__assemble_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Fill"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__fill_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"io.cache"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__open_menu_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Edit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__add_cmd_panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<block>{<block_content>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <literal type="string">"View"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>__sorted_list</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>menus_View</name></expr></argument>, <argument><expr><call><name>COUNT</name> <argument_list>(<argument><expr><name>menus_View</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>pos</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>PANEL_TITLE_ALL_DECOMPILER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>__show_all_decompiler_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>__add_cmd_panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

</block_content>}</block>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <literal type="string">"Tools"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>menus_Tools</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Tools</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Calculator"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Tools</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__calculator_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Tools</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"R2 Shell"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Tools</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__r2_shell_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Tools</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"System Shell"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Tools</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__system_shell_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <literal type="string">"Search"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>menus_Search</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Search</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"String (Whole Bin)"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Search</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__string_whole_bin_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Search</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"String (Data Sections)"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Search</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__string_data_sec_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Search</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ROP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Search</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__rop_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Search</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Code"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Search</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__code_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Search</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Hexpairs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Search</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__hexpairs_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <literal type="string">"Emulate"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>menus_Emulate</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Emulate</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Step From"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Emulate</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__esil_init_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Emulate</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Step To"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Emulate</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__esil_step_to_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Emulate</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Step Range"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Emulate</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__esil_step_range_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<block>{<block_content>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <literal type="string">"Debug"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>__sorted_list</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>menus_Debug</name></expr></argument>, <argument><expr><call><name>COUNT</name> <argument_list>(<argument><expr><name>menus_Debug</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>pos</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="string">"Breakpoints"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>__break_points_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="string">"Watchpoints"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>__watch_points_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="string">"Continue"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>__continue_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="string">"Step"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>__step_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="string">"Step Over"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>__step_over_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="string">"Reload"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>__reload_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>__add_cmd_panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

</block_content>}</block>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <literal type="string">"Analyze"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>menus_Analyze</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Analyze</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Function"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Analyze</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__function_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Analyze</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Symbols"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Analyze</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__symbols_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Analyze</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Program"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Analyze</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__program_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Analyze</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"BasicBlocks"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Analyze</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__basic_blocks_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Analyze</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Calls"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Analyze</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__calls_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Analyze</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"References"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Analyze</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__references_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <literal type="string">"Help"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>menus_Help</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Help</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"License"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Help</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__license_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Help</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Version"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Help</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__version_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Help</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Fortune"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Help</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__fortune_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_Help</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"2048"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Help</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__game_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_Help</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__help_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <literal type="string">"File.ReOpen"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>menus_ReOpen</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_ReOpen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"In RW"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_ReOpen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__rw_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_ReOpen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"In Debugger"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_ReOpen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__debugger_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <literal type="string">"File.Load Layout"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>menus_loadLayout</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_loadLayout</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Saved"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_loadLayout</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__open_menu_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_loadLayout</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Default"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_loadLayout</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__load_layout_default_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>__init_menu_saved_layout</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"File.Load Layout.Saved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__init_menu_color_settings_layout</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Settings.Colors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <literal type="string">"Settings.Decompiler"</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><call><name>r_core_cmd_str</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"e cmd.pdc=?"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>optl</name> <init>= <expr><call><name>r_str_split_list</name> <argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>optl</argument>, <argument>iter</argument>, <argument>opt</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__settings_decompiler_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>optl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>__init_menu_disasm_settings_layout</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Settings.Disassembly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__init_menu_screen_settings_layout</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Settings.Screen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <literal type="string">"Edit.io.cache"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>menus_iocache</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_iocache</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"On"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_iocache</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__io_cache_on_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>menus_iocache</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Off"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__add_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menus_iocache</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>__io_cache_off_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>panels_menu</name><operator>-&gt;</operator><name>history</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanelsMenuItem</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__clear_panels_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels_menu</name><operator>-&gt;</operator><name>refreshPanels</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmpstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>_b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>__sorted_list</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>menu</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>menu</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>cmpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__clear_panels_menuRec</name><parameter_list>(<parameter><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>pmi</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pmi</name><operator>-&gt;</operator><name>n_sub</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name><name>pmi</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sub</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>selectedIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__clear_panels_menuRec</name> <argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__clear_panels_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>pm</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>panels_menu</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__clear_panels_menuRec</name> <argument_list>(<argument><expr><name><name>pm</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pm</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>selectedIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pm</name><operator>-&gt;</operator><name>history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pm</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pm</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pm</name><operator>-&gt;</operator><name>n_refresh</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__init_panels</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanel</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>PANEL_NUM_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>panels</name><operator>-&gt;</operator><name>panel</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PANEL_NUM_LIMIT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RPanel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>model</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RPanelModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__renew_filter</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>PANEL_NUM_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>view</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RPanelView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>model</name> <operator>||</operator> <operator>!</operator><name><name>panels</name><operator>-&gt;</operator><name>panel</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>view</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RModal</name> <modifier>*</modifier></type><name>__init_modal</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RModal</name> <modifier>*</modifier></type><name>modal</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RModal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>modal</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__set_pos</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>modal</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>modal</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>modal</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>modal</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__free_panel_model</name><parameter_list>(<parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmdStrCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>readOnly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__free_modal</name><parameter_list>(<parameter><decl><type><name>RModal</name> <modifier>*</modifier><modifier>*</modifier></type><name>modal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>*</operator><name>modal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>modal</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__free_menu_item</name><parameter_list>(<parameter><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>view</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>item</name><operator>-&gt;</operator><name>n_sub</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>__free_menu_item</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>sub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__refresh_core_offset</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>demo_begin</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_cons_canvas_to_string</name> <argument_list>(<argument><expr><name>can</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_ansi_filter</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>i</name><operator>/</operator><literal type="number">30</literal><operator>)</operator><operator>)</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>H</name> <init>= <expr><name>i</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>h</name> <operator>/</operator> <literal type="number">40</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_str_scale</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>H</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_clear00</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>h</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>H</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sys_usleep</name> <argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>demo_end</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>utf8</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.utf8"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.utf8"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>firstRun</name><operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__panels_refresh</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>firstRun</name><operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.utf8"</literal></expr></argument>, <argument><expr><name>utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_cons_canvas_to_string</name> <argument_list>(<argument><expr><name>can</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_ansi_filter</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>h</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>H</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_str_scale</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>H</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_clear00</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>h</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>H</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sys_usleep</name> <argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_sys_usleep</name> <argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__panels_refresh</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>panels</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name> <init>= <expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>can</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_cons_canvas_resize</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>utf8</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.utf8"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>firstRun</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.utf8"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__refresh_core_offset</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_refresh_all</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__panel_print</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>can</name></expr></argument>, <argument><expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_MENU</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__panel_print</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>can</name></expr></argument>, <argument><expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__panel_print</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>can</name></expr></argument>, <argument><expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>panels_menu</name><operator>-&gt;</operator><name>n_refresh</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>__panel_print</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>can</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>panels_menu</name><operator>-&gt;</operator><name>refreshPanels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>panels_menu</name><operator>-&gt;</operator><name>n_refresh</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_cons_canvas_gotoxy</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><operator>-</operator><name><name>can</name><operator>-&gt;</operator><name>sx</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>can</name><operator>-&gt;</operator><name>sy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_fill</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><operator>-</operator><name><name>can</name><operator>-&gt;</operator><name>sx</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>can</name><operator>-&gt;</operator><name>sy</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_box2</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_ZOOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">"%s Zoom Mode | Press Enter or q to quit"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_WINDOW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">"%s Window Mode | hjkl: move around the panels | q: quit the mode | Enter: Zoom mode"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>panels</name><operator>-&gt;</operator><name>panels_menu</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>parent</name><operator>-&gt;</operator><name>n_sub</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_MENU</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">"%s[%s]"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">" %s "</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_MENU</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name>Color_BLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">"[0x%08"</literal><name>PFMT64x</name> <literal type="string">"]"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><name><name>can</name><operator>-&gt;</operator><name>sx</name></name> <operator>+</operator> <name>w</name> <operator>-</operator> <call><name>r_strbuf_length</name> <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_cons_canvas_gotoxy</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>-</operator><name><name>can</name><operator>-&gt;</operator><name>sy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tab_pos</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>panels</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>panels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>panels</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>cur_panels</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">"%s[%d] "</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">"%s[%s] "</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>tab_pos</name> <operator>-=</operator> <call><name>r_str_ansi_len</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>tab_pos</name> <operator>-=</operator> <call><name>r_strbuf_length</name> <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_cons_canvas_gotoxy</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name>tab_pos</name></expr></argument>, <argument><expr><operator>-</operator><name><name>can</name><operator>-&gt;</operator><name>sy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">"Tab "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tab_pos</name> <operator>-=</operator> <call><name>r_strbuf_length</name> <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_cons_canvas_gotoxy</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name>tab_pos</name></expr></argument>, <argument><expr><operator>-</operator><name><name>can</name><operator>-&gt;</operator><name>sy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>==</operator> <name>PANEL_FUN_SNOW</name> <operator>||</operator> <name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>==</operator> <name>PANEL_FUN_SAKURA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__print_snow</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>firstRun</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.demo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>demo_begin</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>can</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>firstRun</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.utf8"</literal></expr></argument>, <argument><expr><name>utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__panels_refresh</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_print</name> <argument_list>(<argument><expr><name>can</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>scr_gadgets</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>fps</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_print_fps</name> <argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__do_panels_resize</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>edge</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>PANEL_EDGE_BOTTOM</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>&lt;</operator> <name>h</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>h</name> <operator>-</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>edge</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>PANEL_EDGE_RIGHT</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>&lt;</operator> <name>w</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>w</name> <operator>-</operator> <name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>__do_panels_refresh</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__do_panels_refresh</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__panel_all_clear</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__panels_layout_refresh</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__do_panels_refreshOneShot</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_task_enqueue_oneshot</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>core</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><operator>(</operator><name>RCoreTaskOneShot</name><operator>)</operator> <name>__do_panels_resize</name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__panel_single_step_in</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"ds"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">".dr*"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"aes"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">".ar*"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__panel_single_step_over</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>io_cache</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.cache"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.cache"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"dso"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">".dr*"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"aeso"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">".ar*"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.cache"</literal></expr></argument>, <argument><expr><name>io_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__panel_breakpoint</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"dbs $$"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__panel_continue</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"dc"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__panels_check_stackbase</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><call><name>r_reg_get_name</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>R_REG_NAME_SP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sp</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>stackbase</name> <init>= <expr><call><name>r_reg_getv</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name> <operator>&amp;&amp;</operator> <call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_CMD_STACK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>baseAddr</name></name> <operator>!=</operator> <name>stackbase</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>baseAddr</name></name> <operator>=</operator> <name>stackbase</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>stackbase</name> <operator>-</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"stack.delta"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__init_rotate_db</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>rotate_db</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"pd"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>__rotate_disasm_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"p=="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>__rotate_entropy_h_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"p="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>__rotate_entropy_v_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"px"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>__rotate_hexdump_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"dr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>__rotate_register_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"af"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>__rotate_function_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>PANEL_CMD_HEXDUMP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>__rotate_hexdump_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__init_sdb</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>db</name><init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Symbols"</literal></expr></argument>, <argument><expr><literal type="string">"isq"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Stack"</literal></expr></argument> , <argument><expr><literal type="string">"px 256@r:SP"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Locals"</literal></expr></argument>, <argument><expr><literal type="string">"afvd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Registers"</literal></expr></argument>, <argument><expr><literal type="string">"dr"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"RegisterRefs"</literal></expr></argument>, <argument><expr><literal type="string">"drr"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Disassembly"</literal></expr></argument>, <argument><expr><literal type="string">"pd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Disassemble Summary"</literal></expr></argument>, <argument><expr><literal type="string">"pdsf"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Decompiler"</literal></expr></argument>, <argument><expr><literal type="string">"pdc"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Decompiler With Offsets"</literal></expr></argument>, <argument><expr><literal type="string">"pdco"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Graph"</literal></expr></argument>, <argument><expr><literal type="string">"agf"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Tiny Graph"</literal></expr></argument>, <argument><expr><literal type="string">"agft"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Info"</literal></expr></argument>, <argument><expr><literal type="string">"i"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Database"</literal></expr></argument>, <argument><expr><literal type="string">"k ***"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Console"</literal></expr></argument>, <argument><expr><literal type="string">"$console"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Hexdump"</literal></expr></argument>, <argument><expr><literal type="string">"xc $r*16"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Xrefs"</literal></expr></argument>, <argument><expr><literal type="string">"ax"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Xrefs Here"</literal></expr></argument>, <argument><expr><literal type="string">"ax."</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Functions"</literal></expr></argument>, <argument><expr><literal type="string">"afl"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Function Calls"</literal></expr></argument>, <argument><expr><literal type="string">"aflm"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Comments"</literal></expr></argument>, <argument><expr><literal type="string">"CC"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Entropy"</literal></expr></argument>, <argument><expr><literal type="string">"p=e 100"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Entropy Fire"</literal></expr></argument>, <argument><expr><literal type="string">"p==e 100"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"DRX"</literal></expr></argument>, <argument><expr><literal type="string">"drx"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Sections"</literal></expr></argument>, <argument><expr><literal type="string">"iSq"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Segments"</literal></expr></argument>, <argument><expr><literal type="string">"iSSq"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>PANEL_TITLE_STRINGS_DATA</name></expr></argument>, <argument><expr><literal type="string">"izq"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>PANEL_TITLE_STRINGS_BIN</name></expr></argument>, <argument><expr><literal type="string">"izzq"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Maps"</literal></expr></argument>, <argument><expr><literal type="string">"dm"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Modules"</literal></expr></argument>, <argument><expr><literal type="string">"dmm"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Backtrace"</literal></expr></argument>, <argument><expr><literal type="string">"dbt"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Breakpoints"</literal></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Imports"</literal></expr></argument>, <argument><expr><literal type="string">"iiq"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Clipboard"</literal></expr></argument>, <argument><expr><literal type="string">"yx"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"New"</literal></expr></argument>, <argument><expr><literal type="string">"o"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Var READ address"</literal></expr></argument>, <argument><expr><literal type="string">"afvR"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Var WRITE address"</literal></expr></argument>, <argument><expr><literal type="string">"afvW"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Summary"</literal></expr></argument>, <argument><expr><literal type="string">"pdsf"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Classes"</literal></expr></argument>, <argument><expr><literal type="string">"icq"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Methods"</literal></expr></argument>, <argument><expr><literal type="string">"ic"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Relocs"</literal></expr></argument>, <argument><expr><literal type="string">"ir"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Headers"</literal></expr></argument>, <argument><expr><literal type="string">"iH"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"File Hashes"</literal></expr></argument>, <argument><expr><literal type="string">"it"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__init_almighty_db</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>almighty_db</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>sdb_iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>sdb_list</name> <init>= <expr><call><name>sdb_foreach_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>sdb_list</argument>, <argument>sdb_iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>r_str_new</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>__create_panel_db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Search strings in data sections"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>__search_strings_data_create</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Search strings in the whole bin"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>__search_strings_bin_create</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Create New"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>__create_panel_input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Change Command of Current Panel"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>__replace_current_panel_input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>PANEL_TITLE_ALL_DECOMPILER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>__delegate_show_all_decompiler_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Put Breakpoints"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>__put_breakpoints_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Continue"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>__continue_almighty_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Step"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>__step_almighty_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Step Over"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>__step_over_almighty_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__init_all_dbs</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>__init_sdb</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__init_almighty_db</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__init_rotate_db</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__delegate_show_all_decompiler_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__show_all_decompiler_cb</name> <argument_list>(<argument><expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__create_panel_db</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__create_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__replace_current_panel_input</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>__show_status_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"New command: "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISNOTEMPTY</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__replace_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__create_panel_input</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>__show_status_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Command: "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__create_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__create_panel</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__check_panel_num</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>dir</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VERTICAL</name></expr>:</case>

<expr_stmt><expr><call><name>__split_panel_vertical</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HORIZONTAL</name></expr>:</case>

<expr_stmt><expr><call><name>__split_panel_horizontal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>NONE</name></expr>:</case>

<expr_stmt><expr><call><name>__replace_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__search_strings_data_create</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__create_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><call><name>__search_strings</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__search_strings_bin_create</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__create_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><call><name>__search_strings</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>__search_strings</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>whole</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><ternary><condition><expr><name>whole</name></expr> ?</condition><then> <expr><name>PANEL_TITLE_STRINGS_BIN</name></expr> </then><else>: <expr><name>PANEL_TITLE_STRINGS_DATA</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>__show_status_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Search Strings: "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>db_val</name> <init>= <expr><call><name>__search_db</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s~%s"</literal></expr></argument>, <argument><expr><name>db_val</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>db_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__put_breakpoints_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>__break_points_cb</name> <argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__continue_almighty_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>__continue_cb</name> <argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_disassembly_or_open</name> <argument_list>(<argument><expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__step_almighty_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>__step_cb</name> <argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__step_over_almighty_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_UNUSED</name> <name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>__step_over_cb</name> <argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__mht_free_kv</name><parameter_list>(<parameter><decl><type><name>HtPPKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__free_menu_item</name> <argument_list>(<argument><expr><operator>(</operator><name>RPanelsMenuItem</name> <operator>*</operator><operator>)</operator><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__init</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>panel</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>columnWidth</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>layout</name></name> <operator>=</operator> <name>PANEL_LAYOUT_DEFAULT_DYNAMIC</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>layout</name></name> <operator>=</operator> <name>PANEL_LAYOUT_DEFAULT_STATIC</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>autoUpdate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_on_edge_x</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_on_edge_y</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_orig_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>mouse_orig_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name> <operator>=</operator> <call><name>__create_new_canvas</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>rotate_db</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>almighty_db</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>mht</name></name> <operator>=</operator> <call><name>ht_pp_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HtPPKvFreeFunc</name><operator>)</operator><name>__mht_free_kv</name></expr></argument>, <argument><expr><operator>(</operator><name>HtPPCalcSizeV</name><operator>)</operator><name>strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>=</operator> <name>PANEL_FUN_NOFUN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>prevMode</name></name> <operator>=</operator> <name>PANEL_MODE_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">140</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>columnWidth</name></name> <operator>=</operator> <name>w</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__file_history_up</name><parameter_list>(<parameter><decl><type><name>RLine</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>line</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>files</name> <init>= <expr><call><name>r_id_storage_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_files</name> <init>= <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>file_hist_index</name></name> <operator>&gt;=</operator> <name>num_files</name> <operator>||</operator> <name><name>line</name><operator>-&gt;</operator><name>file_hist_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>file_hist_index</name></name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>num_files</name> <operator>-</operator> <name><name>line</name><operator>-&gt;</operator><name>file_hist_index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>R_LINE_BUFSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__file_history_down</name><parameter_list>(<parameter><decl><type><name>RLine</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>line</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>files</name> <init>= <expr><call><name>r_id_storage_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_files</name> <init>= <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>file_hist_index</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>line</name><operator>-&gt;</operator><name>file_hist_index</name></name> <operator>&gt;</operator> <name>num_files</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>file_hist_index</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>file_hist_index</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>num_files</name> <operator>-</operator> <name><name>line</name><operator>-&gt;</operator><name>file_hist_index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>R_LINE_BUFSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__handle_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenu</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name><name>panels</name><operator>-&gt;</operator><name>panels_menu</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>selectedIndex</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>selectedIndex</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>selectedIndex</name></name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>n_sub</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>]</index></name><operator>-&gt;</operator><call><name>cb</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__del_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><call><name><name>child</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>n_sub</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_menu_contents</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanelsMenuItem</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>history</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_menu_contents</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>selectedIndex</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>selectedIndex</name></name> <operator>%=</operator> <name><name>menu</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>n_sub</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>]</index></name><operator>-&gt;</operator><name>sub</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>]</index></name><operator>-&gt;</operator><call><name>cb</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>selectedIndex</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>selectedIndex</name></name> <operator>%=</operator> <name><name>menu</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>n_sub</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>selectedIndex</name></name></expr>]</index></name><operator>-&gt;</operator><call><name>cb</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>panels_menu</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__del_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'$'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"dr PC=$$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><call><name><name>child</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case>

<expr_stmt><expr><call><name>__handle_tab_key</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case>

<expr_stmt><expr><call><name>__handle_tab_key</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">':'</literal></expr>:</case>

<expr_stmt><expr><call><name>__handlePrompt</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>

<expr_stmt><expr><call><name>__toggle_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<expr_stmt><expr><call><name>__create_almighty</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>almighty_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__handle_console</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_CMD_CONSOLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prompt</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"[0x%08"</literal><name>PFMT64x</name><literal type="string">"]) "</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__panel_prompt</name> <argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"clear"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">":&gt;$console"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"?e %s %s&gt;&gt;$console"</literal></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"%s &gt;&gt;$console"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">":&gt;$console"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__handle_tab_key</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>shift</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>__set_cursor</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shift</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_MENU</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_ZOOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>++</operator><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>++</operator><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_MENU</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_ZOOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>--</operator><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>--</operator><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>==</operator> <name>PANEL_FUN_SNOW</name> <operator>||</operator> <name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>==</operator> <name>PANEL_FUN_SAKURA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__reset_snow</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__save_panel_pos</name><parameter_list>(<parameter><decl><type><name>RPanel</name><modifier>*</modifier></type> <name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>prevPos</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>,

<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__restore_panel_pos</name><parameter_list>(<parameter><decl><type><name>RPanel</name><modifier>*</modifier></type> <name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>prevPos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>prevPos</name><operator>.</operator><name>y</name></name></expr></argument>,

<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>prevPos</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>prevPos</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>__get_panels_config_dir_path</name><parameter_list>()</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_str_home</name> <argument_list>(<argument><expr><call><name>R_JOIN_2_PATHS</name> <argument_list>(<argument><expr><name>R2_HOME_DATADIR</name></expr></argument>, <argument><expr><literal type="string">".r2panels"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>__create_panels_config_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir_path</name> <init>= <expr><call><name>__get_panels_config_dir_path</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_sys_mkdirp</name> <argument_list>(<argument><expr><name>dir_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_path</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><call><name>R_JOIN_2_PATHS</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dir_path</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>dir_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>file_path</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>__get_panels_config_file_from_dir</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir_path</name> <init>= <expr><call><name>__get_panels_config_dir_path</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>r_sys_dir</name> <argument_list>(<argument><expr><name>dir_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir_path</name> <operator>||</operator> <operator>!</operator><name>dir</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dir_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>dir</argument>, <argument>it</argument>, <argument>entry</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dir_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><call><name>R_JOIN_2_PATHS</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dir_path</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dir_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_save_panels_layout</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oname</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>oname</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISEMPTY</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>__show_status_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Name for the layout: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISEMPTY</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__show_status</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Name can't be empty!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>config_path</name> <init>= <expr><call><name>__create_panels_config_path</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name> <init>= <expr><call><name>pj_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Title"</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Cmd"</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>, <argument><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>r_sandbox_fopen</name> <argument_list>(<argument><expr><name>config_path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pjs</name> <init>= <expr><call><name>pj_drain</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>pjs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pjs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"File.Load Layout.Saved"</literal></expr></argument>, <argument><expr><name>__init_menu_saved_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__show_status</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"Panels layout saved!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>__parse_panels_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISEMPTY</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_str_newlen</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>tmp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__load_config_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>themes_list</name> <init>= <expr><call><name>r_core_list_themes</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>th_iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>themes_list</argument>, <argument>th_iter</argument>, <argument>th</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name><name>menus_Colors</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_load_panels_layout</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>config_path</name> <init>= <expr><call><name>__get_panels_config_file_from_dir</name> <argument_list>(<argument><expr><name>_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config_path</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"No saved layout found for the name: %s"</literal></expr></argument>, <argument><expr><name>_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__show_status</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>panels_config</name> <init>= <expr><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>config_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>panels_config</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"Layout is empty: %s"</literal></expr></argument>, <argument><expr><name>_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__show_status</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__panel_all_clear</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>w</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>h</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_cfg</name> <init>= <expr><name>panels_config</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp_cfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>tmp_count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_cfg</name> <operator>=</operator> <call><name>__parse_panels_config</name> <argument_list>(<argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>p_cfg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_count</name> <operator>=</operator> <call><name>r_str_split</name> <argument_list>(<argument><expr><name>tmp_cfg</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tmp_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISEMPTY</name> <argument_list>(<argument><expr><name>tmp_cfg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>title</name> <operator>=</operator> <call><name>sdb_json_get_str</name> <argument_list>(<argument><expr><name>tmp_cfg</name></expr></argument>, <argument><expr><literal type="string">"Title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>sdb_json_get_str</name> <argument_list>(<argument><expr><name>tmp_cfg</name></expr></argument>, <argument><expr><literal type="string">"Cmd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_str_arg_unescape</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdb_json_get_str</name> <argument_list>(<argument><expr><name>tmp_cfg</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>sdb_json_get_str</name> <argument_list>(<argument><expr><name>tmp_cfg</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>sdb_json_get_str</name> <argument_list>(<argument><expr><name>tmp_cfg</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>sdb_json_get_str</name> <argument_list>(<argument><expr><name>tmp_cfg</name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><call><name>atoi</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>atoi</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__init_panel_param</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"Help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><literal type="string">"Help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"Help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>rsb</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_visual_append_help</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>, <argument><expr><literal type="string">"Visual Ascii Art Panels"</literal></expr></argument>, <argument><expr><name>help_msg_panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rsb</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__set_read_only</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>rsb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp_cfg</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>tmp_cfg</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_cfg</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>p_cfg</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>panels_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__set_refresh_all</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__maximize_panel_size</name><parameter_list>(<parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__toggle_zoom_mode</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>PANEL_MODE_ZOOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>prevMode</name></name> <operator>=</operator> <name><name>panels</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_ZOOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__save_panel_pos</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__maximize_panel_size</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>prevMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>prevMode</name></name> <operator>=</operator> <name>PANEL_MODE_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__restore_panel_pos</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>==</operator> <name>PANEL_FUN_SNOW</name> <operator>||</operator> <name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>==</operator> <name>PANEL_FUN_SAKURA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__reset_snow</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__toggle_window_mode</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>PANEL_MODE_WINDOW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>prevMode</name></name> <operator>=</operator> <name><name>panels</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_WINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>prevMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>prevMode</name></name> <operator>=</operator> <name>PANEL_MODE_DEFAULT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__toggle_cache</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__toggle_help</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"Help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__dismantle_del_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_MENU</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>__add_help_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_MENU</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__update_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_breakpoints_on_cursor</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"dbs 0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__insert_value</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.cache"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>__show_status_yesno</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Insert is not available because io.cache is off. Turn on now?(Y/n)"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.cache"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__show_status</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"io.cache is on and insert is available now."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>__show_status</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"You can always turn on io.cache in Menu-&gt;Edit-&gt;io.cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_STACK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name> <init>= <expr><literal type="string">"insert hex: "</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__panel_prompt</name> <argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"wx %s @ 0x%08"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_REGISTERS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>creg</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>creg</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>creg</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name> <init>= <expr><literal type="string">"new-reg-value&gt; "</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__panel_prompt</name> <argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"dr %s = %s"</literal></expr></argument>, <argument><expr><name>creg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name> <init>= <expr><literal type="string">"insert hex: "</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__panel_prompt</name> <argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"wx %s @ 0x%08"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_HEXDUMP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name> <init>= <expr><literal type="string">"insert hex: "</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__panel_prompt</name> <argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"wx %s @ 0x%08"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>RPanels</name> <modifier>*</modifier></type><name>__panels_new</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RPanels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>panels</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>firstRun</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__init</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panels</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>panels</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__renew_filter</name><parameter_list>(<parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>n_filter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__move_to_direction</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>Direction</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_x0</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></init></decl>, <decl><type ref="prev"/><name>cur_x1</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur_y0</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></init></decl>, <decl><type ref="prev"/><name>cur_y1</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp_x0</name></decl>, <decl><type ref="prev"/><name>temp_x1</name></decl>, <decl><type ref="prev"/><name>temp_y0</name></decl>, <decl><type ref="prev"/><name>temp_y1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>temp_x0</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_x1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_y0</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_y1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>direction</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LEFT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>temp_x1</name> <operator>==</operator> <name>cur_x0</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>temp_y1</name> <operator>&lt;=</operator> <name>cur_y0</name> <operator>||</operator> <name>cur_y1</name> <operator>&lt;=</operator> <name>temp_y0</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>RIGHT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>temp_x0</name> <operator>==</operator> <name>cur_x1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>temp_y1</name> <operator>&lt;=</operator> <name>cur_y0</name> <operator>||</operator> <name>cur_y1</name> <operator>&lt;=</operator> <name>temp_y0</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>UP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>temp_y1</name> <operator>==</operator> <name>cur_y0</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>temp_x1</name> <operator>&lt;=</operator> <name>cur_x0</name> <operator>||</operator> <name>cur_x1</name> <operator>&lt;=</operator> <name>temp_x0</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>DOWN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>temp_y0</name> <operator>==</operator> <name>cur_y1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>temp_x1</name> <operator>&lt;=</operator> <name>cur_x0</name> <operator>||</operator> <name>cur_x1</name> <operator>&lt;=</operator> <name>temp_x0</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__update_modal</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>menu_db</name></decl></parameter>, <parameter><decl><type><name>RModal</name> <modifier>*</modifier></type><name>modal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name> <init>= <expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>modal</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>sdb_count</name> <argument_list>(<argument><expr><name>menu_db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>modal</name><operator>-&gt;</operator><name>idx</name></name> <operator>&gt;=</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>modal</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>modal</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>modal</name><operator>-&gt;</operator><name>idx</name></name> <operator>&gt;=</operator> <name><name>modal</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>modal</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>modal</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>modal</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>&gt;=</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>modal</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>modal</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>modal</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>modal</name><operator>-&gt;</operator><name>idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>modal</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name>count</name> <operator>-</operator> <name><name>modal</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>modal</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>modal</name><operator>-&gt;</operator><name>idx</name></name> <operator>&lt;</operator> <name><name>modal</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>modal</name><operator>-&gt;</operator><name>offset</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>sdb_foreach_list</name> <argument_list>(<argument><expr><name>menu_db</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_h</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>modal</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>modal</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>l</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>__draw_modal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>modal</name></expr></argument>, <argument><expr><name>max_h</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_fill</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name><name>modal</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>modal</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>modal</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>modal</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_cons_canvas_gotoxy</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name><name>modal</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>modal</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_write</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>modal</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name><name>modal</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_box</name> <argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><name><name>modal</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>modal</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>modal</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>modal</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_box2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_print</name> <argument_list>(<argument><expr><name>can</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>__draw_modal</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RModal</name> <modifier>*</modifier></type><name>modal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>range_end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <name><name>modal</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>range_end</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name><name>modal</name><operator>-&gt;</operator><name>idx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>modal</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"&gt; %s%s"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_box2</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>modal</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name><name>modal</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">" \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__create_almighty</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>menu_db</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>__set_cursor</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>can</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name>w</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>can</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>h</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RModal</name> <modifier>*</modifier></type><name>modal</name> <init>= <expr><call><name>__init_modal</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_geometry</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>modal</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>okey</name></decl>, <decl><type ref="prev"/><name>key</name></decl>, <decl><type ref="prev"/><name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>word</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__update_modal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>menu_db</name></expr></argument>, <argument><expr><name>modal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>modal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>okey</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>r_cons_arrow_to_hjkl</name> <argument_list>(<argument><expr><name>okey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>word</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>INT8_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_get_click</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cx</name> <operator>&lt;</operator> <name>x</name> <operator>||</operator> <name>x</name> <operator>+</operator> <name>w</name> <operator>&lt;</operator> <name>cx</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>cy</name> <operator>&lt;</operator> <name>y</name> <operator>||</operator> <name>y</name> <operator>+</operator> <name>h</name> <operator>&lt;</operator> <name>cy</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <literal type="char">'q'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>word</name> <operator>=</operator> <call><name>get_word_from_canvas_for_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>word</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>sdb_ptr_get</name> <argument_list>(<argument><expr><name>menu_db</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>RPanelAlmightyCallback</name><operator>)</operator><name>cb</name><operator>)</operator> <operator>(</operator><name>core</name><operator>,</operator> <name>panel</name><operator>,</operator> <name>NONE</name><operator>,</operator> <name>word</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__free_modal</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>modal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>__free_modal</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>modal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>__show_status_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"New command: "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISNOTEMPTY</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__replace_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><name><name>modal</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_modal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>menu_db</name></expr></argument>, <argument><expr><name>modal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>

<expr_stmt><expr><name><name>modal</name><operator>-&gt;</operator><name>idx</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_modal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>menu_db</name></expr></argument>, <argument><expr><name>modal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<expr_stmt><expr><call><name>__exec_almighty</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>modal</name></expr></argument>, <argument><expr><name>menu_db</name></expr></argument>, <argument><expr><name>VERTICAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__free_modal</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>modal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<expr_stmt><expr><call><name>__exec_almighty</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>modal</name></expr></argument>, <argument><expr><name>menu_db</name></expr></argument>, <argument><expr><name>HORIZONTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__free_modal</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>modal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0d</literal></expr>:</case>

<expr_stmt><expr><call><name>__exec_almighty</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>modal</name></expr></argument>, <argument><expr><name>menu_db</name></expr></argument>, <argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__free_modal</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>modal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><call><name>__delete_almighty</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>modal</name></expr></argument>, <argument><expr><name>menu_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__update_modal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>menu_db</name></expr></argument>, <argument><expr><name>modal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<expr_stmt><expr><call><name>__free_modal</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>modal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__exec_almighty</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><name>RModal</name> <modifier>*</modifier></type><name>modal</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>menu_db</name></decl></parameter>, <parameter><decl><type><name>RPanelLayout</name></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>sdb_foreach_list</name> <argument_list>(<argument><expr><name>menu_db</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>l</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>++</operator> <operator>==</operator> <name><name>modal</name><operator>-&gt;</operator><name>idx</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RPanelAlmightyCallback</name></type> <name>cb</name> <init>= <expr><call><name>sdb_ptr_get</name> <argument_list>(<argument><expr><name>menu_db</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cb</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__delete_almighty</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RModal</name> <modifier>*</modifier></type><name>modal</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>menu_db</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>sdb_foreach_list</name> <argument_list>(<argument><expr><name>menu_db</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>l</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>++</operator> <operator>==</operator> <name><name>modal</name><operator>-&gt;</operator><name>idx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_remove</name> <argument_list>(<argument><expr><name>menu_db</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__create_default_panels</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>panels_list</name> <init>= <expr><name>panels_static</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>layout</name></name> <operator>==</operator> <name>PANEL_LAYOUT_DEFAULT_DYNAMIC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>panels_list</name> <operator>=</operator> <name>panels_dynamic</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>panels_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>panels_list</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>db_val</name> <init>= <expr><call><name>__search_db</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__init_panel_param</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>db_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>db_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__rotate_panels</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelModel</name> <modifier>*</modifier></type><name>tmp_model</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rev</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp_model</name> <operator>=</operator> <name><name>first</name><operator>-&gt;</operator><name>model</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p0</name><operator>-&gt;</operator><name>model</name></name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>model</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>model</name></name> <operator>=</operator> <name>tmp_model</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp_model</name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>model</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p0</name><operator>-&gt;</operator><name>model</name></name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>model</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>first</name><operator>-&gt;</operator><name>model</name></name> <operator>=</operator> <name>tmp_model</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>__set_refresh_all</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__rotate_disasm_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>PANEL_CMD_DECOMPILER</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>PANEL_CMD_DECOMPILER_O</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rev</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotate</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotate</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotate</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_core_visual_applyDisMode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__rotate_asmemu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__rotate_panel_cmds</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cmds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>cmdslen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmdslen</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__reset_filter</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rev</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotate</name></name> <operator>=</operator> <name>cmdslen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotate</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotate</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>between</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotate</name></name> <operator>%</operator> <name>cmdslen</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>cmds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>between</name> <operator>=</operator> <call><name>r_str_between</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>between</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>replace</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>replace</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>replace</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>between</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>replace</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <call><name>r_str_dup</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>__set_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__rotate_entropy_v_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__rotate_panel_cmds</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>entropy_rotate</name></expr></argument>, <argument><expr><call><name>COUNT</name> <argument_list>(<argument><expr><name>entropy_rotate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"p="</literal></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__rotate_entropy_h_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__rotate_panel_cmds</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>entropy_rotate</name></expr></argument>, <argument><expr><call><name>COUNT</name> <argument_list>(<argument><expr><name>entropy_rotate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"p=="</literal></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__rotate_hexdump_cb</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rev</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotate</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotate</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_core_visual_applyHexMode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__rotate_asmemu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__rotate_register_cb</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__rotate_panel_cmds</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>register_rotate</name></expr></argument>, <argument><expr><call><name>COUNT</name> <argument_list>(<argument><expr><name>register_rotate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"dr"</literal></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__rotate_function_cb</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__rotate_panel_cmds</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>function_rotate</name></expr></argument>, <argument><expr><call><name>COUNT</name> <argument_list>(<argument><expr><name>function_rotate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"af"</literal></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__undo_seek</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIOUndos</name> <modifier>*</modifier></type><name>undo</name> <init>= <expr><call><name>r_io_sundo</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>undo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_visual_seek_animation</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>undo</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_filter</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>__show_status_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"filter word: "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>n_filter</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__reset_scroll_pos</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__reset_filter</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__renew_filter</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>, <argument><expr><name>PANEL_NUM_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panel</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__reset_scroll_pos</name> <argument_list>(<argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__redo_seek</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIOUndos</name> <modifier>*</modifier></type><name>undo</name> <init>= <expr><call><name>r_io_sundo_redo</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>undo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_visual_seek_animation</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>undo</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__rotate_asmemu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>isEmuStr</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"emu.str"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>isEmu</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.emu"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>isEmu</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>isEmuStr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"emu.str"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.emu"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"emu.str"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>fromVisual</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_core_visual_panels_root</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanelsRoot</name> <modifier>*</modifier></type><name>panels_root</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>fromVisual</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>vmode</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>panels_root</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>panels_root</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RPanelsRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>panels_root</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name></name> <operator>=</operator> <name>panels_root</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels_root</name><operator>-&gt;</operator><name>panels</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPanels</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>PANEL_NUM_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels_root</name><operator>-&gt;</operator><name>cur_panels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels_root</name><operator>-&gt;</operator><name>pdc_caches</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels_root</name><operator>-&gt;</operator><name>cur_pdc_cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_root_state</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__init_new_panels_root</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels_root</name><operator>-&gt;</operator><name>cur_panels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__init_new_panels_root</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pdc_now</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.pdc"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sdb_exists</name> <argument_list>(<argument><expr><name><name>panels_root</name><operator>-&gt;</operator><name>pdc_caches</name></name></expr></argument>, <argument><expr><name>pdc_now</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panels_root</name><operator>-&gt;</operator><name>cur_pdc_cache</name></name> <operator>=</operator> <call><name>sdb_ptr_get</name> <argument_list>(<argument><expr><name><name>panels_root</name><operator>-&gt;</operator><name>pdc_caches</name></name></expr></argument>, <argument><expr><call><name>r_str_new</name> <argument_list>(<argument><expr><name>pdc_now</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name> <init>= <expr><call><name>sdb_new0</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name><name>panels_root</name><operator>-&gt;</operator><name>pdc_caches</name></name></expr></argument>, <argument><expr><call><name>r_str_new</name> <argument_list>(<argument><expr><name>pdc_now</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels_root</name><operator>-&gt;</operator><name>cur_pdc_cache</name></name> <operator>=</operator> <name>sdb</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.layout"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>l</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"v %s"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>panels_root</name><operator>-&gt;</operator><name>panels</name><index>[<expr><name><name>panels_root</name><operator>-&gt;</operator><name>cur_panels</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>panels</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_root_state</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__panels_process</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>panels_root</name><operator>-&gt;</operator><name>panels</name><index>[<expr><name><name>panels_root</name><operator>-&gt;</operator><name>cur_panels</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_root_state</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>DEL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__del_panels</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_root_state</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>QUIT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_cons_enable_mouse</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fromVisual</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__init_new_panels_root</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanelsRoot</name> <modifier>*</modifier></type><name>panels_root</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><call><name>__panels_new</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>panels</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name> <operator>=</operator> <name>panels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels_root</name><operator>-&gt;</operator><name>panels</name><index>[<expr><name><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>panels</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__init_panels_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__init_panels</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__init_all_dbs</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__create_default_panels</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__panels_layout</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__set_root_state</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanelsRootState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>root_state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__del_panels</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanelsRoot</name> <modifier>*</modifier></type><name>panels_root</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>root_state</name></name> <operator>=</operator> <name>QUIT</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>panels_root</name><operator>-&gt;</operator><name>cur_panels</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>panels_root</name><operator>-&gt;</operator><name>panels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>panels_root</name><operator>-&gt;</operator><name>panels</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels_root</name><operator>-&gt;</operator><name>cur_panels</name></name> <operator>&gt;=</operator> <name><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panels_root</name><operator>-&gt;</operator><name>cur_panels</name></name> <operator>=</operator> <name><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>RPanels</name> <modifier>*</modifier></type><name>__get_panels</name><parameter_list>(<parameter><decl><type><name>RPanelsRoot</name> <modifier>*</modifier></type><name>panels_root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>panels_root</name> <operator>||</operator> <operator>(</operator><name>i</name> <operator>&gt;=</operator> <name>PANEL_NUM_LIMIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>panels_root</name><operator>-&gt;</operator><name>panels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__handle_tab</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>R_CONS_CLEAR_LINE</name><literal type="string">"%s[Tab] t:new T:new with current panel -:del =:name"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_box2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>R_CONS_CLEAR_LINE</name><literal type="string">"%s[Tab] [%d..%d]:select; p:prev; n:next; t:new T:new with current panel -:del =:name"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_box2</name></name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__handle_tab_nth</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><call><name>__handle_tab_next</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><call><name>__handle_tab_prev</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><call><name>__set_root_state</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>DEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><literal type="char">'='</literal></expr>:</case>

<expr_stmt><expr><call><name>__handle_tab_name</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><call><name>__handle_tab_new</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<expr_stmt><expr><call><name>__handle_tab_new_with_cur_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__handle_tab_nth</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>-=</operator> <literal type="char">'0'</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>cur_panels</name></name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;</operator> <name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>cur_panels</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_root_state</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ROTATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__handle_tab_next</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>cur_panels</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>cur_panels</name></name> <operator>%=</operator> <name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_root_state</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ROTATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__handle_print_rotate</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.pseudo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_toggle</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.pseudo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_toggle</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.esil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.esil"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_toggle</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.esil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_config_toggle</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.pseudo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__handle_tab_prev</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>cur_panels</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>cur_panels</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>cur_panels</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__set_root_state</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ROTATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__handle_tab_name</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>__show_status_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"tab name: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__handle_tab_new</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>&gt;=</operator> <name>PANEL_NUM_LIMIT</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__init_new_panels_root</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__handle_tab_new_with_cur_panel</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanelsRoot</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>PANEL_NUM_LIMIT</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>new_panels</name> <init>= <expr><call><name>__panels_new</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_panels</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>panels</name><index>[<expr><name><name>root</name><operator>-&gt;</operator><name>n_panels</name></name></expr>]</index></name> <operator>=</operator> <name>new_panels</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name> <operator>=</operator> <name>new_panels</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__init_panels_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>__init_panels</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>new_panels</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__init_all_dbs</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>new_panel</name> <init>= <expr><call><name>__get_panel</name> <argument_list>(<argument><expr><name>new_panels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__init_panel_param</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>new_panel</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_panel</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>funcName</name></name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>funcName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_cmd_str_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>new_panel</name></expr></argument>, <argument><expr><call><name>r_str_new</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmdStrCache</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__maximize_panel_size</name> <argument_list>(<argument><expr><name>new_panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__dismantle_del_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>cur_panels</name></name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>n_panels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>n_panels</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_root_state</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ROTATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__panel_prompt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_set_prompt</name> <argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_fgets</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_word_from_canvas</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RStrBuf</name></type> <name>rsb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cs</name> <init>= <expr><call><name>r_cons_canvas_to_string</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rsb</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>R</name> <init>= <expr><call><name>r_str_ansi_crop</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rsb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_ansi_filter</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_str_ansi_crop</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rsb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_ansi_filter</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>R</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOkENs</name></cpp:macro> <cpp:value>":=*+-/()[,] "</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><call><name>r_str_rsep</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>TOkENs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sp2</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_str_sep</name> <argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>TOkENs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sp2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sp2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_word_from_canvas_for_menu</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cs</name> <init>= <expr><call><name>r_cons_canvas_to_string</name> <argument_list>(<argument><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>R</name> <init>= <expr><call><name>r_str_ansi_crop</name> <argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_ansi_filter</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_str_ansi_crop</name> <argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_ansi_filter</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>padding</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>R</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name>R</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name> <argument_list>(<argument><expr><name>padding</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><call><name>R_STR_ISNOTEMPTY</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strncmp</name> <argument_list>(<argument><expr><name>padding</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_str_newlen</name> <argument_list>(<argument><expr><name>pos</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__panels_process</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>panels</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>panels</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>okey</name></decl>, <decl><type ref="prev"/><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelsRoot</name> <modifier>*</modifier></type><name>panels_root</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanels</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>panels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name> <operator>=</operator> <name>panels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>autoUpdate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name> <operator>=</operator> <call><name>__create_new_canvas</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_refresh_all</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>originCursor</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>originVmode</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>vmode</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>vmode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>layout</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.layout"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISNOTEMPTY</name> <argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_load_panels_layout</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>bool</name></type> <name>o_interactive</name> <init>= <expr><call><name>r_cons_is_interactive</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_set_interactive</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_visual_showcursor</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_enable_mouse</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>repeat</name>:</label>

<expr_stmt><expr><call><name>r_cons_enable_mouse</name> <argument_list>(<argument><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.wheel"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name> <operator>=</operator> <name>panels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>event_resize</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>event_data</name></name> <operator>=</operator> <name>core</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>event_resize</name></name> <operator>=</operator> <operator>(</operator><name>RConsEvent</name><operator>)</operator> <name>__do_panels_refreshOneShot</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__panels_layout_refresh</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>==</operator> <name>PANEL_FUN_SNOW</name> <operator>||</operator> <name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>==</operator> <name>PANEL_FUN_SAKURA</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_MENU</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>=</operator> <name>PANEL_FUN_NOFUN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__reset_snow</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>repeat</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>okey</name> <operator>=</operator> <call><name>r_cons_readchar_timeout</name> <argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>okey</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>repeat</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>okey</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>r_cons_arrow_to_hjkl</name> <argument_list>(<argument><expr><name>okey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__handle_mouse</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>panels_root</name><operator>-&gt;</operator><name>root_state</name></name> <operator>!=</operator> <name>DEFAULT</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<goto>goto <name>repeat</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_MENU</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__handle_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_root_state</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>QUIT</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>__check_root_state</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ROTATE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<goto>goto <name>repeat</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>__handle_cursor_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>repeat</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_ZOOM</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>__handle_zoom_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>repeat</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>PANEL_MODE_WINDOW</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>__handle_window_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>repeat</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="char">'0'</literal> <operator>&lt;</operator> <name>key</name> <operator>&amp;&amp;</operator> <name>key</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>ch</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_visual_jump</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>repeat</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name> <init>= <expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__handle_console</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>repeat</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<expr_stmt><expr><call><name>__undo_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>

<expr_stmt><expr><call><name>__redo_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><call><name>__rotate_panels</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>

<expr_stmt><expr><call><name>__rotate_panels</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>r_debug_reg_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><literal type="string">"PC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><literal type="string">"entry0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>

<expr_stmt><expr><call><name>__toggle_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_core_visual_browse</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">';'</literal></expr>:</case>

<expr_stmt><expr><call><name>__handleComment</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'$'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"dr PC=$$+%d"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"dr PC=$$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><call><name>__panel_single_step_in</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<expr_stmt><expr><call><name>__panel_single_step_over</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"graph.web"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"agv $$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__call_visual_graph</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">':'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_core_visual_prompt_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><call><name>__activate_cursor</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>color</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>can</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_refresh_all</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.hint.call"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"e!asm.hint.call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"e asm.hint.jmp=true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.hint.jmp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"e!asm.hint.jmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"e asm.hint.emu=true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.hint.emu"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"e!asm.hint.emu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"e asm.hint.lea=true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.hint.lea"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"e!asm.hint.lea"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"e asm.hint.call=true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"e asm.hint.call=true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.randpal"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"ecr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"ecn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>__do_panels_refresh</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>autoUpdate</name></name> <operator>=</operator> <call><name>__show_status_yesno</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Auto update On? (Y/n)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ocur</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_visual_asm</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name> <operator>=</operator> <name>ocur</name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_core_visual_define</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>

<expr_stmt><expr><call><name>__replace_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_TITLE_DISASSEMBLY</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>DOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>UP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'K'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>UP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'J'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>h</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>DOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'H'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>/</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>w</name></name> <operator>/</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<expr_stmt><expr><call><name>__set_filter</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>

<expr_stmt><expr><call><name>__reset_filter</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'_'</literal></expr>:</case>

<expr_stmt><expr><call><name>__hudstuff</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_core_visual_hud</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__create_almighty</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>almighty_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_root_state</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>ROTATE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><literal type="string">"Decomp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'O'</literal></expr>:</case>

<expr_stmt><expr><call><name>__handle_print_rotate</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_seek_next</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.nkey"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'N'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_seek_previous</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.nkey"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<expr_stmt><expr><call><name>__handle_refs</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

r_core_visual_refs (core, false, true);

cur-&gt;model-&gt;addr = core-&gt;offset;

set_refresh_all (panels, false);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>__dismantle_del_panel</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case> 

<expr_stmt><expr><call><name>__handle_tab_key</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case> 

<expr_stmt><expr><call><name>__handle_tab_key</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case>

<expr_stmt><expr><call><name>__handle_visual_mark</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>__show_status_input</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"New command: "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISNOTEMPTY</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__replace_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<expr_stmt><expr><call><name>__set_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_MODE_MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__clear_panels_menu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_core_visual_showcursor</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_visual_offset</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_visual_showcursor</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'G'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hl</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.highlight"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hl</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>hl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_switchbuf</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>directionCb</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"graph.web"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"agv $$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__call_visual_graph</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">']'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_HEXDUMP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"hex.cols"</literal></expr></argument>, <argument><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"hex.cols"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmtcol</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cmt.col"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cmt.col"</literal></expr></argument>, <argument><expr><name>cmtcol</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_HEXDUMP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"hex.cols"</literal></expr></argument>, <argument><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"hex.cols"</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmtcol</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cmt.col"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmtcol</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cmt.col"</literal></expr></argument>, <argument><expr><name>cmtcol</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'/'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"?i highlight;e scr.highlight=`yp`"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__swap_panels</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_curnode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotateCb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotateCb</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'I'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotateCb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>cur</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>rotateCb</name></name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>view</name><operator>-&gt;</operator><name>refresh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><call><name>__handle_tab</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>panels_root</name><operator>-&gt;</operator><name>root_state</name></name> <operator>!=</operator> <name>DEFAULT</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_root_state</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>DEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'w'</literal></expr>:</case>

<expr_stmt><expr><call><name>__toggle_window_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'W'</literal></expr>:</case>

<expr_stmt><expr><call><name>__move_panel_to_dir</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>panels</name><operator>-&gt;</operator><name>curnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0d</literal></expr>:</case> 

<expr_stmt><expr><call><name>__toggle_zoom_mode</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'|'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__split_panel_vertical</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__split_panel_horizontal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>__check_func</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_free</name> <argument_list>(<argument><expr><name>can</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__replace_cmd</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>PANEL_TITLE_DECOMPILER</name></expr></argument>, <argument><expr><name>PANEL_CMD_DECOMPILER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>can</name></name> <operator>=</operator> <call><name>__create_new_canvas</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'('</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>!=</operator> <name>PANEL_FUN_SNOW</name> <operator>&amp;&amp;</operator> <name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>!=</operator> <name>PANEL_FUN_SAKURA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>=</operator> <name>PANEL_FUN_SAKURA</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>panels</name><operator>-&gt;</operator><name>fun</name></name> <operator>=</operator> <name>PANEL_FUN_NOFUN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__reset_snow</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">')'</literal></expr>:</case>

<expr_stmt><expr><call><name>__rotate_asmemu</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>

<expr_stmt><expr><call><name>__toggle_cache</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>__get_cur_panel</name> <argument_list>(<argument><expr><name>panels</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CONS_KEY_F1</name></expr>:</case>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"key.f1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_CONS_KEY_F2</name></expr>:</case>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"key.f2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__panel_breakpoint</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_CONS_KEY_F3</name></expr>:</case>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"key.f3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_CONS_KEY_F4</name></expr>:</case>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"key.f4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_CONS_KEY_F5</name></expr>:</case>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"key.f5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_CONS_KEY_F6</name></expr>:</case>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"key.f6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_CONS_KEY_F7</name></expr>:</case>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"key.f7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__panel_single_step_in</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_CONS_KEY_F8</name></expr>:</case>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"key.f8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__panel_single_step_over</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_CONS_KEY_F9</name></expr>:</case>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"key.f9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>__check_panel_type</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>PANEL_CMD_DISASSEMBLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__panel_continue</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__set_panel_addr</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_CONS_KEY_F10</name></expr>:</case>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"key.f10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_CONS_KEY_F11</name></expr>:</case>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"key.f11"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_CONS_KEY_F12</name></expr>:</case>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"key.f12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case>

<expr_stmt><expr><call><name>__set_root_state</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>QUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

<case>case <expr><literal type="char">'!'</literal></expr>:</case>

<expr_stmt><expr><name>fromVisual</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><call><name>__set_root_state</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>DEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>panels_root</name><operator>-&gt;</operator><name>n_panels</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.demo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>demo_end</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>can</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>exit</name>;</goto>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

case 27: 

if (r_cons_readchar () == 91) {

if (r_cons_readchar () == 90) {}

}

break;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<goto>goto <name>repeat</name>;</goto>

<label><name>exit</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>originVmode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_visual_showcursor</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>event_resize</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>event_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>originCursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>vmode</name></name> <operator>=</operator> <name>originVmode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>panels</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_set_interactive</name> <argument_list>(<argument><expr><name>o_interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
