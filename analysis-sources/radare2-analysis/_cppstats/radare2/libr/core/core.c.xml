<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\core\core.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_socket.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB</name></cpp:macro> <cpp:value>core-&gt;sdb</cpp:value></cpp:define>

<expr_stmt><expr><call><name>R_LIB_VERSION</name><argument_list>(<argument><expr><name>r_core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name><name>letter_divs</name><index>[<expr><name>R_CORE_ASMQJMPS_LEN_LETTERS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>R_CORE_ASMQJMPS_LETTERS</name> <operator>*</operator> <name>R_CORE_ASMQJMPS_LETTERS</name> <operator>*</operator> <name>R_CORE_ASMQJMPS_LETTERS</name> <operator>*</operator> <name>R_CORE_ASMQJMPS_LETTERS</name></expr>,

<expr><name>R_CORE_ASMQJMPS_LETTERS</name> <operator>*</operator> <name>R_CORE_ASMQJMPS_LETTERS</name> <operator>*</operator> <name>R_CORE_ASMQJMPS_LETTERS</name></expr>,

<expr><name>R_CORE_ASMQJMPS_LETTERS</name> <operator>*</operator> <name>R_CORE_ASMQJMPS_LETTERS</name></expr>,

<expr><name>R_CORE_ASMQJMPS_LETTERS</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>r_core_is_project</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_fcn_new</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>_anal</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>_user</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator><name>_user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.fcn.new"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>oaddr</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>oaddr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_fcn_delete</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>_anal</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>_user</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator><name>_user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.fcn.delete"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>oaddr</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>oaddr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_fcn_rename</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>_anal</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>_user</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oname</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator><name>_user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.fcn.rename"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>oaddr</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>oaddr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_core_debug_breakpoint_hit</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>bpi</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdbp</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.bp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>cmdbp_exists</name> <init>= <expr><operator>(</operator><name>cmdbp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmdbp</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>bpcmd_exists</name> <init>= <expr><operator>(</operator><name><name>bpi</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>bpi</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>may_output</name> <init>= <expr><operator>(</operator><name>cmdbp_exists</name> <operator>||</operator> <name>bpcmd_exists</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>may_output</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_push</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdbp_exists</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmdbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bpcmd_exists</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>bpi</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>may_output</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_core_debug_syscall_hit</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdhit</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.onsyscall"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdhit</name> <operator>&amp;&amp;</operator> <name><name>cmdhit</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmdhit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<struct>struct <name>getreloc_t</name> <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>vaddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getreloc_tree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user2</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>getreloc_t</name></name> <modifier>*</modifier></type><name>gr</name> <init>= <expr><operator>(</operator>struct <name>getreloc_t</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RBinReloc</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>RBinReloc</name></expr></argument>, <argument><expr><name>vrb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&gt;=</operator> <name><name>gr</name><operator>-&gt;</operator><name>vaddr</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>gr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <name><name>gr</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>vaddr</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>vaddr</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinReloc</name> <modifier>*</modifier></type><name>r_core_getreloc</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>addr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>relocs</name> <init>= <expr><call><name>r_bin_get_relocs</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>relocs</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>getreloc_t</name></name></type> <name>gr</name> <init>= <expr><block>{ <expr><operator>.</operator><name>vaddr</name> <operator>=</operator> <name>addr</name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <name>size</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_rbtree_find</name> <argument_list>(<argument><expr><name>relocs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gr</name></expr></argument>, <argument><expr><name>getreloc_tree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>res</name></expr>?</condition><then> <expr><call><name>container_of</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>RBinReloc</name></expr></argument>, <argument><expr><name>vrb</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_core_get_asmqjmps</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>asmqjmps</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>is_asmqjmps_letter</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isupper</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>*=</operator> <name>R_CORE_ASMQJMPS_LETTERS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>islower</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>*=</operator> <name>R_CORE_ASMQJMPS_LETTERS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name><name>core</name><operator>-&gt;</operator><name>asmqjmps_count</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;=</operator> <name><name>core</name><operator>-&gt;</operator><name>asmqjmps_count</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name><modifier>*</modifier></type> <name>r_core_add_asmqjmp</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>asmqjmps</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>is_asmqjmps_letter</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps_count</name></name> <operator>&gt;=</operator> <name>R_CORE_ASMQJMPS_MAX_LETTERS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps_count</name></name> <operator>&gt;=</operator> <name><name>core</name><operator>-&gt;</operator><name>asmqjmps_size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps</name></name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps_size</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>asmqjmps</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps_size</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps_count</name></name> <operator>&lt;</operator> <name><name>core</name><operator>-&gt;</operator><name>asmqjmps_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>t</name><index>[<expr><name>R_CORE_ASMQJMPS_LEN_LETTERS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>core</name><operator>-&gt;</operator><name>asmqjmps_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>++</operator><name><name>core</name><operator>-&gt;</operator><name>asmqjmps_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_core_set_asmqjmps</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_set_asmqjmps</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>is_asmqjmps_letter</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>--</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_CORE_ASMQJMPS_LEN_LETTERS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>div</name> <init>= <expr><name>pos</name> <operator>/</operator> <name><name>letter_divs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>%=</operator> <name><name>letter_divs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>div</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'A'</literal> <operator>+</operator> <name>div</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>div</name> <init>= <expr><name>pos</name> <operator>%</operator> <name>R_CORE_ASMQJMPS_LETTERS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'a'</literal> <operator>+</operator> <name>div</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setab</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>arch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>, <argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getName</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>flags</name><operator>-&gt;</operator><name>realnames</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>realname</name></name></expr>

?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>realname</name></name></expr></then><else>: <expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>getNameDelta</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <name>addr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s + %d"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>addr</name> <operator>-</operator> <name><name>item</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>archbits</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_seek_arch_bits</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cfggeti</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cfgget</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>numget</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__isMapped</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;dbg-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>perm</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>perm</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_io_map_is_mapped</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__syncDebugMaps</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_debug_map_sync</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_bind</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RCoreBind</name> <modifier>*</modifier></type><name>bnd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>core</name></name> <operator>=</operator> <name>core</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>bphit</name></name> <operator>=</operator> <operator>(</operator><name>RCoreDebugBpHit</name><operator>)</operator><name>r_core_debug_breakpoint_hit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>syshit</name></name> <operator>=</operator> <operator>(</operator><name>RCoreDebugSyscallHit</name><operator>)</operator><name>r_core_debug_syscall_hit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <operator>(</operator><name>RCoreCmd</name><operator>)</operator><name>r_core_cmd0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>cmdf</name></name> <operator>=</operator> <operator>(</operator><name>RCoreCmdF</name><operator>)</operator><name>r_core_cmdf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>cmdstr</name></name> <operator>=</operator> <operator>(</operator><name>RCoreCmdStr</name><operator>)</operator><name>r_core_cmd_str</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>cmdstrf</name></name> <operator>=</operator> <operator>(</operator><name>RCoreCmdStrF</name><operator>)</operator><name>r_core_cmd_strf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>puts</name></name> <operator>=</operator> <operator>(</operator><name>RCorePuts</name><operator>)</operator><name>r_cons_strcat</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>setab</name></name> <operator>=</operator> <operator>(</operator><name>RCoreSetArchBits</name><operator>)</operator><name>setab</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>getName</name></name> <operator>=</operator> <operator>(</operator><name>RCoreGetName</name><operator>)</operator><name>getName</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>getNameDelta</name></name> <operator>=</operator> <operator>(</operator><name>RCoreGetNameDelta</name><operator>)</operator><name>getNameDelta</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>archbits</name></name> <operator>=</operator> <operator>(</operator><name>RCoreSeekArchBits</name><operator>)</operator><name>archbits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>cfggeti</name></name> <operator>=</operator> <operator>(</operator><name>RCoreConfigGetI</name><operator>)</operator><name>cfggeti</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>cfgGet</name></name> <operator>=</operator> <operator>(</operator><name>RCoreConfigGet</name><operator>)</operator><name>cfgget</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>numGet</name></name> <operator>=</operator> <operator>(</operator><name>RCoreNumGet</name><operator>)</operator><name>numget</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>isMapped</name></name> <operator>=</operator> <operator>(</operator><name>RCoreIsMapped</name><operator>)</operator><name>__isMapped</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>syncDebugMaps</name></name> <operator>=</operator> <operator>(</operator><name>RCoreDebugMapsSync</name><operator>)</operator><name>__syncDebugMaps</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RCore</name> <modifier>*</modifier></type><name>r_core_ncast</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RCore</name> <modifier>*</modifier></type><name>r_core_cast</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>core_post_write_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>maddr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>sec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>vaddr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.cmt.patch"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hex_pairs</name> <init>= <expr><call><name>r_hex_bin2strdup</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hex_pairs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"core_post_write_callback: Cannot obtain hex pairs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comment</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"patch: %d byte(s) (%s)"</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>hex_pairs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hex_pairs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>comment</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"core_post_write_callback: Cannot create comment\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sec</name> <operator>=</operator> <call><name>r_bin_get_section_at</name> <argument_list>(<argument><expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>maddr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vaddr</name> <operator>=</operator> <name>maddr</name> <operator>+</operator> <name><name>sec</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>-</operator> <name><name>sec</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>vaddr</name> <operator>=</operator> <name>maddr</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_meta_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>R_META_TYPE_COMMENT</name></expr></argument>, <argument><expr><name>vaddr</name></expr></argument>, <argument><expr><name>vaddr</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>core_cmd_callback</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>core_cmdstr_callback</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_core_cmd_str</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>getref</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalRef</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fcn</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>r_anal_function_get_refs</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>r_anal_function_get_xrefs</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>r</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>addr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>bbInstructions</name><parameter_list>(<parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn-&gt;bbs</argument>, <argument>iter</argument>, <argument>bb</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>R_BETWEEN</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>bb</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bb</name><operator>-&gt;</operator><name>ninstr</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>bbBegin</name><parameter_list>(<parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn-&gt;bbs</argument>, <argument>iter</argument>, <argument>bb</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>R_BETWEEN</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>bb</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>bbJump</name><parameter_list>(<parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn-&gt;bbs</argument>, <argument>iter</argument>, <argument>bb</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>R_BETWEEN</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>bb</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bb</name><operator>-&gt;</operator><name>jump</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>bbFail</name><parameter_list>(<parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn-&gt;bbs</argument>, <argument>iter</argument>, <argument>bb</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>R_BETWEEN</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>bb</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bb</name><operator>-&gt;</operator><name>fail</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>bbSize</name><parameter_list>(<parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn-&gt;bbs</argument>, <argument>iter</argument>, <argument>bb</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>R_BETWEEN</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>bb</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bb</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_callback</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>(</operator><name>RFlag</name><operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>num_callback</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>userptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>userptr</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalOp</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_num_tail</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>nc</name><operator>.</operator><name>curr_tok</name></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>nc</name><operator>.</operator><name>number_value</name><operator>.</operator><name>n</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>off</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_get_function_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>dst</name> <init>= <expr><call><name>r_anal_fcn_label_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>delta</name> <init>= <expr><name>dst</name> <operator>-</operator> <name>off</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>nc</name><operator>.</operator><name>curr_tok</name></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>off</name> <operator>-</operator> <name>dst</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>delta</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>n</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>refsz</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>refsz</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>r_num_calc_index</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>nc</name><operator>.</operator><name>errors</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_num_calc_index</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><name>R_EMPTY</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>refsz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>refsz</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<return>return <expr><call><name>r_read_ble64</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<return>return <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<return>return <expr><call><name>r_read_ble16</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<return>return <expr><call><name>r_read_ble8</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid reference size: %d (%s)\n"</literal></expr></argument>, <argument><expr><name>refsz</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'$'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_BASIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<switch>switch <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'.'</literal></expr>:</case> 

<return>return <expr><call><name>r_debug_reg_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'k'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Expected '{' after 'k'.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bptr</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>bptr</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>sdb_querys</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>out</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"$k{"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Recursivity is not permitted here\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<break>break;</break>

<case>case <expr><literal type="char">'{'</literal></expr>:</case> 

<expr_stmt><expr><name>bptr</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>bptr</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>ret</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>bptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> 

<return>return <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bptr</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>bptr</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_debug_reg_sync</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>bptr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_reg_get_value</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>bptr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_reg_get_value</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rows</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flagName</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flagLength</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>flagName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flagLength</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>flagName</name><index>[<expr><name>flagLength</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><call><name>r_flag_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>flagName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>flagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>flag</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>flag</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_anal_op_is_eob</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> 

<return>return <expr><name><name>op</name><operator>.</operator><name>jump</name></name></expr>;</return>

<case>case <expr><literal type="char">'p'</literal></expr>:</case> 

<return>return <expr><call><name>r_sys_getpid</name> <argument_list>()</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'P'</literal></expr>:</case> 

<return>return <expr><ternary><condition><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>pid</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>pid</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fi</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>fi</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>op</name><operator>.</operator><name>fail</name></name></expr>;</return>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> 

<return>return <expr><name><name>op</name><operator>.</operator><name>ptr</name></name></expr>;</return>

<case>case <expr><literal type="char">'B'</literal></expr>:</case> 

<case>case <expr><literal type="char">'M'</literal></expr>:</case> <block>{<block_content> 

<decl_stmt><decl><type><name>ut64</name></type> <name>lower</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>r_io_map_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>map</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lower</name> <operator>=</operator> <call><name>r_itv_begin</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>r_itv_size</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>clear_bits</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lower</name> <operator>&gt;&gt;=</operator> <name>clear_bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lower</name> <operator>&lt;&lt;=</operator> <name>clear_bits</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>lower</name> <operator>==</operator> <name>UT64_MAX</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0LL</literal></expr></then><else>: <expr><name>lower</name></expr></else></ternary></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> 

<return>return <expr><name><name>op</name><operator>.</operator><name>val</name></name></expr>;</return>

<case>case <expr><literal type="char">'l'</literal></expr>:</case> 

<return>return <expr><name><name>op</name><operator>.</operator><name>size</name></name></expr>;</return>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> 

<return>return <expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr>;</return>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>bptr</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>bptr</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><call><name>r_flag_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>bptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>flag</name></expr>?</condition><then> <expr><name><name>flag</name><operator>-&gt;</operator><name>size</name></name></expr></then><else>: <expr><literal type="number">0LL</literal></expr></else></ternary></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_io_fd_size</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

<case>case <expr><literal type="char">'w'</literal></expr>:</case> 

<return>return <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</return>

<case>case <expr><literal type="char">'S'</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>bo</name> <init>= <expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bo</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>=</operator> <call><name>r_bin_get_section_at</name> <argument_list>(<argument><expr><name>bo</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>vaddr</name></name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition> <block>{<block_content> 

<return>return <expr><call><name>r_debug_get_baddr</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>getref</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>atoi</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>R_ANAL_REF_TYPE_DATA</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;dbg-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'D'</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr></then><else>: <expr><name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0LL</literal></expr>;</return> 

<case>case <expr><literal type="char">'?'</literal></expr>:</case> 

<return>return <expr><name><name>core</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr>;</return> 

<case>case <expr><literal type="char">'$'</literal></expr>:</case> 

<return>return <expr><ternary><condition><expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr> ?</condition><then> <expr><name><name>core</name><operator>-&gt;</operator><name>prompt_offset</name></name></expr> </then><else>: <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'o'</literal></expr>:</case> <block>{<block_content> 

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_bin_get_section_at</name> <argument_list>(<argument><expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>paddr</name></name></expr> </then><else>: <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></else></ternary></expr>;</return>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'O'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur_enabled</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cur</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>

<case>case <expr><literal type="char">'C'</literal></expr>:</case> 

<return>return <expr><call><name>getref</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>atoi</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>R_ANAL_REF_TYPE_CALL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'J'</literal></expr>:</case> 

<return>return <expr><call><name>getref</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>atoi</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>R_ANAL_REF_TYPE_CODE</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'X'</literal></expr>:</case> 

<return>return <expr><call><name>getref</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>atoi</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><name>R_ANAL_REF_TYPE_CALL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'F'</literal></expr>:</case> 

<expr_stmt><expr><name>fcn</name> <operator>=</operator> <call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'B'</literal></expr>:</case> <return>return <expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr>;</return> 

<case>case <expr><literal type="char">'E'</literal></expr>:</case> <return>return <expr><call><name>r_anal_function_max_addr</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</return> 

<case>case <expr><literal type="char">'S'</literal></expr>:</case> <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>r_anal_function_realsize</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'I'</literal></expr>:</case> <return>return <expr><name><name>fcn</name><operator>-&gt;</operator><name>ninstr</name></name></expr>;</return>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <return>return <expr><call><name>bbBegin</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> <return>return <expr><call><name>bbBegin</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>bbSize</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> <return>return <expr><call><name>bbInstructions</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <return>return <expr><call><name>bbSize</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> <return>return <expr><call><name>bbJump</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</return> 

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <return>return <expr><call><name>bbFail</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</return> 

</block_content>}</block></switch>

<return>return <expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'A'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_get_function_byname</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

ut64 addr = r_anal_fcn_label_get (core-&gt;anal, core-&gt;offset, str);

if (addr != 0) {

ret = addr;

} else {

...

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>=</operator> <call><name>r_flag_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>flag</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_reg_item_t</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>role</name> <init>= <expr><call><name>r_reg_get_name_idx</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>role</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name> <init>= <expr><call><name>r_reg_get_name</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alias</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_reg_get_value</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_reg_get_value</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RCore</name> <modifier>*</modifier></type><name>r_core_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_init</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>radare_argc</name></cpp:macro> <cpp:value>(sizeof (radare_argv) / sizeof(const char*) - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ms_argc</name></cpp:macro> <cpp:value>(sizeof (ms_argv) / sizeof (const char*) - 1)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ms_argv</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"?"</literal></expr>, <expr><literal type="string">"!"</literal></expr>, <expr><literal type="string">"ls"</literal></expr>, <expr><literal type="string">"cd"</literal></expr>, <expr><literal type="string">"cat"</literal></expr>, <expr><literal type="string">"get"</literal></expr>, <expr><literal type="string">"mount"</literal></expr>, <expr><literal type="string">"help"</literal></expr>, <expr><literal type="string">"q"</literal></expr>, <expr><literal type="string">"exit"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>radare_argv</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"whereis"</literal></expr>, <expr><literal type="string">"which"</literal></expr>, <expr><literal type="string">"ls"</literal></expr>, <expr><literal type="string">"rm"</literal></expr>, <expr><literal type="string">"mkdir"</literal></expr>, <expr><literal type="string">"pwd"</literal></expr>, <expr><literal type="string">"cat"</literal></expr>, <expr><literal type="string">"sort"</literal></expr>, <expr><literal type="string">"uniq"</literal></expr>, <expr><literal type="string">"join"</literal></expr>, <expr><literal type="string">"less"</literal></expr>, <expr><literal type="string">"exit"</literal></expr>, <expr><literal type="string">"quit"</literal></expr>,

<expr><literal type="string">"#?"</literal></expr>, <expr><literal type="string">"#!"</literal></expr>, <expr><literal type="string">"#sha1"</literal></expr>, <expr><literal type="string">"#crc32"</literal></expr>, <expr><literal type="string">"#pcprint"</literal></expr>, <expr><literal type="string">"#sha256"</literal></expr>, <expr><literal type="string">"#sha512"</literal></expr>, <expr><literal type="string">"#md4"</literal></expr>, <expr><literal type="string">"#md5"</literal></expr>,

<expr><literal type="string">"#!python"</literal></expr>, <expr><literal type="string">"#!vala"</literal></expr>, <expr><literal type="string">"#!pipe"</literal></expr>,

<expr><literal type="string">"*?"</literal></expr>, <expr><literal type="string">"*"</literal></expr>, <expr><literal type="string">"$"</literal></expr>,

<expr><literal type="string">"("</literal></expr>, <expr><literal type="string">"(*"</literal></expr>, <expr><literal type="string">"(-"</literal></expr>, <expr><literal type="string">"()"</literal></expr>, <expr><literal type="string">".?"</literal></expr>, <expr><literal type="string">"."</literal></expr>, <expr><literal type="string">".."</literal></expr>, <expr><literal type="string">"..."</literal></expr>, <expr><literal type="string">".:"</literal></expr>, <expr><literal type="string">".--"</literal></expr>, <expr><literal type="string">".-"</literal></expr>, <expr><literal type="string">".!"</literal></expr>, <expr><literal type="string">".("</literal></expr>, <expr><literal type="string">"./"</literal></expr>, <expr><literal type="string">".*"</literal></expr>,

<expr><literal type="string">"_?"</literal></expr>, <expr><literal type="string">"_"</literal></expr>,

<expr><literal type="string">"=?"</literal></expr>, <expr><literal type="string">"="</literal></expr>, <expr><literal type="string">"=&lt;"</literal></expr>, <expr><literal type="string">"=!"</literal></expr>, <expr><literal type="string">"=+"</literal></expr>, <expr><literal type="string">"=-"</literal></expr>, <expr><literal type="string">"=="</literal></expr>, <expr><literal type="string">"=!="</literal></expr>, <expr><literal type="string">"!=!"</literal></expr>, <expr><literal type="string">"=:"</literal></expr>, <expr><literal type="string">"=&amp;:"</literal></expr>,

<expr><literal type="string">"=g?"</literal></expr>, <expr><literal type="string">"=g"</literal></expr>, <expr><literal type="string">"=g!"</literal></expr>, <expr><literal type="string">"=h?"</literal></expr>, <expr><literal type="string">"=h"</literal></expr>, <expr><literal type="string">"=h-"</literal></expr>, <expr><literal type="string">"=h--"</literal></expr>, <expr><literal type="string">"=h*"</literal></expr>, <expr><literal type="string">"=h&amp;"</literal></expr>, <expr><literal type="string">"=H?"</literal></expr>, <expr><literal type="string">"=H"</literal></expr>, <expr><literal type="string">"=H&amp;"</literal></expr>,

<expr><literal type="string">"&lt;"</literal></expr>,

<expr><literal type="string">"/?"</literal></expr>, <expr><literal type="string">"/"</literal></expr>, <expr><literal type="string">"/j"</literal></expr>, <expr><literal type="string">"/j!"</literal></expr>, <expr><literal type="string">"/j!x"</literal></expr>, <expr><literal type="string">"/+"</literal></expr>, <expr><literal type="string">"//"</literal></expr>, <expr><literal type="string">"/a"</literal></expr>, <expr><literal type="string">"/a1"</literal></expr>, <expr><literal type="string">"/ab"</literal></expr>, <expr><literal type="string">"/ad"</literal></expr>, <expr><literal type="string">"/aa"</literal></expr>, <expr><literal type="string">"/as"</literal></expr>, <expr><literal type="string">"/asl"</literal></expr>, <expr><literal type="string">"/at"</literal></expr>, <expr><literal type="string">"/atl"</literal></expr>, <expr><literal type="string">"/af"</literal></expr>, <expr><literal type="string">"/afl"</literal></expr>, <expr><literal type="string">"/ae"</literal></expr>, <expr><literal type="string">"/aej"</literal></expr>, <expr><literal type="string">"/ai"</literal></expr>, <expr><literal type="string">"/aij"</literal></expr>,

<expr><literal type="string">"/c"</literal></expr>, <expr><literal type="string">"/ca"</literal></expr>, <expr><literal type="string">"/car"</literal></expr>, <expr><literal type="string">"/d"</literal></expr>, <expr><literal type="string">"/e"</literal></expr>, <expr><literal type="string">"/E"</literal></expr>, <expr><literal type="string">"/f"</literal></expr>, <expr><literal type="string">"/F"</literal></expr>, <expr><literal type="string">"/g"</literal></expr>, <expr><literal type="string">"/gg"</literal></expr>, <expr><literal type="string">"/h"</literal></expr>, <expr><literal type="string">"/ht"</literal></expr>, <expr><literal type="string">"/i"</literal></expr>, <expr><literal type="string">"/m"</literal></expr>, <expr><literal type="string">"/mb"</literal></expr>, <expr><literal type="string">"/mm"</literal></expr>,

<expr><literal type="string">"/o"</literal></expr>, <expr><literal type="string">"/O"</literal></expr>, <expr><literal type="string">"/p"</literal></expr>, <expr><literal type="string">"/P"</literal></expr>, <expr><literal type="string">"/s"</literal></expr>, <expr><literal type="string">"/s*"</literal></expr>, <expr><literal type="string">"/r?"</literal></expr>, <expr><literal type="string">"/r"</literal></expr>, <expr><literal type="string">"/ra"</literal></expr>, <expr><literal type="string">"/rc"</literal></expr>, <expr><literal type="string">"/re"</literal></expr>, <expr><literal type="string">"/rr"</literal></expr>, <expr><literal type="string">"/rw"</literal></expr>, <expr><literal type="string">"/rc"</literal></expr>,

<expr><literal type="string">"/R"</literal></expr>,

<expr><literal type="string">"/v?"</literal></expr>, <expr><literal type="string">"/v"</literal></expr>, <expr><literal type="string">"/v1"</literal></expr>, <expr><literal type="string">"/v2"</literal></expr>, <expr><literal type="string">"/v4"</literal></expr>, <expr><literal type="string">"/v8"</literal></expr>,

<expr><literal type="string">"/V?"</literal></expr>, <expr><literal type="string">"/V"</literal></expr>, <expr><literal type="string">"/V1"</literal></expr>, <expr><literal type="string">"/V2"</literal></expr>, <expr><literal type="string">"/V4"</literal></expr>, <expr><literal type="string">"/V8"</literal></expr>,

<expr><literal type="string">"/w"</literal></expr>, <expr><literal type="string">"/wi"</literal></expr>, <expr><literal type="string">"/x"</literal></expr>, <expr><literal type="string">"/z"</literal></expr>,

<expr><literal type="string">"!?"</literal></expr>, <expr><literal type="string">"!"</literal></expr>, <expr><literal type="string">"!!"</literal></expr>, <expr><literal type="string">"!!!"</literal></expr>, <expr><literal type="string">"!!!-"</literal></expr>, <expr><literal type="string">"!-"</literal></expr>, <expr><literal type="string">"!-*"</literal></expr>, <expr><literal type="string">"!=!"</literal></expr>,

<expr><literal type="string">"a?"</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"aa"</literal></expr>, <expr><literal type="string">"aa*"</literal></expr>,

<expr><literal type="string">"aaa"</literal></expr>, <expr><literal type="string">"aab"</literal></expr>, <expr><literal type="string">"aac"</literal></expr>, <expr><literal type="string">"aac*"</literal></expr>, <expr><literal type="string">"aad"</literal></expr>, <expr><literal type="string">"aae"</literal></expr>, <expr><literal type="string">"aaf"</literal></expr>, <expr><literal type="string">"aaF"</literal></expr>, <expr><literal type="string">"aaFa"</literal></expr>, <expr><literal type="string">"aai"</literal></expr>, <expr><literal type="string">"aaij"</literal></expr>, <expr><literal type="string">"aan"</literal></expr>, <expr><literal type="string">"aang"</literal></expr>, <expr><literal type="string">"aao"</literal></expr>, <expr><literal type="string">"aap"</literal></expr>,

<expr><literal type="string">"aar?"</literal></expr>, <expr><literal type="string">"aar"</literal></expr>, <expr><literal type="string">"aar*"</literal></expr>, <expr><literal type="string">"aarj"</literal></expr>, <expr><literal type="string">"aas"</literal></expr>, <expr><literal type="string">"aat"</literal></expr>, <expr><literal type="string">"aaT"</literal></expr>, <expr><literal type="string">"aau"</literal></expr>, <expr><literal type="string">"aav"</literal></expr>,

<expr><literal type="string">"a8"</literal></expr>, <expr><literal type="string">"ab"</literal></expr>, <expr><literal type="string">"abb"</literal></expr>,

<expr><literal type="string">"acl"</literal></expr>, <expr><literal type="string">"acll"</literal></expr>, <expr><literal type="string">"aclj"</literal></expr>, <expr><literal type="string">"acl*"</literal></expr>, <expr><literal type="string">"ac?"</literal></expr>, <expr><literal type="string">"ac"</literal></expr>, <expr><literal type="string">"ac-"</literal></expr>, <expr><literal type="string">"acn"</literal></expr>, <expr><literal type="string">"acv"</literal></expr>, <expr><literal type="string">"acvf"</literal></expr>, <expr><literal type="string">"acv-"</literal></expr>, <expr><literal type="string">"acb"</literal></expr>, <expr><literal type="string">"acb-"</literal></expr>, <expr><literal type="string">"acm"</literal></expr>, <expr><literal type="string">"acm-"</literal></expr>, <expr><literal type="string">"acmn"</literal></expr>,

<expr><literal type="string">"aC?"</literal></expr>, <expr><literal type="string">"aC"</literal></expr>, <expr><literal type="string">"aCe"</literal></expr>, <expr><literal type="string">"ad"</literal></expr>, <expr><literal type="string">"ad4"</literal></expr>, <expr><literal type="string">"ad8"</literal></expr>, <expr><literal type="string">"adf"</literal></expr>, <expr><literal type="string">"adfg"</literal></expr>, <expr><literal type="string">"adt"</literal></expr>, <expr><literal type="string">"adk"</literal></expr>,

<expr><literal type="string">"ae?"</literal></expr>, <expr><literal type="string">"ae??"</literal></expr>, <expr><literal type="string">"ae"</literal></expr>, <expr><literal type="string">"aea"</literal></expr>, <expr><literal type="string">"aeA"</literal></expr>, <expr><literal type="string">"aeaf"</literal></expr>, <expr><literal type="string">"aeAf"</literal></expr>, <expr><literal type="string">"aeC"</literal></expr>, <expr><literal type="string">"aec?"</literal></expr>, <expr><literal type="string">"aec"</literal></expr>, <expr><literal type="string">"aecs"</literal></expr>, <expr><literal type="string">"aecc"</literal></expr>, <expr><literal type="string">"aecu"</literal></expr>, <expr><literal type="string">"aecue"</literal></expr>,

<expr><literal type="string">"aef"</literal></expr>, <expr><literal type="string">"aefa"</literal></expr>,

<expr><literal type="string">"aei"</literal></expr>, <expr><literal type="string">"aeim"</literal></expr>, <expr><literal type="string">"aeip"</literal></expr>, <expr><literal type="string">"aek"</literal></expr>, <expr><literal type="string">"aek-"</literal></expr>, <expr><literal type="string">"aeli"</literal></expr>, <expr><literal type="string">"aelir"</literal></expr>, <expr><literal type="string">"aep?"</literal></expr>, <expr><literal type="string">"aep"</literal></expr>, <expr><literal type="string">"aep-"</literal></expr>, <expr><literal type="string">"aepc"</literal></expr>,

<expr><literal type="string">"aer"</literal></expr>, <expr><literal type="string">"aets?"</literal></expr>, <expr><literal type="string">"aets"</literal></expr>, <expr><literal type="string">"aets+"</literal></expr>, <expr><literal type="string">"aes"</literal></expr>, <expr><literal type="string">"aesp"</literal></expr>, <expr><literal type="string">"aesb"</literal></expr>, <expr><literal type="string">"aeso"</literal></expr>, <expr><literal type="string">"aesou"</literal></expr>, <expr><literal type="string">"aess"</literal></expr>, <expr><literal type="string">"aesu"</literal></expr>, <expr><literal type="string">"aesue"</literal></expr>, <expr><literal type="string">"aetr"</literal></expr>, <expr><literal type="string">"aex"</literal></expr>,

<expr><literal type="string">"af?"</literal></expr>, <expr><literal type="string">"af"</literal></expr>, <expr><literal type="string">"afr"</literal></expr>, <expr><literal type="string">"af+"</literal></expr>, <expr><literal type="string">"af-"</literal></expr>,

<expr><literal type="string">"afa"</literal></expr>, <expr><literal type="string">"afan"</literal></expr>,

<expr><literal type="string">"afb?"</literal></expr>, <expr><literal type="string">"afb"</literal></expr>, <expr><literal type="string">"afb."</literal></expr>, <expr><literal type="string">"afb+"</literal></expr>, <expr><literal type="string">"afbb"</literal></expr>, <expr><literal type="string">"afbr"</literal></expr>, <expr><literal type="string">"afbi"</literal></expr>, <expr><literal type="string">"afbj"</literal></expr>, <expr><literal type="string">"afbe"</literal></expr>, <expr><literal type="string">"afB"</literal></expr>, <expr><literal type="string">"afbc"</literal></expr>, <expr><literal type="string">"afb="</literal></expr>,

<expr><literal type="string">"afB"</literal></expr>, <expr><literal type="string">"afC"</literal></expr>, <expr><literal type="string">"afCl"</literal></expr>, <expr><literal type="string">"afCc"</literal></expr>, <expr><literal type="string">"afc?"</literal></expr>, <expr><literal type="string">"afc"</literal></expr>, <expr><literal type="string">"afc="</literal></expr>, <expr><literal type="string">"afcr"</literal></expr>, <expr><literal type="string">"afcrj"</literal></expr>, <expr><literal type="string">"afca"</literal></expr>, <expr><literal type="string">"afcf"</literal></expr>, <expr><literal type="string">"afcfj"</literal></expr>,

<expr><literal type="string">"afck"</literal></expr>, <expr><literal type="string">"afcl"</literal></expr>, <expr><literal type="string">"afco"</literal></expr>, <expr><literal type="string">"afcR"</literal></expr>,

<expr><literal type="string">"afd"</literal></expr>, <expr><literal type="string">"aff"</literal></expr>, <expr><literal type="string">"afF"</literal></expr>, <expr><literal type="string">"afi"</literal></expr>,

<expr><literal type="string">"afl?"</literal></expr>, <expr><literal type="string">"afl"</literal></expr>, <expr><literal type="string">"afl+"</literal></expr>, <expr><literal type="string">"aflc"</literal></expr>, <expr><literal type="string">"aflj"</literal></expr>, <expr><literal type="string">"afll"</literal></expr>, <expr><literal type="string">"afllj"</literal></expr>, <expr><literal type="string">"aflm"</literal></expr>, <expr><literal type="string">"aflq"</literal></expr>, <expr><literal type="string">"aflqj"</literal></expr>, <expr><literal type="string">"afls"</literal></expr>,

<expr><literal type="string">"afm"</literal></expr>, <expr><literal type="string">"afM"</literal></expr>, <expr><literal type="string">"afn?"</literal></expr>, <expr><literal type="string">"afna"</literal></expr>, <expr><literal type="string">"afns"</literal></expr>, <expr><literal type="string">"afnsj"</literal></expr>, <expr><literal type="string">"afl="</literal></expr>,

<expr><literal type="string">"afo"</literal></expr>, <expr><literal type="string">"afs"</literal></expr>, <expr><literal type="string">"afS"</literal></expr>, <expr><literal type="string">"aft?"</literal></expr>, <expr><literal type="string">"aft"</literal></expr>, <expr><literal type="string">"afu"</literal></expr>,

<expr><literal type="string">"afv?"</literal></expr>, <expr><literal type="string">"afv"</literal></expr>, <expr><literal type="string">"afvr?"</literal></expr>, <expr><literal type="string">"afvr"</literal></expr>, <expr><literal type="string">"afvr*"</literal></expr>, <expr><literal type="string">"afvrj"</literal></expr>, <expr><literal type="string">"afvr-"</literal></expr>, <expr><literal type="string">"afvrg"</literal></expr>, <expr><literal type="string">"afvrs"</literal></expr>,

<expr><literal type="string">"afvb?"</literal></expr>, <expr><literal type="string">"afvb"</literal></expr>, <expr><literal type="string">"afvbj"</literal></expr>, <expr><literal type="string">"afvb-"</literal></expr>, <expr><literal type="string">"afvbg"</literal></expr>, <expr><literal type="string">"afvbs"</literal></expr>,

<expr><literal type="string">"afvs?"</literal></expr>, <expr><literal type="string">"afvs"</literal></expr>, <expr><literal type="string">"afvs*"</literal></expr>, <expr><literal type="string">"afvsj"</literal></expr>, <expr><literal type="string">"afvs-"</literal></expr>, <expr><literal type="string">"afvsg"</literal></expr>, <expr><literal type="string">"afvss"</literal></expr>,

<expr><literal type="string">"afv*"</literal></expr>, <expr><literal type="string">"afvR"</literal></expr>, <expr><literal type="string">"afvW"</literal></expr>, <expr><literal type="string">"afva"</literal></expr>, <expr><literal type="string">"afvd"</literal></expr>, <expr><literal type="string">"afvn"</literal></expr>, <expr><literal type="string">"afvt"</literal></expr>, <expr><literal type="string">"afv-"</literal></expr>, <expr><literal type="string">"af*"</literal></expr>, <expr><literal type="string">"afx"</literal></expr>,

<expr><literal type="string">"aF"</literal></expr>,

<expr><literal type="string">"ag?"</literal></expr>, <expr><literal type="string">"ag"</literal></expr>, <expr><literal type="string">"aga"</literal></expr>, <expr><literal type="string">"agA"</literal></expr>, <expr><literal type="string">"agc"</literal></expr>, <expr><literal type="string">"agC"</literal></expr>, <expr><literal type="string">"agd"</literal></expr>, <expr><literal type="string">"agf"</literal></expr>, <expr><literal type="string">"agi"</literal></expr>, <expr><literal type="string">"agr"</literal></expr>, <expr><literal type="string">"agR"</literal></expr>, <expr><literal type="string">"agx"</literal></expr>, <expr><literal type="string">"agg"</literal></expr>, <expr><literal type="string">"ag-"</literal></expr>,

<expr><literal type="string">"agn?"</literal></expr>, <expr><literal type="string">"agn"</literal></expr>, <expr><literal type="string">"agn-"</literal></expr>, <expr><literal type="string">"age?"</literal></expr>, <expr><literal type="string">"age"</literal></expr>, <expr><literal type="string">"age-"</literal></expr>,

<expr><literal type="string">"agl"</literal></expr>, <expr><literal type="string">"agfl"</literal></expr>,

<expr><literal type="string">"ah?"</literal></expr>, <expr><literal type="string">"ah"</literal></expr>, <expr><literal type="string">"ah."</literal></expr>, <expr><literal type="string">"ah-"</literal></expr>, <expr><literal type="string">"ah*"</literal></expr>, <expr><literal type="string">"aha"</literal></expr>, <expr><literal type="string">"ahb"</literal></expr>, <expr><literal type="string">"ahc"</literal></expr>, <expr><literal type="string">"ahe"</literal></expr>, <expr><literal type="string">"ahf"</literal></expr>, <expr><literal type="string">"ahh"</literal></expr>, <expr><literal type="string">"ahi?"</literal></expr>, <expr><literal type="string">"ahi"</literal></expr>, <expr><literal type="string">"ahj"</literal></expr>, <expr><literal type="string">"aho"</literal></expr>,

<expr><literal type="string">"ahp"</literal></expr>, <expr><literal type="string">"ahr"</literal></expr>, <expr><literal type="string">"ahs"</literal></expr>, <expr><literal type="string">"ahS"</literal></expr>, <expr><literal type="string">"aht"</literal></expr>,

<expr><literal type="string">"ai"</literal></expr>, <expr><literal type="string">"aL"</literal></expr>, <expr><literal type="string">"an"</literal></expr>,

<expr><literal type="string">"ao?"</literal></expr>, <expr><literal type="string">"ao"</literal></expr>, <expr><literal type="string">"aoj"</literal></expr>, <expr><literal type="string">"aoe"</literal></expr>, <expr><literal type="string">"aor"</literal></expr>, <expr><literal type="string">"aos"</literal></expr>, <expr><literal type="string">"aom"</literal></expr>, <expr><literal type="string">"aod"</literal></expr>, <expr><literal type="string">"aoda"</literal></expr>, <expr><literal type="string">"aoc"</literal></expr>, <expr><literal type="string">"ao*"</literal></expr>,

<expr><literal type="string">"aO"</literal></expr>, <expr><literal type="string">"ap"</literal></expr>,

<expr><literal type="string">"ar?"</literal></expr>, <expr><literal type="string">"ar"</literal></expr>, <expr><literal type="string">"ar0"</literal></expr>, <expr><literal type="string">"ara?"</literal></expr>, <expr><literal type="string">"ara"</literal></expr>, <expr><literal type="string">"ara+"</literal></expr>, <expr><literal type="string">"ara-"</literal></expr>, <expr><literal type="string">"aras"</literal></expr>, <expr><literal type="string">"arA"</literal></expr>, <expr><literal type="string">"arC"</literal></expr>, <expr><literal type="string">"arr"</literal></expr>, <expr><literal type="string">"arrj"</literal></expr>, <expr><literal type="string">"ar="</literal></expr>,

<expr><literal type="string">"arb"</literal></expr>, <expr><literal type="string">"arc"</literal></expr>, <expr><literal type="string">"ard"</literal></expr>, <expr><literal type="string">"arn"</literal></expr>, <expr><literal type="string">"aro"</literal></expr>, <expr><literal type="string">"arp?"</literal></expr>, <expr><literal type="string">"arp"</literal></expr>, <expr><literal type="string">"arpi"</literal></expr>, <expr><literal type="string">"arp."</literal></expr>, <expr><literal type="string">"arpj"</literal></expr>, <expr><literal type="string">"arps"</literal></expr>,

<expr><literal type="string">"ars"</literal></expr>, <expr><literal type="string">"art"</literal></expr>, <expr><literal type="string">"arw"</literal></expr>,

<expr><literal type="string">"as?"</literal></expr>, <expr><literal type="string">"as"</literal></expr>, <expr><literal type="string">"asc"</literal></expr>, <expr><literal type="string">"asca"</literal></expr>, <expr><literal type="string">"asf"</literal></expr>, <expr><literal type="string">"asj"</literal></expr>, <expr><literal type="string">"asl"</literal></expr>, <expr><literal type="string">"ask"</literal></expr>,

<expr><literal type="string">"av?"</literal></expr>, <expr><literal type="string">"av"</literal></expr>, <expr><literal type="string">"avj"</literal></expr>, <expr><literal type="string">"av*"</literal></expr>, <expr><literal type="string">"avr"</literal></expr>, <expr><literal type="string">"avra"</literal></expr>, <expr><literal type="string">"avraj"</literal></expr>, <expr><literal type="string">"avrr"</literal></expr>, <expr><literal type="string">"avrD"</literal></expr>,

<expr><literal type="string">"at"</literal></expr>,

<expr><literal type="string">"ax?"</literal></expr>, <expr><literal type="string">"ax"</literal></expr>, <expr><literal type="string">"ax*"</literal></expr>, <expr><literal type="string">"ax-"</literal></expr>, <expr><literal type="string">"ax-*"</literal></expr>, <expr><literal type="string">"axc"</literal></expr>, <expr><literal type="string">"axC"</literal></expr>, <expr><literal type="string">"axg"</literal></expr>, <expr><literal type="string">"axg*"</literal></expr>, <expr><literal type="string">"axgj"</literal></expr>, <expr><literal type="string">"axd"</literal></expr>, <expr><literal type="string">"axw"</literal></expr>, <expr><literal type="string">"axj"</literal></expr>, <expr><literal type="string">"axF"</literal></expr>,

<expr><literal type="string">"axt"</literal></expr>, <expr><literal type="string">"axf"</literal></expr>, <expr><literal type="string">"ax."</literal></expr>, <expr><literal type="string">"axff"</literal></expr>, <expr><literal type="string">"axffj"</literal></expr>, <expr><literal type="string">"axs"</literal></expr>,

<expr><literal type="string">"b?"</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"b+"</literal></expr>, <expr><literal type="string">"b-"</literal></expr>, <expr><literal type="string">"bf"</literal></expr>, <expr><literal type="string">"bm"</literal></expr>,

<expr><literal type="string">"c?"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"c1"</literal></expr>, <expr><literal type="string">"c2"</literal></expr>, <expr><literal type="string">"c4"</literal></expr>, <expr><literal type="string">"c8"</literal></expr>, <expr><literal type="string">"cc"</literal></expr>, <expr><literal type="string">"ccd"</literal></expr>, <expr><literal type="string">"cf"</literal></expr>, <expr><literal type="string">"cg?"</literal></expr>, <expr><literal type="string">"cg"</literal></expr>, <expr><literal type="string">"cgf"</literal></expr>, <expr><literal type="string">"cgff"</literal></expr>, <expr><literal type="string">"cgfc"</literal></expr>, <expr><literal type="string">"cgfn"</literal></expr>, <expr><literal type="string">"cgo"</literal></expr>,

<expr><literal type="string">"cu?"</literal></expr>, <expr><literal type="string">"cu"</literal></expr>, <expr><literal type="string">"cu1"</literal></expr>, <expr><literal type="string">"cu2"</literal></expr>, <expr><literal type="string">"cu4"</literal></expr>, <expr><literal type="string">"cu8"</literal></expr>, <expr><literal type="string">"cud"</literal></expr>,

<expr><literal type="string">"cv"</literal></expr>, <expr><literal type="string">"cv1"</literal></expr>, <expr><literal type="string">"cv2"</literal></expr>, <expr><literal type="string">"cv4"</literal></expr>, <expr><literal type="string">"cv8"</literal></expr>,

<expr><literal type="string">"cV"</literal></expr>, <expr><literal type="string">"cV1"</literal></expr>, <expr><literal type="string">"cV2"</literal></expr>, <expr><literal type="string">"cV4"</literal></expr>, <expr><literal type="string">"cV8"</literal></expr>,

<expr><literal type="string">"cw?"</literal></expr>, <expr><literal type="string">"cw"</literal></expr>, <expr><literal type="string">"cw*"</literal></expr>, <expr><literal type="string">"cwr"</literal></expr>, <expr><literal type="string">"cwu"</literal></expr>,

<expr><literal type="string">"cx"</literal></expr>, <expr><literal type="string">"cx*"</literal></expr>, <expr><literal type="string">"cX"</literal></expr>,

<expr><literal type="string">"cl"</literal></expr>, <expr><literal type="string">"cls"</literal></expr>, <expr><literal type="string">"clear"</literal></expr>,

<expr><literal type="string">"d?"</literal></expr>, <expr><literal type="string">"db "</literal></expr>, <expr><literal type="string">"db-"</literal></expr>, <expr><literal type="string">"db-*"</literal></expr>, <expr><literal type="string">"db."</literal></expr>, <expr><literal type="string">"dbj"</literal></expr>, <expr><literal type="string">"dbc"</literal></expr>, <expr><literal type="string">"dbC"</literal></expr>, <expr><literal type="string">"dbd"</literal></expr>, <expr><literal type="string">"dbe"</literal></expr>, <expr><literal type="string">"dbs"</literal></expr>, <expr><literal type="string">"dbf"</literal></expr>, <expr><literal type="string">"dbm"</literal></expr>, <expr><literal type="string">"dbn"</literal></expr>,

<expr><literal type="string">"db?"</literal></expr>, <expr><literal type="string">"dbi"</literal></expr>, <expr><literal type="string">"dbi."</literal></expr>, <expr><literal type="string">"dbix"</literal></expr>, <expr><literal type="string">"dbic"</literal></expr>, <expr><literal type="string">"dbie"</literal></expr>, <expr><literal type="string">"dbid"</literal></expr>, <expr><literal type="string">"dbis"</literal></expr>, <expr><literal type="string">"dbite"</literal></expr>, <expr><literal type="string">"dbitd"</literal></expr>, <expr><literal type="string">"dbits"</literal></expr>, <expr><literal type="string">"dbh"</literal></expr>, <expr><literal type="string">"dbh-"</literal></expr>,

<expr><literal type="string">"dbt"</literal></expr>, <expr><literal type="string">"dbt*"</literal></expr>, <expr><literal type="string">"dbt="</literal></expr>, <expr><literal type="string">"dbtv"</literal></expr>, <expr><literal type="string">"dbtj"</literal></expr>, <expr><literal type="string">"dbta"</literal></expr>, <expr><literal type="string">"dbte"</literal></expr>, <expr><literal type="string">"dbtd"</literal></expr>, <expr><literal type="string">"dbts"</literal></expr>, <expr><literal type="string">"dbx"</literal></expr>, <expr><literal type="string">"dbw"</literal></expr>,

<expr><literal type="string">"dc?"</literal></expr>, <expr><literal type="string">"dc"</literal></expr>, <expr><literal type="string">"dca"</literal></expr>, <expr><literal type="string">"dcb"</literal></expr>, <expr><literal type="string">"dcc"</literal></expr>, <expr><literal type="string">"dccu"</literal></expr>, <expr><literal type="string">"dcf"</literal></expr>, <expr><literal type="string">"dck"</literal></expr>, <expr><literal type="string">"dcp"</literal></expr>, <expr><literal type="string">"dcr"</literal></expr>, <expr><literal type="string">"dcs"</literal></expr>, <expr><literal type="string">"dcs*"</literal></expr>, <expr><literal type="string">"dct"</literal></expr>, <expr><literal type="string">"dcu"</literal></expr>, <expr><literal type="string">"dcu."</literal></expr>,

<expr><literal type="string">"dd?"</literal></expr>, <expr><literal type="string">"dd"</literal></expr>, <expr><literal type="string">"dd-"</literal></expr>, <expr><literal type="string">"dd*"</literal></expr>, <expr><literal type="string">"dds"</literal></expr>, <expr><literal type="string">"ddd"</literal></expr>, <expr><literal type="string">"ddr"</literal></expr>, <expr><literal type="string">"ddw"</literal></expr>,

<expr><literal type="string">"de"</literal></expr>,

<expr><literal type="string">"dg"</literal></expr>,

<expr><literal type="string">"dH"</literal></expr>,

<expr><literal type="string">"di?"</literal></expr>, <expr><literal type="string">"di"</literal></expr>, <expr><literal type="string">"di*"</literal></expr>, <expr><literal type="string">"diq"</literal></expr>, <expr><literal type="string">"dij"</literal></expr>,

<expr><literal type="string">"dk?"</literal></expr>, <expr><literal type="string">"dk"</literal></expr>, <expr><literal type="string">"dko"</literal></expr>, <expr><literal type="string">"dkj"</literal></expr>,

<expr><literal type="string">"dL?"</literal></expr>, <expr><literal type="string">"dL"</literal></expr>, <expr><literal type="string">"dLq"</literal></expr>, <expr><literal type="string">"dLj"</literal></expr>,

<expr><literal type="string">"dm?"</literal></expr>, <expr><literal type="string">"dm"</literal></expr>, <expr><literal type="string">"dm="</literal></expr>, <expr><literal type="string">"dm."</literal></expr>, <expr><literal type="string">"dm*"</literal></expr>, <expr><literal type="string">"dm-"</literal></expr>, <expr><literal type="string">"dmd"</literal></expr>,

<expr><literal type="string">"dmh?"</literal></expr>, <expr><literal type="string">"dmh"</literal></expr>, <expr><literal type="string">"dmha"</literal></expr>, <expr><literal type="string">"dmhb"</literal></expr>, <expr><literal type="string">"dmhbg"</literal></expr>, <expr><literal type="string">"dmhc"</literal></expr>, <expr><literal type="string">"dmhf"</literal></expr>, <expr><literal type="string">"dmhg"</literal></expr>, <expr><literal type="string">"dmhi"</literal></expr>, <expr><literal type="string">"dmhm"</literal></expr>, <expr><literal type="string">"dmht"</literal></expr>,

<expr><literal type="string">"dmi?"</literal></expr>, <expr><literal type="string">"dmi"</literal></expr>, <expr><literal type="string">"dmi*"</literal></expr>, <expr><literal type="string">"dmi."</literal></expr>, <expr><literal type="string">"dmiv"</literal></expr>,

<expr><literal type="string">"dmj"</literal></expr>,

<expr><literal type="string">"dml?"</literal></expr>, <expr><literal type="string">"dml"</literal></expr>,

<expr><literal type="string">"dmm?"</literal></expr>, <expr><literal type="string">"dmm"</literal></expr>, <expr><literal type="string">"dmm*"</literal></expr>, <expr><literal type="string">"dmm."</literal></expr>, <expr><literal type="string">"dmmj"</literal></expr>,

<expr><literal type="string">"dmp?"</literal></expr>, <expr><literal type="string">"dmp"</literal></expr>,

<expr><literal type="string">"dms?"</literal></expr>, <expr><literal type="string">"dms"</literal></expr>, <expr><literal type="string">"dmsj"</literal></expr>, <expr><literal type="string">"dms*"</literal></expr>, <expr><literal type="string">"dms-"</literal></expr>, <expr><literal type="string">"dmsA"</literal></expr>, <expr><literal type="string">"dmsC"</literal></expr>, <expr><literal type="string">"dmsd"</literal></expr>, <expr><literal type="string">"dmsw"</literal></expr>, <expr><literal type="string">"dmsa"</literal></expr>, <expr><literal type="string">"dmsf"</literal></expr>, <expr><literal type="string">"dmst"</literal></expr>,

<expr><literal type="string">"dmS"</literal></expr>, <expr><literal type="string">"dmS*"</literal></expr>,

<expr><literal type="string">"do?"</literal></expr>, <expr><literal type="string">"do"</literal></expr>, <expr><literal type="string">"dor"</literal></expr>, <expr><literal type="string">"doo"</literal></expr>,

<expr><literal type="string">"dp?"</literal></expr>, <expr><literal type="string">"dp"</literal></expr>, <expr><literal type="string">"dpj"</literal></expr>, <expr><literal type="string">"dpl"</literal></expr>, <expr><literal type="string">"dplj"</literal></expr>, <expr><literal type="string">"dp-"</literal></expr>, <expr><literal type="string">"dp="</literal></expr>, <expr><literal type="string">"dpa"</literal></expr>, <expr><literal type="string">"dpc"</literal></expr>, <expr><literal type="string">"dpc*"</literal></expr>, <expr><literal type="string">"dpe"</literal></expr>, <expr><literal type="string">"dpf"</literal></expr>, <expr><literal type="string">"dpk"</literal></expr>, <expr><literal type="string">"dpn"</literal></expr>, <expr><literal type="string">"dptn"</literal></expr>, <expr><literal type="string">"dpt"</literal></expr>,

<expr><literal type="string">"dr?"</literal></expr>, <expr><literal type="string">"dr"</literal></expr>, <expr><literal type="string">"drps"</literal></expr>, <expr><literal type="string">"drpj"</literal></expr>, <expr><literal type="string">"drr"</literal></expr>, <expr><literal type="string">"drrj"</literal></expr>, <expr><literal type="string">"drs"</literal></expr>, <expr><literal type="string">"drs+"</literal></expr>, <expr><literal type="string">"drs-"</literal></expr>, <expr><literal type="string">"drt"</literal></expr>, <expr><literal type="string">"drt*"</literal></expr>, <expr><literal type="string">"drtj"</literal></expr>, <expr><literal type="string">"drw"</literal></expr>, <expr><literal type="string">"drx"</literal></expr>, <expr><literal type="string">"drx-"</literal></expr>,

<expr><literal type="string">".dr*"</literal></expr>, <expr><literal type="string">".dr-"</literal></expr>,

<expr><literal type="string">"ds?"</literal></expr>, <expr><literal type="string">"ds"</literal></expr>, <expr><literal type="string">"dsb"</literal></expr>, <expr><literal type="string">"dsf"</literal></expr>, <expr><literal type="string">"dsi"</literal></expr>, <expr><literal type="string">"dsl"</literal></expr>, <expr><literal type="string">"dso"</literal></expr>, <expr><literal type="string">"dsp"</literal></expr>, <expr><literal type="string">"dss"</literal></expr>, <expr><literal type="string">"dsu"</literal></expr>, <expr><literal type="string">"dsui"</literal></expr>, <expr><literal type="string">"dsuo"</literal></expr>, <expr><literal type="string">"dsue"</literal></expr>, <expr><literal type="string">"dsuf"</literal></expr>,

<expr><literal type="string">"dt?"</literal></expr>, <expr><literal type="string">"dt"</literal></expr>, <expr><literal type="string">"dt%"</literal></expr>, <expr><literal type="string">"dt*"</literal></expr>, <expr><literal type="string">"dt+"</literal></expr>, <expr><literal type="string">"dt-"</literal></expr>, <expr><literal type="string">"dt="</literal></expr>, <expr><literal type="string">"dtD"</literal></expr>, <expr><literal type="string">"dta"</literal></expr>, <expr><literal type="string">"dtc"</literal></expr>, <expr><literal type="string">"dtd"</literal></expr>, <expr><literal type="string">"dte"</literal></expr>, <expr><literal type="string">"dte-*"</literal></expr>, <expr><literal type="string">"dtei"</literal></expr>, <expr><literal type="string">"dtek"</literal></expr>,

<expr><literal type="string">"dtg"</literal></expr>, <expr><literal type="string">"dtg*"</literal></expr>, <expr><literal type="string">"dtgi"</literal></expr>,

<expr><literal type="string">"dtr"</literal></expr>,

<expr><literal type="string">"dts?"</literal></expr>, <expr><literal type="string">"dts"</literal></expr>, <expr><literal type="string">"dts+"</literal></expr>, <expr><literal type="string">"dts-"</literal></expr>, <expr><literal type="string">"dtsf"</literal></expr>, <expr><literal type="string">"dtst"</literal></expr>, <expr><literal type="string">"dtsC"</literal></expr>, <expr><literal type="string">"dtt"</literal></expr>,

<expr><literal type="string">"dw"</literal></expr>,

<expr><literal type="string">"dx?"</literal></expr>, <expr><literal type="string">"dx"</literal></expr>, <expr><literal type="string">"dxa"</literal></expr>, <expr><literal type="string">"dxe"</literal></expr>, <expr><literal type="string">"dxr"</literal></expr>, <expr><literal type="string">"dxs"</literal></expr>,

<expr><literal type="string">"e?"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"e-"</literal></expr>, <expr><literal type="string">"e*"</literal></expr>, <expr><literal type="string">"e!"</literal></expr>, <expr><literal type="string">"ec"</literal></expr>, <expr><literal type="string">"ee?"</literal></expr>, <expr><literal type="string">"ee"</literal></expr>, <expr><literal type="string">"?ed"</literal></expr>, <expr><literal type="string">"ed"</literal></expr>, <expr><literal type="string">"ej"</literal></expr>, <expr><literal type="string">"env"</literal></expr>, <expr><literal type="string">"er"</literal></expr>, <expr><literal type="string">"es"</literal> <literal type="string">"et"</literal></expr>, <expr><literal type="string">"ev"</literal></expr>, <expr><literal type="string">"evj"</literal></expr>,

<expr><literal type="string">"ec?"</literal></expr>, <expr><literal type="string">"ec"</literal></expr>, <expr><literal type="string">"ec*"</literal></expr>, <expr><literal type="string">"ecd"</literal></expr>, <expr><literal type="string">"ecr"</literal></expr>, <expr><literal type="string">"ecs"</literal></expr>, <expr><literal type="string">"ecj"</literal></expr>, <expr><literal type="string">"ecc"</literal></expr>, <expr><literal type="string">"eco"</literal></expr>, <expr><literal type="string">"ecp"</literal></expr>, <expr><literal type="string">"ecn"</literal></expr>,

<expr><literal type="string">"ecH?"</literal></expr>, <expr><literal type="string">"ecH"</literal></expr>, <expr><literal type="string">"ecHi"</literal></expr>, <expr><literal type="string">"ecHw"</literal></expr>, <expr><literal type="string">"ecH-"</literal></expr>,

<expr><literal type="string">"f?"</literal></expr>, <expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"f."</literal></expr>, <expr><literal type="string">"f*"</literal></expr>, <expr><literal type="string">"f-"</literal></expr>, <expr><literal type="string">"f--"</literal></expr>, <expr><literal type="string">"f+"</literal></expr>, <expr><literal type="string">"f="</literal></expr>, <expr><literal type="string">"fa"</literal></expr>, <expr><literal type="string">"fb"</literal></expr>, <expr><literal type="string">"fc?"</literal></expr>, <expr><literal type="string">"fc"</literal></expr>, <expr><literal type="string">"fC"</literal></expr>, <expr><literal type="string">"fd"</literal></expr>, <expr><literal type="string">"fe-"</literal></expr>, <expr><literal type="string">"fe"</literal></expr>,

<expr><literal type="string">"ff"</literal></expr>, <expr><literal type="string">"fi"</literal></expr>, <expr><literal type="string">"fg"</literal></expr>, <expr><literal type="string">"fj"</literal></expr>,

<expr><literal type="string">"fl"</literal></expr>, <expr><literal type="string">"fla"</literal></expr>, <expr><literal type="string">"fm"</literal></expr>, <expr><literal type="string">"fn"</literal></expr>, <expr><literal type="string">"fnj"</literal></expr>, <expr><literal type="string">"fo"</literal></expr>, <expr><literal type="string">"fO"</literal></expr>, <expr><literal type="string">"fr"</literal></expr>, <expr><literal type="string">"fR"</literal></expr>, <expr><literal type="string">"fR?"</literal></expr>,

<expr><literal type="string">"fs?"</literal></expr>, <expr><literal type="string">"fs"</literal></expr>, <expr><literal type="string">"fs*"</literal></expr>, <expr><literal type="string">"fsj"</literal></expr>, <expr><literal type="string">"fs-"</literal></expr>, <expr><literal type="string">"fs+"</literal></expr>, <expr><literal type="string">"fs-."</literal></expr>, <expr><literal type="string">"fsq"</literal></expr>, <expr><literal type="string">"fsm"</literal></expr>, <expr><literal type="string">"fss"</literal></expr>, <expr><literal type="string">"fss*"</literal></expr>, <expr><literal type="string">"fssj"</literal></expr>, <expr><literal type="string">"fsr"</literal></expr>,

<expr><literal type="string">"ft?"</literal></expr>, <expr><literal type="string">"ft"</literal></expr>, <expr><literal type="string">"ftn"</literal></expr>, <expr><literal type="string">"fV"</literal></expr>, <expr><literal type="string">"fx"</literal></expr>, <expr><literal type="string">"fq"</literal></expr>,

<expr><literal type="string">"fz?"</literal></expr>, <expr><literal type="string">"fz"</literal></expr>, <expr><literal type="string">"fz-"</literal></expr>, <expr><literal type="string">"fz."</literal></expr>, <expr><literal type="string">"fz:"</literal></expr>, <expr><literal type="string">"fz*"</literal></expr>,

<expr><literal type="string">"g?"</literal></expr>, <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"gw"</literal></expr>, <expr><literal type="string">"gc"</literal></expr>, <expr><literal type="string">"gl?"</literal></expr>, <expr><literal type="string">"gl"</literal></expr>, <expr><literal type="string">"gs"</literal></expr>, <expr><literal type="string">"gi"</literal></expr>, <expr><literal type="string">"gp"</literal></expr>, <expr><literal type="string">"ge"</literal></expr>, <expr><literal type="string">"gr"</literal></expr>, <expr><literal type="string">"gS"</literal></expr>,

<expr><literal type="string">"i?"</literal></expr>, <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"ij"</literal></expr>, <expr><literal type="string">"iA"</literal></expr>, <expr><literal type="string">"ia"</literal></expr>, <expr><literal type="string">"ib"</literal></expr>, <expr><literal type="string">"ic"</literal></expr>, <expr><literal type="string">"icc"</literal></expr>, <expr><literal type="string">"iC"</literal></expr>,

<expr><literal type="string">"id?"</literal></expr>, <expr><literal type="string">"id"</literal></expr>, <expr><literal type="string">"idp"</literal></expr>, <expr><literal type="string">"idpi"</literal></expr>, <expr><literal type="string">"idpi*"</literal></expr>, <expr><literal type="string">"idpd"</literal></expr>, <expr><literal type="string">"iD"</literal></expr>, <expr><literal type="string">"ie"</literal></expr>, <expr><literal type="string">"iee"</literal></expr>, <expr><literal type="string">"iE"</literal></expr>, <expr><literal type="string">"iE."</literal></expr>,

<expr><literal type="string">"ih"</literal></expr>, <expr><literal type="string">"iHH"</literal></expr>, <expr><literal type="string">"ii"</literal></expr>, <expr><literal type="string">"iI"</literal></expr>, <expr><literal type="string">"ik"</literal></expr>, <expr><literal type="string">"il"</literal></expr>, <expr><literal type="string">"iL"</literal></expr>, <expr><literal type="string">"im"</literal></expr>, <expr><literal type="string">"iM"</literal></expr>, <expr><literal type="string">"io"</literal></expr>, <expr><literal type="string">"iO?"</literal></expr>, <expr><literal type="string">"iO"</literal></expr>,

<expr><literal type="string">"ir"</literal></expr>, <expr><literal type="string">"iR"</literal></expr>, <expr><literal type="string">"is"</literal></expr>, <expr><literal type="string">"is."</literal></expr>, <expr><literal type="string">"iS"</literal></expr>, <expr><literal type="string">"iS."</literal></expr>, <expr><literal type="string">"iS="</literal></expr>, <expr><literal type="string">"iSS"</literal></expr>,

<expr><literal type="string">"it"</literal></expr>, <expr><literal type="string">"iV"</literal></expr>, <expr><literal type="string">"iX"</literal></expr>, <expr><literal type="string">"iz"</literal></expr>, <expr><literal type="string">"izj"</literal></expr>, <expr><literal type="string">"izz"</literal></expr>, <expr><literal type="string">"izzz"</literal></expr>, <expr><literal type="string">"iz-"</literal></expr>, <expr><literal type="string">"iZ"</literal></expr>,

<expr><literal type="string">"k?"</literal></expr>, <expr><literal type="string">"k"</literal></expr>, <expr><literal type="string">"ko"</literal></expr>, <expr><literal type="string">"kd"</literal></expr>, <expr><literal type="string">"ks"</literal></expr>, <expr><literal type="string">"kj"</literal></expr>,

<expr><literal type="string">"l"</literal></expr>,

<expr><literal type="string">"L?"</literal></expr>, <expr><literal type="string">"L"</literal></expr>, <expr><literal type="string">"L-"</literal></expr>, <expr><literal type="string">"Ll"</literal></expr>, <expr><literal type="string">"LL"</literal></expr>, <expr><literal type="string">"La"</literal></expr>, <expr><literal type="string">"Lc"</literal></expr>, <expr><literal type="string">"Ld"</literal></expr>, <expr><literal type="string">"Lh"</literal></expr>, <expr><literal type="string">"Li"</literal></expr>, <expr><literal type="string">"Lo"</literal></expr>,

<expr><literal type="string">"m?"</literal></expr>, <expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"m*"</literal></expr>, <expr><literal type="string">"ml"</literal></expr>, <expr><literal type="string">"m-"</literal></expr>, <expr><literal type="string">"md"</literal></expr>, <expr><literal type="string">"mf?"</literal></expr>, <expr><literal type="string">"mf"</literal></expr>, <expr><literal type="string">"mg"</literal></expr>, <expr><literal type="string">"mo"</literal></expr>, <expr><literal type="string">"mi"</literal></expr>, <expr><literal type="string">"mp"</literal></expr>, <expr><literal type="string">"ms"</literal></expr>, <expr><literal type="string">"my"</literal></expr>,

<expr><literal type="string">"o?"</literal></expr>, <expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"o-"</literal></expr>, <expr><literal type="string">"o--"</literal></expr>, <expr><literal type="string">"o+"</literal></expr>, <expr><literal type="string">"oa"</literal></expr>, <expr><literal type="string">"oa-"</literal></expr>, <expr><literal type="string">"oq"</literal></expr>, <expr><literal type="string">"o*"</literal></expr>, <expr><literal type="string">"o."</literal></expr>, <expr><literal type="string">"o="</literal></expr>,

<expr><literal type="string">"ob?"</literal></expr>, <expr><literal type="string">"ob"</literal></expr>, <expr><literal type="string">"ob*"</literal></expr>, <expr><literal type="string">"obo"</literal></expr>, <expr><literal type="string">"obb"</literal></expr>, <expr><literal type="string">"oba"</literal></expr>, <expr><literal type="string">"obf"</literal></expr>, <expr><literal type="string">"obj"</literal></expr>, <expr><literal type="string">"obr"</literal></expr>, <expr><literal type="string">"ob-"</literal></expr>, <expr><literal type="string">"ob-*"</literal></expr>,

<expr><literal type="string">"oc"</literal></expr>, <expr><literal type="string">"of"</literal></expr>, <expr><literal type="string">"oi"</literal></expr>, <expr><literal type="string">"oj"</literal></expr>, <expr><literal type="string">"oL"</literal></expr>, <expr><literal type="string">"om"</literal></expr>, <expr><literal type="string">"on"</literal></expr>,

<expr><literal type="string">"oo?"</literal></expr>, <expr><literal type="string">"oo"</literal></expr>, <expr><literal type="string">"oo+"</literal></expr>, <expr><literal type="string">"oob"</literal></expr>, <expr><literal type="string">"ood"</literal></expr>, <expr><literal type="string">"oom"</literal></expr>, <expr><literal type="string">"oon"</literal></expr>, <expr><literal type="string">"oon+"</literal></expr>, <expr><literal type="string">"oonn"</literal></expr>, <expr><literal type="string">"oonn+"</literal></expr>,

<expr><literal type="string">"op"</literal></expr>, <expr><literal type="string">"ox"</literal></expr>,

<expr><literal type="string">"p?"</literal></expr>, <expr><literal type="string">"p-"</literal></expr>, <expr><literal type="string">"p="</literal></expr>, <expr><literal type="string">"p2"</literal></expr>, <expr><literal type="string">"p3"</literal></expr>, <expr><literal type="string">"p6?"</literal></expr>, <expr><literal type="string">"p6"</literal></expr>, <expr><literal type="string">"p6d"</literal></expr>, <expr><literal type="string">"p6e"</literal></expr>, <expr><literal type="string">"p8?"</literal></expr>, <expr><literal type="string">"p8"</literal></expr>, <expr><literal type="string">"p8f"</literal></expr>, <expr><literal type="string">"p8j"</literal></expr>,

<expr><literal type="string">"pa?"</literal></expr>, <expr><literal type="string">"paD"</literal></expr>, <expr><literal type="string">"pad"</literal></expr>, <expr><literal type="string">"pade"</literal></expr>, <expr><literal type="string">"pae"</literal></expr>, <expr><literal type="string">"pA"</literal></expr>,

<expr><literal type="string">"pb?"</literal></expr>, <expr><literal type="string">"pb"</literal></expr>, <expr><literal type="string">"pB"</literal></expr>, <expr><literal type="string">"pxb"</literal></expr>, <expr><literal type="string">"pB?"</literal></expr>,

<expr><literal type="string">"pc?"</literal></expr>, <expr><literal type="string">"pc"</literal></expr>, <expr><literal type="string">"pc*"</literal></expr>, <expr><literal type="string">"pca"</literal></expr>, <expr><literal type="string">"pcA"</literal></expr>, <expr><literal type="string">"pcd"</literal></expr>, <expr><literal type="string">"pch"</literal></expr>, <expr><literal type="string">"pcj"</literal></expr>, <expr><literal type="string">"pcp"</literal></expr>, <expr><literal type="string">"pcs"</literal></expr>, <expr><literal type="string">"pcS"</literal></expr>, <expr><literal type="string">"pcw"</literal></expr>,

<expr><literal type="string">"pC?"</literal></expr>, <expr><literal type="string">"pC"</literal></expr>, <expr><literal type="string">"pCa"</literal></expr>, <expr><literal type="string">"pCA"</literal></expr>, <expr><literal type="string">"pCc"</literal></expr>, <expr><literal type="string">"pCd"</literal></expr>, <expr><literal type="string">"pCD"</literal></expr>, <expr><literal type="string">"pCx"</literal></expr>, <expr><literal type="string">"pCw"</literal></expr>,

<expr><literal type="string">"pd?"</literal></expr>, <expr><literal type="string">"pd"</literal></expr>, <expr><literal type="string">"pd--"</literal></expr>, <expr><literal type="string">"pD"</literal></expr>, <expr><literal type="string">"pda"</literal></expr>, <expr><literal type="string">"pdb"</literal></expr>, <expr><literal type="string">"pdc"</literal></expr>, <expr><literal type="string">"pdC"</literal></expr>, <expr><literal type="string">"pdf"</literal></expr>, <expr><literal type="string">"pdi"</literal></expr>, <expr><literal type="string">"pdj"</literal></expr>, <expr><literal type="string">"pdJ"</literal></expr>,

<expr><literal type="string">"pdk"</literal></expr>, <expr><literal type="string">"pdl"</literal></expr>, <expr><literal type="string">"pdp"</literal></expr>, <expr><literal type="string">"pdr"</literal></expr>, <expr><literal type="string">"pdr."</literal></expr>, <expr><literal type="string">"pdR"</literal></expr>, <expr><literal type="string">"pds?"</literal></expr>, <expr><literal type="string">"pds"</literal></expr>, <expr><literal type="string">"pdsb"</literal></expr>, <expr><literal type="string">"pdsf"</literal></expr>, <expr><literal type="string">"pdt"</literal></expr>,

<expr><literal type="string">"pD"</literal></expr>,

<expr><literal type="string">"pf?"</literal></expr>, <expr><literal type="string">"pf"</literal></expr>, <expr><literal type="string">"pf??"</literal></expr>, <expr><literal type="string">"pf???"</literal></expr>, <expr><literal type="string">"pf."</literal></expr>, <expr><literal type="string">"pfj"</literal></expr>, <expr><literal type="string">"pfj."</literal></expr>, <expr><literal type="string">"pf*"</literal></expr>, <expr><literal type="string">"pf*."</literal></expr>, <expr><literal type="string">"pfd"</literal></expr>, <expr><literal type="string">"pfd."</literal></expr>,

<expr><literal type="string">"pfo"</literal></expr>, <expr><literal type="string">"pfq"</literal></expr>, <expr><literal type="string">"pfv"</literal></expr>, <expr><literal type="string">"pfv."</literal></expr>, <expr><literal type="string">"pfs"</literal></expr>, <expr><literal type="string">"pfs."</literal></expr>,

<expr><literal type="string">"pF?"</literal></expr>, <expr><literal type="string">"pF"</literal></expr>, <expr><literal type="string">"pFa"</literal></expr>, <expr><literal type="string">"pFaq"</literal></expr>, <expr><literal type="string">"pFo"</literal></expr>, <expr><literal type="string">"pFp"</literal></expr>, <expr><literal type="string">"pFx"</literal></expr>,

<expr><literal type="string">"pg?"</literal></expr>, <expr><literal type="string">"pg"</literal></expr>, <expr><literal type="string">"pg*"</literal></expr>, <expr><literal type="string">"pg-*"</literal></expr>,

<expr><literal type="string">"ph?"</literal></expr>, <expr><literal type="string">"ph"</literal></expr>, <expr><literal type="string">"ph="</literal></expr>,

<expr><literal type="string">"pi?"</literal></expr>, <expr><literal type="string">"pi"</literal></expr>, <expr><literal type="string">"pia"</literal></expr>, <expr><literal type="string">"pib"</literal></expr>, <expr><literal type="string">"pid"</literal></expr>, <expr><literal type="string">"pie"</literal></expr>, <expr><literal type="string">"pif?"</literal></expr>, <expr><literal type="string">"pif"</literal></expr>, <expr><literal type="string">"pifc"</literal></expr>, <expr><literal type="string">"pifcj"</literal></expr>, <expr><literal type="string">"pifj"</literal></expr>, <expr><literal type="string">"pij"</literal></expr>, <expr><literal type="string">"pir"</literal></expr>,

<expr><literal type="string">"pI?"</literal></expr>, <expr><literal type="string">"pI"</literal></expr>, <expr><literal type="string">"pIa"</literal></expr>, <expr><literal type="string">"pIb"</literal></expr>, <expr><literal type="string">"pId"</literal></expr>, <expr><literal type="string">"pIe"</literal></expr>, <expr><literal type="string">"pIf?"</literal></expr>, <expr><literal type="string">"pIf"</literal></expr>, <expr><literal type="string">"pIfc"</literal></expr>, <expr><literal type="string">"pIfcj"</literal></expr>, <expr><literal type="string">"pIfj"</literal></expr>, <expr><literal type="string">"pIj"</literal></expr>, <expr><literal type="string">"pIr"</literal></expr>,

<expr><literal type="string">"pj?"</literal></expr>, <expr><literal type="string">"pj"</literal></expr>, <expr><literal type="string">"pj."</literal></expr>, <expr><literal type="string">"pj.."</literal></expr>,

<expr><literal type="string">"pk?"</literal></expr>, <expr><literal type="string">"pk"</literal></expr>, <expr><literal type="string">"pK?"</literal></expr>, <expr><literal type="string">"pK"</literal></expr>,

<expr><literal type="string">"pm?"</literal></expr>, <expr><literal type="string">"pm"</literal></expr>,

<expr><literal type="string">"pq?"</literal></expr>, <expr><literal type="string">"pq"</literal></expr>, <expr><literal type="string">"pqi"</literal></expr>, <expr><literal type="string">"pqz"</literal></expr>,

<expr><literal type="string">"pr?"</literal></expr>, <expr><literal type="string">"pr"</literal></expr>, <expr><literal type="string">"prc"</literal></expr>, <expr><literal type="string">"prl"</literal></expr>, <expr><literal type="string">"prx"</literal></expr>, <expr><literal type="string">"prg?"</literal></expr>, <expr><literal type="string">"prg"</literal></expr>, <expr><literal type="string">"prgi"</literal></expr>, <expr><literal type="string">"prgo"</literal></expr>, <expr><literal type="string">"prz"</literal></expr>,

<expr><literal type="string">"ps?"</literal></expr>, <expr><literal type="string">"ps"</literal></expr>, <expr><literal type="string">"psb"</literal></expr>, <expr><literal type="string">"psi"</literal></expr>, <expr><literal type="string">"psj"</literal></expr>, <expr><literal type="string">"psp"</literal></expr>, <expr><literal type="string">"pss"</literal></expr>, <expr><literal type="string">"psu"</literal></expr>, <expr><literal type="string">"psw"</literal></expr>, <expr><literal type="string">"psW"</literal></expr>, <expr><literal type="string">"psx"</literal></expr>, <expr><literal type="string">"psz"</literal></expr>, <expr><literal type="string">"ps+"</literal></expr>,

<expr><literal type="string">"pt?"</literal></expr>, <expr><literal type="string">"pt"</literal></expr>, <expr><literal type="string">"pt."</literal></expr>, <expr><literal type="string">"ptd"</literal></expr>, <expr><literal type="string">"pth"</literal></expr>, <expr><literal type="string">"ptn"</literal></expr>,

<expr><literal type="string">"pu?"</literal></expr>, <expr><literal type="string">"pu"</literal></expr>, <expr><literal type="string">"puw"</literal></expr>, <expr><literal type="string">"pU"</literal></expr>,

<expr><literal type="string">"pv?"</literal></expr>, <expr><literal type="string">"pv"</literal></expr>, <expr><literal type="string">"pv1"</literal></expr>, <expr><literal type="string">"pv2"</literal></expr>, <expr><literal type="string">"pv4"</literal></expr>, <expr><literal type="string">"pv8"</literal></expr>, <expr><literal type="string">"pvz"</literal></expr>, <expr><literal type="string">"pvj"</literal></expr>, <expr><literal type="string">"pvh"</literal></expr>, <expr><literal type="string">"pv1j"</literal></expr>, <expr><literal type="string">"pv2j"</literal></expr>, <expr><literal type="string">"pv4j"</literal></expr>, <expr><literal type="string">"pv8j"</literal></expr>,

<expr><literal type="string">"pv1h"</literal></expr>, <expr><literal type="string">"pv2h"</literal></expr>, <expr><literal type="string">"pv4h"</literal></expr>, <expr><literal type="string">"pv8h"</literal></expr>,

<expr><literal type="string">"px?"</literal></expr>, <expr><literal type="string">"px"</literal></expr>, <expr><literal type="string">"px/"</literal></expr>, <expr><literal type="string">"px0"</literal></expr>, <expr><literal type="string">"pxa"</literal></expr>, <expr><literal type="string">"pxA?"</literal></expr>, <expr><literal type="string">"pxA"</literal></expr>, <expr><literal type="string">"pxb"</literal></expr>, <expr><literal type="string">"pxc"</literal></expr>, <expr><literal type="string">"pxd?"</literal></expr>, <expr><literal type="string">"pxd"</literal></expr>, <expr><literal type="string">"pxd2"</literal></expr>, <expr><literal type="string">"pxd4"</literal></expr>, <expr><literal type="string">"pxd8"</literal></expr>,

<expr><literal type="string">"pxe"</literal></expr>, <expr><literal type="string">"pxf"</literal></expr>, <expr><literal type="string">"pxh"</literal></expr>, <expr><literal type="string">"pxH"</literal></expr>, <expr><literal type="string">"pxi"</literal></expr>, <expr><literal type="string">"pxl"</literal></expr>, <expr><literal type="string">"pxo"</literal></expr>, <expr><literal type="string">"pxq"</literal></expr>, <expr><literal type="string">"pxq"</literal></expr>, <expr><literal type="string">"pxQ"</literal></expr>, <expr><literal type="string">"pxQq"</literal></expr>, <expr><literal type="string">"pxr"</literal></expr>, <expr><literal type="string">"pxrj"</literal></expr>,

<expr><literal type="string">"pxs"</literal></expr>, <expr><literal type="string">"pxt"</literal></expr>, <expr><literal type="string">"pxt*"</literal></expr>, <expr><literal type="string">"pxt."</literal></expr>, <expr><literal type="string">"pxw"</literal></expr>, <expr><literal type="string">"pxW"</literal></expr>, <expr><literal type="string">"pxWq"</literal></expr>, <expr><literal type="string">"pxx"</literal></expr>, <expr><literal type="string">"pxX"</literal></expr>,

<expr><literal type="string">"pz?"</literal></expr>, <expr><literal type="string">"pz"</literal></expr>, <expr><literal type="string">"pzp"</literal></expr>, <expr><literal type="string">"pzf"</literal></expr>, <expr><literal type="string">"pzs"</literal></expr>, <expr><literal type="string">"pz0"</literal></expr>, <expr><literal type="string">"pzF"</literal></expr>, <expr><literal type="string">"pze"</literal></expr>, <expr><literal type="string">"pzh"</literal></expr>,

<expr><literal type="string">"P?"</literal></expr>, <expr><literal type="string">"P"</literal></expr>, <expr><literal type="string">"Pc"</literal></expr>, <expr><literal type="string">"Pd"</literal></expr>, <expr><literal type="string">"Pi"</literal></expr>, <expr><literal type="string">"Pn"</literal></expr>, <expr><literal type="string">"Pnj"</literal></expr>, <expr><literal type="string">"Po"</literal></expr>, <expr><literal type="string">"Ps"</literal></expr>, <expr><literal type="string">"PS"</literal></expr>, <expr><literal type="string">"P-"</literal></expr>,

<expr><literal type="string">"q?"</literal></expr>, <expr><literal type="string">"q"</literal></expr>, <expr><literal type="string">"q!"</literal></expr>, <expr><literal type="string">"q!!"</literal></expr>, <expr><literal type="string">"q!!!"</literal></expr>, <expr><literal type="string">"qy"</literal></expr>, <expr><literal type="string">"qn"</literal></expr>, <expr><literal type="string">"qyy"</literal></expr>, <expr><literal type="string">"qyn"</literal></expr>, <expr><literal type="string">"qny"</literal></expr>, <expr><literal type="string">"qnn"</literal></expr>,

<expr><literal type="string">"r?"</literal></expr>, <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"r-"</literal></expr>, <expr><literal type="string">"r+"</literal></expr>, <expr><literal type="string">"rh"</literal></expr>,

<expr><literal type="string">"s?"</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"s:"</literal></expr>, <expr><literal type="string">"s-"</literal></expr>, <expr><literal type="string">"s-*"</literal></expr>, <expr><literal type="string">"s--"</literal></expr>, <expr><literal type="string">"s+"</literal></expr>, <expr><literal type="string">"s++"</literal></expr>, <expr><literal type="string">"sj"</literal></expr>, <expr><literal type="string">"s*"</literal></expr>, <expr><literal type="string">"s="</literal></expr>, <expr><literal type="string">"s!"</literal></expr>, <expr><literal type="string">"s/"</literal></expr>, <expr><literal type="string">"s/x"</literal></expr>, <expr><literal type="string">"s."</literal></expr>, <expr><literal type="string">"sa"</literal></expr>, <expr><literal type="string">"sb"</literal></expr>,

<expr><literal type="string">"sC?"</literal></expr>, <expr><literal type="string">"sC"</literal></expr>, <expr><literal type="string">"sC*"</literal></expr>,

<expr><literal type="string">"sf"</literal></expr>, <expr><literal type="string">"sf."</literal></expr>, <expr><literal type="string">"sg"</literal></expr>, <expr><literal type="string">"sG"</literal></expr>, <expr><literal type="string">"sl?"</literal></expr>, <expr><literal type="string">"sl"</literal></expr>, <expr><literal type="string">"sl+"</literal></expr>, <expr><literal type="string">"sl-"</literal></expr>, <expr><literal type="string">"slc"</literal></expr>, <expr><literal type="string">"sll"</literal></expr>, <expr><literal type="string">"sn"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><literal type="string">"so"</literal></expr>, <expr><literal type="string">"sr"</literal></expr>, <expr><literal type="string">"ss"</literal></expr>,

<expr><literal type="string">"t?"</literal></expr>, <expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"tj"</literal></expr>, <expr><literal type="string">"t*"</literal></expr>, <expr><literal type="string">"t-"</literal></expr>, <expr><literal type="string">"t-*"</literal></expr>, <expr><literal type="string">"ta"</literal></expr>, <expr><literal type="string">"tb"</literal></expr>, <expr><literal type="string">"tc"</literal></expr>, <expr><literal type="string">"te?"</literal></expr>, <expr><literal type="string">"te"</literal></expr>, <expr><literal type="string">"tej"</literal></expr>, <expr><literal type="string">"teb"</literal></expr>, <expr><literal type="string">"tec"</literal></expr>,

<expr><literal type="string">"td?"</literal></expr>, <expr><literal type="string">"td"</literal></expr>, <expr><literal type="string">"td-"</literal></expr>, <expr><literal type="string">"tf"</literal></expr>, <expr><literal type="string">"tk"</literal></expr>, <expr><literal type="string">"tl"</literal></expr>, <expr><literal type="string">"tn"</literal></expr>, <expr><literal type="string">"to"</literal></expr>, <expr><literal type="string">"tos"</literal></expr>, <expr><literal type="string">"tp"</literal></expr>, <expr><literal type="string">"tpx"</literal></expr>, <expr><literal type="string">"ts?"</literal></expr>, <expr><literal type="string">"ts"</literal></expr>, <expr><literal type="string">"tsj"</literal></expr>, <expr><literal type="string">"ts*"</literal></expr>, <expr><literal type="string">"tsc"</literal></expr>, <expr><literal type="string">"tss"</literal></expr>,

<expr><literal type="string">"tu?"</literal></expr>, <expr><literal type="string">"tu"</literal></expr>, <expr><literal type="string">"tuj"</literal></expr>, <expr><literal type="string">"tu*"</literal></expr>, <expr><literal type="string">"tuc"</literal></expr>, <expr><literal type="string">"tt?"</literal></expr>, <expr><literal type="string">"tt"</literal></expr>, <expr><literal type="string">"ttj"</literal></expr>, <expr><literal type="string">"ttc"</literal></expr>,

<expr><literal type="string">"T?"</literal></expr>, <expr><literal type="string">"T"</literal></expr>, <expr><literal type="string">"T*"</literal></expr>, <expr><literal type="string">"T-"</literal></expr>, <expr><literal type="string">"Tl"</literal></expr>, <expr><literal type="string">"Tj"</literal></expr>, <expr><literal type="string">"Tm"</literal></expr>, <expr><literal type="string">"Ts"</literal></expr>, <expr><literal type="string">"TT"</literal></expr>, <expr><literal type="string">"T="</literal></expr>, <expr><literal type="string">"T=."</literal></expr>, <expr><literal type="string">"T=&amp;"</literal></expr>,

<expr><literal type="string">"u?"</literal></expr>, <expr><literal type="string">"u"</literal></expr>, <expr><literal type="string">"uw"</literal></expr>, <expr><literal type="string">"us"</literal></expr>, <expr><literal type="string">"uc"</literal></expr>,

<expr><literal type="string">"v"</literal></expr>, <expr><literal type="string">"V"</literal></expr>, <expr><literal type="string">"v!"</literal></expr>, <expr><literal type="string">"vv"</literal></expr>, <expr><literal type="string">"vV"</literal></expr>, <expr><literal type="string">"vVV"</literal></expr>, <expr><literal type="string">"VV"</literal></expr>,

<expr><literal type="string">"w?"</literal></expr>, <expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"w1+"</literal></expr>, <expr><literal type="string">"w1-"</literal></expr>, <expr><literal type="string">"w2+"</literal></expr>, <expr><literal type="string">"w2-"</literal></expr>, <expr><literal type="string">"w4+"</literal></expr>, <expr><literal type="string">"w4-"</literal></expr>, <expr><literal type="string">"w8+"</literal></expr>, <expr><literal type="string">"w8-"</literal></expr>,

<expr><literal type="string">"w0"</literal></expr>, <expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"w6"</literal></expr>, <expr><literal type="string">"w6d"</literal></expr>, <expr><literal type="string">"w6e"</literal></expr>, <expr><literal type="string">"wa"</literal></expr>, <expr><literal type="string">"wa*"</literal></expr>, <expr><literal type="string">"waf"</literal></expr>, <expr><literal type="string">"wao?"</literal></expr>, <expr><literal type="string">"wao"</literal></expr>,

<expr><literal type="string">"wA?"</literal></expr>, <expr><literal type="string">"wA"</literal></expr>, <expr><literal type="string">"wB"</literal></expr>, <expr><literal type="string">"wB-"</literal></expr>, <expr><literal type="string">"wc"</literal></expr>, <expr><literal type="string">"wcj"</literal></expr>, <expr><literal type="string">"wc-"</literal></expr>, <expr><literal type="string">"wc+"</literal></expr>, <expr><literal type="string">"wc*"</literal></expr>, <expr><literal type="string">"wcr"</literal></expr>, <expr><literal type="string">"wci"</literal></expr>, <expr><literal type="string">"wcp"</literal></expr>, <expr><literal type="string">"wcp*"</literal></expr>, <expr><literal type="string">"wcpi"</literal></expr>,

<expr><literal type="string">"wd"</literal></expr>, <expr><literal type="string">"we?"</literal></expr>, <expr><literal type="string">"we"</literal></expr>, <expr><literal type="string">"wen"</literal></expr>, <expr><literal type="string">"weN"</literal></expr>, <expr><literal type="string">"wes"</literal></expr>, <expr><literal type="string">"wex"</literal></expr>, <expr><literal type="string">"weX"</literal></expr>,

<expr><literal type="string">"wf?"</literal></expr>, <expr><literal type="string">"wf"</literal></expr>, <expr><literal type="string">"wff"</literal></expr>, <expr><literal type="string">"wfs"</literal></expr>, <expr><literal type="string">"wF"</literal></expr>, <expr><literal type="string">"wh"</literal></expr>, <expr><literal type="string">"wm"</literal></expr>,

<expr><literal type="string">"wo?"</literal></expr>, <expr><literal type="string">"wo"</literal></expr>, <expr><literal type="string">"wo2"</literal></expr>, <expr><literal type="string">"wo4"</literal></expr>, <expr><literal type="string">"woa"</literal></expr>, <expr><literal type="string">"woA"</literal></expr>, <expr><literal type="string">"wod"</literal></expr>, <expr><literal type="string">"woD"</literal></expr>, <expr><literal type="string">"woe"</literal></expr>, <expr><literal type="string">"woE"</literal></expr>, <expr><literal type="string">"wol"</literal></expr>, <expr><literal type="string">"wom"</literal></expr>, <expr><literal type="string">"woo"</literal></expr>,

<expr><literal type="string">"wop?"</literal></expr>, <expr><literal type="string">"wop"</literal></expr>, <expr><literal type="string">"wopD"</literal></expr>, <expr><literal type="string">"wopD*"</literal></expr>, <expr><literal type="string">"wopO"</literal></expr>,

<expr><literal type="string">"wp?"</literal></expr>, <expr><literal type="string">"wp"</literal></expr>, <expr><literal type="string">"wr"</literal></expr>, <expr><literal type="string">"ws"</literal></expr>,

<expr><literal type="string">"wt?"</literal></expr>, <expr><literal type="string">"wt"</literal></expr>, <expr><literal type="string">"wta"</literal></expr>, <expr><literal type="string">"wtf"</literal></expr>, <expr><literal type="string">"wtf!"</literal></expr>, <expr><literal type="string">"wtff"</literal></expr>, <expr><literal type="string">"wts"</literal></expr>,

<expr><literal type="string">"wu"</literal></expr>,

<expr><literal type="string">"wv?"</literal></expr>, <expr><literal type="string">"wv"</literal></expr>, <expr><literal type="string">"wv1"</literal></expr>, <expr><literal type="string">"wv2"</literal></expr>, <expr><literal type="string">"wv4"</literal></expr>, <expr><literal type="string">"wv8"</literal></expr>,

<expr><literal type="string">"ww"</literal></expr>,

<expr><literal type="string">"wx?"</literal></expr>, <expr><literal type="string">"wx"</literal></expr>, <expr><literal type="string">"wxf"</literal></expr>, <expr><literal type="string">"wxs"</literal></expr>,

<expr><literal type="string">"wz"</literal></expr>,

<expr><literal type="string">"x?"</literal></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"x/"</literal></expr>, <expr><literal type="string">"x0"</literal></expr>, <expr><literal type="string">"xa"</literal></expr>, <expr><literal type="string">"xA?"</literal></expr>, <expr><literal type="string">"xA"</literal></expr>, <expr><literal type="string">"xb"</literal></expr>, <expr><literal type="string">"xc"</literal></expr>, <expr><literal type="string">"xd?"</literal></expr>, <expr><literal type="string">"xd"</literal></expr>, <expr><literal type="string">"xd2"</literal></expr>, <expr><literal type="string">"xd4"</literal></expr>, <expr><literal type="string">"xd8"</literal></expr>,

<expr><literal type="string">"xe"</literal></expr>, <expr><literal type="string">"xf"</literal></expr>, <expr><literal type="string">"xh"</literal></expr>, <expr><literal type="string">"xH"</literal></expr>, <expr><literal type="string">"xi"</literal></expr>, <expr><literal type="string">"xl"</literal></expr>, <expr><literal type="string">"xo"</literal></expr>, <expr><literal type="string">"xq"</literal></expr>, <expr><literal type="string">"xq"</literal></expr>, <expr><literal type="string">"xQ"</literal></expr>, <expr><literal type="string">"xQq"</literal></expr>, <expr><literal type="string">"xr"</literal></expr>, <expr><literal type="string">"xrj"</literal></expr>,

<expr><literal type="string">"xs"</literal></expr>, <expr><literal type="string">"xt"</literal></expr>, <expr><literal type="string">"xt*"</literal></expr>, <expr><literal type="string">"xt."</literal></expr>, <expr><literal type="string">"xw"</literal></expr>, <expr><literal type="string">"xW"</literal></expr>, <expr><literal type="string">"xWq"</literal></expr>, <expr><literal type="string">"xx"</literal></expr>, <expr><literal type="string">"xX"</literal></expr>,

<expr><literal type="string">"y?"</literal></expr>, <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"yz"</literal></expr>, <expr><literal type="string">"yp"</literal></expr>, <expr><literal type="string">"yx"</literal></expr>, <expr><literal type="string">"ys"</literal></expr>, <expr><literal type="string">"yt"</literal></expr>, <expr><literal type="string">"ytf"</literal></expr>, <expr><literal type="string">"yf"</literal></expr>, <expr><literal type="string">"yfa"</literal></expr>, <expr><literal type="string">"yfx"</literal></expr>, <expr><literal type="string">"yw"</literal></expr>, <expr><literal type="string">"ywx"</literal></expr>, <expr><literal type="string">"yy"</literal></expr>,

<expr><literal type="string">"z?"</literal></expr>, <expr><literal type="string">"z"</literal></expr>, <expr><literal type="string">"z*"</literal></expr>, <expr><literal type="string">"zj"</literal></expr>, <expr><literal type="string">"z-"</literal></expr>, <expr><literal type="string">"z-*"</literal></expr>,

<expr><literal type="string">"za?"</literal></expr>, <expr><literal type="string">"za??"</literal></expr>, <expr><literal type="string">"za"</literal></expr>, <expr><literal type="string">"zaf"</literal></expr>, <expr><literal type="string">"zaF"</literal></expr>, <expr><literal type="string">"zg"</literal></expr>,

<expr><literal type="string">"zo?"</literal></expr>, <expr><literal type="string">"zo"</literal></expr>, <expr><literal type="string">"zoz"</literal></expr>, <expr><literal type="string">"zos"</literal></expr>,

<expr><literal type="string">"zf?"</literal></expr>, <expr><literal type="string">"zfd"</literal></expr>, <expr><literal type="string">"zfs"</literal></expr>, <expr><literal type="string">"zfz"</literal></expr>,

<expr><literal type="string">"z/?"</literal></expr>, <expr><literal type="string">"z/"</literal></expr>, <expr><literal type="string">"z/*"</literal></expr>,

<expr><literal type="string">"zc"</literal></expr>,

<expr><literal type="string">"zs?"</literal></expr>, <expr><literal type="string">"zs"</literal></expr>, <expr><literal type="string">"zs-"</literal></expr>, <expr><literal type="string">"zs-*"</literal></expr>, <expr><literal type="string">"zs+"</literal></expr>, <expr><literal type="string">"zsr"</literal></expr>,

<expr><literal type="string">"zi"</literal></expr>,

<expr><literal type="string">"?"</literal></expr>, <expr><literal type="string">"?v"</literal></expr>, <expr><literal type="string">"?$?"</literal></expr>, <expr><literal type="string">"?@?"</literal></expr>, <expr><literal type="string">"?&gt;?"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocomplete_mount_point</name> <parameter_list>(<parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RFSRoot</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;fs-&gt;roots</argument>, <argument>iter</argument>, <argument>r</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>r_str_lchr</name> <argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ls</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ls</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ls</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocomplete_ms_path</name><parameter_list>(<parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lpath</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dirname</name> <init>= <expr><name>NULL</name></expr></init></decl> , <decl><type ref="prev"><modifier>*</modifier></type><name>basename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pwd</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>rfs</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>rfs</name><operator>-&gt;</operator><name>cwd</name></name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><operator>*</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>rfs</name><operator>-&gt;</operator><name>cwd</name></name><operator>)</operator></expr></then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFSFile</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lpath</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_str_last</name> <argument_list>(<argument><expr><name>lpath</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>lpath</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lpath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lpath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>lpath</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>, <argument><expr><name>lpath</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s%s"</literal></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>, <argument><expr><name>lpath</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>basename</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>basename</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>lpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dirname</name> <operator>||</operator> <operator>!</operator><name>basename</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>list</name><operator>=</operator> <call><name>r_fs_dir</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>basename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>chgdir</name> <init>= <expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"cd "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>file</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>basename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>basename</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpstring</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_file_is_directory</name> <argument_list>(<argument><expr><name>tmpstring</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s/"</literal></expr></argument>, <argument><expr><name>tmpstring</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>chgdir</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>tmpstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmpstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>autocomplete_mount_point</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>core</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>basename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocomplete_process_path</name><parameter_list>(<parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lpath</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dirname</name> <init>= <expr><name>NULL</name></expr></init></decl> , <decl><type ref="prev"><modifier>*</modifier></type><name>basename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>home</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lpath</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<expr_stmt><expr><call><name>r_str_replace_ch</name> <argument_list>(<argument><expr><name>lpath</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_str_last</name> <argument_list>(<argument><expr><name>lpath</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>lpath</name></expr>)</condition> <block>{<block_content> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"\\.\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>R_SYS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lpath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal> <operator>&amp;&amp;</operator> <name><name>lpath</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>r_str_home</name> <argument_list>(<argument><expr><name>lpath</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lpath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>home</name> <operator>=</operator> <call><name>r_str_home</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>home</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lpath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name><name>lpath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>R_SYS_DIR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition> <block>{<block_content> 

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>lpath</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><literal type="string">".%s%s%s"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%.0s%s%s"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>, <argument><expr><name>lpath</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>basename</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">".%s"</literal></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>basename</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>lpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dirname</name> <operator>||</operator> <operator>!</operator><name>basename</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>list</name><operator>=</operator> <call><name>r_sys_dir</name> <argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>basename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>chgdir</name> <init>= <expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"cd "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>filename</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>filename</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>basename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>basename</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpstring</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_file_is_directory</name> <argument_list>(<argument><expr><name>tmpstring</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>tmpstring</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>chgdir</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>tmpstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmpstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>basename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocompleteFilename</name><parameter_list>(<parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><name>RLineBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra_paths</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>narg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>input</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pipe</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pipe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>pipe</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>args</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>r_str_word_set0</name> <argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>narg</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>narg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tinput</name> <init>= <expr><call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>autocomplete_process_path</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>tinput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <operator>!</operator><name>extra_paths</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>extra_paths</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name><name>extra_paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>, <argument><expr><name>tinput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>autocomplete_process_path</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>autocomplete_pfele</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pfx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>fmt</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nargs</name> <init>= <expr><call><name>r_str_word_set0_stack</name> <argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nargs</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nargs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>p2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"pf%s.%s.%s"</literal></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDARG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!strncmp (buf-&gt;data+chr, x, strlen (buf-&gt;data+chr))) { r_line_completion_push (completion, x); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocomplete_default</name><parameter_list>(<parameter><decl><type><name>R_NULLABLE</name> <name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><name>RLineBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCoreAutocomplete</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><ternary><condition><expr><name>core</name></expr> ?</condition><then> <expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>n_subcmds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>subcmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>cmd</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>subcmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>subcmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>radare_argc</name> <operator>&amp;&amp;</operator> <name><name>radare_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>radare_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>radare_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name><name>radare_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocomplete_evals</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>bt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>strrchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;config-&gt;nodes</argument>, <argument>iter</argument>, <argument>bt</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>bt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name><name>bt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocomplete_project</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>foo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>projects_path</name> <init>= <expr><call><name>r_file_abspath</name> <argument_list>(<argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dir.projects"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_sys_dir</name> <argument_list>(<argument><expr><name>projects_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>projects_path</name></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>foo</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_core_is_project</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>foo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>foo</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>projects_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocomplete_minus</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name> <init>= <expr><call><name>r_cmd_alias_keys</name><argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>rcmd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keys</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocomplete_breakpoints</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBreakpoint</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>bp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBreakpointItem</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bp-&gt;bps</argument>, <argument>iter</argument>, <argument>b</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>add_argv</name><parameter_list>(<parameter><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fi</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocomplete_flags</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_flag_foreach_prefix</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>add_argv</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocomplete_sdb</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>core</name> <operator>&amp;&amp;</operator> <name>completion</name> <operator>&amp;&amp;</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pipe</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>sdb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lpath</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur_pos</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur_cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp_cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>temp_pos</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pipe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>pipe</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lpath</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>lpath</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ns</name> <init>= <expr><name>p1</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p2</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>p1</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>sdb_querys</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"anal/**"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_pos</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur_pos</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_cmd</name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>cur_pos</name> <operator>-</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>cur_cmd</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmplt</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"anal/%s/"</literal></expr></argument>, <argument><expr><name>cur_cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>cmplt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmplt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>cur_pos</name> <operator>-</operator> <name>out</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>p2</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>spltr</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>spltr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>next_cmd</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"anal/%s/*"</literal></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>sdb_querys</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>next_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp_pos</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp_pos</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>temp_cmd</name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>temp_pos</name> <operator>-</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>temp_cmd</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>temp_cmd</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmplt</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"anal/%s/%s"</literal></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>temp_cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>cmplt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmplt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>temp_pos</name> <operator>-</operator> <name>out</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>lpath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>lpath</name></expr></argument>, <argument><expr><literal type="string">"anal"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><literal type="string">"anal/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocomplete_zignatures</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>zs</name> <init>= <expr><operator>&amp;</operator><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSpaceIter</name></type> <name>it</name></decl>;</decl_stmt>

<macro><name>r_spaces_foreach</name> <argument_list>(<argument>zs</argument>, <argument>it</argument>, <argument>s</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocomplete_flagspaces</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSpaceIter</name></type> <name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<macro><name>r_flag_space_foreach</name> <argument_list>(<argument>flag</argument>, <argument>it</argument>, <argument>s</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocomplete_functions</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;anal-&gt;fcns</argument>, <argument>iter</argument>, <argument>fcn</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>r_core_anal_fcn_name</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocomplete_macro</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RCmdMacroItem</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;rcmd-&gt;macro.macros</argument>, <argument>iter</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>str</name> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s)"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocomplete_file</name><parameter_list>(<parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pipe</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pipe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>pipe</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>autocomplete_process_path</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"./"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>autocomplete_process_path</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocomplete_ms_file</name><parameter_list>(<parameter><decl><type><name>RCore</name><modifier>*</modifier></type> <name>core</name></decl></parameter>, <parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pipe</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>rfs</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>rfs</name><operator>-&gt;</operator><name>cwd</name></name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><operator>*</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>rfs</name><operator>-&gt;</operator><name>cwd</name></name><operator>)</operator></expr></then><else>: <expr><literal type="string">"/"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pipe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>pipe</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>autocomplete_ms_path</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>core</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>autocomplete_ms_path</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>core</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>autocomplete_theme</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>theme</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>themes</name> <init>= <expr><call><name>r_core_list_themes</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>themes</argument>, <argument>iter</argument>, <argument>theme</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>theme</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>theme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>themes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>find_e_opts</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><name>RLineBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><literal type="string">"e (.*)="</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRegex</name> <modifier>*</modifier></type><name>rx</name> <init>= <expr><call><name>r_regex_new</name> <argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="string">"e"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>nmatch</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRegexMatch</name></type> <name><name>pmatch</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_config_update</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_regex_exec</name> <argument_list>(<argument><expr><name>rx</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>pmatch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pmatch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_appendch</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sp</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_config_node_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_str_ichr</name> <argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>node-&gt;options</argument>, <argument>iter</argument>, <argument>option</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>completion</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>r_regex_free</name> <argument_list>(<argument><expr><name>rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>find_autocomplete</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><name>RLineBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCoreAutocomplete</name><modifier>*</modifier></type> <name>child</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCoreAutocomplete</name><modifier>*</modifier></type> <name>parent</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>arg</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>e</name> <init>= <expr><call><name>r_str_trim_head_wp</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name> <operator>||</operator> <operator>(</operator><name>e</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">256</literal> <operator>||</operator> <name>e</name> <operator>==</operator> <name>p</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><index>[<expr><name>e</name> <operator>-</operator> <name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>r_core_autocomplete_find</name> <argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>child</name> <operator>&amp;&amp;</operator> <name><name>child</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name><name>child</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name><name>child</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_CORE_AUTOCMPLT_OPTN</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_line_completion_clear</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_CORE_AUTOCMPLT_SEEK</name></expr>:</case>

<expr_stmt><expr><call><name>autocomplete_functions</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>R_CORE_AUTOCMPLT_FLAG</name></expr>:</case>

<expr_stmt><expr><call><name>autocomplete_flags</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CORE_AUTOCMPLT_FLSP</name></expr>:</case>

<expr_stmt><expr><call><name>autocomplete_flagspaces</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CORE_AUTOCMPLT_FCN</name></expr>:</case>

<expr_stmt><expr><call><name>autocomplete_functions</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CORE_AUTOCMPLT_ZIGN</name></expr>:</case>

<expr_stmt><expr><call><name>autocomplete_zignatures</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CORE_AUTOCMPLT_EVAL</name></expr>:</case>

<expr_stmt><expr><call><name>autocomplete_evals</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CORE_AUTOCMPLT_PRJT</name></expr>:</case>

<expr_stmt><expr><call><name>autocomplete_project</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CORE_AUTOCMPLT_MINS</name></expr>:</case>

<expr_stmt><expr><call><name>autocomplete_minus</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CORE_AUTOCMPLT_BRKP</name></expr>:</case>

<expr_stmt><expr><call><name>autocomplete_breakpoints</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CORE_AUTOCMPLT_MACR</name></expr>:</case>

<expr_stmt><expr><call><name>autocomplete_macro</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CORE_AUTOCMPLT_MS</name></expr>:</case>

<expr_stmt><expr><call><name>autocomplete_ms_file</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CORE_AUTOCMPLT_FILE</name></expr>:</case>

<expr_stmt><expr><call><name>autocomplete_file</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CORE_AUTOCMPLT_THME</name></expr>:</case>

<expr_stmt><expr><call><name>autocomplete_theme</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CORE_AUTOCMPLT_SDB</name></expr>:</case>

<expr_stmt><expr><call><name>autocomplete_sdb</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CORE_AUTOCMPLT_OPTN</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.newtab"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RCmdDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>&amp;</operator><name><name>core</name><operator>-&gt;</operator><name>root_cmd_descriptor</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>desc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>c</name> <init>= <expr><name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <ternary><condition><expr><name>c</name> <operator>&lt;</operator> <call><name>R_ARRAY_SIZE</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>sub</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>c</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>help_msg</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>help_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>parent</name><operator>-&gt;</operator><name>n_subcmds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>subcmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>cmd</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>subcmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_autocomplete</name><parameter_list>(<parameter><decl><type><name>R_NULLABLE</name> <name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><name>RLineBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>RLinePromptType</name></type> <name>prompt_type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>autocomplete_default</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_line_completion_clear</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pipe</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pipe</name> <operator>&amp;&amp;</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>pipe</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <name>pipe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>autocompleteFilename</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <name>ptr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sdelta</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sdelta</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_flag_foreach_prefix</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>sdelta</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>add_argv</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"#!pipe "</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>autocompleteFilename</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>chr</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADDARG</name> <argument_list>(<argument><expr><literal type="string">"node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDARG</name> <argument_list>(<argument><expr><literal type="string">"vala"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDARG</name> <argument_list>(<argument><expr><literal type="string">"ruby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDARG</name> <argument_list>(<argument><expr><literal type="string">"newlisp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDARG</name> <argument_list>(<argument><expr><literal type="string">"perl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDARG</name> <argument_list>(<argument><expr><literal type="string">"python"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"ec "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>autocompleteFilename</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>chr</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"comment"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"usrcmt"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"args"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"fname"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"floc"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"fline"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"flag"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"label"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"help"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"flow"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"prompt"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"offset"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"input"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"invalid"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"other"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"b0x00"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"b0x7f"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"b0xff"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"math"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"bin"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"btext"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"push"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"pop"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"crypto"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"jmp"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"cjmp"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"call"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"nop"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"ret"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"trap"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"swi"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"cmp"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"reg"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"creg"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"num"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"mov"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"func_var"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"func_var_type"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"func_var_addr"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"widget_bg"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"widget_sel"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"ai.read"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"ai.write"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"ai.exec"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"ai.seq"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"ai.ascii"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"ai.unmap"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"graph.box"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"graph.box2"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"graph.box3"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"graph.box4"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"graph.true"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"graph.false"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"graph.trufae"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"graph.current"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"graph.traced"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"gui.cflow"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"gui.dataoffset"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"gui.background"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"gui.alt_background"</literal></argument>)</argument_list></macro>

<macro><name>ADDARG</name><argument_list>(<argument><literal type="string">"gui.border"</literal></argument>)</argument_list></macro>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"pf."</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"pf*."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"pfd."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"pfv."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"pfj."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>pfx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chr</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">3</literal></expr></then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>chr</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pfx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pfx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pfx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>sls</name> <init>= <expr><call><name>sdb_foreach_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>sls</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>chr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minlen</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>chr</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>minlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>chr</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <call><name>autocomplete_pfele</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"pf%s.%s"</literal></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"afvn "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"afan "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>vars</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"afvn "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vars</name> <operator>=</operator> <call><name>r_anal_var_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>R_ANAL_VAR_KIND_BPV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>vars</name> <operator>=</operator> <call><name>r_anal_var_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>R_ANAL_VAR_KIND_ARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalVar</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f_ptr</name> <operator>=</operator> <call><name>r_sub_str_lchr</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f_ptr</name> <operator>=</operator> <ternary><condition><expr><name>f_ptr</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>f_ptr</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>l_ptr</name> <operator>=</operator> <call><name>r_sub_str_rchr</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>l_ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l_ptr</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>vars</argument>, <argument>iter</argument>, <argument>var</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>f_ptr</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>l_ptr</name> <operator>-</operator> <name>f_ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"t "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"t- "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>sdb_foreach_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chr</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">2</literal></expr></then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>l</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>chr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>chr</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"enum"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"struct"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"te "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>sdb_foreach_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chr</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>l</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>chr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>chr</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"enum"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"$"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>core</name><operator>-&gt;</operator><name>rcmd</name><operator>-&gt;</operator><name>aliases</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>rcmd</name><operator>-&gt;</operator><name>aliases</name><operator>.</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"ts "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"ta "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"tp "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"tl "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"tpx "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"tss "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"ts* "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>sdb_foreach_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chr</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">3</literal></expr></then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>l</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>chr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>chr</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"struct"</literal></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"struct"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_completion_push</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"zo "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"zoz "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>zign_path</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>zign_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zignpath</name> <init>= <expr><call><name>r_file_abspath</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>zign_path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>paths</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>zignpath</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>autocompleteFilename</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>zignpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>autocompleteFilename</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>find_e_opts</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>prompt_type</name> <operator>==</operator> <name>R_LINE_PROMPT_OFFSET</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>autocomplete_flags</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>prompt_type</name> <operator>==</operator> <name>R_LINE_PROMPT_FILE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>autocomplete_file</name> <argument_list>(<argument><expr><name>completion</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>find_autocomplete</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>autocomplete_default</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>autocomplete</name><parameter_list>(<parameter><decl><type><name>RLineCompletion</name> <modifier>*</modifier></type><name>completion</name></decl></parameter>, <parameter><decl><type><name>RLineBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>RLinePromptType</name></type> <name>prompt_type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_autocomplete</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>completion</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>prompt_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_fgets</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RLine</name> <modifier>*</modifier></type><name>rli</name> <init>= <expr><call><name>r_line_singleton</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_line_completion_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>rli</name><operator>-&gt;</operator><name>completion</name></name></expr></argument>, <argument><expr><name>radare_argc</name></expr></argument>, <argument><expr><name>radare_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rli</name><operator>-&gt;</operator><name>completion</name><operator>.</operator><name>run</name></name> <operator>=</operator> <name>autocomplete</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rli</name><operator>-&gt;</operator><name>completion</name><operator>.</operator><name>run_user</name></name> <operator>=</operator> <name><name>rli</name><operator>-&gt;</operator><name>user</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>r_line_readline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_core_print_offname</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>item</name></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_core_print_offsize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>item</name></expr> ?</condition><then> <expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__disasm</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name>_core</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>prevaddr</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_core_print_disasm_instructions</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>prevaddr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_sdb</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><literal type="string">"anal"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>sdb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><literal type="string">"bin"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><call><name>sdb_ns</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><literal type="string">"bin"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>syscall</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>syscall</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>syscall</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>refs</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><literal type="string">"syscall"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>syscall</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>sdb_ns</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><literal type="string">"debug"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>sgnls</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>sgnls</name><operator>-&gt;</operator><name>refs</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"signals"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>sgnls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINLEN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_string</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<return>return <expr><literal type="number">2</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <name>MINLEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">10</literal><operator>||</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">13</literal><operator>||</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">32</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_PRINTABLE</name> <argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>r_core_anal_hasrefs_to_depth</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_core_anal_hasrefs</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>verbose</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hex_depth</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"hex.depth"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_core_anal_hasrefs_to_depth</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>hex_depth</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>fi</name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>r_core_anal_hasrefs_to_depth</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>value</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mapname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>r_flag_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>type</name> <init>= <expr><call><name>r_core_anal_address</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>r_debug_map_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>map</name> <operator>&amp;&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mapname</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mapname</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" (%s)"</literal></expr></argument>, <argument><expr><name>mapname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>mapname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>bits</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">16</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>st16</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>st16</name><operator>)</operator><operator>(</operator><name>value</name> <operator>&amp;</operator> <name>UT16_MAX</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st16</name></type> <name>h</name> <init>= <expr><name>UT16_MAX</name> <operator>/</operator> <literal type="number">0x100</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <operator>-</operator><name>h</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;</operator> <name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">" %hd"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>st32</name><operator>)</operator><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>h</name> <init>= <expr><name>UT32_MAX</name> <operator>/</operator> <literal type="number">0x10000</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <operator>-</operator><name>h</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;</operator> <name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="number">64</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>st64</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>st64</name><operator>)</operator><operator>(</operator><name>value</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>h</name> <init>= <expr><name>UT64_MAX</name> <operator>/</operator> <literal type="number">0x1000000</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <operator>-</operator><name>h</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;</operator> <name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">" %"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>sect</name> <init>= <expr><ternary><condition><expr><name>value</name></expr>?</condition><then> <expr><call><name>r_bin_get_section_at</name> <argument_list>(<argument><expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator> <operator>(</operator><operator>(</operator><name>type</name><operator>&amp;</operator><name>R_ANAL_ADDR_TYPE_HEAP</name><operator>)</operator><operator>||</operator><operator>(</operator><name>type</name><operator>&amp;</operator><name>R_ANAL_ADDR_TYPE_STACK</name><operator>)</operator><operator>)</operator></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sect</name> <operator>&amp;&amp;</operator> <name><name>sect</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">" (%s)"</literal></expr></argument>, <argument><expr><name><name>sect</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fi</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>fi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_get_fcn_in</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fcn</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>r_core_anal_optype_colorfor</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cend</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>c</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name><operator>)</operator></expr> ?</condition><then> <expr><name>Color_RESET</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_HEAP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" %sheap%s"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_STACK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" %sstack%s"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_PROGRAM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" %sprogram%s"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_LIBRARY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" %slibrary%s"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_ASCII</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" %sascii%s ('%c')"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>cend</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" %ssequence%s"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_READ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" %sR%s"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_WRITE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" %sW%s"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_EXEC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RAsmOp</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" %sX%s"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asm_set_pc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asm_disassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" '%s'"</literal></expr></argument>, <argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content> 

<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;dbg-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>&gt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>value</name><operator>&lt;</operator><name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lastslash</name> <init>= <expr><call><name>r_str_lchr</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" '%s'"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>lastslash</name></expr>?</condition><then>

<expr><name>lastslash</name><operator>+</operator><literal type="number">1</literal></expr></then><else>:<expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_READ</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>n32</name> <init>= <expr><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>n64</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr>?</condition><then> <expr><operator>*</operator><name>n64</name></expr></then><else>: <expr><operator>*</operator><name>n32</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>widebuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><ternary><condition><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>ai_ascii</name></name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cend</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>c</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name><operator>)</operator></expr> ?</condition><then> <expr><name>Color_RESET</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>is_string</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" (%s%s%s)"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_utf8_encode_str</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>RRune</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>widebuf</name></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>widebuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Something was wrong with refs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" (%s%s%s)"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>widebuf</name></expr></argument>, <argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_READ</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_EXEC</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>depth</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>n32</name> <init>= <expr><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>n64</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr>?</condition><then> <expr><operator>*</operator><name>n64</name></expr></then><else>: <expr><operator>*</operator><name>n32</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>n</name> <operator>!=</operator> <name>value</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>rrstr</name> <init>= <expr><call><name>r_core_anal_hasrefs_to_depth</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>depth</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rrstr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rrstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" --&gt; %s"</literal></expr></argument>, <argument><expr><name>rrstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rrstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mapname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_core_anal_get_comments</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>core</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>r_meta_get_string</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>R_META_TYPE_VARTYPE</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmt</name> <init>= <expr><call><name>r_meta_get_string</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>R_META_TYPE_COMMENT</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;&amp;</operator> <name>cmt</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>cmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>type</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmt</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>cmt</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_core_anal_optype_colorfor</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>verbose</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_PRINT_FLAGS_COLOR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>r_core_anal_address</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_EXEC</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>ai_exec</name></name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_WRITE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>ai_write</name></name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_READ</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>ai_read</name></name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>ai_seq</name></name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>R_ANAL_ADDR_TYPE_ASCII</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>ai_ascii</name></name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_core_setenv</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"PATH"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>r_str_home</name> <argument_list>(<argument><expr><name>R2_HOME_BIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>R_SYS_ENVSEP</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><literal type="string">"PATH"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mywrite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_cons_memcat</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>exists_var</name><parameter_list>(<parameter><decl><type><name>RPrint</name> <modifier>*</modifier></type><name>print</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>func_addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name_key</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"var.0x%"</literal><name>PFMT64x</name> <literal type="string">".%d.%s"</literal></expr></argument>, <argument><expr><name>func_addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sdb_const_get_len</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>print</name><operator>-&gt;</operator><name>user</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name><name>anal</name><operator>-&gt;</operator><name>sdb_fcns</name></name></expr></argument>, <argument><expr><name>name_key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_core_anal_log</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_anal_t</name></name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>anal</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>cfglog</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_log_add</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_core_anal_read_at</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_anal_t</name></name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_core_break</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>r_core_sleep_begin</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCoreTask</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>r_core_task_self</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>core</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>task</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_task_sleep_begin</name> <argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>task</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_core_sleep_end</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCoreTask</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><operator>(</operator><name>RCoreTask</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>task</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_task_sleep_end</name> <argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__foreach</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cmds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cmds</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_autocomplete_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><name><name>cmds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__init_autocomplete_default</name> <parameter_list>(<parameter><decl><type><name>RCore</name><modifier>*</modifier></type> <name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fcns</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"afi"</literal></expr>, <expr><literal type="string">"afcf"</literal></expr>, <expr><literal type="string">"afn"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>seeks</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"s"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>flags</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"*"</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"s+"</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"fg"</literal></expr>, <expr><literal type="string">"?"</literal></expr>, <expr><literal type="string">"?v"</literal></expr>, <expr><literal type="string">"ad"</literal></expr>, <expr><literal type="string">"bf"</literal></expr>, <expr><literal type="string">"c1"</literal></expr>, <expr><literal type="string">"db"</literal></expr>, <expr><literal type="string">"dbw"</literal></expr>,

<expr><literal type="string">"f-"</literal></expr>, <expr><literal type="string">"fr"</literal></expr>, <expr><literal type="string">"tf"</literal></expr>, <expr><literal type="string">"/a"</literal></expr>, <expr><literal type="string">"/v"</literal></expr>, <expr><literal type="string">"/r"</literal></expr>, <expr><literal type="string">"/re"</literal></expr>, <expr><literal type="string">"aav"</literal></expr>, <expr><literal type="string">"aep"</literal></expr>, <expr><literal type="string">"aef"</literal></expr>, <expr><literal type="string">"afb"</literal></expr>,

<expr><literal type="string">"afc"</literal></expr>, <expr><literal type="string">"axg"</literal></expr>, <expr><literal type="string">"axt"</literal></expr>, <expr><literal type="string">"axf"</literal></expr>, <expr><literal type="string">"dcu"</literal></expr>, <expr><literal type="string">"ag"</literal></expr>, <expr><literal type="string">"agfl"</literal></expr>, <expr><literal type="string">"aecu"</literal></expr>, <expr><literal type="string">"aesu"</literal></expr>, <expr><literal type="string">"aeim"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>evals</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"ee"</literal></expr>, <expr><literal type="string">"et"</literal></expr>, <expr><literal type="string">"e?"</literal></expr>, <expr><literal type="string">"e!"</literal></expr>, <expr><literal type="string">"ev"</literal></expr>, <expr><literal type="string">"evj"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>breaks</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"db-"</literal></expr>, <expr><literal type="string">"dbc"</literal></expr>, <expr><literal type="string">"dbC"</literal></expr>, <expr><literal type="string">"dbd"</literal></expr>, <expr><literal type="string">"dbe"</literal></expr>, <expr><literal type="string">"dbs"</literal></expr>, <expr><literal type="string">"dbi"</literal></expr>, <expr><literal type="string">"dbte"</literal></expr>, <expr><literal type="string">"dbtd"</literal></expr>, <expr><literal type="string">"dbts"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>files</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"."</literal></expr>, <expr><literal type="string">".."</literal></expr>, <expr><literal type="string">".*"</literal></expr>, <expr><literal type="string">"/F"</literal></expr>, <expr><literal type="string">"/m"</literal></expr>, <expr><literal type="string">"!"</literal></expr>, <expr><literal type="string">"!!"</literal></expr>, <expr><literal type="string">"#!c"</literal></expr>, <expr><literal type="string">"#!v"</literal></expr>, <expr><literal type="string">"#!cpipe"</literal></expr>, <expr><literal type="string">"#!vala"</literal></expr>,

<expr><literal type="string">"#!rust"</literal></expr>, <expr><literal type="string">"#!zig"</literal></expr>, <expr><literal type="string">"#!pipe"</literal></expr>, <expr><literal type="string">"#!python"</literal></expr>, <expr><literal type="string">"aeli"</literal></expr>, <expr><literal type="string">"arp"</literal></expr>, <expr><literal type="string">"dmd"</literal></expr>, <expr><literal type="string">"drp"</literal></expr>, <expr><literal type="string">"o"</literal></expr>,

<expr><literal type="string">"idp"</literal></expr>, <expr><literal type="string">"idpi"</literal></expr>, <expr><literal type="string">"L"</literal></expr>, <expr><literal type="string">"obf"</literal></expr>, <expr><literal type="string">"o+"</literal></expr>, <expr><literal type="string">"oc"</literal></expr>, <expr><literal type="string">"r2"</literal></expr>, <expr><literal type="string">"rabin2"</literal></expr>, <expr><literal type="string">"rasm2"</literal></expr>, <expr><literal type="string">"rahash2"</literal></expr>, <expr><literal type="string">"rax2"</literal></expr>,

<expr><literal type="string">"rafind2"</literal></expr>, <expr><literal type="string">"cd"</literal></expr>, <expr><literal type="string">"on"</literal></expr>, <expr><literal type="string">"op"</literal></expr>, <expr><literal type="string">"wf"</literal></expr>, <expr><literal type="string">"rm"</literal></expr>, <expr><literal type="string">"wF"</literal></expr>, <expr><literal type="string">"wp"</literal></expr>, <expr><literal type="string">"Sd"</literal></expr>, <expr><literal type="string">"Sl"</literal></expr>, <expr><literal type="string">"to"</literal></expr>, <expr><literal type="string">"pm"</literal></expr>,

<expr><literal type="string">"/m"</literal></expr>, <expr><literal type="string">"zos"</literal></expr>, <expr><literal type="string">"zfd"</literal></expr>, <expr><literal type="string">"zfs"</literal></expr>, <expr><literal type="string">"zfz"</literal></expr>, <expr><literal type="string">"cat"</literal></expr>, <expr><literal type="string">"wta"</literal></expr>, <expr><literal type="string">"wtf"</literal></expr>, <expr><literal type="string">"wxf"</literal></expr>, <expr><literal type="string">"dml"</literal></expr>, <expr><literal type="string">"vi"</literal></expr>,

<expr><literal type="string">"less"</literal></expr>, <expr><literal type="string">"head"</literal></expr>, <expr><literal type="string">"tail"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>projs</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Pc"</literal></expr>, <expr><literal type="string">"Pd"</literal></expr>, <expr><literal type="string">"Pi"</literal></expr>, <expr><literal type="string">"Po"</literal></expr>, <expr><literal type="string">"Ps"</literal></expr>, <expr><literal type="string">"P-"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>mounts</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"md"</literal></expr>, <expr><literal type="string">"mg"</literal></expr>, <expr><literal type="string">"mo"</literal></expr>, <expr><literal type="string">"ms"</literal></expr>, <expr><literal type="string">"mc"</literal></expr>, <expr><literal type="string">"mi"</literal></expr>, <expr><literal type="string">"mw"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__foreach</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__foreach</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>seeks</name></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_SEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__foreach</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>fcns</name></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_FCN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__foreach</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>evals</name></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_EVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__foreach</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>breaks</name></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_BRKP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__foreach</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__foreach</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>projs</name></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_PRJT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__foreach</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>mounts</name></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_autocomplete_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_MINS</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_autocomplete_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><literal type="string">"zs"</literal></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_ZIGN</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_autocomplete_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><literal type="string">"fs"</literal></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_FLSP</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_autocomplete_add</name> <argument_list>(

<argument><expr><call><name>r_core_autocomplete_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><literal type="string">"ls"</literal></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_DFLT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"-l"</literal></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_FILE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_autocomplete_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><literal type="string">"eco"</literal></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_THME</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_autocomplete_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><literal type="string">"k"</literal></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_SDB</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_autocomplete_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><literal type="string">".("</literal></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_MACR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_autocomplete_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><literal type="string">"(-"</literal></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_MACR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>radare_argc</name> <operator>&amp;&amp;</operator> <name><name>radare_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_core_autocomplete_find</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><name><name>radare_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_autocomplete_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><name><name>radare_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_DFLT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__init_autocomplete</name> <parameter_list>(<parameter><decl><type><name>RCore</name><modifier>*</modifier></type> <name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCoreAutocomplete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete_type</name></name> <operator>==</operator> <name>AUTOCOMPLETE_DEFAULT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__init_autocomplete_default</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete_type</name></name> <operator>==</operator> <name>AUTOCOMPLETE_MS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_autocomplete_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><literal type="string">"ls"</literal></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_MS</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_autocomplete_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><literal type="string">"cd"</literal></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_MS</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_autocomplete_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><literal type="string">"cat"</literal></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_MS</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_autocomplete_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_MS</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_autocomplete_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><literal type="string">"mount"</literal></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_MS</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ms_argc</name> <operator>&amp;&amp;</operator> <name><name>ms_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_core_autocomplete_find</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><name><name>ms_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_autocomplete_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>, <argument><expr><name><name>ms_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>R_CORE_AUTOCMPLT_MS</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>colorfor_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>verbose</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_core_anal_optype_colorfor</name> <argument_list>(<argument><expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hasrefs_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>verbose</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_core_anal_hasrefs</name> <argument_list>(<argument><expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_section_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_core_get_section_name</name> <argument_list>(<argument><expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_comments_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_core_anal_get_comments</name> <argument_list>(<argument><expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>user</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cb_event_handler</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name><name>ev</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>log_events</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>REventMeta</name> <modifier>*</modifier></type><name>rems</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>r_base64_encode_dyn</name> <argument_list>(<argument><expr><name><name>rems</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>event_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_EVENT_META_SET</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>rems</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_core_log_add</name> <argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">":add-comment 0x%08"</literal><name>PFMT64x</name><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name><name>rems</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>str</name></expr>?</condition><then> <expr><name>str</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>R_EVENT_META_DEL</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>rems</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_core_log_add</name> <argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">":del-comment 0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>rems</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_core_log_add</name> <argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">":del-comment 0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>rems</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>R_EVENT_META_CLEAR</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>rems</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_core_log_add</name> <argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">":clear-comments 0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>rems</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_core_log_add</name> <argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">":clear-comments 0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>rems</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RFlagItem</name> <modifier>*</modifier></type><name>core_flg_class_set</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_flag_space_push</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>R_FLAGS_FS_CLASSES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_flag_set</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_flag_space_pop</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RFlagItem</name> <modifier>*</modifier></type><name>core_flg_class_get</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_flag_space_push</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>R_FLAGS_FS_CLASSES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_flag_get</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_flag_space_pop</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RFlagItem</name> <modifier>*</modifier></type><name>core_flg_fcn_set</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_flag_space_push</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>R_FLAGS_FS_FUNCTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_flag_set</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_flag_space_pop</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_autocomplete_reload</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_autocomplete_free</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__init_autocomplete</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RFlagItem</name> <modifier>*</modifier></type><name>r_core_flag_get_by_spaces</name><parameter_list>(<parameter><decl><type><name>RFlag</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_flag_get_by_spaces</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>off</name></expr></argument>,

<argument><expr><name>R_FLAGS_FS_FUNCTIONS</name></expr></argument>,

<argument><expr><name>R_FLAGS_FS_SIGNS</name></expr></argument>,

<argument><expr><name>R_FLAGS_FS_CLASSES</name></expr></argument>,

<argument><expr><name>R_FLAGS_FS_SYMBOLS</name></expr></argument>,

<argument><expr><name>R_FLAGS_FS_IMPORTS</name></expr></argument>,

<argument><expr><name>R_FLAGS_FS_RELOCS</name></expr></argument>,

<argument><expr><name>R_FLAGS_FS_STRINGS</name></expr></argument>,

<argument><expr><name>R_FLAGS_FS_RESOURCES</name></expr></argument>,

<argument><expr><name>R_FLAGS_FS_SYMBOLS_SECTIONS</name></expr></argument>,

<argument><expr><name>R_FLAGS_FS_SECTIONS</name></expr></argument>,

<argument><expr><name>R_FLAGS_FS_SEGMENTS</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>win_eprintf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_win_vhprintf</name> <argument_list>(<argument><expr><name>STD_ERROR_HANDLE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_core_init</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <name>R_CORE_BLOCKSIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><call><name>calloc</name> <argument_list>(<argument><expr><name>R_CORE_BLOCKSIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>block</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot allocate %d byte(s)\n"</literal></expr></argument>, <argument><expr><name>R_CORE_BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_core_setenv</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>ev</name></name> <operator>=</operator> <call><name>r_event_new</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_event_hook</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name>R_EVENT_ALL</name></expr></argument>, <argument><expr><name>cb_event_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>max_cmd_depth</name></name> <operator>=</operator> <name>R_CONS_CMD_DEPTH</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>sdb</name></name> <operator>=</operator> <call><name>sdb_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"r2kv.sdb"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>lastsearch</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cmdfilter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>switch_file_view</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cmdremote</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>incomment</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>http_up</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>use_tree_sitter_r2cmd</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>root_cmd_descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name> <operator>=</operator> <call><name>r_print_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>ropchain</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_bind</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>coreb</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>core</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>offname</name></name> <operator>=</operator> <name>r_core_print_offname</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>offsize</name></name> <operator>=</operator> <name>r_core_print_offsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <name>r_cons_printf</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cb_eprintf</name></name> <operator>=</operator> <name>win_eprintf</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cb_color</name></name> <operator>=</operator> <name>r_cons_rainbow_get</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <name>mywrite</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>exists_var</name></name> <operator>=</operator> <name>exists_var</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>disasm</name></name> <operator>=</operator> <name>__disasm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>colorfor</name></name> <operator>=</operator> <name>colorfor_cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>hasrefs</name></name> <operator>=</operator> <name>hasrefs_cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>get_comments</name></name> <operator>=</operator> <name>get_comments_cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>get_section_name</name></name> <operator>=</operator> <name>get_section_name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>use_comments</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>rtr_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize_max</name></name> <operator>=</operator> <name>R_CORE_BLOCKSIZE_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_task_scheduler_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>core</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>watchers</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>watchers</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator><name>r_core_cmpwatch_free</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>scriptstack</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>scriptstack</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>log</name></name> <operator>=</operator> <call><name>r_core_log_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>times</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCoreTimes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>vmode</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>printidx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>lastcmd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cmdlog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>stkcmd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cmdqueue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cmdrepeat</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>yank_buf</name></name> <operator>=</operator> <call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <call><name>r_num_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>num_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str_callback</name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>egg</name></name> <operator>=</operator> <call><name>r_egg_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_egg_setup</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>, <argument><expr><name>R_SYS_ARCH</name></expr></argument>, <argument><expr><name>R_SYS_BITS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_SYS_OS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>undos</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_core_undo_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>fixedarch</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>fixedbits</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name></name> <operator>=</operator> <call><name>r_cons_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name></name> <operator>=</operator> <call><name>r_cons_singleton</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>line</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>line</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>core</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>line</name><operator>-&gt;</operator><name>cb_editor</name></name> <operator>=</operator> \

<operator>(</operator><name>RLineEditorCb</name><operator>)</operator><operator>&amp;</operator><name>r_core_editor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>line</name><operator>-&gt;</operator><name>cb_fkey</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>cb_fkey</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__EMSCRIPTEN__</name></expr></cpp:if>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>user_fgets</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>user_fgets</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>r_core_fgets</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>r_line_hist_load</name> <argument_list>(<argument><expr><name>R2_HOME_HISTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>cons</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>cons</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_bind</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>consbind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>lang</name></name> <operator>=</operator> <call><name>r_lang_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>lang</name><operator>-&gt;</operator><name>cmd_str</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>r_core_cmd_str</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>lang</name><operator>-&gt;</operator><name>cmdf</name></name> <operator>=</operator> <operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list></call><operator>)</operator><name>r_core_cmdf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_bind_cons</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>lang</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <name>r_cons_printf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_lang_define</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>, <argument><expr><literal type="string">"RCore"</literal></expr></argument>, <argument><expr><literal type="string">"core"</literal></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_lang_set_user_ptr</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name> <operator>=</operator> <call><name>r_asm_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asm_set_user_ptr</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name> <operator>=</operator> <call><name>r_anal_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>gadgets</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_core_gadget_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>ev</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>ev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>log</name></name> <operator>=</operator> <name>r_core_anal_log</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>read_at</name></name> <operator>=</operator> <name>r_core_anal_read_at</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>flag_get</name></name> <operator>=</operator> <name>r_core_flag_get_by_spaces</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>on_fcn_new</name></name> <operator>=</operator> <name>on_fcn_new</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>on_fcn_delete</name></name> <operator>=</operator> <name>on_fcn_delete</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>on_fcn_rename</name></name> <operator>=</operator> <name>on_fcn_rename</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>sdb_types</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>syscall</name></name> <operator>=</operator> <call><name>r_syscall_ref</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>syscall</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_anal_set_user_ptr</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>r_cons_printf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name></name> <operator>=</operator> <call><name>r_parse_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_bind</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>analb</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>varlist</name></name> <operator>=</operator> <name>r_anal_var_list</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_parse_set_user_ptr</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name> <operator>=</operator> <call><name>r_bin_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_bind</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>consb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <operator>(</operator><name>PrintfCallback</name><operator>)</operator> <name>r_cons_printf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_bin_set_user_ptr</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name> <operator>=</operator> <call><name>r_io_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>ff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>core</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>cb_core_cmd</name></name> <operator>=</operator> <name>core_cmd_callback</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>cb_core_cmdstr</name></name> <operator>=</operator> <name>core_cmdstr_callback</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>cb_core_post_write</name></name> <operator>=</operator> <name>core_post_write_callback</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>search</name></name> <operator>=</operator> <call><name>r_search_new</name> <argument_list>(<argument><expr><name>R_SEARCH_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_undo_enable</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>fs</name></name> <operator>=</operator> <call><name>r_fs_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>r_flag_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <name>r_cons_printf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>graph</name></name> <operator>=</operator> <call><name>r_agraph_new</name> <argument_list>(<argument><expr><call><name>r_cons_canvas_new</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>need_reload_nodes</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps_size</name></name> <operator>=</operator> <name>R_CORE_ASMQJMPS_NUM</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>core</name><operator>-&gt;</operator><name>asmqjmps_size</name></name> <operator>&lt;</operator> <name><name>core</name><operator>-&gt;</operator><name>asmqjmps_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps</name></name> <operator>=</operator> <call><name>R_NEWS</name> <argument_list>(<argument><expr><name>ut64</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>asmqjmps_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_bin_bind</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>binb</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_bin_bind</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>binb</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_bin_bind</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>binb</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_bind</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>search</name><operator>-&gt;</operator><name>iob</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_bind</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>iob</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_bind</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_bind</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>iob</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_bind</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>csb</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_bind</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>cob</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_bind</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>iob</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_flag_bind</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>flb</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>flg_class_set</name></name> <operator>=</operator> <name>core_flg_class_set</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>flg_class_get</name></name> <operator>=</operator> <name>core_flg_class_get</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>flg_fcn_set</name></name> <operator>=</operator> <name>core_flg_fcn_set</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_bind</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>analb</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>flag_get</name></name> <operator>=</operator> <name>r_core_flag_get_by_spaces</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>label_get</name></name> <operator>=</operator> <name>r_anal_fcn_label_at</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_bind</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>coreb</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_core_file_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>prompt_offset</name></name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd_init</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name> <operator>=</operator> <call><name>r_debug_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_bind</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>iob</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_bind</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>bp</name><operator>-&gt;</operator><name>iob</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_bind</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>corebind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_bind</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>bp</name><operator>-&gt;</operator><name>corebind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>anal</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <name>r_cons_printf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <name>r_cons_printf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>bp</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <name>r_cons_printf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>ev</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>ev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_config_init</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_loadlibs_init</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asm_use</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>R_SYS_ARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_use</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>R_SYS_ARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>R_SYS_BITS</name> <operator>&amp;</operator> <name>R_SYS_BITS_64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>R_SYS_BITS</name> <operator>&amp;</operator> <name>R_SYS_BITS_32</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>, <argument><expr><name>R_SYS_ARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_bp_use</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>bp</name></name></expr></argument>, <argument><expr><name>R_SYS_ARCH</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_sdb</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>r_str_r2_prefix</name> <argument_list>(<argument><expr><name>R2_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s/tags.r2"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_run_script</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_core_anal_type_init</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__init_autocomplete</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>__cons_cb_fkey</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fkey</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"key.f%d"</literal></expr></argument>, <argument><expr><name>fkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_bind_cons</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>cb_fkey</name></name> <operator>=</operator> <operator>(</operator><name>RConsFunctionKey</name><operator>)</operator><name>__cons_cb_fkey</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>cb_editor</name></name> <operator>=</operator> <operator>(</operator><name>RConsEditorCallback</name><operator>)</operator><name>r_core_editor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>cb_break</name></name> <operator>=</operator> <operator>(</operator><name>RConsBreakCallback</name><operator>)</operator><name>r_core_break</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>cb_sleep_begin</name></name> <operator>=</operator> <operator>(</operator><name>RConsSleepBeginCallback</name><operator>)</operator><name>r_core_sleep_begin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>cb_sleep_end</name></name> <operator>=</operator> <operator>(</operator><name>RConsSleepEndCallback</name><operator>)</operator><name>r_core_sleep_end</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>cb_task_oneshot</name></name> <operator>=</operator> <operator>(</operator><name>RConsQueueTaskOneshot</name><operator>)</operator> <name>r_core_task_enqueue_oneshot</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>core</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_fini</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_core_task_break_all</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_task_join</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_wait</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ropchain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_event_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmdlog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>lastsearch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmdqueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>lastcmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>stkcmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>visual</name><operator>.</operator><name>tabs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_autocomplete_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>autocomplete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>gadgets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>undos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_num_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>watchers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>scriptstack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_task_scheduler_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rcmd</name></name> <operator>=</operator> <call><name>r_cmd_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>rcmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmd_descriptors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>anal</name></name> <operator>=</operator> <call><name>r_anal_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asm_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>assembler</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>print</name></name> <operator>=</operator> <call><name>r_print_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>print</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bin</name></name> <operator>=</operator> <operator>(</operator><call><name>r_bin_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call><operator>,</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lang</name></name> <operator>=</operator> <operator>(</operator><call><name>r_lang_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>)</argument_list></call><operator>,</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dbg</name></name> <operator>=</operator> <operator>(</operator><call><name>r_debug_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>)</argument_list></call><operator>,</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_free</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>teefile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_search_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>search</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_flag_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_fs_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_egg_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_lib_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yank_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_agraph_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>asmqjmps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_log_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_parse_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>times</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_free</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_prompt_loop</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>r_core_prompt</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_core_prompt_exec</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>!=</operator> <name>R_CORE_CMD_EXIT</name></expr>)</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prompt_flag</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>DOTS</name><index>[]</index></name> <init>= <expr><literal type="string">"..."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RFlagItem</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>r_flag_get_at</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><literal type="string">"%s + %"</literal> <name>PFMT64u</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>maxlen</name> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>DOTS</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>maxlen</name> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>DOTS</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>DOTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prompt_sec</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>RBinSection</name> <modifier>*</modifier></type><name>sec</name> <init>= <expr><call><name>r_bin_get_section_at</name> <argument_list>(<argument><expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sec</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>sec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>maxlen</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>chop_prompt</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max_tmp_size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>tmp_len</name></decl>, <decl><type ref="prev"/><name>file_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>OTHRSCH</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>DOTS</name><index>[]</index></name> <init>= <expr><literal type="string">"..."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>p_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>r_cons_get_size</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file_len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_len</name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file_len</name> <operator>+</operator> <name>tmp_len</name> <operator>+</operator> <name>OTHRSCH</name> <operator>&gt;=</operator> <name>p_len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>dots_size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>DOTS</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>chop_point</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p_len</name> <operator>-</operator> <name>OTHRSCH</name> <operator>-</operator> <name>file_len</name> <operator>-</operator> <name>dots_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>chop_point</name> <operator>&lt;</operator> <operator>(</operator><name>max_tmp_size</name> <operator>-</operator> <name>dots_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>chop_point</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>DOTS</name></expr></argument>, <argument><expr><name>dots_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_prompt</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdprompt</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cmd.prompt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>BEGIN</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>END</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remote</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdprompt</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmdprompt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>cmdprompt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.prompt.file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr> ?</condition><then> <expr><call><name>r_file_basename</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>cmdremote</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_core_cmd_str</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>remote</name> <operator>=</operator> <literal type="string">"=!"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>BEGIN</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>prompt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>END</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>reset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.segoff"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seggrn</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.seggrn"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>seggrn</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>offset</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="string">"%04x:%04x"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>p</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sec</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>promptset</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.prompt.flag"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>promptset</name> <operator>=</operator> <call><name>prompt_flag</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.prompt.sect"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prompt_sec</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>promptset</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>print</name><operator>-&gt;</operator><name>wide_offsets</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>bits</name></name> <operator>&amp;</operator> <name>R_SYS_BITS_64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%016"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%08"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>chop_prompt</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prompt</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s[%s%s]&gt;%s "</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>BEGIN</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>,

<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>END</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_line_set_prompt</name> <argument_list>(<argument><expr><ternary><condition><expr><name>prompt</name></expr> ?</condition><then> <expr><name>prompt</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_prompt</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sync</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rnv</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_prompt</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_cons_fgets</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_CORE_CMD_EXIT</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>rnv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sync</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_core_prompt_exec</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>cmdqueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cmdqueue</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>scr_gadgets</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>line</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>line</name> <operator>!=</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>rc</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>r_core_echo</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_prompt_exec</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_core_cmd</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>cmdqueue</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>cons</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>use_tts</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_cons_get_buffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_sys_tts</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>use_tts</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_echo</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>cons</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>line</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>line</name><operator>-&gt;</operator><name>zerosep</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_zero</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_seek_size</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bsize</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bump</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bsize</name> <operator>==</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_sandbox_enable</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bsize</name> <operator>&gt;</operator> <literal type="number">1024</literal><operator>*</operator><literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Sandbox mode restricts blocksize bigger than 32k\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bsize</name> <operator>&gt;</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize_max</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Block size %d is too big\n"</literal></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bsize</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bsize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>blocksize_max</name></name> <operator>&amp;&amp;</operator> <name>bsize</name><operator>&gt;</operator><name><name>core</name><operator>-&gt;</operator><name>blocksize_max</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"bsize is bigger than `bm`. dimmed to 0x%x &gt; 0x%x\n"</literal></expr></argument>,

<argument><expr><name>bsize</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bsize</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize_max</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bump</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>bsize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bump</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Oops. cannot allocate that much (%u)\n"</literal></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <name>bump</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <name>bsize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_block_read</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_block_size</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bsize</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_core_seek_size</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_seek_align</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>times</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>inc</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>times</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>seek</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>align</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>%</operator> <name>align</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>times</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>-</operator><name>diff</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>diff</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>inc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>+=</operator> <name>align</name><operator>-</operator><name>diff</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>-</operator><name>diff</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>times</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>times</name> <operator>-=</operator> <name>inc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>times</name><operator>*</operator><name>inc</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>times</name> <operator>-=</operator> <name>inc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>+=</operator> <operator>(</operator><name>align</name> <operator>*</operator> <name>inc</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>diff</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>-</operator><name>diff</name></expr></argument> &gt;</argument_list></name> <name>seek</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>seek</name> <operator>=</operator> <name>diff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>seek</name> <operator>+</operator> <name>diff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_core_op_str</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAsmOp</name></type> <name>op</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_asm_set_pc</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_asm_disassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>buf_asm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_asm_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalOp</name> <modifier>*</modifier></type><name>r_core_op_anal</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>op</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rap_break</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIORap</name> <modifier>*</modifier></type><name>rior</name> <init>= <expr><operator>(</operator><name>RIORap</name><operator>*</operator><operator>)</operator> <name>u</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>u</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_socket_close</name> <argument_list>(<argument><expr><name><name>rior</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rior</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_core_serve</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>cmd</name></decl>, <decl><type ref="prev"/><name>flg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pipefd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIORap</name> <modifier>*</modifier></type><name>rior</name> <init>= <expr><operator>(</operator><name>RIORap</name> <operator>*</operator><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rior</name><operator>||</operator> <operator>!</operator><name><name>rior</name><operator>-&gt;</operator><name>fd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rap: cannot listen.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><name><name>rior</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"RAP Server started (rap.loop=%s)\n"</literal></expr></argument>,

<argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"rap.loop"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>rap_break</name></expr></argument>, <argument><expr><name>rior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>reaccept</name>:</label>

<while>while <condition>(<expr><operator>!</operator><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>r_socket_accept</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>out_of_function</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rap: cannot accept\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_of_function</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rap: client connected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition><expr><operator>!</operator><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_socket_read</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rap: connection closed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"rap.loop"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rap: waiting for new connection\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>reaccept</name>;</goto>

</block_content>}</block></if></if_stmt>

<goto>goto <name>out_of_function</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>ut8</name><operator>)</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RMT_OPEN</name></expr>:</case>

<expr_stmt><expr><call><name>r_socket_read_block</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"open (%d): "</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_read_block</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>pipefd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot malloc in rmt-open len = %d\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>baddr</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.laddr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_socket_read_block</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>cmd</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>perm</name> <init>= <expr><name>R_PERM_R</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flg</name> <operator>&amp;</operator> <name>R_PERM_W</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>R_PERM_W</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_core_file_open</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>r_io_fd_get_current</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_bin_load</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_map_add</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>r_io_fd_size</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pipefd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pipefd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"(flags: %d) len: %d filename: '%s'\n"</literal></expr></argument>,

<argument><expr><name>flg</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pipefd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot open file (%s)\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_close</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"rap.loop"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rap: waiting for new connection\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>reaccept</name>;</goto>

</block_content>}</block></if></if_stmt>

<goto>goto <name>out_of_function</name>;</goto> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>RMT_OPEN</name> <operator>|</operator> <name>RMT_REPLY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_be32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pipefd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_write</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_flush</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RMT_READ</name></expr>:</case>

<expr_stmt><expr><call><name>r_socket_read_block</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>r_read_be32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><name>i</name> <operator>+</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_block_read</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>RMT_READ</name> <operator>|</operator> <name>RMT_REPLY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>RMT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>RMT_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_block_size</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">128</literal> <operator>&lt;</operator> <name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_block_size</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_write_be32</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_socket_write</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_flush</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot read %d byte(s)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_of_function</name>;</goto>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>RMT_CMD</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmd_output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>bufr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bufw</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>cmd_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_socket_read_block</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>bufr</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>r_read_be32</name> <argument_list>(<argument><expr><name>bufr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>RMT_MAX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_socket_read_block</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scr_interactive</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.interactive"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.interactive"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd_output</name> <operator>=</operator> <call><name>r_core_cmd_str</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.interactive"</literal></expr></argument>, <argument><expr><name>scr_interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rap: cannot malloc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rap: invalid length '%d'\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd_output</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmd_len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>cmd_output</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cmd_output</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEMO_SERVER_SENDS_CMD_TO_CLIENT</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>once</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>once</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><literal type="string">"pd 4"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmd_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>cmd_len</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>RMT_CMD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_be32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>cmd_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>b</name><operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_write</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>+</operator> <name>cmd_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_flush</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_read</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>RMT_CMD</name> <operator>|</operator> <name>RMT_REPLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>n</name> <init>= <expr><call><name>r_read_be32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"REPLY %d\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_socket_read</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"RESPONSE(%s)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_socket_flush</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>once</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>bufw</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>cmd_len</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bufw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><name>RMT_CMD</name> <operator>|</operator> <name>RMT_REPLY</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_be32</name> <argument_list>(<argument><expr><name>bufw</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>cmd_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>bufw</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>cmd_output</name></expr></argument>, <argument><expr><name>cmd_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_write</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bufw</name></expr></argument>, <argument><expr><name>cmd_len</name><operator>+</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_flush</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bufw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>RMT_WRITE</name></expr>:</case>

<expr_stmt><expr><call><name>r_socket_read</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>r_read_at_be32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_read</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_core_write_at</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>RMT_WRITE</name> <operator>|</operator> <name>RMT_REPLY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_be32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_write</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_flush</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RMT_SEEK</name></expr>:</case>

<expr_stmt><expr><call><name>r_socket_read_block</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>r_read_at_be64</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>r_io_fd_size</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>RMT_SEEK</name> <operator>|</operator> <name>RMT_REPLY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_be64</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_write</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_flush</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RMT_CLOSE</name></expr>:</case>

<expr_stmt><expr><call><name>r_socket_read_block</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>r_read_be32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>close</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_be32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>RMT_CLOSE</name> <operator>|</operator> <name>RMT_REPLY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_write</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_flush</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <literal type="char">'G'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_socket_read</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"ET /cmd/"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>line</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"HTTP"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>http</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>http</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>http</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>http</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>http</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_str_uri_decode</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_core_cmd_str</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_socket_printf</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"HTTP/1.0 %d %s\r\n%s"</literal>

<literal type="string">"Connection: close\r\nContent-Length: %d\r\n\r\n"</literal></expr></argument>,

<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_socket_write</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_socket_flush</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_close</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[r2p] unknown command 0x%02x\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_close</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"rap.loop"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"rap: waiting for new connection\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>reaccept</name>;</goto>

</block_content>}</block></if></if_stmt>

<goto>goto <name>out_of_function</name>;</goto>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"client: disconnected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<label><name>out_of_function</name>:</label>

<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_search_cb</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>RCoreSearchCallback</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>from</name> <operator>&lt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>delta</name> <init>= <expr><name>to</name><operator>-</operator><name>from</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>delta</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot read at 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ret</name> <operator>&lt;</operator> <name>len</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><call><name>cb</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><name>ret</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><name>ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>done</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>done</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>from</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot allocate blocksize\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_core_editor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>interactive</name> <init>= <expr><call><name>r_cons_is_interactive</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>editor</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.editor"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interactive</name> <operator>||</operator> <operator>!</operator><name>editor</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>editor</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>readonly</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>file</name> <operator>!=</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>r_sandbox_open</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>r_sandbox_open</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>readonly</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>r_file_mkstemp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>readonly</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Opening in read-only\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>editor</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>editor</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>editor</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>cons</name><operator>-&gt;</operator><name>cb_editor</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>cb_editor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_editor</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>cb_editor</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>editor</name> <operator>&amp;&amp;</operator> <name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_cmdf</name> <argument_list>(<argument><expr><literal type="string">"%s '%s'"</literal></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>name</name></expr>?</condition><then> <expr><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <name><name>ret</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ret</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_file_rm</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RCons</name> <modifier>*</modifier></type><name>r_core_get_cons</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>core</name><operator>-&gt;</operator><name>cons</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RConfig</name> <modifier>*</modifier></type><name>r_core_get_config</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBin</name> <modifier>*</modifier></type><name>r_core_get_bin</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBuffer</name> <modifier>*</modifier></type><name>r_core_syscallf</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsnprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_core_syscall</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBuffer</name> <modifier>*</modifier></type><name>r_core_syscall</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>code</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><literal type="string">"x86"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"architecture not yet supported!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>r_syscall_get_num</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>syscall</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"setup"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>num</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"syscall not found!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">64</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"read"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>num</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"syscall not found!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"syscall not found!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"sc@syscall(%d);\n"</literal>

<literal type="string">"main@global(0) { sc(%s);\n"</literal>

<literal type="string">":int3\n"</literal> 

<literal type="string">"}\n"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_egg_reset</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_egg_load</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_egg_compile</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot compile.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_egg_assemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_egg_assemble: invalid assembly\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>=</operator> <call><name>r_egg_get_bin</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>egg</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (b-&gt;length &gt; 0) {

for (i = 0; i &lt; b-&gt;length; i++) {

r_cons_printf ("%02x", b-&gt;buf[i]);

}

r_cons_printf ("\n");

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RCoreAutocomplete</name> <modifier>*</modifier></type><name>r_core_autocomplete_add</name><parameter_list>(<parameter><decl><type><name>RCoreAutocomplete</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name> <operator>||</operator> <operator>!</operator><name>cmd</name> <operator>||</operator> <name>type</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>type</name> <operator>&gt;=</operator> <name>R_CORE_AUTOCMPLT_END</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RCoreAutocomplete</name> <modifier>*</modifier></type><name>autocmpl</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCoreAutocomplete</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>autocmpl</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RCoreAutocomplete</name> <modifier>*</modifier><modifier>*</modifier></type><name>updated</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>subcmds</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>n_subcmds</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RCoreAutocomplete</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>updated</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>autocmpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>subcmds</name></name> <operator>=</operator> <name>updated</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>subcmds</name><index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>n_subcmds</name></name></expr>]</index></name> <operator>=</operator> <name>autocmpl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>n_subcmds</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>autocmpl</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>autocmpl</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>lock</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>autocmpl</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>autocmpl</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>autocmpl</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_autocomplete_free</name><parameter_list>(<parameter><decl><type><name>RCoreAutocomplete</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>n_subcmds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_autocomplete_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>subcmds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>subcmds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>subcmds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RCoreAutocomplete</name> <modifier>*</modifier></type><name>r_core_autocomplete_find</name><parameter_list>(<parameter><decl><type><name>RCoreAutocomplete</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>exact</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name> <operator>||</operator> <operator>!</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>parent</name><operator>-&gt;</operator><name>n_subcmds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exact</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <name><name>parent</name><operator>-&gt;</operator><name>subcmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>length</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>subcmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>cmd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>parent</name><operator>-&gt;</operator><name>subcmds</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>exact</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>subcmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>cmd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>parent</name><operator>-&gt;</operator><name>subcmds</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_core_autocomplete_remove</name><parameter_list>(<parameter><decl><type><name>RCoreAutocomplete</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name> <operator>||</operator> <operator>!</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>parent</name><operator>-&gt;</operator><name>n_subcmds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RCoreAutocomplete</name> <modifier>*</modifier></type><name>ac</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>subcmds</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>locked</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_glob</name> <argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>parent</name><operator>-&gt;</operator><name>n_subcmds</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>subcmds</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>subcmds</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>subcmds</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_core_autocomplete_free</name> <argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RCoreAutocomplete</name> <modifier>*</modifier><modifier>*</modifier></type><name>updated</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>subcmds</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>n_subcmds</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RCoreAutocomplete</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>updated</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>n_subcmds</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Something really bad has happen.. this should never ever happen..\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>subcmds</name></name> <operator>=</operator> <name>updated</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>n_subcmds</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RTable</name> <modifier>*</modifier></type><name>r_core_table</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RTable</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><call><name>r_table_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>table</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>cons</name></name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>cons</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>table</name></expr>;</return>

</block_content>}</block></function>

</unit>
