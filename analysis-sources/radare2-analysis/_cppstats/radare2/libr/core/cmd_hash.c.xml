<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\core\cmd_hash.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_cons.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_core.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_hash.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_types_base.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>HashHandler</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_md4</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_md5</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_sha1</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_sha256</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_sha512</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_adler32</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_xor</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_entropy</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_hamdist</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_parity</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_pcprint</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_mod255</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_luhn</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_smbus</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC8_EXTRA</name></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_cdma2000</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_darc</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_dvb_s2</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_ebu</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_icode</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_itu</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_maxim</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_rohc</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_wcdma</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC15_EXTRA</name></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc15_can</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_hdlc</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_usb</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_citt</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC16_EXTRA</name></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_aug_ccitt</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_buypass</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_cdma2000</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_dds110</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_dect_r</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_dect_x</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_dnp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_en13757</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_genibus</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_maxim</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_mcrf4xx</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_riello</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_t10dif</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_teledisk</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_tms37157</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crca</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_kermit</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_modbus</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_x25</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_xmodem</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC24</name></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc24</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32c</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32_ecma_267</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC32_EXTRA</name></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32_bzip2</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32d</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32_mpeg2</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32_posix</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32q</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32_jamcrc</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32_xfer</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64</name></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc64</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64_EXTRA</name></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc64_ecma182</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc64_we</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc64_xz</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc64_iso</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HashHandler</name></type> <name>handler</name></decl>;</decl_stmt>

}</block></struct></type> <name>RHashHashHandlers</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>RHashHashHandlers</name></type> <name><name>hash_handlers</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"md4"</literal></expr>, <expr><name>handle_md4</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"md5"</literal></expr>, <expr><name>handle_md5</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sha1"</literal></expr>, <expr><name>handle_sha1</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sha256"</literal></expr>, <expr><name>handle_sha256</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sha512"</literal></expr>, <expr><name>handle_sha512</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"adler32"</literal></expr>, <expr><name>handle_adler32</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xor"</literal></expr>, <expr><name>handle_xor</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"entropy"</literal></expr>, <expr><name>handle_entropy</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"parity"</literal></expr>, <expr><name>handle_parity</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hamdist"</literal></expr>, <expr><name>handle_hamdist</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pcprint"</literal></expr>, <expr><name>handle_pcprint</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mod255"</literal></expr>, <expr><name>handle_mod255</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"luhn"</literal></expr>, <expr><name>handle_luhn</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"crc8smbus"</literal></expr>, <expr><name>handle_crc8_smbus</name></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC8_EXTRA</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"crc8cdma2000"</literal></expr>, <expr><name>handle_crc8_cdma2000</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"crc8darc"</literal></expr>, <expr><name>handle_crc8_darc</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"crc8dvbs2"</literal></expr>, <expr><name>handle_crc8_dvb_s2</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"crc8ebu"</literal></expr>, <expr><name>handle_crc8_ebu</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"crc8icode"</literal></expr>, <expr><name>handle_crc8_icode</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"crc8itu"</literal></expr>, <expr><name>handle_crc8_itu</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"crc8maxim"</literal></expr>, <expr><name>handle_crc8_maxim</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"crc8rohc"</literal></expr>, <expr><name>handle_crc8_rohc</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"crc8wcdma"</literal></expr>, <expr><name>handle_crc8_wcdma</name></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC15_EXTRA</name></expr></cpp:if>

<expr><block>{<expr><literal type="string">"crc15can"</literal></expr>, <expr><name>handle_crc15_can</name></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr><block>{<expr><literal type="string">"crc16"</literal></expr>, <expr><name>handle_crc16</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"crc16hdlc"</literal></expr>, <expr><name>handle_crc16_hdlc</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16usb"</literal></expr>, <expr><name>handle_crc16_usb</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16citt"</literal></expr>, <expr><name>handle_crc16_citt</name></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC16_EXTRA</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"crc16augccitt"</literal></expr>, <expr><name>handle_crc16_aug_ccitt</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16buypass"</literal></expr>, <expr><name>handle_crc16_buypass</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16cdma2000"</literal></expr>, <expr><name>handle_crc16_cdma2000</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16dds110"</literal></expr>, <expr><name>handle_crc16_dds110</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16dectr"</literal></expr>, <expr><name>handle_crc16_dect_r</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16dectx"</literal></expr>, <expr><name>handle_crc16_dect_x</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16dnp"</literal></expr>, <expr><name>handle_crc16_dnp</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16en13757"</literal></expr>, <expr><name>handle_crc16_en13757</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16genibus"</literal></expr>, <expr><name>handle_crc16_genibus</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16maxim"</literal></expr>, <expr><name>handle_crc16_maxim</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16mcrf4xx"</literal></expr>, <expr><name>handle_crc16_mcrf4xx</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16riello"</literal></expr>, <expr><name>handle_crc16_riello</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16t10dif"</literal></expr>, <expr><name>handle_crc16_t10dif</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16teledisk"</literal></expr>, <expr><name>handle_crc16_teledisk</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16tms37157"</literal></expr>, <expr><name>handle_crc16_tms37157</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crca"</literal></expr>, <expr><name>handle_crca</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16kermit"</literal></expr>, <expr><name>handle_crc16_kermit</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16modbus"</literal></expr>, <expr><name>handle_crc16_modbus</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16x25"</literal></expr>, <expr><name>handle_crc16_x25</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc16xmodem"</literal></expr>, <expr><name>handle_crc16_xmodem</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC24</name></expr></cpp:if>

<expr><block>{<expr><literal type="string">"crc24"</literal></expr>, <expr><name>handle_crc24</name></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr><block>{<expr><literal type="string">"crc32"</literal></expr>, <expr><name>handle_crc32</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"crc32c"</literal></expr>, <expr><name>handle_crc32c</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"crc32ecma267"</literal></expr>, <expr><name>handle_crc32_ecma_267</name></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC32_EXTRA</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"crc32bzip2"</literal></expr>, <expr><name>handle_crc32_bzip2</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc32d"</literal></expr>, <expr><name>handle_crc32d</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc32mpeg2"</literal></expr>, <expr><name>handle_crc32_mpeg2</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc32posix"</literal></expr>, <expr><name>handle_crc32_posix</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc32q"</literal></expr>, <expr><name>handle_crc32q</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc32jamcrc"</literal></expr>, <expr><name>handle_crc32_jamcrc</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc32xfer"</literal></expr>, <expr><name>handle_crc32_xfer</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"crc64"</literal></expr>, <expr><name>handle_crc64</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64_EXTRA</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"crc64ecma182"</literal></expr>, <expr><name>handle_crc64_ecma182</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc64we"</literal></expr>, <expr><name>handle_crc64_we</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc64xz"</literal></expr>, <expr><name>handle_crc64_xz</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crc64iso"</literal></expr>, <expr><name>handle_crc64_iso</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_md4</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>r_hash_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>R_HASH_MD4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>r_hash_do_md4</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>R_HASH_SIZE_MD4</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_hash_free</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_md5</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>r_hash_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>R_HASH_MD5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>r_hash_do_md5</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>R_HASH_SIZE_MD5</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_hash_free</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_sha1</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>r_hash_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>R_HASH_SHA1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>r_hash_do_sha1</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>R_HASH_SIZE_SHA1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_hash_free</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_sha256</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>r_hash_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>R_HASH_SHA256</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>r_hash_do_sha256</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>R_HASH_SIZE_SHA256</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_hash_free</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_sha512</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>r_hash_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>R_HASH_SHA512</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>r_hash_do_sha512</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_HASH_SIZE_SHA512</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_hash_free</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_adler32</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>hn</name> <init>= <expr><call><name>r_hash_adler32</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hn</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02x%02x%02x%02x\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_xor</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02x\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_xor</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_entropy</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%f\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_entropy</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_parity</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>r_hash_parity</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_hamdist</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02x\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_hamdist</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_pcprint</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_pcprint</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_mod255</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_mod255</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_luhn</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_luhn</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_smbus</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_8_SMBUS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC8_EXTRA</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_cdma2000</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC8_CDMA2000</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_darc</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC8_DARC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_dvb_s2</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC8_DVB_S2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_ebu</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC8_EBU</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_icode</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC8_ICODE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_itu</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC8_ITU</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_maxim</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC8_MAXIM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_rohc</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC8_ROHC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc8_wcdma</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC8_WCDMA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC15_EXTRA</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc15_can</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_15_CAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_hdlc</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_16_HDLC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_usb</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_16_USB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_citt</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_16_CITT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC16_EXTRA</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_aug_ccitt</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_AUG_CCITT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_buypass</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_BUYPASS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_cdma2000</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_CDMA2000</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_dds110</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_DDS110</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_dect_r</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_DECT_R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_dect_x</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_DECT_X</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_dnp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_DNP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_en13757</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_EN13757</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_genibus</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_GENIBUS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_maxim</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_MAXIM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_mcrf4xx</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_MCRF4XX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_riello</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_RIELLO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_t10dif</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_T10_DIF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_teledisk</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_TELEDISK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_tms37157</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_TMS37157</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crca</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRCA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_kermit</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_KERMIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_modbus</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_MODBUS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_x25</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_X25</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc16_xmodem</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%04"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC16_XMODEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC24</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc24</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%06"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_24</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%08"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32c</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%08"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_32C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32_ecma_267</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%08"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_32_ECMA_267</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC32_EXTRA</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32_bzip2</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%08"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC32_BZIP2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32d</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%08"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC32D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32_mpeg2</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%08"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC32_MPEG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32_posix</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%08"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC32_POSIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32q</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%08"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC32Q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32_jamcrc</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%08"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC32_JAMCRC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc32_xfer</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%08"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC32_XFER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc64</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%016"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64_EXTRA</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc64_ecma182</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%016"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC64_ECMA182</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc64_we</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%016"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC64_WE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc64_xz</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%016"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC64_XZ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_crc64_iso</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%016"</literal> <name>PFMTCRCx</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_CRC64_ISO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_hash_bang</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_sandbox_enable</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"hashbang disabled in sandbox mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>av</name> <init>= <expr><call><name>r_str_argv</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ac</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ac</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RLangPlugin</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_lang_get_by_extension</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>, <argument><expr><name><name>av</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>lang</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ac</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-e"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>run_str</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"-e"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_lang_run_string</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>, <argument><expr><name>run_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_lang_set_argv</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>, <argument><expr><name>ac</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_lang_run_file</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>, <argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>run_str</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_lang_run_file</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>, <argument><expr><name>run_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_interactive</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_lang_prompt</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: scr.interactive required to run the rlang prompt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>av</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'?'</literal> <operator>||</operator> <name><name>av</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_lang_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_lang_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_str_argv_free</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_hash</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>cmd_hash_bang</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>helpmsg3</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Usage #!interpreter [&lt;args&gt;] [&lt;file] [&lt;&lt;eof]"</literal></expr>,<expr><literal type="string">""</literal></expr>,<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">" #"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"comment - do nothing"</literal></expr>,

<expr><literal type="string">" #!"</literal></expr>,<expr><literal type="string">""</literal></expr>,<expr><literal type="string">"list all available interpreters"</literal></expr>,

<expr><literal type="string">" #!python"</literal></expr>,<expr><literal type="string">""</literal></expr>,<expr><literal type="string">"run python commandline"</literal></expr>,

<expr><literal type="string">" #!python"</literal></expr>,<expr><literal type="string">" foo.py"</literal></expr>,<expr><literal type="string">"run foo.py python script (same as '. foo.py')"</literal></expr>,

<expr><literal type="string">" #!python"</literal></expr>,<expr><literal type="string">" arg0 a1 &lt;&lt;q"</literal></expr>,<expr><literal type="string">"set arg0 and arg1 and read until 'q'"</literal></expr>,

<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>helpmsg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
