<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\search\bytepat.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_search.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_print.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTXMINB</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSIZE</name></cpp:macro> <cpp:value>(1024*1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PATLEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_fnditem</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>str</name><index>[<expr><name>MAX_PATLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>

}</block></struct></type> <name>fnditem</name>;</typedef>

<function><type><specifier>static</specifier> <name>fnditem</name><modifier>*</modifier></type> <name>init_fi</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>fnditem</name><modifier>*</modifier></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>fnditem</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fnditem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fini_fi</name><parameter_list>(<parameter><decl><type><name>fnditem</name><modifier>*</modifier></type> <name>fi</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>fnditem</name> <modifier>*</modifier></type><name>fu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fu</name> <operator>=</operator> <name>fi</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>fi</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fu</name> <operator>=</operator> <name>fi</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fi</name> <operator>=</operator> <name><name>fi</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fu</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_fi</name> <parameter_list>(<parameter><decl><type><name>fnditem</name><modifier>*</modifier></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>patlen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>fnditem</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>n</name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>(</operator><name>fnditem</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fnditem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name>patlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_fi_present</name><parameter_list>(<parameter><decl><type><name>fnditem</name><modifier>*</modifier></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>blk</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>patlen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>fnditem</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>n</name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>blk</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>patlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_search_pattern</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>block</name><index>[<expr><name>BSIZE</name><operator>+</operator><name>MAX_PATLEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sblk</name><index>[<expr><name>BSIZE</name><operator>+</operator><name>MAX_PATLEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>bact</name></decl>, <decl><type ref="prev"/><name>bytes</name></decl>, <decl><type ref="prev"/><name>intaddr</name></decl>, <decl><type ref="prev"/><name>rb</name></decl>, <decl><type ref="prev"/><name>bproc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>,<decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>moar</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pcnt</name></decl>, <decl><type ref="prev"/><name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>patlen</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pattern_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fnditem</name><modifier>*</modifier></type> <name>root</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Searching patterns between 0x%08"</literal><name>PFMT64x</name><literal type="string">" and 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patlen</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>patlen</name></expr></argument> &gt;</argument_list></name> <name>MAX_PATLEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid pattern length (must be &gt; 1 and &lt; %d)\n"</literal></expr></argument>, <argument><expr><name>MAX_PATLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bact</name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>init_fi</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pcnt</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>bact</name> <operator>&lt;</operator> <name>bytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>bact</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_print_is_interrupted</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bproc</name> <operator>=</operator> <name>bact</name> <operator>+</operator> <name>patlen</name></expr> ;</expr_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>bytes</name> <operator>-</operator> <name>bproc</name><operator>)</operator> <operator>&lt;</operator> <name>BSIZE</name><operator>)</operator></expr>?</condition><then><expr><operator>(</operator><name>bytes</name> <operator>-</operator> <name>bproc</name><operator>)</operator></expr></then><else>:<expr><name>BSIZE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>rb</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sblk</name><index>[<expr><name>patlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>intaddr</name> <operator>=</operator> <name>bact</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>bproc</name> <operator>&lt;</operator> <name>bytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>bytes</name> <operator>-</operator> <name>bproc</name><operator>)</operator> <operator>&lt;</operator> <name>BSIZE</name><operator>)</operator></expr>?</condition><then><expr><operator>(</operator><name>bytes</name> <operator>-</operator> <name>bproc</name><operator>)</operator></expr></then><else>:<expr><name>BSIZE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>nr</name> <operator>+=</operator> <operator>(</operator><name>patlen</name> <operator>-</operator> <operator>(</operator><name>nr</name> <operator>%</operator> <name>patlen</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>rb</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>bproc</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rb</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bproc</name> <operator>+=</operator> <name>nr</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <name>rb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>nr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>moar</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>patlen</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_fi_present</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>patlen</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_fi</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>patlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pcnt</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\nbytes: %d: "</literal></expr></argument>, <argument><expr><name>pcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>patlen</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>sblk</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\nfound: %d: 0x%08"</literal><name>PFMT64x</name><literal type="string">" "</literal></expr></argument>, <argument><expr><name>pcnt</name></expr></argument>, <argument><expr><name>intaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>moar</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" "</literal></expr></argument>, <argument><expr><name>bproc</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>moar</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\ncount: %d: %d\n"</literal></expr></argument>, <argument><expr><name>pcnt</name></expr></argument>, <argument><expr><name>moar</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bproc</name> <operator>+=</operator> <name>rb</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>bact</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>moar</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><name>patlen</name></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fini_fi</name> <argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
