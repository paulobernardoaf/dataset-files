<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\search\search.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_search.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_list.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_BMH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<expr_stmt><expr><call><name>R_LIB_VERSION</name> <argument_list>(<argument><expr><name>r_search</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>data</name><index>[]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>RSearchLeftover</name>;</typedef>

<function><type><name>R_API</name> <name>RSearch</name> <modifier>*</modifier></type><name>r_search_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSearch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_search_set_mode</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot init search for mode %d\n"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inverse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>distance</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>contiguous</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pattern_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>string_max</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>string_min</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hits</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>maxhits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>kws</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>kws</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_search_free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>kws</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator> <name>r_search_keyword_free</name></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RSearch</name> <modifier>*</modifier></type><name>r_search_free</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>kws</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_search_set_string_limits</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&lt;</operator> <name>min</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>string_min</name></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>string_max</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_search_magic_update</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"TODO: import libr/core/cmd_search.c /m implementation into rsearch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_search_set_mode</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_SEARCH_KEYWORD</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>r_search_mybinparse_update</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_SEARCH_REGEXP</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>r_search_regexp_update</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_SEARCH_AES</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>r_search_aes_update</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_SEARCH_STRING</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>r_search_strings_update</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_SEARCH_DELTAKEY</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>r_search_deltakey_update</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_SEARCH_MAGIC</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>r_search_magic_update</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>update</name></name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>R_SEARCH_PATTERN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_search_begin</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSearchKeyword</name> <modifier>*</modifier></type><name>kw</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>s-&gt;kws</argument>, <argument>iter</argument>, <argument>kw</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name><name>kw</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kw</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_search_hit_new</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RSearchKeyword</name> <modifier>*</modifier></type><name>kw</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>align</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>addr</name><operator>%</operator><name><name>s</name><operator>-&gt;</operator><name>align</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" unaligned\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>contiguous</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>kw</name><operator>-&gt;</operator><name>last</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>==</operator> <name><name>kw</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>kw</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kw</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bckwrds</name></name></expr> ?</condition><then> <expr><name>addr</name></expr> </then><else>: <expr><name>addr</name> <operator>+</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" Sequential hit ignored.\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>kw</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bckwrds</name></name></expr> ?</condition><then> <expr><name>addr</name></expr> </then><else>: <expr><name>addr</name> <operator>+</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>callback</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>s</name><operator>-&gt;</operator><name>callback</name></name> <argument_list>(<argument><expr><name>kw</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>kw</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nhits</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>!</operator><name>ret</name> <operator>||</operator> <name>ret</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>maxhits</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nhits</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>maxhits</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>kw</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nhits</name></name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RSearchHit</name><modifier>*</modifier></type> <name>hit</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSearchHit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>kw</name></name> <operator>=</operator> <name>kw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hits</name></name></expr></argument>, <argument><expr><name>hit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>maxhits</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nhits</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>maxhits</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_search_deltakey_update</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>longest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSearchKeyword</name> <modifier>*</modifier></type><name>kw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSearchLeftover</name> <modifier>*</modifier></type><name>left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>old_nhits</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>nhits</name></name></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>s-&gt;kws</argument>, <argument>iter</argument>, <argument>kw</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>longest</name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name>longest</name></expr></argument>, <argument><expr><name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>longest</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>end</name></name> <operator>!=</operator> <name>from</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RSearchLeftover</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>longest</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>left</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bckwrds</name></name></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>s-&gt;kws</argument>, <argument>iter</argument>, <argument>kw</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name><name>kw</name><operator>-&gt;</operator><name>bin_keyword</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>j</name> <init>= <expr><name><name>kw</name><operator>-&gt;</operator><name>bin_keyword</name></name> <operator>+</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>i</name> <operator>=</operator> <operator>-</operator><operator>*</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bckwrds</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>t</name> <init>= <expr><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>i</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>--</operator><name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>j</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>len1</name> <init>= <expr><name><name>left</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>longest</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len1</name> <operator>-</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>s-&gt;kws</argument>, <argument>iter</argument>, <argument>kw</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>kw</name><operator>-&gt;</operator><name>bin_keyword</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name> <operator>||</operator> <operator>!</operator><name><name>kw</name><operator>-&gt;</operator><name>count</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:

<expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bckwrds</name></name></expr>

?</condition><then> <expr><ternary><condition><expr><name><name>kw</name><operator>-&gt;</operator><name>last</name></name> <operator>-</operator> <name>from</name> <operator>&lt;</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name></expr> ?</condition><then> <expr><name>from</name> <operator>+</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>kw</name><operator>-&gt;</operator><name>last</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>

</then><else>: <expr><ternary><condition><expr><name>from</name> <operator>-</operator> <name><name>kw</name><operator>-&gt;</operator><name>last</name></name> <operator>&lt;</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name></expr> ?</condition><then> <expr><name><name>kw</name><operator>-&gt;</operator><name>last</name></name> <operator>+</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>from</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>+</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name> <operator>&lt;</operator> <name>len1</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><name><name>left</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>left</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><name><name>left</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>left</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>r_search_hit_new</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bckwrds</name></name></expr> ?</condition><then> <expr><name>from</name> <operator>-</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name> <operator>+</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name></expr> </then><else>: <expr><name>from</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>kw</name><operator>-&gt;</operator><name>last</name></name> <operator>+=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bckwrds</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>nhits</name></name> <operator>-</operator> <name>old_nhits</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name> <operator>||</operator> <operator>!</operator><name><name>kw</name><operator>-&gt;</operator><name>count</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:

<expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bckwrds</name></name></expr>

?</condition><then> <expr><ternary><condition><expr><name>from</name> <operator>&gt;</operator> <name><name>kw</name><operator>-&gt;</operator><name>last</name></name></expr> ?</condition><then> <expr><name>from</name> <operator>-</operator> <name><name>kw</name><operator>-&gt;</operator><name>last</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>

</then><else>: <expr><ternary><condition><expr><name>from</name> <operator>&lt;</operator> <name><name>kw</name><operator>-&gt;</operator><name>last</name></name></expr> ?</condition><then> <expr><name><name>kw</name><operator>-&gt;</operator><name>last</name></name> <operator>-</operator> <name>from</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>+</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>buf</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>r_search_hit_new</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bckwrds</name></name></expr> ?</condition><then> <expr><name>from</name> <operator>-</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr> </then><else>: <expr><name>from</name> <operator>+</operator> <name>i</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>kw</name><operator>-&gt;</operator><name>last</name></name> <operator>+=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bckwrds</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>nhits</name></name> <operator>-</operator> <name>old_nhits</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>longest</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len1</name> <operator>&lt;</operator> <name>longest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>longest</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>left</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>len1</name> <operator>-</operator> <name>longest</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>longest</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>longest</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>longest</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>longest</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bckwrds</name></name></expr> ?</condition><then> <expr><name>from</name> <operator>-</operator> <name>len</name></expr> </then><else>: <expr><name>from</name> <operator>+</operator> <name>len</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>nhits</name></name> <operator>-</operator> <name>old_nhits</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static int r_search_horspool(RSearch *s, RSearchKeyword *kw, ut64 from, const ut8 *buf, int len) {

ut64 bad_char_shift[UT8_MAX + 1];

int i, j, m = kw-&gt;keyword_length - 1, count = 0;

ut8 ch;

for (i = 0; i &lt; R_ARRAY_SIZE (bad_char_shift); i++) {

bad_char_shift[i] = kw-&gt;keyword_length;

}

for (i = 0; i &lt; m; i++) {

ch = kw-&gt;bin_keyword[i];

bad_char_shift[kw-&gt;icase ? tolower (ch) : ch] = m - i;

}

for (i = 0; i + m &lt; len; ) {

next:

for (j = m; ; j--) {

ut8 a = buf[i + j], b = kw-&gt;bin_keyword[j];

if (kw-&gt;icase) {

a = tolower (a);

b = tolower (b);

}

if (a != b) break;

if (i == 0) {

if (!r_search_hit_new (s, kw, from + i)) {

return -1;

}

kw-&gt;count++;

count++;

if (!s-&gt;overlap) {

i += kw-&gt;keyword_length;

goto next;

}

}

}

ch = buf[i + m];

i += bad_char_shift[kw-&gt;icase ? tolower (ch) : ch];

}

return false;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>brute_force_match</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RSearchKeyword</name> <modifier>*</modifier></type><name>kw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>distance</name></name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>dist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kw</name><operator>-&gt;</operator><name>binmask_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>j</name> <operator>%</operator> <name><name>kw</name><operator>-&gt;</operator><name>binmask_length</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>a</name> <init>= <expr><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name><name>kw</name><operator>-&gt;</operator><name>bin_keyword</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kw</name><operator>-&gt;</operator><name>icase</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>tolower</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>tolower</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <name><name>kw</name><operator>-&gt;</operator><name>bin_binmask</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <name><name>kw</name><operator>-&gt;</operator><name>bin_binmask</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dist</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>kw</name><operator>-&gt;</operator><name>icase</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>tolower</name> <argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>tolower</name> <argument_list>(<argument><expr><name><name>kw</name><operator>-&gt;</operator><name>bin_keyword</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dist</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>kw</name><operator>-&gt;</operator><name>bin_keyword</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dist</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>dist</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>distance</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kw</name><operator>-&gt;</operator><name>binmask_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>j</name> <operator>%</operator> <name><name>kw</name><operator>-&gt;</operator><name>binmask_length</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>a</name> <init>= <expr><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name><name>kw</name><operator>-&gt;</operator><name>bin_keyword</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kw</name><operator>-&gt;</operator><name>icase</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>tolower</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>tolower</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <name><name>kw</name><operator>-&gt;</operator><name>bin_binmask</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <name><name>kw</name><operator>-&gt;</operator><name>bin_binmask</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>kw</name><operator>-&gt;</operator><name>icase</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name> <operator>&amp;&amp;</operator>

<call><name>tolower</name> <argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>tolower</name> <argument_list>(<argument><expr><name><name>kw</name><operator>-&gt;</operator><name>bin_keyword</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>==</operator> <name><name>kw</name><operator>-&gt;</operator><name>bin_keyword</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>j</name> <operator>==</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_search_mybinparse_update</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RSearchKeyword</name> <modifier>*</modifier></type><name>kw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSearchLeftover</name> <modifier>*</modifier></type><name>left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>longest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>old_nhits</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>nhits</name></name></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>s-&gt;kws</argument>, <argument>iter</argument>, <argument>kw</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>longest</name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name>longest</name></expr></argument>, <argument><expr><name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>longest</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>end</name></name> <operator>!=</operator> <name>from</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RSearchLeftover</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>longest</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>left</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bckwrds</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>t</name> <init>= <expr><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>i</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>--</operator><name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>j</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>len1</name> <init>= <expr><name><name>left</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>longest</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len1</name> <operator>-</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>s-&gt;kws</argument>, <argument>iter</argument>, <argument>kw</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name> <operator>||</operator> <operator>!</operator><name><name>kw</name><operator>-&gt;</operator><name>count</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:

<expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bckwrds</name></name></expr>

?</condition><then> <expr><ternary><condition><expr><name><name>kw</name><operator>-&gt;</operator><name>last</name></name> <operator>-</operator> <name>from</name> <operator>&lt;</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name></expr> ?</condition><then> <expr><name>from</name> <operator>+</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>kw</name><operator>-&gt;</operator><name>last</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>

</then><else>: <expr><ternary><condition><expr><name>from</name> <operator>-</operator> <name><name>kw</name><operator>-&gt;</operator><name>last</name></name> <operator>&lt;</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name></expr> ?</condition><then> <expr><name><name>kw</name><operator>-&gt;</operator><name>last</name></name> <operator>+</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>from</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>+</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name> <operator>&lt;=</operator> <name>len1</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>brute_force_match</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name><name>left</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>inverse</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>r_search_hit_new</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bckwrds</name></name></expr> ?</condition><then> <expr><name>from</name> <operator>-</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name> <operator>-</operator> <name>i</name> <operator>+</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name></expr> </then><else>: <expr><name>from</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name><name>left</name><operator>-&gt;</operator><name>len</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>nhits</name></name> <operator>-</operator> <name>old_nhits</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name> <operator>||</operator> <operator>!</operator><name><name>kw</name><operator>-&gt;</operator><name>count</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:

<expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bckwrds</name></name></expr>

?</condition><then> <expr><ternary><condition><expr><name>from</name> <operator>&gt;</operator> <name><name>kw</name><operator>-&gt;</operator><name>last</name></name></expr> ?</condition><then> <expr><name>from</name> <operator>-</operator> <name><name>kw</name><operator>-&gt;</operator><name>last</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>

</then><else>: <expr><ternary><condition><expr><name>from</name> <operator>&lt;</operator> <name><name>kw</name><operator>-&gt;</operator><name>last</name></name></expr> ?</condition><then> <expr><name><name>kw</name><operator>-&gt;</operator><name>last</name></name> <operator>-</operator> <name>from</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>+</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name> <operator>&lt;=</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>brute_force_match</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>inverse</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>r_search_hit_new</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bckwrds</name></name></expr> ?</condition><then> <expr><name>from</name> <operator>-</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name> <operator>-</operator> <name>i</name></expr> </then><else>: <expr><name>from</name> <operator>+</operator> <name>i</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>nhits</name></name> <operator>-</operator> <name>old_nhits</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>longest</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len1</name> <operator>&lt;</operator> <name>longest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>longest</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>left</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>len1</name> <operator>-</operator> <name>longest</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>longest</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>longest</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>longest</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>longest</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bckwrds</name></name></expr> ?</condition><then> <expr><name>from</name> <operator>-</operator> <name>len</name></expr> </then><else>: <expr><name>from</name> <operator>+</operator> <name>len</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>nhits</name></name> <operator>-</operator> <name>old_nhits</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_search_set_distance</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dist</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dist</name><operator>&gt;=</operator><name>R_SEARCH_DISTANCE_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid distance\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>distance</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>distance</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dist</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><name>dist</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_search_pattern_size</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pattern_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>R_API</name> <name>void</name></type> <name>r_search_set_callback</name><argument_list>(<argument><expr><name>RSearch</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><call><name>RSearchCallback</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>user</name></expr></argument>)</argument_list> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<function><type><name>R_API</name> <name>int</name></type> <name>r_search_update</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>update</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>maxhits</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nhits</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>maxhits</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>update</name></name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>R_SEARCH_AES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>R_SEARCH_AES_BOX_SIZE</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_search_update: No search method defined\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_search_update_i</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_search_update</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>listcb</name><parameter_list>(<parameter><decl><type><name>RSearchKeyword</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RSearchHit</name> <modifier>*</modifier></type><name>hit</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSearchHit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hit</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>kw</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hit</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>hit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_search_find</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_search_set_callback</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>listcb</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_search_update</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_search_kw_add</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RSearchKeyword</name> <modifier>*</modifier></type><name>kw</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kw</name> <operator>||</operator> <operator>!</operator><name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>kw</name><operator>-&gt;</operator><name>kwidx</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>n_kws</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>kws</name></name></expr></argument>, <argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_search_string_prepare_backward</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSearchKeyword</name> <modifier>*</modifier></type><name>kw</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>s-&gt;kws</argument>, <argument>iter</argument>, <argument>kw</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name><name>kw</name><operator>-&gt;</operator><name>bin_keyword</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>j</name> <init>= <expr><name><name>kw</name><operator>-&gt;</operator><name>bin_keyword</name></name> <operator>+</operator> <name><name>kw</name><operator>-&gt;</operator><name>keyword_length</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>t</name> <init>= <expr><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>i</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>--</operator><name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>j</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>kw</name><operator>-&gt;</operator><name>bin_binmask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>kw</name><operator>-&gt;</operator><name>bin_binmask</name></name> <operator>+</operator> <name><name>kw</name><operator>-&gt;</operator><name>binmask_length</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>t</name> <init>= <expr><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>i</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>--</operator><name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>j</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_search_reset</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nhits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_search_set_mode</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot init search for mode %d\n"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_search_kw_reset</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>kws</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
