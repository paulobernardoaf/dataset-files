<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\search\strings.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_search.h"</cpp:file></cpp:include>

<enum>enum <block>{

<decl><name>ENCODING_ASCII</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ENCODING_CP850</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>encodings</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"ascii"</literal></expr>, <expr><literal type="string">"cp850"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>int</name></type> <name>r_search_get_encoding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ENCODING_ASCII</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>lename</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>encodings</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>sz</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>encodings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>encodings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ENCODING_ASCII</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_encoded</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>encoding</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ENCODING_ASCII</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>ENCODING_CP850</name></expr>:</case>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">128</literal></expr>:</case> 

<case>case <expr><literal type="number">133</literal></expr>:</case> 

<case>case <expr><literal type="number">135</literal></expr>:</case> 

<case>case <expr><literal type="number">160</literal></expr>:</case> 

<case>case <expr><literal type="number">161</literal></expr>:</case> 

<case>case <expr><literal type="number">129</literal></expr>:</case> 

<case>case <expr><literal type="number">130</literal></expr>:</case> 

<case>case <expr><literal type="number">139</literal></expr>:</case> 

<case>case <expr><literal type="number">162</literal></expr>:</case> 

<case>case <expr><literal type="number">163</literal></expr>:</case> 

<case>case <expr><literal type="number">164</literal></expr>:</case> 

<case>case <expr><literal type="number">165</literal></expr>:</case> 

<case>case <expr><literal type="number">181</literal></expr>:</case> 

<case>case <expr><literal type="number">144</literal></expr>:</case> 

<case>case <expr><literal type="number">214</literal></expr>:</case> 

<case>case <expr><literal type="number">224</literal></expr>:</case> 

<case>case <expr><literal type="number">233</literal></expr>:</case> 

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_search_strings_update</name><parameter_list>(<parameter><decl><type><name>RSearch</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>widechar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>matches</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSearchKeyword</name> <modifier>*</modifier></type><name>kw</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>s-&gt;kws</argument>, <argument>iter</argument>, <argument>kw</argument>)</argument_list></macro> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_PRINTABLE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_WHITESPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_encoded</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>matches</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>matches</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>matches</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>matches</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>string_min</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>string_max</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>matches</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>string_max</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>matches</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>widechar</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><name>from</name><operator>+</operator><name>i</name><operator>-</operator><operator>(</operator><name>len</name><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_search_hit_new</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>ut64</name><operator>)</operator><name>from</name><operator>+</operator><name>i</name><operator>-</operator><name>matches</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_search_hit_new</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>matches</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>widechar</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
