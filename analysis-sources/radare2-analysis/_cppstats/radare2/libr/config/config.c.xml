<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\config\config.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_config.h"</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>RConfigNode</name><modifier>*</modifier></type> <name>r_config_node_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>&amp;&amp;</operator> <name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RConfigNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><name>value</name></expr>?</condition><then> <expr><name>value</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>CN_RW</name> <operator>|</operator> <name>CN_STR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>node</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RConfigNode</name><modifier>*</modifier></type> <name>r_config_node_clone</name><parameter_list>(<parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>cn</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RConfigNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cn</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cn</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cn</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>desc</name></name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cn</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>value</name></name></expr>?</condition><then> <expr><name><name>n</name><operator>-&gt;</operator><name>value</name></name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cn</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cn</name><operator>-&gt;</operator><name>setter</name></name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>setter</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cn</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <call><name>r_list_clone</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cn</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_config_node_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RConfigNode</name> <operator>*</operator><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>config_print_value_json</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>cfg</name> <operator>&amp;&amp;</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sval</name> <init>= <expr><call><name>r_str_escape</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_node_is_bool</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>r_config_node_is_int</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"0x"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>n</name> <init>= <expr><call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_str_isnumber</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><name>val</name> <operator>&amp;&amp;</operator> <call><name>r_str_is_bool</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>sval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>sval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>config_print_node</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pfx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sfx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>verbose</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>json</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>cfg</name> <operator>&amp;&amp;</operator> <name>node</name> <operator>&amp;&amp;</operator> <name>pfx</name> <operator>&amp;&amp;</operator> <name>sfx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isFirst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\"name\":\"%s\","</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\"value\":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_print_value_json</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">",\"type\":\"%s\","</literal></expr></argument>, <argument><expr><call><name>r_config_node_type</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>es</name> <operator>=</operator> <call><name>r_str_escape</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>es</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\"desc\":\"%s\","</literal></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\"ro\":%s"</literal></expr></argument>, <argument><expr><call><name>r_str_bool</name> <argument_list>(<argument><expr><call><name>r_config_node_is_ro</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>isFirst</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">",\"options\":["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>node-&gt;options</argument>, <argument>iter</argument>, <argument>option</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>es</name> <operator>=</operator> <call><name>r_str_escape</name> <argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>es</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>isFirst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>isFirst</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\"%s\":"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_print_value_json</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s%s = %s%s %s; %s"</literal></expr></argument>, <argument><expr><name>pfx</name></expr></argument>,

<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>sfx</name></expr></argument>, 

<argument><expr><ternary><condition><expr><call><name>r_config_node_is_ro</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"(ro)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>node</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>isFirst</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name><argument_list>(<argument><expr><literal type="string">" ["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>node-&gt;options</argument>, <argument>iter</argument>, <argument>option</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>isFirst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>isFirst</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s%s = %s%s\n"</literal></expr></argument>, <argument><expr><name>pfx</name></expr></argument>,

<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>sfx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_config_list</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rad</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sfx</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pfx</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>verbose</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>json</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isFirst</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NULLSTR</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rad</name> <operator>=</operator> <literal type="char">'J'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>rad</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>pfx</name> <operator>=</operator> <literal type="string">"\"e "</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sfx</name> <operator>=</operator> <literal type="string">"\""</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cfg-&gt;nodes</argument>, <argument>iter</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>(</operator><name>str</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>config_print_node</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name>sfx</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cfg-&gt;nodes</argument>, <argument>iter</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>(</operator><name>str</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%20s: %s\n"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>desc</name></name></expr>?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>desc</name></name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cfg-&gt;nodes</argument>, <argument>iter</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>space</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dot</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>space</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dot</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>dot</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oldSpace</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cfg-&gt;nodes</argument>, <argument>iter</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>space</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dot</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>space</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dot</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>oldSpace</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>space</name></expr></argument>, <argument><expr><name>oldSpace</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>oldSpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldSpace</name> <operator>=</operator> <name>space</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>oldSpace</name> <operator>=</operator> <name>space</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>oldSpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<expr_stmt><expr><name>verbose</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cfg-&gt;nodes</argument>, <argument>iter</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>(</operator><name>str</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>config_print_node</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name>sfx</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cfg-&gt;nodes</argument>, <argument>iter</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'J'</literal></expr>:</case>

<expr_stmt><expr><name>verbose</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><name>isFirst</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cfg-&gt;nodes</argument>, <argument>iter</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>(</operator><name>str</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>isFirst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>isFirst</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>config_print_node</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name>sfx</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RConfigNode</name><modifier>*</modifier></type> <name>r_config_node_get</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>cfg</name> <operator>&amp;&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ht_pp_find</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_config_set_getter</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RConfigCallback</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>cfg</name> <operator>&amp;&amp;</operator> <name>key</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_config_node_get</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>getter</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_config_set_setter</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RConfigCallback</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_config_node_get</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>setter</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>r_config_get</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>cfg</name> <operator>&amp;&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_config_node_get</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>getter</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>node</name><operator>-&gt;</operator><name>getter</name></name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_node_is_bool</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_str_bool</name> <argument_list>(<argument><expr><call><name>r_str_is_true</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_config_get: variable '%s' not found\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_config_toggle</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_config_node_get</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <call><name>r_config_node_is_bool</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_config_get_i</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_config_node_get</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>getter</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>node</name><operator>-&gt;</operator><name>getter</name></name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ut64</name><operator>)</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ut64</name><operator>)</operator> <literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>r_config_node_type</name><parameter_list>(<parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_node_is_bool</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="string">"bool"</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_node_is_str</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="string">"str"</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_node_is_int</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"0x"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="string">"addr"</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="string">"int"</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RConfigNode</name><modifier>*</modifier></type> <name>r_config_set_cb</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>RConfigCallback</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>setter</name></name> <operator>=</operator> <name>cb</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cb</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>node</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RConfigNode</name><modifier>*</modifier></type> <name>r_config_set_i_cb</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ivalue</name></decl></parameter>, <parameter><decl><type><name>RConfigCallback</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ivalue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>setter</name></name> <operator>=</operator> <name>cb</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>node</name><operator>-&gt;</operator><name>setter</name></name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>node</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__is_true_or_false</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>s</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RConfigNode</name><modifier>*</modifier></type> <name>r_config_set</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ov</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>oi</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>cfg</name> <operator>&amp;&amp;</operator> <name><name>cfg</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><operator>!</operator><call><name>IS_NULLSTR</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>r_config_node_get</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_config_node_is_ro</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"(error: '%s' config key is read only)\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>node</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>oi</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ov</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ov</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_node_is_bool</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><call><name>r_str_is_true</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <ternary><condition><expr><name>b</name></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_str_bool</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>value</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <call><name>IS_DIGIT</name> <argument_list>(<argument><expr><name><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CN_INT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>oi</name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cfg</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>r_config_node_new</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>__is_true_or_false</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CN_BOOL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <ternary><condition><expr><call><name>r_str_is_true</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ht_pp_insert</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_config_set: unable to create a new RConfigNode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_config_set: variable '%s' not found\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>setter</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>node</name><operator>-&gt;</operator><name>setter</name></name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>oi</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <name>oi</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><name>ov</name></expr>?</condition><then> <expr><name>ov</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>node</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>r_config_desc</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_config_node_get</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_config_node_desc</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>r_config_node_desc</name><parameter_list>(<parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>desc</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_config_rm</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_config_node_get</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ht_pp_delete</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_config_node_value_format_i</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <call><name>r_config_node_is_bool</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>r_str_bool</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PFMT64d</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"0x%08"</literal> <name>PFMT64x</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RConfigNode</name><modifier>*</modifier></type> <name>r_config_set_i</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ov</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>cfg</name> <operator>&amp;&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_config_node_get</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_config_node_is_ro</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ov</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_node_value_format_i</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cfg</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_node_value_format_i</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>r_config_node_new</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>CN_RW</name> <operator>|</operator> <name>CN_INT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ht_pp_insert</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>nodes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"(locked: no new keys can be created (%s))\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>setter</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>oi</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>node</name><operator>-&gt;</operator><name>setter</name></name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>i_value</name></name> <operator>=</operator> <name>oi</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <ternary><condition><expr><name>ov</name></expr>?</condition><then> <expr><name>ov</name></expr></then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ov</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>node</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__evalString</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eq</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>eq</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_config_set</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_list</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid config key %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_config_eval</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>many</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>cfg</name> <operator>&amp;&amp;</operator> <name>str</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_str_trim_dup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_list</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_rm</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>many</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_str_split_list</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>name</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>__evalString</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__evalString</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_config_lock</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><operator>(</operator><name>RListComparator</name><operator>)</operator> <name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_config_readonly</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>r_config_node_get</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CN_RO</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RConfig</name><modifier>*</modifier></type> <name>r_config_new</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RConfig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cfg</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>ht</name></name> <operator>=</operator> <call><name>ht_pp_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>nodes</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_config_node_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cfg</name><operator>-&gt;</operator><name>nodes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>printf</name></expr>;</expr_stmt>

<return>return <expr><name>cfg</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RConfig</name><modifier>*</modifier></type> <name>r_config_clone</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>r_config_new</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cfg-&gt;nodes</argument>, <argument>iter</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>nn</name> <init>= <expr><call><name>r_config_node_clone</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ht_pp_insert</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>lock</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>cb_printf</name></name></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_config_free</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cfg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>nodes</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>r_config_node_free</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ht_pp_free</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_config_visual_hit_i</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_config_node_get</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <call><name>r_config_node_is_int</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_config_bump</name><parameter_list>(<parameter><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>orig</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>orig</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_config_serialize</name><parameter_list>(<parameter><decl><type><name>R_NONNULL</name> <name>RConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>R_NONNULL</name> <name>Sdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>config-&gt;nodes</argument>, <argument>iter</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_config_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConfig</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConfigNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_config_node_get</name> <argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_config_unserialize</name><parameter_list>(<parameter><decl><type><name>R_NONNULL</name> <name>RConfig</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>R_NONNULL</name> <name>Sdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>load_config_cb</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
