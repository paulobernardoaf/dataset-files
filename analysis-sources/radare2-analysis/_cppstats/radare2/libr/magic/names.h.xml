<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\magic\names.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_C</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_CC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_MAKE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_PLI</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_MACH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_ENG</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_PAS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_MAIL</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_NEWS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_JAVA</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_HTML</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_BCPL</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_M4</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_PO</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>human</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>mime</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>types</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"C program"</literal></expr>, <expr><literal type="string">"text/x-c"</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"C++ program"</literal></expr>, <expr><literal type="string">"text/x-c++"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"make commands"</literal></expr>, <expr><literal type="string">"text/x-makefile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PL/1 program"</literal></expr>, <expr><literal type="string">"text/x-pl1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"assembler program"</literal></expr>, <expr><literal type="string">"text/x-asm"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"English"</literal></expr>, <expr><literal type="string">"text/plain"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Pascal program"</literal></expr>, <expr><literal type="string">"text/x-pascal"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mail"</literal></expr>, <expr><literal type="string">"text/x-mail"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"news"</literal></expr>, <expr><literal type="string">"text/x-news"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Java program"</literal></expr>, <expr><literal type="string">"text/x-java"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"HTML document"</literal></expr>, <expr><literal type="string">"text/html"</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"BCPL program"</literal></expr>, <expr><literal type="string">"text/x-bcpl"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"M4 macro language pre-processor"</literal></expr>, <expr><literal type="string">"text/x-m4"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PO (gettext message catalogue)"</literal></expr>, <expr><literal type="string">"text/x-po"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cannot happen error on names.h/types"</literal></expr>, <expr><literal type="string">"error/x-error"</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>names</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>type</name></decl>;</decl_stmt>

}</block> <decl><name><name>names</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"msgid"</literal></expr>, <expr><name>L_PO</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dnl"</literal></expr>, <expr><name>L_M4</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"import"</literal></expr>, <expr><name>L_JAVA</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"\"libhdr\""</literal></expr>, <expr><name>L_BCPL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"\"LIBHDR\""</literal></expr>, <expr><name>L_BCPL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"//"</literal></expr>, <expr><name>L_CC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"template"</literal></expr>, <expr><name>L_CC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"virtual"</literal></expr>, <expr><name>L_CC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"class"</literal></expr>, <expr><name>L_CC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"public:"</literal></expr>, <expr><name>L_CC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"private:"</literal></expr>, <expr><name>L_CC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"/*"</literal></expr>, <expr><name>L_C</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"#include"</literal></expr>, <expr><name>L_C</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"char"</literal></expr>, <expr><name>L_C</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"The"</literal></expr>, <expr><name>L_ENG</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"the"</literal></expr>, <expr><name>L_ENG</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"double"</literal></expr>, <expr><name>L_C</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"extern"</literal></expr>, <expr><name>L_C</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"float"</literal></expr>, <expr><name>L_C</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"struct"</literal></expr>, <expr><name>L_C</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"union"</literal></expr>, <expr><name>L_C</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CFLAGS"</literal></expr>, <expr><name>L_MAKE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"LDFLAGS"</literal></expr>, <expr><name>L_MAKE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"all:"</literal></expr>, <expr><name>L_MAKE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">".PRECIOUS"</literal></expr>, <expr><name>L_MAKE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">".ascii"</literal></expr>, <expr><name>L_MACH</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">".asciiz"</literal></expr>, <expr><name>L_MACH</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">".byte"</literal></expr>, <expr><name>L_MACH</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">".even"</literal></expr>, <expr><name>L_MACH</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">".globl"</literal></expr>, <expr><name>L_MACH</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">".text"</literal></expr>, <expr><name>L_MACH</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"clr"</literal></expr>, <expr><name>L_MACH</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"(input,"</literal></expr>, <expr><name>L_PAS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"program"</literal></expr>, <expr><name>L_PAS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"record"</literal></expr>, <expr><name>L_PAS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dcl"</literal></expr>, <expr><name>L_PLI</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Received:"</literal></expr>, <expr><name>L_MAIL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"&gt;From"</literal></expr>, <expr><name>L_MAIL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Return-Path:"</literal></expr>,<expr><name>L_MAIL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Cc:"</literal></expr>, <expr><name>L_MAIL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Newsgroups:"</literal></expr>, <expr><name>L_NEWS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Path:"</literal></expr>, <expr><name>L_NEWS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Organization:"</literal></expr>,<expr><name>L_NEWS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"href="</literal></expr>, <expr><name>L_HTML</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"HREF="</literal></expr>, <expr><name>L_HTML</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"&lt;body"</literal></expr>, <expr><name>L_HTML</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"&lt;BODY"</literal></expr>, <expr><name>L_HTML</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"&lt;html"</literal></expr>, <expr><name>L_HTML</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"&lt;HTML"</literal></expr>, <expr><name>L_HTML</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"&lt;!--"</literal></expr>, <expr><name>L_HTML</name></expr>}</block></expr>,

}</block></expr></init></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NNAMES</name></cpp:macro> <cpp:value>(sizeof(names)/sizeof(struct names))</cpp:value></cpp:define>

</unit>
