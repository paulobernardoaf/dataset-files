<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\magic\mdump.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_userconf.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_LIB_MAGIC</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZOF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(a) / sizeof(a[0]))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPILE_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>file_mdump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>optyp</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>FILE_OPS</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[%u"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%.*s %u"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>INDIR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"(%s,"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>&lt;</operator> <name>file_nnames</name><operator>)</operator></expr> ?</condition><then>

<expr><name><name>magic_file_names</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"*bad*"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPINVERSE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'~'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%c%u),"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPS_MASK</name><operator>)</operator> <operator>&lt;</operator> <call><name>SZOF</name><argument_list>(<argument><expr><name>optyp</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>

<expr><name><name>optyp</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPS_MASK</name></expr>]</index></name></expr> </then><else>: <expr><literal type="char">'?'</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>in_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" %s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>UNSIGNED</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"u"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <name>file_nnames</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>magic_file_names</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"*bad*"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>mask_op</name></name> <operator>&amp;</operator> <name>FILE_OPINVERSE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'~'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MAGIC_IS_STRING</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_COMPACT_BLANK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>CHAR_COMPACT_BLANK</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_COMPACT_OPTIONAL_BLANK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>CHAR_COMPACT_OPTIONAL_BLANK</name></expr></argument>,

<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_IGNORE_LOWERCASE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>CHAR_IGNORE_LOWERCASE</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_IGNORE_UPPERCASE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>CHAR_IGNORE_UPPERCASE</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>REGEX_OFFSET_START</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>CHAR_REGEX_OFFSET_START</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"/%u"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>mask_op</name></name> <operator>&amp;</operator> <name>FILE_OPS_MASK</name><operator>)</operator> <operator>&lt;</operator> <call><name>SZOF</name><argument_list>(<argument><expr><name>optyp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name><name>optyp</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>mask_op</name></name> <operator>&amp;</operator> <name>FILE_OPS_MASK</name></expr>]</index></name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>num_mask</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>num_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">",%c"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>!=</operator> <literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FILE_BYTE</name></expr>:</case>

<case>case <expr><name>FILE_SHORT</name></expr>:</case>

<case>case <expr><name>FILE_LONG</name></expr>:</case>

<case>case <expr><name>FILE_LESHORT</name></expr>:</case>

<case>case <expr><name>FILE_LELONG</name></expr>:</case>

<case>case <expr><name>FILE_MELONG</name></expr>:</case>

<case>case <expr><name>FILE_BESHORT</name></expr>:</case>

<case>case <expr><name>FILE_BELONG</name></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>

<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>

<case>case <expr><name>FILE_QUAD</name></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_PSTRING</name></expr>:</case>

<case>case <expr><name>FILE_STRING</name></expr>:</case>

<case>case <expr><name>FILE_REGEX</name></expr>:</case>

<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>

<case>case <expr><name>FILE_LESTRING16</name></expr>:</case>

<case>case <expr><name>FILE_SEARCH</name></expr>:</case>

<expr_stmt><expr><call><name>file_showstr</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>vallen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_DATE</name></expr>:</case>

<case>case <expr><name>FILE_LEDATE</name></expr>:</case>

<case>case <expr><name>FILE_BEDATE</name></expr>:</case>

<case>case <expr><name>FILE_MEDATE</name></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s,"</literal></expr></argument>,

<argument><expr><call><name>file_fmttime</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>l</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_LDATE</name></expr>:</case>

<case>case <expr><name>FILE_LELDATE</name></expr>:</case>

<case>case <expr><name>FILE_BELDATE</name></expr>:</case>

<case>case <expr><name>FILE_MELDATE</name></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s,"</literal></expr></argument>,

<argument><expr><call><name>file_fmttime</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>l</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_QDATE</name></expr>:</case>

<case>case <expr><name>FILE_LEQDATE</name></expr>:</case>

<case>case <expr><name>FILE_BEQDATE</name></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s,"</literal></expr></argument>,

<argument><expr><call><name>file_fmttime</name><argument_list>(<argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>q</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_QLDATE</name></expr>:</case>

<case>case <expr><name>FILE_LEQLDATE</name></expr>:</case>

<case>case <expr><name>FILE_BEQLDATE</name></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s,"</literal></expr></argument>,

<argument><expr><call><name>file_fmttime</name><argument_list>(<argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>q</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_FLOAT</name></expr>:</case>

<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>

<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%G"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>

<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>

<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%G"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_DEFAULT</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"*bad*"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">",\"%s\"]\n"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>file_magwarn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s, %lu: "</literal></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>file</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>ms</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>vfprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_fmttime</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>local</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator><name>v</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>timestruct</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>local</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>ctime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DAYLIGHT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>daylight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TM_ISDST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>now</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>now</name> <operator>==</operator> <operator>(</operator><name>time_t</name><operator>)</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm1</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tm1</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tm1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"*Invalid time*"</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>daylight</name> <operator>=</operator> <name><name>tm1</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name>daylight</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="number">3600</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tm</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"*Invalid time*"</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>asctime</name> <argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pp</name><index>[<expr><call><name>strcspn</name> <argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>pp</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
