<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\magic\apprentice.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_userconf.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_LIB_MAGIC</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"patchlevel.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUICK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUICK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys\stat.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISREG</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; S_IFMT) == S_IFREG)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISDIR</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; S_IFMT) == S_IFDIR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXPATHLEN</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EATAB</name></cpp:macro> <cpp:value>{while (isascii((ut8) *l) &amp;&amp; isspace((ut8) *l)) { l++; }}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWCASE</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isupper((ut8) (l)) ? tolower((ut8) (l)) : (l))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAP_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_FILE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>r_magic_entry</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>cont_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>max_count</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>magic_file_formats</name><index>[<expr><name>FILE_NAMES_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>file_nformats</name> <init>= <expr><name>FILE_NAMES_SIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>magic_file_names</name><index>[<expr><name>FILE_NAMES_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>file_nnames</name> <init>= <expr><name>FILE_NAMES_SIZE</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getvalue</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>hextoint</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getstr</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>parse_mime</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>eatsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apprentice_1</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>apprentice_r_magic_strength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apprentice_sort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apprentice_load</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>byteswap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ut32</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bs1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ut16</name></type> <name>swap2</name><parameter_list>(<parameter><decl><type><name>ut16</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ut32</name></type> <name>swap4</name><parameter_list>(<parameter><decl><type><name>ut32</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ut64</name></type> <name>swap8</name><parameter_list>(<parameter><decl><type><name>ut64</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>mkdbname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apprentice_map</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apprentice_compile</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_format_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_format</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_op</name><parameter_list>(<parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>maxmagic</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>magicsize</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>r_magic</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>usg_hdr</name><index>[]</index></name> <init>= <expr><literal type="string">"cont\toffset\ttype\topcode\tmask\tvalue\tdesc"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>mime_marker</name><index>[]</index></name> <init>= <expr><literal type="string">"!:mime"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>mime_marker_len</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>mime_marker</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>type_tbl_s</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>format</name></decl>;</decl_stmt>

}</block> <decl><name><name>type_tbl</name><index>[]</index></name> <init>= <expr><block>{

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XX</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s, (sizeof (s) - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XX_NULL</name></cpp:macro> <cpp:value>"", 0</cpp:value></cpp:define>

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"byte"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BYTE</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"short"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_SHORT</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_DEFAULT</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LONG</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_STRING</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"date"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_DATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"beshort"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BESHORT</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"belong"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BELONG</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"bedate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BEDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"leshort"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LESHORT</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"lelong"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LELONG</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"ledate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LEDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"pstring"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_PSTRING</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"ldate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"beldate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BELDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"leldate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LELDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"regex"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_REGEX</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"bestring16"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BESTRING16</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"lestring16"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LESTRING16</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"search"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_SEARCH</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"medate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_MEDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"meldate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_MELDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"melong"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_MELONG</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"quad"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_QUAD</name></expr>, <expr><name>FILE_FMT_QUAD</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"lequad"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LEQUAD</name></expr>, <expr><name>FILE_FMT_QUAD</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"bequad"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BEQUAD</name></expr>, <expr><name>FILE_FMT_QUAD</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"qdate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_QDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"leqdate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LEQDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"beqdate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BEQDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"qldate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_QLDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"leqldate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LEQLDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"beqldate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BEQLDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_FLOAT</name></expr>, <expr><name>FILE_FMT_FLOAT</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"befloat"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BEFLOAT</name></expr>, <expr><name>FILE_FMT_FLOAT</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"lefloat"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LEFLOAT</name></expr>, <expr><name>FILE_FMT_FLOAT</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"double"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_DOUBLE</name></expr>, <expr><name>FILE_FMT_DOUBLE</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"bedouble"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BEDOUBLE</name></expr>, <expr><name>FILE_FMT_DOUBLE</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"ledouble"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LEDOUBLE</name></expr>, <expr><name>FILE_FMT_DOUBLE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>XX_NULL</name></expr>, <expr><name>FILE_INVALID</name></expr>, <expr><name>FILE_FMT_NONE</name></expr> }</block></expr>,

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>XX</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>XX_NULL</name></cpp:undef>

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>type_tbl_s</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>type_tbl</name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <name>l</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_file_tables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>type_tbl_s</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>done</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>type_tbl</name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>FILE_NAMES_SIZE</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>magic_file_names</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>magic_file_formats</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apprentice_1</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>mlist</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>magic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>nmagic</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mapped</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ms</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>haderr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>magicsize</name> <operator>!=</operator> <name>FILE_MAGICSIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"magic element size %lu != %lu"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>magic</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>FILE_MAGICSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>FILE_COMPILE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>apprentice_load</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>magic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nmagic</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>apprentice_compile</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>magic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nmagic</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>apprentice_map</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>magic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nmagic</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>apprentice_load</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>magic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nmagic</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mapped</name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>magic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_delmagic</name> <argument_list>(<argument><expr><name>magic</name></expr></argument>, <argument><expr><name>mapped</name></expr></argument>, <argument><expr><name>nmagic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ml</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>ml</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_delmagic</name> <argument_list>(<argument><expr><name>magic</name></expr></argument>, <argument><expr><name>mapped</name></expr></argument>, <argument><expr><name>nmagic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>file_oomem</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>ml</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>magic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>nmagic</name></name> <operator>=</operator> <name>nmagic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>mapped</name></name> <operator>=</operator> <name>mapped</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlist</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ml</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>mlist</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>mlist</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlist</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>ml</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>file_delmagic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>entries</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QUICK</name></expr></cpp:if>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>munmap</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>entries</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type> <name>file_apprentice</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mfn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>file_err</name></decl>, <decl><type ref="prev"/><name>errs</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>mlist</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_file_tables</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fn</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mfn</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_oomem</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fn</name> <operator>=</operator> <name>mfn</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mlist</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>mlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>file_oomem</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>mlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mlist</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>mlist</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>mlist</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>fn</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>PATHSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fn</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file_err</name> <operator>=</operator> <call><name>apprentice_1</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>mlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errs</name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name>errs</name></expr></argument>, <argument><expr><name>file_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fn</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>errs</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>mlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>file_error</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"could not find any magic files!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mlist</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>apprentice_r_magic_strength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<decl_stmt><decl><type><name>size_t</name></type> <name>val</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>MULT</name></expr></init></decl>;</decl_stmt> 

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FILE_DEFAULT</name></expr>:</case> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>FILE_BYTE</name></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <literal type="number">1</literal> <operator>*</operator> <name>MULT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_SHORT</name></expr>:</case>

<case>case <expr><name>FILE_LESHORT</name></expr>:</case>

<case>case <expr><name>FILE_BESHORT</name></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>MULT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_LONG</name></expr>:</case>

<case>case <expr><name>FILE_LELONG</name></expr>:</case>

<case>case <expr><name>FILE_BELONG</name></expr>:</case>

<case>case <expr><name>FILE_MELONG</name></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>MULT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_PSTRING</name></expr>:</case>

<case>case <expr><name>FILE_STRING</name></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>m</name><operator>-&gt;</operator><name>vallen</name></name> <operator>*</operator> <name>MULT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>

<case>case <expr><name>FILE_LESTRING16</name></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>m</name><operator>-&gt;</operator><name>vallen</name></name> <operator>*</operator> <name>MULT</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_SEARCH</name></expr>:</case>

<case>case <expr><name>FILE_REGEX</name></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>m</name><operator>-&gt;</operator><name>vallen</name></name> <operator>*</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name>MULT</name> <operator>/</operator> <name><name>m</name><operator>-&gt;</operator><name>vallen</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_DATE</name></expr>:</case>

<case>case <expr><name>FILE_LEDATE</name></expr>:</case>

<case>case <expr><name>FILE_BEDATE</name></expr>:</case>

<case>case <expr><name>FILE_MEDATE</name></expr>:</case>

<case>case <expr><name>FILE_LDATE</name></expr>:</case>

<case>case <expr><name>FILE_LELDATE</name></expr>:</case>

<case>case <expr><name>FILE_BELDATE</name></expr>:</case>

<case>case <expr><name>FILE_MELDATE</name></expr>:</case>

<case>case <expr><name>FILE_FLOAT</name></expr>:</case>

<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>

<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>MULT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_QUAD</name></expr>:</case>

<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>

<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>

<case>case <expr><name>FILE_QDATE</name></expr>:</case>

<case>case <expr><name>FILE_LEQDATE</name></expr>:</case>

<case>case <expr><name>FILE_BEQDATE</name></expr>:</case>

<case>case <expr><name>FILE_QLDATE</name></expr>:</case>

<case>case <expr><name>FILE_LEQLDATE</name></expr>:</case>

<case>case <expr><name>FILE_BEQLDATE</name></expr>:</case>

<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>

<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>

<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>MULT</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Bad type %d\n"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'x'</literal></expr>:</case> 

<case>case <expr><literal type="char">'!'</literal></expr>:</case> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'='</literal></expr>:</case> 

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>MULT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> 

<expr_stmt><expr><name>val</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>MULT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case> 

<expr_stmt><expr><name>val</name> <operator>-=</operator> <name>MULT</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Bad relation %c\n"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><ternary><condition><expr><name>val</name></expr>?</condition><then> <expr><name>val</name></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apprentice_sort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_magic_entry</name></name> <modifier>*</modifier></type><name>ma</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_magic_entry</name></name> <modifier>*</modifier></type><name>mb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sa</name> <init>= <expr><call><name>apprentice_r_magic_strength</name> <argument_list>(<argument><expr><name><name>ma</name><operator>-&gt;</operator><name>mp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sb</name> <init>= <expr><call><name>apprentice_r_magic_strength</name> <argument_list>(<argument><expr><name><name>mb</name><operator>-&gt;</operator><name>mp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sa</name> <operator>==</operator> <name>sb</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sa</name> <operator>&gt;</operator> <name>sb</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_test_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>mstart</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FILE_BYTE</name></expr>:</case>

<case>case <expr><name>FILE_SHORT</name></expr>:</case>

<case>case <expr><name>FILE_LONG</name></expr>:</case>

<case>case <expr><name>FILE_DATE</name></expr>:</case>

<case>case <expr><name>FILE_BESHORT</name></expr>:</case>

<case>case <expr><name>FILE_BELONG</name></expr>:</case>

<case>case <expr><name>FILE_BEDATE</name></expr>:</case>

<case>case <expr><name>FILE_LESHORT</name></expr>:</case>

<case>case <expr><name>FILE_LELONG</name></expr>:</case>

<case>case <expr><name>FILE_LEDATE</name></expr>:</case>

<case>case <expr><name>FILE_LDATE</name></expr>:</case>

<case>case <expr><name>FILE_BELDATE</name></expr>:</case>

<case>case <expr><name>FILE_LELDATE</name></expr>:</case>

<case>case <expr><name>FILE_MEDATE</name></expr>:</case>

<case>case <expr><name>FILE_MELDATE</name></expr>:</case>

<case>case <expr><name>FILE_MELONG</name></expr>:</case>

<case>case <expr><name>FILE_QUAD</name></expr>:</case>

<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>

<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>

<case>case <expr><name>FILE_QDATE</name></expr>:</case>

<case>case <expr><name>FILE_LEQDATE</name></expr>:</case>

<case>case <expr><name>FILE_BEQDATE</name></expr>:</case>

<case>case <expr><name>FILE_QLDATE</name></expr>:</case>

<case>case <expr><name>FILE_LEQLDATE</name></expr>:</case>

<case>case <expr><name>FILE_BEQLDATE</name></expr>:</case>

<case>case <expr><name>FILE_FLOAT</name></expr>:</case>

<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>

<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>

<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>

<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>

<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>

<case>case <expr><name>FILE_STRING</name></expr>:</case>

<case>case <expr><name>FILE_PSTRING</name></expr>:</case>

<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>

<case>case <expr><name>FILE_LESTRING16</name></expr>:</case>

<expr_stmt><expr><name><name>mstart</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>BINTEST</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_REGEX</name></expr>:</case>

<case>case <expr><name>FILE_SEARCH</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>file_looks_utf8</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>vallen</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mstart</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>BINTEST</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>FILE_DEFAULT</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>FILE_INVALID</name></expr>:</case>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>bgets</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>line_sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>data</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nl</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nlsz</name> <init>= <expr><ternary><condition><expr><name>nl</name></expr>

?</condition><then> <expr><name>nl</name> <operator>-</operator> <name>data</name> <operator>+</operator> <literal type="number">1</literal></expr>

</then><else>: <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>line_sz</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>nlsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><index>[<expr><name>nlsz</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>data</name> <operator>+</operator> <name>nlsz</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_b</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>marray</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>marraycount</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name><name>ms</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>data</name> <operator>=</operator> <call><name>bgets</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name><name>ms</name><operator>-&gt;</operator><name>line</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>mime_marker_len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>mime_marker</name></expr></argument>, <argument><expr><name>mime_marker_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>parse_mime</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>marray</name></expr></argument>, <argument><expr><name>marraycount</name></expr></argument>,

<argument><expr><name>line</name> <operator>+</operator> <name>mime_marker_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>errs</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>marray</name></expr></argument>, <argument><expr><name>marraycount</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>errs</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_1</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>marray</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>marraycount</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>file</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>load_b</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>errs</name></expr></argument>, <argument><expr><name>marray</name></expr></argument>, <argument><expr><name>marraycount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>r_sandbox_fopen</name> <argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_error</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"cannot read magic file `%s'"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>errs</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name><name>ms</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><call><name>fgets</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name><name>ms</name><operator>-&gt;</operator><name>line</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>mime_marker_len</name> <operator>&amp;&amp;</operator>

<call><name>memcmp</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>mime_marker</name></expr></argument>, <argument><expr><name>mime_marker_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>parse_mime</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>marray</name></expr></argument>, <argument><expr><name>marraycount</name></expr></argument>,

<argument><expr><name>line</name> <operator>+</operator> <name>mime_marker_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>errs</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>marray</name></expr></argument>, <argument><expr><name>marraycount</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>errs</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apprentice_load</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>magicp</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>nmagicp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>marraycount</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>mentrycount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>starttest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_magic_entry</name></name> <modifier>*</modifier></type><name>marray</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>errs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hdir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>dir</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wcpath</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cfname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>subfn</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>subfn</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>R_MAGIC_CHECK</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>maxmagic</name> <operator>=</operator> <name>MAXMAGIS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>marray</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>maxmagic</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>marray</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_oomem</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>maxmagic</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>marray</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>marraycount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>FILE_CHECK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>usg_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name> <argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_sandbox_enable</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_sandbox_check_path</name> <argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>marray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>wcpath</name> <operator>=</operator> <call><name>r_utf8_to_utf16</name> <argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>swprintf</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>_countof</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">L"%ls\\*.*"</literal></expr></argument>, <argument><expr><name>wcpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hdir</name> <operator>=</operator> <call><name>FindFirstFileW</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hdir</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>wcsncmp</name> <argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>cFileName</name></name></expr></argument>, <argument><expr><literal type="string">L"."</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cfname</name> <operator>=</operator> <call><name>r_utf16_to_utf8</name> <argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>cFileName</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>subfn</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>subfn</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>cfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name> <argument_list>(<argument><expr><name>subfn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>S_ISREG</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>load_1</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>subfn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>marray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>marraycount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><call><name>FindNextFileW</name> <argument_list>(<argument><expr><name>hdir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>FindClose</name> <argument_list>(<argument><expr><name>hdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>wcpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>errs</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>opendir</name> <argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>readdir</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>d_name</name></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>subfn</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>subfn</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name> <argument_list>(<argument><expr><name>subfn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>S_ISREG</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>load_1</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>subfn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>marray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>marraycount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>closedir</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>errs</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>load_1</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>marray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>marraycount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errs</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>marraycount</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>starttest</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>set_test_type</name><argument_list>(<argument><expr><name><name>marray</name><index>[<expr><name>starttest</name></expr>]</index></name><operator>.</operator><name>mp</name></expr></argument>, <argument><expr><name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_DEBUG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s: %s\n"</literal></expr></argument>,

<argument><expr><name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>mimetype</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>mimetype</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"; "</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>desc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>desc</name></name></expr> </then><else>: <expr><literal type="string">"(no description)"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>BINTEST</name></expr> ?</condition><then> <expr><literal type="string">"binary"</literal></expr> </then><else>: <expr><literal type="string">"text"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>BINTEST</name></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMLEN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>==</operator> <name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>desc</name></name> <operator>||</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>p</name> <operator>+</operator> <name>SYMLEN</name> <operator>-</operator> <name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>desc</name></name> <operator>==</operator> <name>MAXstring</name> <operator>||</operator>

<operator>(</operator><name><name>p</name><index>[<expr><name>SYMLEN</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>p</name><index>[<expr><name>SYMLEN</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><literal type="string">"*** Possible binary test for text type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name>marraycount</name> <operator>&amp;&amp;</operator> <name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

</block_content>}</block></for>

<expr_stmt><expr><call><name>qsort</name> <argument_list>(<argument><expr><name>marray</name></expr></argument>, <argument><expr><name>marraycount</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>marray</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>apprentice_sort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>marraycount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_DEFAULT</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name>marraycount</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>marraycount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>lineno</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"level 0 \"default\" did not sort last"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>marraycount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>mentrycount</name> <operator>+=</operator> <name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cont_count</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>magicp</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>magicp</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>mentrycount</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_oomem</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>magicp</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>mentrycount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errs</name><operator>++</operator></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mentrycount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>marraycount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name> <argument_list>(<argument><expr><operator>*</operator><name>magicp</name> <operator>+</operator> <name>mentrycount</name></expr></argument>, <argument><expr><name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mp</name></expr></argument>,

<argument><expr><name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cont_count</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>magicp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mentrycount</name> <operator>+=</operator> <name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cont_count</name></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>out</name>:</label>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>marraycount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>marray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>marray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>magicp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>nmagicp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>errs</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>nmagicp</name> <operator>=</operator> <name>mentrycount</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>ut64</name></type> <name>file_signextend</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>UNSIGNED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FILE_BYTE</name></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>v</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_SHORT</name></expr>:</case>

<case>case <expr><name>FILE_BESHORT</name></expr>:</case>

<case>case <expr><name>FILE_LESHORT</name></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator> <name>v</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_DATE</name></expr>:</case>

<case>case <expr><name>FILE_BEDATE</name></expr>:</case>

<case>case <expr><name>FILE_LEDATE</name></expr>:</case>

<case>case <expr><name>FILE_MEDATE</name></expr>:</case>

<case>case <expr><name>FILE_LDATE</name></expr>:</case>

<case>case <expr><name>FILE_BELDATE</name></expr>:</case>

<case>case <expr><name>FILE_LELDATE</name></expr>:</case>

<case>case <expr><name>FILE_MELDATE</name></expr>:</case>

<case>case <expr><name>FILE_LONG</name></expr>:</case>

<case>case <expr><name>FILE_BELONG</name></expr>:</case>

<case>case <expr><name>FILE_LELONG</name></expr>:</case>

<case>case <expr><name>FILE_MELONG</name></expr>:</case>

<case>case <expr><name>FILE_FLOAT</name></expr>:</case>

<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>

<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <name>v</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_QUAD</name></expr>:</case>

<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>

<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>

<case>case <expr><name>FILE_QDATE</name></expr>:</case>

<case>case <expr><name>FILE_QLDATE</name></expr>:</case>

<case>case <expr><name>FILE_BEQDATE</name></expr>:</case>

<case>case <expr><name>FILE_BEQLDATE</name></expr>:</case>

<case>case <expr><name>FILE_LEQDATE</name></expr>:</case>

<case>case <expr><name>FILE_LEQLDATE</name></expr>:</case>

<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>

<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>

<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>v</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILE_STRING</name></expr>:</case>

<case>case <expr><name>FILE_PSTRING</name></expr>:</case>

<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>

<case>case <expr><name>FILE_LESTRING16</name></expr>:</case>

<case>case <expr><name>FILE_REGEX</name></expr>:</case>

<case>case <expr><name>FILE_SEARCH</name></expr>:</case>

<case>case <expr><name>FILE_DEFAULT</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"cannot happen: m-&gt;type=%d\n"</literal></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>~</operator><literal type="number">0U</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>string_modifier_check</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>

<case>case <expr><name>FILE_LESTRING16</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,

<argument><expr><literal type="string">"no modifiers allowed for 16-bit strings\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>FILE_STRING</name></expr>:</case>

<case>case <expr><name>FILE_PSTRING</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>REGEX_OFFSET_START</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,

<argument><expr><literal type="string">"'/%c' only allowed on regex and search\n"</literal></expr></argument>,

<argument><expr><name>CHAR_REGEX_OFFSET_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>FILE_SEARCH</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,

<argument><expr><literal type="string">"missing range; defaulting to %d\n"</literal></expr></argument>,

<argument><expr><name>STRING_DEFAULT_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name> <operator>=</operator> <name>STRING_DEFAULT_RANGE</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>FILE_REGEX</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_COMPACT_BLANK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"'/%c' not allowed on regex\n"</literal></expr></argument>,

<argument><expr><name>CHAR_COMPACT_BLANK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_COMPACT_OPTIONAL_BLANK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"'/%c' not allowed on regex\n"</literal></expr></argument>,

<argument><expr><name>CHAR_COMPACT_OPTIONAL_BLANK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"coding error: m-&gt;type=%d\n"</literal></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_op</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case> <return>return <expr><name>FILE_OPAND</name></expr>;</return>

<case>case <expr><literal type="char">'|'</literal></expr>:</case> <return>return <expr><name>FILE_OPOR</name></expr>;</return>

<case>case <expr><literal type="char">'^'</literal></expr>:</case> <return>return <expr><name>FILE_OPXOR</name></expr>;</return>

<case>case <expr><literal type="char">'+'</literal></expr>:</case> <return>return <expr><name>FILE_OPADD</name></expr>;</return>

<case>case <expr><literal type="char">'-'</literal></expr>:</case> <return>return <expr><name>FILE_OPMINUS</name></expr>;</return>

<case>case <expr><literal type="char">'*'</literal></expr>:</case> <return>return <expr><name>FILE_OPMULTIPLY</name></expr>;</return>

<case>case <expr><literal type="char">'/'</literal></expr>:</case> <return>return <expr><name>FILE_OPDIVIDE</name></expr>;</return>

<case>case <expr><literal type="char">'%'</literal></expr>:</case> <return>return <expr><name>FILE_OPMODULO</name></expr>;</return>

<default>default:</default> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_cond</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cond_tbl_s</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>cond_tbl_s</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cond</name></decl>;</decl_stmt>

}</block> <decl><name><name>cond_tbl</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"if"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>COND_IF</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"elif"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>COND_ELIF</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"else"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>COND_ELSE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>COND_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>cond_tbl</name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>isspace</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name><name>l</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <name>l</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>cond</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_cond</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cond</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>cont_level</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>last_cond</name></decl>;</decl_stmt>

<expr_stmt><expr><name>last_cond</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>last_cond</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>cond</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>COND_IF</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>last_cond</name> <operator>!=</operator> <name>COND_NONE</name> <operator>&amp;&amp;</operator> <name>last_cond</name> <operator>!=</operator> <name>COND_ELIF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"syntax error: `if'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_cond</name> <operator>=</operator> <name>COND_IF</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>COND_ELIF</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>last_cond</name> <operator>!=</operator> <name>COND_IF</name> <operator>&amp;&amp;</operator> <name>last_cond</name> <operator>!=</operator> <name>COND_ELIF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"syntax error: `elif'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_cond</name> <operator>=</operator> <name>COND_ELIF</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>COND_ELSE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>last_cond</name> <operator>!=</operator> <name>COND_IF</name> <operator>&amp;&amp;</operator> <name>last_cond</name> <operator>!=</operator> <name>COND_ELIF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"syntax error: `else'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_cond</name> <operator>=</operator> <name>COND_NONE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>COND_NONE</name></expr>:</case>

<expr_stmt><expr><name>last_cond</name> <operator>=</operator> <name>COND_NONE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>last_cond</name> <operator>=</operator> <name>last_cond</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>mentryp</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>nmentryp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut32</name></type> <name>last_cont_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_magic_entry</name></name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>cont_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr><operator>,</operator> <expr><name>cont_level</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>cont_level</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>cont_level</name> <operator>&gt;</operator> <name>last_cont_level</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>file_check_mem</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>cont_level</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_cont_level</name> <operator>=</operator> <name>cont_level</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC_CHUNK</name></cpp:macro> <cpp:value>(size_t)10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC_INCR</name></cpp:macro> <cpp:value>(size_t)200</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>cont_level</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nmentryp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"No current entry for continuation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>me</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>*</operator><name>mentryp</name><operator>)</operator><index>[<expr><operator>*</operator><name>nmentryp</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>me</name><operator>-&gt;</operator><name>cont_count</name></name> <operator>==</operator> <name><name>me</name><operator>-&gt;</operator><name>max_count</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>nm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>cnt</name> <init>= <expr><name><name>me</name><operator>-&gt;</operator><name>max_count</name></name> <operator>+</operator> <name>ALLOC_CHUNK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>nm</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>me</name><operator>-&gt;</operator><name>mp</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>nm</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>cnt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>nm</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>mp</name></name> <operator>=</operator> <name>nm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>max_count</name></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>mp</name><index>[<expr><name><name>me</name><operator>-&gt;</operator><name>cont_count</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>=</operator> <name>cont_level</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nmentryp</name> <operator>==</operator> <name>maxmagic</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_magic_entry</name></name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>maxmagic</name> <operator>+=</operator> <name>ALLOC_INCR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mp</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><operator>*</operator><name>mentryp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>mp</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>maxmagic</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_oomem</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>mp</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>maxmagic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><index>[<expr><operator>*</operator><name>nmentryp</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>mp</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ALLOC_INCR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mentryp</name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>me</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>*</operator><name>mentryp</name><operator>)</operator><index>[<expr><operator>*</operator><name>nmentryp</name></expr>]</index></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>me</name><operator>-&gt;</operator><name>mp</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>m</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ALLOC_CHUNK</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_oomem</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ALLOC_CHUNK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>mp</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>max_count</name></name> <operator>=</operator> <name>ALLOC_CHUNK</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>me</name><operator>-&gt;</operator><name>mp</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>cont_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>lineno</name></name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>OFFADD</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>INDIR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>OFFADD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>~</operator><name>OFFADD</name><operator>)</operator> <operator>|</operator> <name>INDIROFFADD</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>OFFADD</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>OFFADD</name> <operator>|</operator> <name>INDIROFFADD</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"relative offset at level 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><call><name>strtoul</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>==</operator> <name>t</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"offset `%s' invalid"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>INDIR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_LONG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>l</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_LELONG</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_BELONG</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_MELONG</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_LESHORT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'H'</literal></expr>:</case>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_BESHORT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_BYTE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_LEDOUBLE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>

<case>case <expr><literal type="char">'G'</literal></expr>:</case>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_BEDOUBLE</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>,

<argument><expr><literal type="string">"indirect offset type `%c' invalid"</literal></expr></argument>,

<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>|=</operator> <name>FILE_OPINVERSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>op</name> <operator>=</operator> <call><name>get_op</name><argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>|=</operator> <name>op</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>|=</operator> <name>FILE_OPINDIRECT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>*</operator><name>l</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_offset</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>t</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>,

<argument><expr><literal type="string">"in_offset `%s' invalid"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name><operator>++</operator> <operator>!=</operator> <literal type="char">')'</literal> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPINDIRECT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>l</name><operator>++</operator> <operator>!=</operator> <literal type="char">')'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>,

<argument><expr><literal type="string">"missing ')' in indirect offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>EATAB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>get_cond</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_cond</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name>cont_level</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>EATAB</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>UNSIGNED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>get_type</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_INVALID</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"type `%s' invalid"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>mask_op</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MAGIC_IS_STRING</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>mask_op</name></name> <operator>|=</operator> <name>FILE_OPINVERSE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"'~' invalid for string types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>num_mask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>op</name> <operator>=</operator> <call><name>get_op</name> <argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MAGIC_IS_STRING</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>mask_op</name></name> <operator>|=</operator> <name>op</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><call><name>strtoull</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>num_mask</name></name> <operator>=</operator> <call><name>file_signextend</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eatsize</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>FILE_OPDIVIDE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>have_range</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>isspace</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>*</operator><operator>++</operator><name>l</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>l</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case>

<case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case> <case>case <expr><literal type="char">'5'</literal></expr>:</case>

<case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case>

<case>case <expr><literal type="char">'9'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>have_range</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>,

<argument><expr><literal type="string">"multiple ranges"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>have_range</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>,

<argument><expr><literal type="string">"zero range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CHAR_COMPACT_BLANK</name></expr>:</case>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>|=</operator> <name>STRING_COMPACT_BLANK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CHAR_COMPACT_OPTIONAL_BLANK</name></expr>:</case>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>|=</operator>

<name>STRING_COMPACT_OPTIONAL_BLANK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CHAR_IGNORE_LOWERCASE</name></expr>:</case>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>|=</operator> <name>STRING_IGNORE_LOWERCASE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CHAR_IGNORE_UPPERCASE</name></expr>:</case>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>|=</operator> <name>STRING_IGNORE_UPPERCASE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CHAR_REGEX_OFFSET_START</name></expr>:</case>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>|=</operator> <name>REGEX_OFFSET_START</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>,

<argument><expr><literal type="string">"string extension `%c' invalid"</literal></expr></argument>,

<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name><name>l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>string_modifier_check</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"invalid string op: %c"</literal></expr></argument>, <argument><expr><operator>*</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>EATAB</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>l</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>

<case>case <expr><literal type="char">'='</literal></expr>:</case>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>=</operator> <operator>*</operator><name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'!'</literal></expr>:</case>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>=</operator> <operator>*</operator><name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'x'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>isascii</name><argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>isspace</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>=</operator> <operator>*</operator><name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>!=</operator> <literal type="char">'x'</literal> <operator>&amp;&amp;</operator> <call><name>getvalue</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>EATAB</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\b'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>NOSPACE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>NOSPACE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>desc</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>l</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></sizeof></expr>;</condition><incr/>)</control> <block>{<block_content/>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"description `%s' truncated"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_format</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>FILE_CHECK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_mdump</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>mimetype</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>nmentryp</name><operator>)</operator></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_mime</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>mentryp</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>nmentryp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_magic_entry</name></name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nmentryp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"No current entry for MIME type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>me</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>*</operator><name>mentryp</name><operator>)</operator><index>[<expr><operator>*</operator><name>nmentryp</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>mp</name><index>[<expr><ternary><condition><expr><name><name>me</name><operator>-&gt;</operator><name>cont_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>me</name><operator>-&gt;</operator><name>cont_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>mimetype</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Current entry already has a MIME type: %s\n"</literal>

<literal type="string">"Description: %s\nNew type: %s"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>mimetype</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>EATAB</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><operator>*</operator><name>l</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>isascii</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>*</operator><name>l</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isalnum</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>*</operator><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>strchr</name> <argument_list>(<argument><expr><literal type="string">"-+/."</literal></expr></argument>, <argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>mimetype</name></name></expr></argument>)</argument_list></sizeof></expr>;</condition>

<incr><expr><name><name>m</name><operator>-&gt;</operator><name>mimetype</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content/>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>mimetype</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>mimetype</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"MIME type `%s' truncated %zu"</literal></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>mimetype</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>mimetype</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>i</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_format_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>quad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FILE_FMT_QUAD</name></expr>:</case>

<expr_stmt><expr><name>quad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><name>FILE_FMT_NUM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>quad</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>!=</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>!=</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<case>case <expr><name>FILE_FMT_FLOAT</name></expr>:</case>

<case>case <expr><name>FILE_FMT_DOUBLE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<case>case <expr><literal type="char">'G'</literal></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<case>case <expr><name>FILE_FMT_STR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_format</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>file_nformats</name> <operator>!=</operator> <name>file_nnames</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>file_nformats</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"Internal error inconsistency between "</literal>

<literal type="string">"m-&gt;type and format strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>magic_file_formats</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name> <operator>==</operator> <name>FILE_FMT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"No format string for `%s' with description "</literal>

<literal type="string">"`%s'"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name><name>magic_file_names</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>check_format_type</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>magic_file_formats</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"Printf format `%c' is not valid for type "</literal>

<literal type="string">"`%s' in description `%s'"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name></expr> ?</condition><then> <expr><operator>*</operator><name>ptr</name></expr> </then><else>: <expr><literal type="char">'?'</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>magic_file_names</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>,

<argument><expr><literal type="string">"Too many format strings (should have at most one) "</literal>

<literal type="string">"for `%s' with description `%s'"</literal></expr></argument>,

<argument><expr><name><name>magic_file_names</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getvalue</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>slen</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>

<case>case <expr><name>FILE_LESTRING16</name></expr>:</case>

<case>case <expr><name>FILE_STRING</name></expr>:</case>

<case>case <expr><name>FILE_PSTRING</name></expr>:</case>

<case>case <expr><name>FILE_REGEX</name></expr>:</case>

<case>case <expr><name>FILE_SEARCH</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>getstr</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>R_MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"cannot get string from `%s'"</literal></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>vallen</name></name> <operator>=</operator> <name>slen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_PSTRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>vallen</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>FILE_FLOAT</name></expr>:</case>

<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>

<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>!=</operator> <literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRTOF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>strtof</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>f</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>strtod</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>

<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>

<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>!=</operator> <literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>d</name></name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>!=</operator> <literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>q</name></name> <operator>=</operator> <call><name>file_signextend</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name>strtoull</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eatsize</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>getstr</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>slen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>origs</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>origp</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pmax</name> <init>= <expr><name>p</name> <operator>+</operator> <name>plen</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isspace</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>pmax</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"string too long: `%s'"</literal></expr></argument>, <argument><expr><name>origs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>FILE_COMPILE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"incomplete escape"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>out</name>;</goto>

<case>case <expr><literal type="char">'\t'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>FILE_COMPILE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,

<argument><expr><literal type="string">"escaped tab found, use \\t instead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>action</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>FILE_COMPILE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isprint</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>,

<argument><expr><literal type="string">"no need to escape `%c'"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>file_magwarn</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>,

<argument><expr><literal type="string">"unknown escape sequence: \\%03o"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

case '\'':

case '"':

case '?':

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>

<case>case <expr><literal type="char">'='</literal></expr>:</case>

<case>case <expr><literal type="char">'!'</literal></expr>:</case>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\a'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\f'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\v'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>

<case>case <expr><literal type="char">'1'</literal></expr>:</case>

<case>case <expr><literal type="char">'2'</literal></expr>:</case>

<case>case <expr><literal type="char">'3'</literal></expr>:</case>

<case>case <expr><literal type="char">'4'</literal></expr>:</case>

<case>case <expr><literal type="char">'5'</literal></expr>:</case>

<case>case <expr><literal type="char">'6'</literal></expr>:</case>

<case>case <expr><literal type="char">'7'</literal></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>val</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>hextoint</name><argument_list>(<argument><expr><operator>*</operator><name>s</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>hextoint</name><argument_list>(<argument><expr><operator>*</operator><name>s</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>val</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<label><name>out</name>:</label>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>slen</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>origp</name></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hextoint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isascii</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>c</name> <operator>+</operator> <literal type="number">10</literal> <operator>-</operator> <literal type="char">'a'</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>c</name> <operator>+</operator> <literal type="number">10</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>file_showstr</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>~</operator><literal type="number">0U</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">040</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0176</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>fputc</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fputc</name> <argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\a'</literal></expr>:</case> <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'\b'</literal></expr>:</case> <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'\f'</literal></expr>:</case> <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case> <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case> <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'\t'</literal></expr>:</case> <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'\v'</literal></expr>:</case> <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%.3o"</literal></expr></argument>, <argument><expr><name>c</name> <operator>&amp;</operator> <literal type="number">0377</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>eatsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LOWCASE</name> <argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>LOWCASE</name> <argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'l'</literal></expr>:</case> 

<case>case <expr><literal type="char">'s'</literal></expr>:</case> 

<case>case <expr><literal type="char">'h'</literal></expr>:</case> 

<case>case <expr><literal type="char">'b'</literal></expr>:</case> 

<case>case <expr><literal type="char">'c'</literal></expr>:</case> 

<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apprentice_map</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>magicp</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>nmagicp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>needsbyteswap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dbname</name> <operator>=</operator> <call><name>mkdbname</name> <argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbname</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error2</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>r_sandbox_open</name> <argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_BINARY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>error2</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_error</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"cannot stat `%s'"</literal></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error1</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_error</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"file `%s' is too small"</literal></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error1</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QUICK</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mm</name> <operator>=</operator> <call><name>mmap</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, 

<argument><expr><name>MAP_PRIVATE</name><operator>|</operator><name>MAP_FILE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_error</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"cannot map `%s'"</literal></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error1</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mm</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error1</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_badread</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error1</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>magicp</name> <operator>=</operator> <name>mm</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>magicp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>MAGICNO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>swap4</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>MAGICNO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"bad magic in `%s'"</literal></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error1</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>needsbyteswap</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>needsbyteswap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <ternary><condition><expr><name>needsbyteswap</name></expr>?</condition><then> <expr><call><name>swap4</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <name>VERSIONNO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"File %d.%d supports only %d version magic "</literal>

<literal type="string">"files. `%s' is version %d"</literal></expr></argument>, <argument><expr><name>FILE_VERSION_MAJOR</name></expr></argument>, <argument><expr><name>patchlevel</name></expr></argument>,

<argument><expr><name>VERSIONNO</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error1</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>nmagicp</name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>r_magic</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nmagicp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>nmagicp</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>magicp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>needsbyteswap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>byteswap</name> <argument_list>(<argument><expr><operator>*</operator><name>magicp</name></expr></argument>, <argument><expr><operator>*</operator><name>nmagicp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>RET</name></expr>;</return>

<label><name>error1</name>:</label>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mm</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QUICK</name></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>munmap</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>mm</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>magicp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>nmagicp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>error2</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut32</name></type> <name><name>ar</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>MAGICNO</name></expr>, <expr><name>VERSIONNO</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apprentice_compile</name><parameter_list>(<parameter><decl><type><name>RMagic</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>magicp</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>nmagicp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dbname</name> <operator>=</operator> <call><name>mkdbname</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbname</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>r_sandbox_open</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>O_WRONLY</name><operator>|</operator><name>O_CREAT</name><operator>|</operator><name>O_TRUNC</name><operator>|</operator><name>O_BINARY</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"cannot open `%s'"</literal></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ar</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"error writing `%s'"</literal></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr>struct <name>r_magic</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call>

<operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>r_magic</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"error seeking `%s'"</literal></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>*</operator><name>magicp</name></expr></argument>, <argument><expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr>struct <name>r_magic</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>nmagicp</name><operator>)</operator></expr></argument>)</argument_list></call>

<operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr>struct <name>r_magic</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>nmagicp</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"error writing `%s'"</literal></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>beach</name>:</label>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ext</name><index>[]</index></name> <init>= <expr><literal type="string">".mgc"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>mkdbname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strip</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fnlen</name></decl>, <decl><type ref="prev"/><name>extlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>strip</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strrchr</name> <argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fn</name> <operator>=</operator> <operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fnlen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>extlen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fnlen</name> <operator>+</operator> <name>extlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>MAXPATHLEN</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>fnlen</name> <operator>+</operator> <name>extlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>fnlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><name>fnlen</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><name>extlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>fnlen</name><operator>+</operator><name>extlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>byteswap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>magic</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>nmagic</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nmagic</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bs1</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>magic</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>swap2</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>sv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>rv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rv</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>swap4</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>sv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>rv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rv</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>swap8</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>sv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>rv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rv</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

d[0] = s[3];

d[1] = s[2];

d[2] = s[1];

d[3] = s[0];

d[4] = s[7];

d[5] = s[6];

d[6] = s[5];

d[7] = s[4];

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bs1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>=</operator> <call><name>swap2</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>swap4</name><argument_list>(<argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_offset</name></name> <operator>=</operator> <call><name>swap4</name><argument_list>(<argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>in_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>lineno</name></name> <operator>=</operator> <call><name>swap4</name><argument_list>(<argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MAGIC_IS_STRING</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name> <operator>=</operator> <call><name>swap4</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>=</operator> <call><name>swap4</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>q</name></name> <operator>=</operator> <call><name>swap8</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>num_mask</name></name> <operator>=</operator> <call><name>swap8</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>num_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mdump.c"</cpp:file></cpp:include>

</unit>
