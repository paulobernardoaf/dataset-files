<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\cons\cons.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_print.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COUNT_LINES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>I.context-&gt;x</cpp:value></cpp:define>

<expr_stmt><expr><call><name>R_LIB_VERSION</name> <argument_list>(<argument><expr><name>r_cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RConsContext</name></type> <name>r_cons_context_default</name> <init>= <expr><block>{<expr><block>{<expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RCons</name></type> <name>r_cons_instance</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I</name></cpp:macro> <cpp:value>r_cons_instance</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsGrep</name> <modifier>*</modifier></type><name>grep</name></decl>;</decl_stmt>

}</block></struct></type> <name>RConsStack</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>breaked</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsEvent</name></type> <name>event_interrupt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>event_interrupt_data</name></decl>;</decl_stmt>

}</block></struct></type> <name>RConsBreakStack</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cons_grep_reset</name><parameter_list>(<parameter><decl><type><name>RConsGrep</name> <modifier>*</modifier></type><name>grep</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>break_stack_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConsBreakStack</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>RConsBreakStack</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cons_stack_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConsStack</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>RConsStack</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>grep</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grep</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CTX</name><argument_list>(<argument><expr><name><name>grep</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RConsStack</name> <modifier>*</modifier></type><name>cons_stack_dump</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>recreate</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConsStack</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RConsStack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CTX</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>CTX</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>buf_len</name></name> <operator>=</operator> <call><name>CTX</name> <argument_list>(<argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>=</operator> <call><name>CTX</name> <argument_list>(<argument><expr><name>buffer_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>grep</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RConsGrep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>grep</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>grep</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>grep</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RConsGrep</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>grep</name><operator>.</operator><name>str</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>grep</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>grep</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>recreate</name> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cons_stack_load</name><parameter_list>(<parameter><decl><type><name>RConsStack</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>free_current</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>free_current</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>buf_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>grep</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>grep</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>grep</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>grep</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RConsGrep</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cons_context_init</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <name>RConsContext</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>breaked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>cmd_depth</name></name> <operator>=</operator> <name>R_CONS_CMD_DEPTH</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>lastEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>is_interactive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>cons_stack</name></name> <operator>=</operator> <call><name>r_stack_newf</name> <argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>cons_stack_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>break_stack</name></name> <operator>=</operator> <call><name>r_stack_newf</name> <argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>break_stack_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>event_interrupt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>event_interrupt_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>pageable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>log_callback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>color_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_pal_copy</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>=</operator> <name>COLOR_MODE_DISABLED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_pal_init</name> <argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>cons_grep_reset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>grep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cons_context_deinit</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_stack_free</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>cons_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_stack_free</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>break_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_pal_free</name> <argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__break_signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_context_break</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>r_cons_context_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>__cons_write_ll</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>ansicon</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>write</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>fdout</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>fdout</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_w32_print</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>write</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>fdout</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>fdout</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>fdout</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>write</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>fdout</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>__cons_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>olen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>bucket</name> <init>= <expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>olen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>olen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>obuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>bucket</name><operator>)</operator> <operator>&lt;</operator> <name>olen</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>bucket</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>__cons_write_ll</name> <argument_list>(<argument><expr><name>obuf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>olen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__cons_write_ll</name> <argument_list>(<argument><expr><name>obuf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>olen</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RColor</name></type> <name>r_cons_color_random</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>alpha</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RColor</name></type> <name>rcolor</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>&gt;</operator> <name>COLOR_MODE_16</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>r</name></name> <operator>=</operator> <call><name>r_num_rand</name> <argument_list>(<argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>g</name></name> <operator>=</operator> <call><name>r_num_rand</name> <argument_list>(<argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>b</name></name> <operator>=</operator> <call><name>r_num_rand</name> <argument_list>(<argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>a</name></name> <operator>=</operator> <name>alpha</name></expr>;</expr_stmt>

<return>return <expr><name>rcolor</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_num_rand</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>rcolor</name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_RED</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>rcolor</name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_WHITE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>rcolor</name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_GREEN</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> <case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>rcolor</name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_MAGENTA</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>rcolor</name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_YELLOW</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case> <case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>rcolor</name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_CYAN</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">12</literal></expr>:</case> <case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>rcolor</name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_BLUE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">14</literal></expr>:</case> <case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><name>rcolor</name> <operator>=</operator> <operator>(</operator><name>RColor</name><operator>)</operator> <name>RColor_GRAY</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rcolor</name><operator>.</operator><name>attr</name></name> <operator>=</operator> <name>R_CONS_ATTR_BOLD</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>rcolor</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>R_DIM</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>R_DIM</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>R_DIM</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>g</name> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">232</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>r</name><operator>+</operator><name>g</name><operator>+</operator><name>b</name><operator>)</operator><operator>/</operator><literal type="number">3</literal><operator>)</operator><operator>/</operator><literal type="number">10.3</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>r</name> <operator>/</operator> <literal type="number">42.6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>g</name> <operator>/</operator> <literal type="number">42.6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b</name> <operator>/</operator> <literal type="number">42.6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>r</name> <operator>*</operator> <literal type="number">36</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>g</name> <operator>*</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\x1b[%d;5;%dm"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>fg</name></expr>?</condition><then> <expr><literal type="number">48</literal></expr></then><else>: <expr><literal type="number">38</literal></expr></else></ternary></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_println</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_strcat_justify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>o</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <name>i</name> <operator>=</operator> <name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>len</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_memset</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_memset</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_memset</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_memcat</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>o</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>o</name> <operator>+</operator> <name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_memcat</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>o</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_strcat_at</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>o</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>H</name></decl>, <decl><type ref="prev"/><name>W</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>H</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>W</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>H</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>r_str_ansi_crop</name> <argument_list>(<argument><expr><name>_str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>R_CONS_CURSOR_SAVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <name>i</name> <operator>=</operator> <name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>len</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>w</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>rows</name></expr></argument> &gt;</argument_list></name> <name>w</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ansilen</name> <init>= <expr><call><name>r_str_ansi_len</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>ansilen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><call><name>r_str_ansi_chrn</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>o</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>str</name> <operator>+</operator> <name>o</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_memcat</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>o</name></expr></argument>, <argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rows</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_memcat</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>o</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>R_CONS_CURSOR_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RCons</name> <modifier>*</modifier></type><name>r_cons_singleton</name><parameter_list>()</parameter_list> <block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>I</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_break_clear</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>breaked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_context_break_push</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>RConsBreak</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>context</name><operator>-&gt;</operator><name>break_stack</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RConsBreakStack</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RConsBreakStack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_stack_is_empty</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>break_stack</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>sig</name> <operator>&amp;&amp;</operator> <call><name>r_cons_context_is_main</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_signal</name> <argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>__break_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>breaked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>event_interrupt</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>event_interrupt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>event_interrupt_data</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>event_interrupt_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_stack_push</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>break_stack</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>event_interrupt</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>event_interrupt_data</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_context_break_pop</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>context</name><operator>-&gt;</operator><name>break_stack</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RConsBreakStack</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>r_stack_pop</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>break_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>event_interrupt</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>event_interrupt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>event_interrupt_data</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>event_interrupt_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>break_stack_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>sig</name> <operator>&amp;&amp;</operator> <call><name>r_cons_context_is_main</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_signal</name> <argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>breaked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_break_push</name><parameter_list>(<parameter><decl><type><name>RConsBreak</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_context_break_push</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_break_pop</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_context_break_pop</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_cons_is_interactive</name><parameter_list>()</parameter_list> <block>{<block_content>

<return>return <expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>is_interactive</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_cons_default_context_is_interactive</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>r_cons_context_default</name><operator>.</operator><name>is_interactive</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_cons_is_breaked</name><parameter_list>()</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>cb_break</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>I</name><operator>.</operator><name>cb_break</name></name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>timeout</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_sys_now</name> <argument_list>()</argument_list></call> <operator>&gt;</operator> <name><name>I</name><operator>.</operator><name>timeout</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>breaked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\nTimeout!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>breaked</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_get_cur_line</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>curline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<decl_stmt><decl><type><name>POINT</name></type> <name>point</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetCursorPos</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>point</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curline</name> <operator>=</operator> <name><name>point</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>save</name></decl>,<decl><type ref="prev"/><name>raw</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>tcgetattr</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cfmakeraw</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>tcsetattr</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isatty</name> <argument_list>(<argument><expr><call><name>fileno</name> <argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>R_CONS_GET_CURSOR_POSITION</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>R_CONS_GET_CURSOR_POSITION</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curline</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curline</name> <operator>=</operator> <name>curline</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>tcsetattr</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>curline</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_break_timeout</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>timeout</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>I</name><operator>.</operator><name>timeout</name></name><operator>)</operator></expr> 

?</condition><then> <expr><call><name>r_sys_now</name> <argument_list>()</argument_list></call> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator> <name>timeout</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_break_end</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>breaked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<expr_stmt><expr><call><name>r_sys_signal</name> <argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_stack_is_empty</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>break_stack</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_stack_free</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>break_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>break_stack</name></name> <operator>=</operator> <call><name>r_stack_newf</name> <argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>break_stack_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>event_interrupt_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>event_interrupt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_cons_sleep_begin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>cb_sleep_begin</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>I</name><operator>.</operator><name>cb_sleep_begin</name></name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_sleep_end</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>cb_sleep_end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>I</name><operator>.</operator><name>cb_sleep_end</name></name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>__w32_control</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CTRL_C_EVENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__break_signal</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"{ctrl+c} pressed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:elif>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>sigwinchFlag</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>sigwinchFlag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>resizeWin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>event_resize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>I</name><operator>.</operator><name>event_resize</name></name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>event_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_set_click</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>click_x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>click_y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>click_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>mouse_event</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_cons_get_click</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>click_x</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>click_y</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>set</name> <init>= <expr><name><name>I</name><operator>.</operator><name>click_set</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>click_set</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>set</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_enable_highlight</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>enable_highlight</name></name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_cons_enable_mouse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>click</name> <init>= <expr><ternary><condition><expr><name>enable</name></expr>

?</condition><then> <expr><literal type="string">"\x1b[?1000;1006;1015h"</literal></expr>

</then><else>: <expr><literal type="string">"\x1b[?1001r"</literal> <literal type="string">"\x1b[?1000l"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>enabled</name> <init>= <expr><name><name>I</name><operator>.</operator><name>mouse</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>mouse</name></name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>click</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>click</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>enabled</name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>

<decl_stmt><decl><type><name>DWORD</name></type> <name>mode</name></decl>, <decl><type ref="prev"/><name>mouse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>enabled</name> <init>= <expr><name><name>I</name><operator>.</operator><name>mouse</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enabled</name> <operator>==</operator> <name>enable</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>enabled</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>GetStdHandle</name> <argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetConsoleMode</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse</name> <operator>=</operator> <operator>(</operator><name>ENABLE_MOUSE_INPUT</name> <operator>|</operator> <name>ENABLE_EXTENDED_FLAGS</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <ternary><condition><expr><name>enable</name></expr> ?</condition><then> <expr><operator>(</operator><name>mode</name> <operator>|</operator> <name>mouse</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>ENABLE_QUICK_EDIT_MODE</name></expr> </then><else>: <expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <operator>~</operator><name>mouse</name><operator>)</operator> <operator>|</operator> <name>ENABLE_QUICK_EDIT_MODE</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SetConsoleMode</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>mouse</name></name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>enabled</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RCons</name> <modifier>*</modifier></type><name>r_cons_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>refcnt</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>refcnt</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>I</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>rgbstr</name></name> <operator>=</operator> <name>r_cons_rgb_str_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>line</name></name> <operator>=</operator> <call><name>r_line_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>enable_highlight</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>highlight</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>is_wine</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>fps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>blankline</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>teefile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>fix_columns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>fix_rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>mouse_event</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>force_rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>force_columns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>event_resize</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>event_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>noflush</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>linesleep</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>fdin</name></name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>fdout</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>break_lines</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>lines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name></name> <operator>=</operator> <operator>&amp;</operator><name>r_cons_context_default</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cons_context_init</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>I</name><operator>.</operator><name>pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>null</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>ansicon</name></name> <operator>=</operator> <call><name>r_cons_is_ansicon</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EMSCRIPTEN</name></expr></cpp:if>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:elif>

<expr_stmt><expr><call><name>tcgetattr</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>I</name><operator>.</operator><name>term_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>I</name><operator>.</operator><name>term_raw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>I</name><operator>.</operator><name>term_buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>term_raw</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>term_raw</name><operator>.</operator><name>c_iflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>BRKINT</name><operator>|</operator><name>PARMRK</name><operator>|</operator><name>ISTRIP</name><operator>|</operator><name>INLCR</name><operator>|</operator><name>IGNCR</name><operator>|</operator><name>ICRNL</name><operator>|</operator><name>IXON</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>term_raw</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ECHO</name><operator>|</operator><name>ECHONL</name><operator>|</operator><name>ICANON</name><operator>|</operator><name>ISIG</name><operator>|</operator><name>IEXTEN</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>term_raw</name><operator>.</operator><name>c_cflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CSIZE</name><operator>|</operator><name>PARENB</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>term_raw</name><operator>.</operator><name>c_cflag</name></name> <operator>|=</operator> <name>CS8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>term_raw</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VMIN</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_sys_signal</name> <argument_list>(<argument><expr><name>SIGWINCH</name></expr></argument>, <argument><expr><name>resize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>GetStdHandle</name> <argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetConsoleMode</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>I</name><operator>.</operator><name>term_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>term_raw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetConsoleCtrlHandler</name> <argument_list>(<argument><expr><operator>(</operator><name>PHANDLER_ROUTINE</name><operator>)</operator><name>__w32_control</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_cons: Cannot set control console handler\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>pager</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>mouse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>show_vals</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_reset</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_rgb_init</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_print_set_is_interrupted_cb</name> <argument_list>(<argument><expr><name>r_cons_is_breaked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name>I</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RCons</name> <modifier>*</modifier></type><name>r_cons_free</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>refcnt</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>refcnt</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>line</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_free</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>break_word</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cons_context_deinit</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>lastOutput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>lastLength</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOAR</name></cpp:macro> <cpp:value>(4096 * 8)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>palloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>moar</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>moar</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_sz</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>INT_MAX</name> <operator>-</operator> <name>MOAR</name><operator>)</operator> <operator>&lt;</operator> <name>moar</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_sz</name> <operator>=</operator> <name>moar</name> <operator>+</operator> <name>MOAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>new_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name> <operator>=</operator> <name>new_sz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>moar</name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>&gt;</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_buffer_sz</name> <init>= <expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>INT_MAX</name> <operator>-</operator> <name>MOAR</name> <operator>-</operator> <name>moar</name><operator>)</operator> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name> <operator>+=</operator> <name>moar</name> <operator>+</operator> <name>MOAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_buffer</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>new_buffer</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name> <operator>=</operator> <name>old_buffer_sz</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_eof</name><parameter_list>()</parameter_list> <block>{<block_content>

<return>return <expr><call><name>feof</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>fdin</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_gotoxy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<expr_stmt><expr><call><name>r_cons_w32_gotoxy</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\x1b[%d;%dH"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_print_clear</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">"\x1b[0;0H\x1b[0m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_fill_line</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name><name>white</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>cols</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>white</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>

?</condition><then> <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>cols</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>white</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>cols</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>white</name> <operator>!=</operator> <name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_clear_line</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>std_err</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>ansicon</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><ternary><condition><expr><name>std_err</name></expr>?</condition><then> <expr><name>stderr</name></expr></then><else>: <expr><name>stdout</name></expr></else></ternary></expr></argument>,<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>R_CONS_CLEAR_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>white</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>white</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>white</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>columns</name></name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>white</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>white</name><index>[<expr><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>white</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>white</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>white</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><ternary><condition><expr><name>std_err</name></expr>?</condition><then> <expr><name>stderr</name></expr></then><else>: <expr><name>stdout</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"\r%s\r"</literal></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><ternary><condition><expr><name>std_err</name></expr>?</condition><then> <expr><name>stderr</name></expr></then><else>: <expr><name>stdout</name></expr></else></ternary></expr></argument>,<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>R_CONS_CLEAR_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><ternary><condition><expr><name>std_err</name></expr>?</condition><then> <expr><name>stderr</name></expr></then><else>: <expr><name>stdout</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_clear00</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_clear</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_reset_colors</name><parameter_list>()</parameter_list> <block>{<block_content>

<macro><name>r_cons_strcat</name> <argument_list>(<argument>Color_RESET_BG Color_RESET</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_clear</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>lines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<expr_stmt><expr><call><name>r_cons_w32_clear</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<macro><name>r_cons_strcat</name> <argument_list>(<argument>Color_RESET R_CONS_CLEAR_SCREEN</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cons_grep_reset</name><parameter_list>(<parameter><decl><type><name>RConsGrep</name> <modifier>*</modifier></type><name>grep</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>grep</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><operator>*</operator><name>grep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>sort</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>sort_invert</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_reset</name><parameter_list>()</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>lines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>lastline</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cons_grep_reset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>grep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CTX</name> <argument_list>(<argument><expr><name>pageable</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_cons_get_buffer</name><parameter_list>()</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>?</condition><then> <expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_get_buffer_len</name><parameter_list>()</parameter_list> <block>{<block_content>

<return>return <expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_filter</name><parameter_list>()</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>filter</name></name> <operator>||</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>grep</name><operator>.</operator><name>nstrings</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>grep</name><operator>.</operator><name>tokens_used</name></name> <operator>||</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>grep</name><operator>.</operator><name>less</name></name> <operator>||</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>grep</name><operator>.</operator><name>json</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_cons_grepbuf</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>filter</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>is_html</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>newlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_cons_html_filter</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <name>newlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name> <operator>=</operator> <name>newlen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_push</name><parameter_list>()</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>cons_stack</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RConsStack</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>cons_stack_dump</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_stack_push</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>cons_stack</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_pop</name><parameter_list>()</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>cons_stack</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RConsStack</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>RConsStack</name> <operator>*</operator><operator>)</operator><call><name>r_stack_pop</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>cons_stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cons_stack_load</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cons_stack_free</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RConsContext</name> <modifier>*</modifier></type><name>r_cons_context_new</name><parameter_list>(<parameter><decl><type><name>R_NULLABLE</name> <name>RConsContext</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RConsContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>context</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cons_context_init</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>context</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_context_free</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>context</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cons_context_deinit</name> <argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_context_load</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_context_reset</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name></name> <operator>=</operator> <operator>&amp;</operator><name>r_cons_context_default</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_cons_context_is_main</name><parameter_list>()</parameter_list> <block>{<block_content>

<return>return <expr><name><name>I</name><operator>.</operator><name>context</name></name> <operator>==</operator> <operator>&amp;</operator><name>r_cons_context_default</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_context_break</name><parameter_list>(<parameter><decl><type><name>RConsContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>context</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>breaked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>event_interrupt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>event_interrupt</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>event_interrupt_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_last</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CTX</name> <argument_list>(<argument><expr><name>lastEnabled</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CTX</name> <argument_list>(<argument><expr><name>lastMode</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_memcat</name> <argument_list>(<argument><expr><call><name>CTX</name> <argument_list>(<argument><expr><name>lastOutput</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CTX</name> <argument_list>(<argument><expr><name>lastLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>lastMatters</name><parameter_list>()</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> \

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>CTX</name> <argument_list>(<argument><expr><name>lastEnabled</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>I</name><operator>.</operator><name>filter</name></name> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>grep</name><operator>.</operator><name>nstrings</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> \

<operator>!</operator><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>grep</name><operator>.</operator><name>tokens_used</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>grep</name><operator>.</operator><name>less</name></name> <operator>&amp;&amp;</operator> \

<operator>!</operator><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>grep</name><operator>.</operator><name>json</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>I</name><operator>.</operator><name>is_html</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_echo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>RStrBuf</name> <modifier>*</modifier></type><name>echodata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>echodata</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>echodata</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>echodata</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>echodata</name> <operator>=</operator> <call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>echodata</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>echodata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>echodata</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tee</name> <init>= <expr><name><name>I</name><operator>.</operator><name>teefile</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>noflush</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>null</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_reset</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lastMatters</name> <argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>CTX</name> <argument_list>(<argument><expr><name>lastMode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CTX</name> <argument_list>(<argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>CTX</name> <argument_list>(<argument><expr><name>lastLength</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>CTX</name> <argument_list>(<argument><expr><name>lastOutput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CTX</name> <argument_list>(<argument><expr><name>lastOutput</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>CTX</name> <argument_list>(<argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CTX</name> <argument_list>(<argument><expr><name>lastLength</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>CTX</name> <argument_list>(<argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><call><name>CTX</name> <argument_list>(<argument><expr><name>lastOutput</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CTX</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CTX</name> <argument_list>(<argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>CTX</name> <argument_list>(<argument><expr><name>lastMode</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_cons_filter</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_interactive</name> <argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>fdout</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CTX</name> <argument_list>(<argument><expr><name>pageable</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>CTX</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>pager</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>I</name><operator>.</operator><name>pager</name></name> <operator>&amp;&amp;</operator> <call><name>CTX</name> <argument_list>(<argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>r_str_char_count</name> <argument_list>(<argument><expr><call><name>CTX</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>I</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>pager</name></name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><call><name>CTX</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CTX</name> <argument_list>(<argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CTX</name> <argument_list>(<argument><expr><name>pageable</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_less_str</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_reset</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_cmd_str_full</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>pager</name></name></expr></argument>, <argument><expr><call><name>CTX</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_reset</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>&gt;</operator> <name>CONS_MAX_USER</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>COUNT_LINES</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>lines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lines</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>lines</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_cons_yesno</name> <argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>,<argument><expr><literal type="string">"Do you want to print %d lines? (y/N)"</literal></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_reset</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_num_units</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_cons_yesno</name> <argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="string">"Do you want to print %s chars? (y/N)"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_reset</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tee</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>tee</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>r_sandbox_fopen</name> <argument_list>(<argument><expr><name>tee</name></expr></argument>, <argument><expr><literal type="string">"a+"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>!=</operator> <call><name>fwrite</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_cons_flush: fwrite: error (%s)\n"</literal></expr></argument>, <argument><expr><name>tee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot write on '%s'\n"</literal></expr></argument>, <argument><expr><name>tee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_highlight</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>highlight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_interactive</name> <argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_sandbox_enable</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>linesleep</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>linesleep</name></name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pagesize</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>pagesize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nl</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>nl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__cons_write</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>nl</name> <operator>-</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>linesleep</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>i</name> <operator>%</operator> <name>pagesize</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_usleep</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>linesleep</name></name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>nl</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nl</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>__cons_write</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__cons_write</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__cons_write</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_cons_reset</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>newline</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>newline</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_visual_flush</name><parameter_list>()</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>noflush</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_highlight</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>highlight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>null</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>ansicon</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_visual_write</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_w32_print</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>r_cons_visual_write</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_reset</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>fps</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_print_fps</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_print_fps</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>prev</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>fps</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>now</name> <init>= <expr><call><name>r_sys_now</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name>st64</name><operator>)</operator><operator>(</operator><name>now</name> <operator>-</operator> <name>prev</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fps</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>fps</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>diff</name> <operator>&lt;</operator> <literal type="number">1000000</literal><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><literal type="number">1000000.0</literal><operator>/</operator><name>diff</name><operator>)</operator></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>r_sys_now</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>ansicon</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\x1b[0;%dH[%d FPS] \n"</literal></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <name>col</name></expr></argument>, <argument><expr><name>fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_w32_gotoxy</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <name>col</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">" [%d FPS] \n"</literal></expr></argument>, <argument><expr><name>fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\x1b[0;%dH[%d FPS] \n"</literal></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <name>col</name></expr></argument>, <argument><expr><name>fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>real_strlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>utf8len</name> <init>= <expr><call><name>r_str_len_utf8</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ansilen</name> <init>= <expr><call><name>r_str_ansi_len</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name>len</name> <operator>-</operator> <name>utf8len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ansilen</name> <operator>-</operator> <name>diff</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_visual_write</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>white</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><name><name>I</name><operator>.</operator><name>columns</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alen</name></decl>, <decl><type ref="prev"/><name>plen</name></decl>, <decl><type ref="prev"/><name>lines</name> <init>= <expr><name><name>I</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>break_lines</name> <init>= <expr><name><name>I</name><operator>.</operator><name>break_lines</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buffer</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>null</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>white</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>white</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>nl</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>nl</name> <operator>-</operator> <name>ptr</name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lines_needed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>nl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>alen</name> <operator>=</operator> <call><name>real_strlen</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>nl</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pptr</name> <operator>=</operator> <ternary><condition><expr><name>ptr</name> <operator>&gt;</operator> <name>buffer</name></expr> ?</condition><then> <expr><name>ptr</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>ptr</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>plen</name> <operator>=</operator> <ternary><condition><expr><name>ptr</name> <operator>&gt;</operator> <name>buffer</name></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>break_lines</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lines_needed</name> <operator>=</operator> <name>alen</name> <operator>/</operator> <name>cols</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>alen</name> <operator>%</operator> <name>cols</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>break_lines</name> <operator>&amp;&amp;</operator> <name><name>lines</name> <argument_list type="generic">&lt; <argument><expr><name>lines_needed</name> <operator>&amp;&amp;</operator> <name>lines</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>break_lines</name> <operator>&amp;&amp;</operator> <name>alen</name> <operator>&gt;</operator> <name>cols</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>olen</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>endptr</name> <operator>=</operator> <call><name>r_str_ansi_chrn</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>break_lines</name></expr> ?</condition><then> <expr><name>cols</name> <operator>*</operator> <name>lines</name></expr> </then><else>: <expr><name>cols</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endptr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>endptr</name> <operator>-</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>plen</name> <operator>=</operator> <ternary><condition><expr><name>ptr</name> <operator>&gt;</operator> <name>buffer</name></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lines</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__cons_write</name> <argument_list>(<argument><expr><name>pptr</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>olen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__cons_write</name> <argument_list>(<argument><expr><name>R_CONS_CLEAR_FROM_CURSOR_TO_END</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__cons_write</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lines</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name>cols</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>alen</name> <operator>%</operator> <name>cols</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>cols</name></expr> </then><else>: <expr><name>alen</name> <operator>%</operator> <name>cols</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__cons_write</name> <argument_list>(<argument><expr><name>pptr</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>blankline</name></name> <operator>&amp;&amp;</operator> <name>w</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>white</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>white</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__cons_write</name> <argument_list>(<argument><expr><name>white</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_mem_mem</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><literal type="string">"\x1b[0;0H"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lines</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__cons_write</name> <argument_list>(<argument><expr><name>pptr</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>break_lines</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lines</name> <operator>-=</operator> <name>lines_needed</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>lines</name><operator>--</operator></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>nl</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>lines</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&gt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>white</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>white</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>--</operator><name>lines</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__cons_write</name> <argument_list>(<argument><expr><name>white</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_printf_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>written</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap2</name></decl>, <decl><type ref="prev"/><name>ap3</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_copy</name> <argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_copy</name> <argument_list>(<argument><expr><name>ap3</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>null</name></name> <operator>||</operator> <operator>!</operator><name>format</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>palloc</name> <argument_list>(<argument><expr><name>MOAR</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<label><name>club</name>:</label>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name> <operator>-</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>vsnprintf</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>written</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>palloc</name> <argument_list>(<argument><expr><name>written</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_copy</name> <argument_list>(<argument><expr><name>ap3</name></expr></argument>, <argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>club</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>+=</operator> <name>written</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_printf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>format</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>format</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf_list</name> <argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_get_column</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>strrchr</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>r_str_ansi_len</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_memcat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>echo</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rlen</name> <operator>=</operator> <call><name>write</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>rlen</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>I</name><operator>.</operator><name>null</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>palloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>flush</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>break_word</name></name> <operator>&amp;&amp;</operator> <name>str</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_mem_mem</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name><name>I</name><operator>.</operator><name>break_word</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>break_word_len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>breaked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_memset</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>null</name></name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>palloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_strcat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <name><name>I</name><operator>.</operator><name>null</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_memcat</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_newline</name><parameter_list>()</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>null</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

This place is wrong to manage the color reset, can interfire with r2pipe output sending resetchars

and break json output appending extra chars.

this code now is managed into output.c:118 at function r_cons_w32_print

now the console color is reset with each \n (same stuff do it here but in correct place ... i think)

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

r_cons_reset_colors();

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

r_cons_strcat (Color_RESET_ALL"\n");

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if (I.is_html) r_cons_strcat ("&lt;br /&gt;\n");

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_get_cursor</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x1b</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>ch2</name> <init>= <expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch2</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch2</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"rgb:"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">18</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch2</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><operator>++</operator><name>i</name></expr>;</init> <condition><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'J'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'m'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'H'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>row</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>col</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>rows</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>rows</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>col</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_cons_isatty</name><parameter_list>()</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>win</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>win</name><operator>.</operator><name>ws_col</name></name> <operator>||</operator> <operator>!</operator><name><name>win</name><operator>.</operator><name>ws_row</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tty</name> <operator>=</operator> <call><name>ttyname</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tty</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name> <argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>S_ISCHR</name> <argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_get_size</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>GetConsoleScreenBufferInfo</name> <argument_list>(<argument><expr><call><name>GetStdHandle</name> <argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name> <operator>-</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name> <operator>-</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>||</operator> <operator>(</operator><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>EMSCRIPTEN</name></expr></cpp:elif>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:elif>

<decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>win</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isatty</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ioctl</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>win</name><operator>.</operator><name>ws_col</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>win</name><operator>.</operator><name>ws_row</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tty</name> <init>= <expr><ternary><condition><expr><call><name>isatty</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><call><name>ttyname</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>open</name> <argument_list>(<argument><expr><ternary><condition><expr><name>tty</name></expr>?</condition><then> <expr><name>tty</name></expr></then><else>: <expr><literal type="string">"/dev/tty"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>||</operator> <operator>!</operator><name><name>win</name><operator>.</operator><name>ws_col</name></name> <operator>||</operator> <operator>!</operator><name><name>win</name><operator>.</operator><name>ws_row</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>win</name><operator>.</operator><name>ws_col</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win</name><operator>.</operator><name>ws_row</name></name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <name><name>win</name><operator>.</operator><name>ws_col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>win</name><operator>.</operator><name>ws_row</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"COLUMNS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIMULATE_ADB_SHELL</name></expr></cpp:if>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIMULATE_MAYHEM</name></expr></cpp:if>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>rows</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>force_columns</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>force_columns</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>force_rows</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>force_rows</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>fix_columns</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>columns</name></name> <operator>+=</operator> <name><name>I</name><operator>.</operator><name>fix_columns</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>fix_rows</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>rows</name></name> <operator>+=</operator> <name><name>I</name><operator>.</operator><name>fix_rows</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rows</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>rows</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>columns</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_cons_is_ansicon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>major</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>minor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>release</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>win_support</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSysInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>r_sys_info</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dot</name> <init>= <expr><call><name>strtok</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>major</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>dot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dot</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>minor</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>dot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>release</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>release</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>release</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>major</name> <operator>&gt;</operator> <literal type="number">10</literal>

<operator>||</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>release</name> <operator>&gt;=</operator> <literal type="number">1703</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>win_support</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_sys_info_free</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ansicon</name> <init>= <expr><call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"ANSICON"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ansicon</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ansicon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>win_support</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>win_support</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_show_cursor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>ansicon</name></name></expr>)</condition> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>cursor</name></expr> ?</condition><then> <expr><literal type="string">"\x1b[?25h"</literal></expr> </then><else>: <expr><literal type="string">"\x1b[?25l"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>hStdout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DWORD</name></type> <name>size</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CONSOLE_CURSOR_INFO</name></type> <name>cursor_info</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hStdout</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hStdout</name> <operator>=</operator> <call><name>GetStdHandle</name> <argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>GetConsoleCursorInfo</name> <argument_list>(<argument><expr><name>hStdout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>cursor_info</name><operator>.</operator><name>dwSize</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cursor_info</name><operator>.</operator><name>dwSize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cursor_info</name><operator>.</operator><name>bVisible</name></name> <operator>=</operator> <ternary><condition><expr><name>cursor</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleCursorInfo</name> <argument_list>(<argument><expr><name>hStdout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_set_raw</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>is_raw</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>oldraw</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>oldraw</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_raw</name> <operator>==</operator> <name>oldraw</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EMSCRIPTEN</name></expr></cpp:if>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><name>is_raw</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>term_raw</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ECHO</name><operator>|</operator><name>ECHONL</name><operator>|</operator><name>ICANON</name><operator>|</operator><name>ISIG</name><operator>|</operator><name>IEXTEN</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcsetattr</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>I</name><operator>.</operator><name>term_raw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tcsetattr</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>I</name><operator>.</operator><name>term_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><name>is_raw</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SetConsoleMode</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>term_raw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>SetConsoleMode</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>term_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:warning>#<cpp:directive>warning</cpp:directive> No raw console supported for this platform</cpp:warning>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldraw</name> <operator>=</operator> <name>is_raw</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_set_utf8</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>use_utf8</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsValidCodePage</name> <argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetConsoleOutputCP</name> <argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"r_cons_set_utf8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UNICODE</name></expr></cpp:if>

<decl_stmt><decl><type><name>UINT</name></type> <name>inCP</name> <init>= <expr><name>CP_UTF8</name></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>UINT</name></type> <name>inCP</name> <init>= <expr><call><name>GetACP</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetConsoleCP</name> <argument_list>(<argument><expr><name>inCP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"r_cons_set_utf8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>R_LOG_WARN</name> <argument_list>(<argument><expr><literal type="string">"UTF-8 Codepage not installed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>UINT</name></type> <name>acp</name> <init>= <expr><call><name>GetACP</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetConsoleCP</name> <argument_list>(<argument><expr><name>acp</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>SetConsoleOutputCP</name> <argument_list>(<argument><expr><name>acp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"r_cons_set_utf8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_invert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><call><name>R_CONS_INVERT</name> <argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_set_cup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name> <init>= <expr><ternary><condition><expr><name>enable</name></expr>

?</condition><then> <expr><literal type="string">"\x1b[?1049h"</literal> <literal type="string">"\x1b"</literal> <literal type="string">"7\x1b[?47h"</literal></expr>

</then><else>: <expr><literal type="string">"\x1b[?1049l"</literal> <literal type="string">"\x1b[?47l"</literal> <literal type="string">"\x1b"</literal> <literal type="string">"8"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>ansicon</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name> <init>=

<expr><literal type="string">"\x1b[?1049h"</literal> 

<literal type="string">"\x1b"</literal> <literal type="string">"7\x1b[?47h"</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name> <init>=

<expr><literal type="string">"\x1b[?1049l"</literal> 

<literal type="string">"\x1b[?47l""</literal><operator>\</operator><name>x1b</name><literal type="string">""</literal><literal type="number">8</literal><literal type="string">"; // xterm-color

write (2, code, strlen (code));

}

fflush (stdout);

}

#endif

/* not supported ? */

}

R_API void r_cons_column(int c) {

char *b = malloc (I.context-&gt;buffer_len + 1);

if (!b) {

return;

}

memcpy (b, I.context-&gt;buffer, I.context-&gt;buffer_len);

b[I.context-&gt;buffer_len] = 0;

r_cons_reset ();

// align current buffer N chars right

r_cons_strcat_justify (b, c, 0);

r_cons_gotoxy (0, 0);

free (b);

}

// XXX deprecate must be push/pop context state

static bool lasti = false; /* last interactive mode */

R_API void r_cons_set_interactive(bool x) {

lasti = r_cons_singleton ()-&gt;context-&gt;is_interactive;

r_cons_singleton ()-&gt;context-&gt;is_interactive = x;

}

R_API void r_cons_set_last_interactive() {

r_cons_singleton ()-&gt;context-&gt;is_interactive = lasti;

}

R_API void r_cons_set_title(const char *str) {

r_cons_printf ("</literal><operator>\</operator><name>x1b</name>]<literal type="number">0</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><operator>%</operator><name>s</name><operator>\</operator><literal type="number">007</literal><literal type="string">", str);

}

R_API void r_cons_zero() {

if (I.line) {

I.line-&gt;zerosep = true;

}

write (1, ""</literal></expr><operator>,</operator> <expr><literal type="number">1</literal></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></else></if_stmt>

</block_content>}</block></if></if_stmt>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_highlight</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cpos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rword</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>clean</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>inv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><call><name>R_CONS_INVERT</name> <argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>,

<macro><name>R_CONS_INVERT</name> <argument_list>(<argument>false</argument>, <argument>true</argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>linv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>inv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>,

<macro><name>strlen</name> <argument_list>(<argument>inv[<literal type="number">1</literal>]</argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>I</name><operator>.</operator><name>enable_highlight</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_enable_highlight</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>word</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>word</name> <operator>&amp;&amp;</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>word_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>orig</name></decl>;</decl_stmt>

<expr_stmt><expr><name>clean</name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>r_str_ansi_filter</name> <argument_list>(<argument><expr><name>clean</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>orig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpos</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>orig</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>.</operator><name>highlight</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>highlight</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>highlight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>highlight</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>highlight</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rword</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>word_len</name> <operator>+</operator> <name><name>linv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>linv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rword</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>clean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>rword</name></expr></argument>, <argument><expr><name><name>inv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>rword</name> <operator>+</operator> <name><name>linv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>rword</name> <operator>+</operator> <name><name>linv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>word_len</name></expr></argument>, <argument><expr><name><name>inv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_str_replace_thunked</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>clean</name></expr></argument>, <argument><expr><name>cpos</name></expr></argument>,

<argument><expr><name>l</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>rword</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>clean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>highlight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_lastline</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>b</name> <operator>&gt;</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>b</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><name>b</name> <operator>-</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>-</operator> <name>delta</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_lastline_utf8_ansi_len</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_cons_lastline</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_possible_ansi_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>ch2</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>b</name> <operator>&gt;</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch2</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'J'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'H'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last_possible_ansi_end</name> <operator>=</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\x1b'</literal> <operator>&amp;&amp;</operator> <name>ch2</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>last_possible_ansi_end</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_swap_ground</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>col</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="string">"\x1b[48;5;"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"\x1b[38;5;%s"</literal></expr></argument>, <argument><expr><name>col</name><operator>+</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="string">"\x1b[38;5;"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"\x1b[48;5;%s"</literal></expr></argument>, <argument><expr><name>col</name><operator>+</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="string">"\x1b[4"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"\x1b[3%s"</literal></expr></argument>, <argument><expr><name>col</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="string">"\x1b[3"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"\x1b[4%s"</literal></expr></argument>, <argument><expr><name>col</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_cons_drop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_chop</name><parameter_list>()</parameter_list> <block>{<block_content>

<while>while <condition>(<expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_WHITESPACE</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_bind</name><parameter_list>(<parameter><decl><type><name>RConsBind</name> <modifier>*</modifier></type><name>bind</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bind</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bind</name><operator>-&gt;</operator><name>get_size</name></name> <operator>=</operator> <name>r_cons_get_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bind</name><operator>-&gt;</operator><name>get_cursor</name></name> <operator>=</operator> <name>r_cons_get_cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bind</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <name>r_cons_printf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bind</name><operator>-&gt;</operator><name>cb_flush</name></name> <operator>=</operator> <name>r_cons_flush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bind</name><operator>-&gt;</operator><name>cb_grep</name></name> <operator>=</operator> <name>r_cons_grep</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bind</name><operator>-&gt;</operator><name>is_breaked</name></name> <operator>=</operator> <name>r_cons_is_breaked</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>r_cons_get_rune</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RUNECODE_LINE_HORIZ</name></expr>:</case> <return>return <expr><name>RUNE_LINE_HORIZ</name></expr>;</return>

<case>case <expr><name>RUNECODE_LINE_VERT</name></expr>:</case> <return>return <expr><name>RUNE_LINE_VERT</name></expr>;</return>

<case>case <expr><name>RUNECODE_LINE_CROSS</name></expr>:</case> <return>return <expr><name>RUNE_LINE_CROSS</name></expr>;</return>

<case>case <expr><name>RUNECODE_CORNER_TL</name></expr>:</case> <return>return <expr><name>RUNE_CORNER_TL</name></expr>;</return>

<case>case <expr><name>RUNECODE_CORNER_TR</name></expr>:</case> <return>return <expr><name>RUNE_CORNER_TR</name></expr>;</return>

<case>case <expr><name>RUNECODE_CORNER_BR</name></expr>:</case> <return>return <expr><name>RUNE_CORNER_BR</name></expr>;</return>

<case>case <expr><name>RUNECODE_CORNER_BL</name></expr>:</case> <return>return <expr><name>RUNE_CORNER_BL</name></expr>;</return>

<case>case <expr><name>RUNECODE_CURVE_CORNER_TL</name></expr>:</case> <return>return <expr><name>RUNE_CURVE_CORNER_TL</name></expr>;</return>

<case>case <expr><name>RUNECODE_CURVE_CORNER_TR</name></expr>:</case> <return>return <expr><name>RUNE_CURVE_CORNER_TR</name></expr>;</return>

<case>case <expr><name>RUNECODE_CURVE_CORNER_BR</name></expr>:</case> <return>return <expr><name>RUNE_CURVE_CORNER_BR</name></expr>;</return>

<case>case <expr><name>RUNECODE_CURVE_CORNER_BL</name></expr>:</case> <return>return <expr><name>RUNE_CURVE_CORNER_BL</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_breakword</name><parameter_list>(<parameter><decl><type><name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>break_word</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>break_word</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>break_word_len</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>break_word</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>.</operator><name>break_word_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_cmd_help</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>use_color</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pal_args_color</name> <init>= <expr><ternary><condition><expr><name>use_color</name></expr> ?</condition><then> <expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>args</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>pal_help_color</name> <init>= <expr><ternary><condition><expr><name>use_color</name></expr> ?</condition><then> <expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>help</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>pal_reset</name> <init>= <expr><ternary><condition><expr><name>use_color</name></expr> ?</condition><then> <expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>reset</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>max_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>usage_str</name> <init>= <expr><literal type="string">"Usage:"</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>help</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len0</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>help</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len1</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>help</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_length</name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name>max_length</name></expr></argument>, <argument><expr><name>len0</name> <operator>+</operator> <name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>help</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>help</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>usage_str</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>usage_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s %s %s%s\n"</literal></expr></argument>, <argument><expr><name>pal_args_color</name></expr></argument>,

<argument><expr><name><name>help</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>help</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>help</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pal_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>help</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>help</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s\n"</literal></expr></argument>, <argument><expr><name>pal_help_color</name></expr></argument>, <argument><expr><name><name>help</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pal_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>str_length</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>help</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>help</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>str_length</name> <operator>&lt;</operator> <name>max_length</name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name>max_length</name> <operator>-</operator> <name>str_length</name><operator>)</operator></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"| %s%s%s%*s %s%s%s\n"</literal></expr></argument>,

<argument><expr><name><name>help</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pal_args_color</name></expr></argument>, <argument><expr><name><name>help</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>padding</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>pal_help_color</name></expr></argument>, <argument><expr><name><name>help</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pal_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_clear_buffer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"\x1b"</literal> <literal type="string">"c\x1b[3J"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function></block_content></block></function>

</unit>
