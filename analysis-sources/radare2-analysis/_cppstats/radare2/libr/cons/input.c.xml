<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\cons\input.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I</name></cpp:macro> <cpp:value>r_cons_singleton ()</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>readbuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>readbuffer_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>bufactive</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

static int __is_fd_ready(int fd) {

fd_set rfds;

struct timeval tv;

if (fd==-1)

return 0;

FD_ZERO (&amp;rfds);

FD_SET (fd, &amp;rfds);

tv.tv_sec = 0;

tv.tv_usec = 1;

if (select (1, &amp;rfds, NULL, NULL, &amp;tv) == -1)

return 0;

return 1;

return !FD_ISSET (0, &amp;rfds);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_controlz</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">0x1a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_show_cursor</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_enable_mouse</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sys_stop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>ch</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__parseMouseEvent</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>xpos</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>ypos</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ch2</name> <init>= <expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch2</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>xpos</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">';'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xpos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>xpos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ypos</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">';'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ypos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ypos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_set_click</name> <argument_list>(<argument><expr><call><name>atoi</name> <argument_list>(<argument><expr><name>xpos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name> <argument_list>(<argument><expr><name>ypos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">27</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block> while <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'M'</literal></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>bCtrl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>is_arrow</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_arrow_to_hjkl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>is_arrow</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VK_DOWN</name></expr>:</case> 

<expr_stmt><expr><name>ch</name> <operator>=</operator> <ternary><condition><expr><name>bCtrl</name></expr> ?</condition><then> <expr><literal type="char">'J'</literal></expr> </then><else>: <expr><literal type="char">'j'</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VK_RIGHT</name></expr>:</case> 

<expr_stmt><expr><name>ch</name> <operator>=</operator> <ternary><condition><expr><name>bCtrl</name></expr> ?</condition><then> <expr><literal type="char">'L'</literal></expr> </then><else>: <expr><literal type="char">'l'</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VK_UP</name></expr>:</case> 

<expr_stmt><expr><name>ch</name> <operator>=</operator> <ternary><condition><expr><name>bCtrl</name></expr> ?</condition><then> <expr><literal type="char">'K'</literal></expr> </then><else>: <expr><literal type="char">'k'</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VK_LEFT</name></expr>:</case> 

<expr_stmt><expr><name>ch</name> <operator>=</operator> <ternary><condition><expr><name>bCtrl</name></expr> ?</condition><then> <expr><literal type="char">'H'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VK_PRIOR</name></expr>:</case> 

<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'K'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VK_NEXT</name></expr>:</case> 

<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'J'</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>I</name><operator>-&gt;</operator><name>mouse_event</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ut8</name><operator>)</operator><name>ch</name> <operator>==</operator> <name>UT8_MAX</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>ch</name></expr></else></ternary></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>I</name><operator>-&gt;</operator><name>mouse_event</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>ut8</name><operator>)</operator><name>ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0xc3</literal></expr>:</case> <expr_stmt><expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ch</name><operator>=</operator><literal type="char">'K'</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="number">0x16</literal></expr>:</case> <expr_stmt><expr><name>ch</name><operator>=</operator><literal type="char">'J'</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="number">0x10</literal></expr>:</case> <expr_stmt><expr><name>ch</name><operator>=</operator><literal type="char">'k'</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="number">0x0e</literal></expr>:</case> <expr_stmt><expr><name>ch</name><operator>=</operator><literal type="char">'j'</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="number">0x06</literal></expr>:</case> <expr_stmt><expr><name>ch</name><operator>=</operator><literal type="char">'l'</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="number">0x02</literal></expr>:</case> <expr_stmt><expr><name>ch</name><operator>=</operator><literal type="char">'h'</literal></expr>;</expr_stmt> <break>break;</break> 

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="number">0x1b</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ch</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ch</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x1b</literal></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'q'</literal></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="number">0x4f</literal></expr>:</case> 

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAIKU__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <literal type="char">'O'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0xf1</literal> <operator>+</operator> <operator>(</operator><name>ch</name><operator>&amp;</operator><literal type="number">0xf</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="char">'['</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="char">'A'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0xf1</literal> <operator>+</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'['</literal></expr>:</case> 

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>pos</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>vel</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vel</name><index>[<expr><name>vn</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sc</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'M'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="char">'m'</literal></expr>)</condition>;</do>

<decl_stmt><decl><type><name>int</name></type> <name>nvel</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>vel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>nvel</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>INT8_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><name>INT8_MAX</name></expr>;</return>

<case>case <expr><literal type="number">64</literal></expr>:</case> 

<return>return <expr><literal type="char">'k'</literal></expr>;</return>

<case>case <expr><literal type="number">65</literal></expr>:</case> 

<return>return <expr><literal type="char">'j'</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>pos</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_set_click</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'2'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F11</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F2</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F3</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F4</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'9'</literal></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>I</name><operator>-&gt;</operator><name>mouse_event</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'6'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'k'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'7'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'j'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch2</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>ch2</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>ch2</name> <operator>!=</operator> <literal type="char">'M'</literal></expr>)</condition>;</do>

<break>break;</break>

<case>case <expr><literal type="char">'3'</literal></expr>:</case>

<expr_stmt><expr><call><name>__parseMouseEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<break>break;</break>

<case>case <expr><literal type="char">'2'</literal></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x7e</literal></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F12</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F9</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'1'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F10</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'3'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F11</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'1'</literal></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'1'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'2'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F2</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'3'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F3</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'4'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F4</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'5'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F5</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'7'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F6</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'8'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F7</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'9'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F8</name></expr>;</expr_stmt> <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

case '5':

r_cons_readchar ();

ch = 0xf5;

break;

case '6':

r_cons_readchar ();

ch = 0xf7;

break;

case '7':

r_cons_readchar ();

ch = 0xf6;

break;

case '8':

r_cons_readchar ();

ch = 0xf7;

break;

case '9':

r_cons_readchar ();

ch = 0xf8;

break;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">';'</literal></expr>:</case> 

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'2'</literal></expr>:</case> 

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'K'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'J'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'H'</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">':'</literal></expr>:</case> 

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'K'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'J'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'H'</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch> 

<break>break;</break>

<case>case <expr><literal type="char">'5'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'K'</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="char">'6'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'J'</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="char">'A'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'k'</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="char">'B'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'j'</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="char">'C'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'l'</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="char">'D'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'h'</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'K'</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'J'</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="char">'d'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'H'</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="char">'M'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>__parseMouseEvent</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>ch</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_fgets</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ ret=x; goto beach; }</cpp:value></cpp:define>

<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>color</name> <init>= <expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>input</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>echo</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_show_cursor</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

int mouse = r_cons_enable_mouse (false);

r_cons_enable_mouse (false);

r_cons_flush ();

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>user_fgets</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><call><name><name>cons</name><operator>-&gt;</operator><name>user_fgets</name></name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>line</name><operator>-&gt;</operator><name>prompt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISNOTEMPTY</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fwrite</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fgets</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>fdin</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>feof</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>fdin</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_str_trim_tail</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>beach</name>:</label>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_any_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>msg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\n-- %s --\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"\n--press any key--\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>resizeWin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__cons_readchar_w32</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>usec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bCtrl</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_arrow</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>mode</name></decl>, <decl><type ref="prev"/><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INPUT_RECORD</name></type> <name>irInBuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>resize</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>click_n_drag</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>bed</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>I</name><operator>-&gt;</operator><name>mouse_event</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>GetStdHandle</name> <argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetConsoleMode</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleMode</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ENABLE_WINDOW_INPUT</name> <operator>|</operator> <name>ENABLE_MOUSE_INPUT</name> <operator>|</operator> <name>ENABLE_EXTENDED_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>bed</name> <operator>=</operator> <call><name>r_cons_sleep_begin</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>usec</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>WaitForSingleObject</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>usec</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_sleep_end</name> <argument_list>(<argument><expr><name>bed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ReadConsoleInput</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>irInBuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_enable_mouse</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_sleep_end</name> <argument_list>(<argument><expr><name>bed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>irInBuf</name><operator>.</operator><name>EventType</name></name> <operator>==</operator> <name>MOUSE_EVENT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name><operator>.</operator><name>dwEventFlags</name></name> <operator>==</operator> <name>MOUSE_MOVED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name><operator>.</operator><name>dwButtonState</name></name> <operator>==</operator> <name>FROM_LEFT_1ST_BUTTON_PRESSED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>click_n_drag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name><operator>.</operator><name>dwEventFlags</name></name> <operator>==</operator> <name>MOUSE_WHEELED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name><operator>.</operator><name>dwButtonState</name></name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <ternary><condition><expr><name>bCtrl</name></expr> ?</condition><then> <expr><literal type="char">'J'</literal></expr> </then><else>: <expr><literal type="char">'j'</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <ternary><condition><expr><name>bCtrl</name></expr> ?</condition><then> <expr><literal type="char">'K'</literal></expr> </then><else>: <expr><literal type="char">'k'</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>I</name><operator>-&gt;</operator><name>mouse_event</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name><operator>.</operator><name>dwButtonState</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FROM_LEFT_1ST_BUTTON_PRESSED</name></expr>:</case>

<expr_stmt><expr><call><name>r_cons_set_click</name> <argument_list>(<argument><expr><name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name><operator>.</operator><name>dwMousePosition</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name><operator>.</operator><name>dwMousePosition</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>UT8_MAX</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RIGHTMOST_BUTTON_PRESSED</name></expr>:</case>

<expr_stmt><expr><call><name>r_cons_enable_mouse</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>click_n_drag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_set_click</name> <argument_list>(<argument><expr><name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name><operator>.</operator><name>dwMousePosition</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name><operator>.</operator><name>dwMousePosition</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>UT8_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>irInBuf</name><operator>.</operator><name>EventType</name></name> <operator>==</operator> <name>KEY_EVENT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>bKeyDown</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name><operator>.</operator><name>AsciiChar</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bCtrl</name> <operator>=</operator> <name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>dwControlKeyState</name></name> <operator>&amp;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name><operator>.</operator><name>AsciiChar</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualKeyCode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VK_DOWN</name></expr>:</case> 

<case>case <expr><name>VK_RIGHT</name></expr>:</case> 

<case>case <expr><name>VK_UP</name></expr>:</case> 

<case>case <expr><name>VK_LEFT</name></expr>:</case> 

<case>case <expr><name>VK_PRIOR</name></expr>:</case> 

<case>case <expr><name>VK_NEXT</name></expr>:</case> 

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>irInBuf</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualKeyCode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_arrow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VK_F1</name></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VK_F2</name></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F2</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VK_F3</name></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F3</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VK_F4</name></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F4</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VK_F5</name></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <ternary><condition><expr><name>bCtrl</name></expr> ?</condition><then> <expr><literal type="number">0xcf5</literal></expr> </then><else>: <expr><name>R_CONS_KEY_F5</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VK_F6</name></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F6</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VK_F7</name></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F7</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VK_F8</name></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F8</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VK_F9</name></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F9</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VK_F10</name></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F10</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VK_F11</name></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F11</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VK_F12</name></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>R_CONS_KEY_F12</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>irInBuf</name><operator>.</operator><name>EventType</name></name> <operator>==</operator> <name>WINDOW_BUFFER_SIZE_EVENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>resize</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>resize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>resizeWin</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>resize</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FlushConsoleInputBuffer</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>SetConsoleMode</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ch</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_readchar_timeout</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>usec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>fdset</name></decl>, <decl><type ref="prev"/><name>errset</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fdset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>errset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">1000</literal> <operator>*</operator> <name>usec</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>select</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>__cons_readchar_w32</name> <argument_list>(<argument><expr><name>usec</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_cons_readpush</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>+</operator> <name>readbuffer_length</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>realloc</name> <argument_list>(<argument><expr><name>readbuffer</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>readbuffer_length</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>readbuffer</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>readbuffer</name> <operator>+</operator> <name>readbuffer_length</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>readbuffer_length</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_readflush</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>readbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>readbuffer_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_switchbuf</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>bufactive</name> <operator>=</operator> <name>active</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>__WINDOWS__</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>sigwinchFlag</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_readchar</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>readbuffer_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><operator>*</operator><name>readbuffer</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>readbuffer_length</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>readbuffer</name></expr></argument>, <argument><expr><name>readbuffer</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>readbuffer_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ch</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<return>return <expr><call><name>__cons_readchar_w32</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>bed</name> <init>= <expr><call><name>r_cons_sleep_begin</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>readfds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sigset_t</name></type> <name>sigmask</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_signal_sigmask</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigdelset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sigmask</name></expr></argument>, <argument><expr><name>SIGWINCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>pselect</name> <argument_list>(<argument><expr><name>STDIN_FILENO</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>readfds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigmask</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EBADF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_cons_readchar (): EBADF\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sigwinchFlag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sigwinchFlag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>resizeWin</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name> <init>= <expr><call><name>read</name> <argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_sleep_end</name> <argument_list>(<argument><expr><name>bed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bufactive</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_cons_controlz</name> <argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_cons_yesno</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>def</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>key</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>)</operator><name>def</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_cons_is_interactive</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>def</name> <operator>==</operator> <literal type="char">'y'</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vfprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>read</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="char">'Y'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <literal type="char">'y'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>key</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>def</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>key</name> <operator>==</operator> <literal type="char">'y'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_password</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\r%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>term_raw</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ECHO</name> <operator>|</operator> <name>ECHONL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcsetattr</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCSADRAIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>term_raw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sys_signal</name> <argument_list>(<argument><expr><name>SIGTSTP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name>r_cons_readchar</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<expr_stmt><expr><call><name>r_sys_signal</name> <argument_list>(<argument><expr><name>SIGTSTP</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_input</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oprompt</name> <init>= <expr><call><name>r_line_get_prompt</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oprompt</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_line_set_prompt</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_line_set_prompt</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_fgets</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_line_set_prompt</name> <argument_list>(<argument><expr><name>oprompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>oprompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
