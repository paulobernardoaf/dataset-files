<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\cons\hud.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_singleton ()-&gt;x</cpp:value></cpp:define>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_hud_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_cons_hud_string</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_hud_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>os</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>track</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_str_replace_ch</name> <argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_replace_ch</name> <argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>fl</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fl</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>os</name> <operator>=</operator> <name>o</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>o</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>o</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>o</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>os</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>os</name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>track</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_append</name> <argument_list>(<argument><expr><name>fl</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>os</name> <operator>=</operator> <name>o</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_cons_hud</name> <argument_list>(<argument><expr><name>fl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__matchString</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>mask_size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>current_token</name> <init>= <expr><name>filter</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter_end</name> <init>= <expr><name>filter</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ansi_filtered</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>cps</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_ansi_filter</name> <argument_list>(<argument><expr><name>ansi_filtered</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cps</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <name>ansi_filtered</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>filter</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <name>filter_end</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>next_match</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>entry_ptr</name> <init>= <expr><name>entry</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>old_char</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>token_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>current_token</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>current_token</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>token_len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>current_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>next_match</name> <operator>=</operator> <call><name>r_str_casestr</name> <argument_list>(<argument><expr><name>entry_ptr</name></expr></argument>, <argument><expr><name>current_token</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>real_pos</name></decl>, <decl><type ref="prev"/><name>filtered_pos</name> <init>= <expr><name>next_match</name> <operator>-</operator> <name>entry</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_pos</name> <init>= <expr><name><name>cps</name><index>[<expr><name>filtered_pos</name> <operator>+</operator> <name>token_len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>real_pos</name> <operator>=</operator> <name><name>cps</name><index>[<expr><name>filtered_pos</name></expr>]</index></name></expr>;</init>

<condition><expr><name>real_pos</name> <operator>&lt;</operator> <name>end_pos</name> <operator>&amp;&amp;</operator> <name>real_pos</name> <operator>&lt;</operator> <name>mask_size</name></expr>;</condition>

<incr><expr><name>real_pos</name> <operator>=</operator> <name><name>cps</name><index>[<expr><operator>++</operator><name>filtered_pos</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mask</name><index>[<expr><name>real_pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>entry_ptr</name> <operator>+=</operator> <name>token_len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>old_char</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>entry_ptr</name> <operator>==</operator> <name>entry</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ansi_filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_token</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ansi_filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>hud_filter</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>user_input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top_entry_n</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>current_entry_n</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>selected_entry</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>current_entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>mask</name><index>[<expr><name>HUD_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>rows</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first_line</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>current_entry</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HUD_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>user_input</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>__matchString</name> <argument_list>(<argument><expr><name>current_entry</name></expr></argument>, <argument><expr><name>user_input</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>HUD_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>counter</name> <operator>==</operator> <name>rows</name> <operator>+</operator> <name>top_entry_n</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>top_entry_n</name> <operator>||</operator> <operator>*</operator><name>current_entry_n</name> <operator>&gt;=</operator> <name>top_entry_n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>current_entry</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>current_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>user_input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">" %c %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>first_line</name></expr>?</condition><then> <expr><literal type="char">'-'</literal></expr></then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>I</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>color_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>last_color_change</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">" %c "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>first_line</name></expr>?</condition><then> <expr><literal type="char">'-'</literal></expr></then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>HUD_BUF_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mask</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>last_mask</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>tmp</name> <init>= <expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mask</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>Color_RESET</name> <literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>last_color_change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>Color_GREEN</name> <literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>last_color_change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_color_change</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_mask</name> <operator>=</operator> <name><name>mask</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>last_mask</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>Color_GREEN</name> <literal type="string">"%s"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>last_color_change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>Color_RESET</name> <literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>last_color_change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mask</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>toupper</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">" %c %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>first_line</name></expr>?</condition><then> <expr><literal type="char">'-'</literal></expr></then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first_line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>selected_entry</name> <operator>=</operator> <name>current_entry</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first_line</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>current_entry_n</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mht_free_kv</name><parameter_list>(<parameter><decl><type><name>HtPPKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUD_CACHE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_hud</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>user_input</name><index>[<expr><name>HUD_BUF_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>hud_prompt</name><index>[<expr><name>HUD_BUF_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>selected_entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><call><name>ht_pp_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HtPPKvFreeFunc</name><operator>)</operator><name>mht_free_kv</name></expr></argument>, <argument><expr><operator>(</operator><name>HtPPCalcSizeV</name><operator>)</operator><name>strlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RLineHud</name> <modifier>*</modifier></type><name>hud</name> <init>= <expr><operator>(</operator><name>RLineHud</name><operator>*</operator><operator>)</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr><name>RLineHud</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hud</name><operator>-&gt;</operator><name>activate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hud</name><operator>-&gt;</operator><name>vi</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>I</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>echo</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>I</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hud</name> <operator>=</operator> <name>hud</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hud_prompt</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>user_input</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_show_cursor</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_enable_mouse</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_clear</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hud</name><operator>-&gt;</operator><name>current_entry_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>selected_entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prompt</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>prompt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"&gt;&gt; %s\n"</literal></expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d&gt; %s\n"</literal></expr></argument>, <argument><expr><name><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name></expr></argument>, <argument><expr><name>hud_prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>filtered_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>filtered_list</name> <operator>=</operator> <call><name>ht_pp_find</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>user_input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>filtered_list</name> <operator>=</operator> <call><name>hud_filter</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>user_input</name></expr></argument>,

<argument><expr><name><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>hud</name><operator>-&gt;</operator><name>current_entry_n</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>selected_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HUD_CACHE</name></expr></cpp:if>

<expr_stmt><expr><call><name>ht_pp_insert</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>user_input</name></expr></argument>, <argument><expr><name>filtered_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>filtered_list</argument>, <argument>iter</argument>, <argument>row</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filtered_list</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>R_CONS_CLEAR_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HUD_CACHE</name></expr></cpp:if>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>filtered_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>r_cons_visual_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_line_readline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>user_input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HUD_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>hud_prompt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HUD_BUF_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>user_input</name></expr></argument>, <argument><expr><call><name>I</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>HUD_BUF_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>hud_prompt</name></expr></argument>, <argument><expr><name>user_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>I</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <call><name>I</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>buffer</name><operator>.</operator><name>index</name></name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>hud_prompt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>hud_prompt</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>hud_prompt</name> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>buffer</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hud</name><operator>-&gt;</operator><name>activate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hud</name><operator>-&gt;</operator><name>top_entry_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hud</name><operator>-&gt;</operator><name>current_entry_n</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>selected_entry</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><call><name>I</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>I</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>echo</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_enable_mouse</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_show_cursor</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>selected_entry</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<goto>goto <name>_beach</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<label><name>_beach</name>:</label>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><call><name>I</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>I</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>echo</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_show_cursor</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_enable_mouse</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_set_raw</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ht_pp_free</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_hud_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>path</name></expr>?</condition><then> <expr><name>path</name></expr></then><else>: <expr><literal type="string">"./"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"./"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>files</name> <operator>=</operator> <call><name>r_sys_dir</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>files</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_cons_hud</name> <argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_file_abspath</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_file_is_directory</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_cons_hud_path</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No files found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>tmp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_message</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>, <decl><type ref="prev"/><name>cols</name> <init>= <expr><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_clear</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><operator>(</operator><name>cols</name> <operator>-</operator> <name>len</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>rows</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_gotoxy</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rows</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_any_key</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
