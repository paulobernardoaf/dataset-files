<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\cons\grep.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_print.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sdb.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_singleton ()-&gt;x</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>strchr_ns</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&gt;</operator> <name>s</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>prev</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>strchr_ns</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help_detail_tilde</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Usage: [command]~[modifier][word,word][endmodifier][[column]][:line]\n"</literal>

<literal type="string">"modifier:"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,

<expr><literal type="string">" &amp;"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"all words must match to grep the line"</literal></expr>,

<expr><literal type="string">" $[n]"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"sort numerically / alphabetically the Nth column"</literal></expr>,

<expr><literal type="string">" $!"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"sort in inverse order"</literal></expr>,

<expr><literal type="string">" ,"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"token to define another keyword"</literal></expr>,

<expr><literal type="string">" +"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"case insensitive grep (grep -i)"</literal></expr>,

<expr><literal type="string">" ^"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"words must be placed at the beginning of line"</literal></expr>,

<expr><literal type="string">" &lt;"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"perform zoom operation on the buffer"</literal></expr>,

<expr><literal type="string">" !"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"negate grep"</literal></expr>,

<expr><literal type="string">" ?"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"count number of matching lines"</literal></expr>,

<expr><literal type="string">" ?."</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"count number chars"</literal></expr>,

<expr><literal type="string">" ??"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show this help message"</literal></expr>,

<expr><literal type="string">" :s..e"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show lines s-e"</literal></expr>,

<expr><literal type="string">" .."</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"internal 'less'"</literal></expr>,

<expr><literal type="string">" ..."</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"internal 'hud' (like V_)"</literal></expr>,

<expr><literal type="string">" {:"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"human friendly indentation (yes, it's a smiley)"</literal></expr>,

<expr><literal type="string">" {:.."</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"less the output of {:"</literal></expr>,

<expr><literal type="string">" {:..."</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"hud the output of {:"</literal></expr>,

<expr><literal type="string">" {}"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"json indentation"</literal></expr>,

<expr><literal type="string">" {}.."</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"less json indentation"</literal></expr>,

<expr><literal type="string">" {}..."</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"hud json indentation"</literal></expr>,

<expr><literal type="string">" {path}"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"json path grep"</literal></expr>,

<expr><literal type="string">"endmodifier:"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,

<expr><literal type="string">" $"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"words must be placed at the end of line"</literal></expr>,

<expr><literal type="string">"column:"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,

<expr><literal type="string">" [n]"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show only column n"</literal></expr>,

<expr><literal type="string">" [n-m]"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show column n to m"</literal></expr>,

<expr><literal type="string">" [n-]"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show all columns starting from column n"</literal></expr>,

<expr><literal type="string">" [i,j,k]"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show the columns i, j and k"</literal></expr>,

<expr><literal type="string">"Examples:"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,

<expr><literal type="string">" i~:0"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show first line of 'i' output"</literal></expr>,

<expr><literal type="string">" i~:-2"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show the second to last line of 'i' output"</literal></expr>,

<expr><literal type="string">" i~:0..3"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show first three lines of 'i' output"</literal></expr>,

<expr><literal type="string">" pd~mov"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"disasm and grep for mov"</literal></expr>,

<expr><literal type="string">" pi~[0]"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show only opcode"</literal></expr>,

<expr><literal type="string">" i~0x400$"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"show lines ending with 0x400"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>sorted_lines</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>unsorted_lines</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sorted_column</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_grep_help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_cmd_help</name> <argument_list>(<argument><expr><name>help_detail_tilde</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CONS_GREP_BUFSIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_grep_expression</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><name>R_CONS_GREP_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wlen</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>is_range</name></decl>, <decl><type ref="prev"/><name>num_is_parsed</name></decl>, <decl><type ref="prev"/><name>fail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>optr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr3</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>range_begin</name></decl>, <decl><type ref="prev"/><name>range_end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsGrep</name> <modifier>*</modifier></type><name>grep</name> <init>= <expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>grep</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sorted_column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>less</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>less</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'{'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>human</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>json</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"{:..."</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>hud</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"{:.."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>less</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>json</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"{}..."</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>hud</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"{}.."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>less</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>jsonPath</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>jsonPathEnd</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>jsonPath</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>jsonPathEnd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>jsonPathEnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>grep</name><operator>-&gt;</operator><name>json_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>json_path</name></name> <operator>=</operator> <name>jsonPath</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>json</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>jsonPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'$'</literal></expr>:</case>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>sort_invert</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>sort_invert</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>sort</name></name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>sort_row</name></name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><operator>++</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>amp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>zoom</name></name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><operator>++</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>icase</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<goto>goto <name>while_end</name>;</goto>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'!'</literal></expr>:</case>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>neg</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>charCounter</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_grep_help</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<goto>goto <name>while_end</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></while>

<label><name>while_end</name>:</label>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>R_CONS_GREP_BUFSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_cons_grep: too long!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr3</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_range</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num_is_parsed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>range_begin</name> <operator>=</operator> <name>range_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr2</name> <operator>&amp;&amp;</operator> <name>ptr3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end_ptr</name> <operator>=</operator> <name>ptr2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>ptr3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr2</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>ptr2</name> <operator>&lt;=</operator> <name>ptr3</name></expr>;</condition> <incr><expr><name>ptr2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name><name>grep</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>tokens_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>ptr2</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><name>is_range</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num_is_parsed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>range_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">']'</literal></expr>:</case> 

<case>case <expr><literal type="char">','</literal></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>range_begin</name> <operator>&lt;=</operator> <name>range_end</name></expr>;</condition> <incr><expr><name>range_begin</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>range_begin</name> <operator>&gt;=</operator> <name>R_CONS_GREP_TOKENS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>range_begin</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>tokens_used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr2</name> <operator>==</operator> <literal type="char">']'</literal> <operator>&amp;&amp;</operator> <name>is_range</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>num_is_parsed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_is_parsed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>range_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>is_range</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num_is_parsed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_is_parsed</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_range</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>range_end</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>range_end</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>range_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>range_begin</name> <operator>=</operator> <name>range_end</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_is_parsed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ptr3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>strchr_ns</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>range_line</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>ptr2</name> <operator>&amp;&amp;</operator> <name><name>ptr2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name><name>ptr2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><name><name>ptr2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>ptr2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name><name>ptr2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end_ptr</name> <operator>=</operator> <ternary><condition><expr><name>end_ptr</name></expr> ?</condition><then> <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>end_ptr</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ptr2</name></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>token</name> <init>= <expr><name>ptr2</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>ptr2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>range_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>range_line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>token</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>f_line</name></name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>f_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>l_line</name></name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>l_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end_ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>end_ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>grep</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wlen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>optr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wlen</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&gt;=</operator> <name>R_CONS_GREP_WORD_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"grep string too long\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>nstrings</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>nstrings</name></name> <operator>&gt;</operator> <name>R_CONS_GREP_WORDS</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"too many grep strings\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>grep</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name><name>grep</name><operator>-&gt;</operator><name>nstrings</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>optr</name></expr></argument>, <argument><expr><name>R_CONS_GREP_WORD_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>ptr</name></expr>)</condition>;</do>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>nstrings</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>strings</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>find_next_intgrep</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>quotes</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_str_firstbut</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">'~'</literal></expr></argument>, <argument><expr><name>quotes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>cmd</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>*</operator><name>cmd</name></expr>)</condition>;</do>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>preprocess_filter_expr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>quotes</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strsep</name> <init>= <expr><literal type="string">"&amp;"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>find_next_intgrep</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>quotes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p1</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="string">"~?"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p1</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p1</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>p2</name> <operator>=</operator> <call><name>find_next_intgrep</name> <argument_list>(<argument><expr><name>p1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>quotes</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>strsep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>r_str_appendlen</name> <argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>p1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p2</name> <operator>-</operator> <name>p1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>strsep</name> <operator>=</operator> <literal type="string">","</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>p1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ns</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_grep_parsecmd</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>quotestr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>cmd</name> <operator>&amp;&amp;</operator> <name>quotestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>preprocess_filter_expr</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>quotestr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_grep_expression</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_grep_strip</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>quotestr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>preprocess_filter_expr</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>quotestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_grep_process</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>grep</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>grep</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>parse_grep_expression</name> <argument_list>(<argument><expr><name>grep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>grep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>da</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ca</name> <init>= <expr><call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name> <operator>||</operator> <operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>a</name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sorted_column</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>da</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>ca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>colsa</name> <init>= <expr><call><name>r_str_word_set0</name> <argument_list>(<argument><expr><name>da</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>colsb</name> <init>= <expr><call><name>r_str_word_set0</name> <argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ca</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>colsa</name> <operator>&gt;</operator> <name>sorted_column</name><operator>)</operator></expr>?</condition><then> <expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>da</name></expr></argument>, <argument><expr><name>sorted_column</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>colsb</name> <operator>&gt;</operator> <name>sorted_column</name><operator>)</operator></expr>?</condition><then> <expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sorted_column</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><operator>*</operator><name>ca</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IS_DIGIT</name> <argument_list>(<argument><expr><operator>*</operator><name>cb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>na</name> <init>= <expr><call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ca</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>nb</name> <init>= <expr><call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>na</name> <operator>&gt;</operator> <name>nb</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>da</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>da</name> <operator>&amp;&amp;</operator> <name>db</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>ca</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>da</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>da</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_grepbuf</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsGrep</name> <modifier>*</modifier></type><name>grep</name> <init>= <expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>grep</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>total_lines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>buffer_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>show</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>len</name> <operator>||</operator> <operator>!</operator><name>buf</name> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>grep</name><operator>-&gt;</operator><name>json</name></name> <operator>||</operator> <name><name>grep</name><operator>-&gt;</operator><name>less</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>json</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>less</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>hud</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>zoom</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>r_str_scale</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>grep</name><operator>-&gt;</operator><name>zoom</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>grep</name><operator>-&gt;</operator><name>zoomy</name></name></expr>?</condition><then><expr><name><name>grep</name><operator>-&gt;</operator><name>zoomy</name></name></expr></then><else>:<expr><name><name>grep</name><operator>-&gt;</operator><name>zoom</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>zoom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>zoomy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>json</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>json_path</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>sdb_json_get_str</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>grep</name><operator>-&gt;</operator><name>json_path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>u</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>json</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>grep</name><operator>-&gt;</operator><name>json_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>palette</name><index>[]</index></name> <init>= <expr><block>{

<expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_false</name></name></expr>, 

<expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>graph_true</name></name></expr>, 

<expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>num</name></name></expr>, 

<expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pal</name><operator>.</operator><name>comment</name></name></expr>, 

<expr><name>Color_RESET</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>grep</name><operator>.</operator><name>human</name></name><operator>)</operator></expr>

?</condition><then> <expr><call><name>r_print_json_human</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>r_print_json_indent</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>I</name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>color_mode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>palette</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>json</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>hud</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>hud</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_hud_string</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>less</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>less</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_less_str</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>less</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>less</name> <init>= <expr><name><name>grep</name><operator>-&gt;</operator><name>less</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>less</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>less</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_cons_hud_string</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_less_str</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>lines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>in</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>in</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>total_lines</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>grep</name><operator>-&gt;</operator><name>range_line</name></name> <operator>&amp;&amp;</operator> <name><name>grep</name><operator>-&gt;</operator><name>line</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name>total_lines</name> <operator>+</operator> <name><name>grep</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>range_line</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>f_line</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>f_line</name></name> <operator>=</operator> <name>total_lines</name> <operator>+</operator> <name><name>grep</name><operator>-&gt;</operator><name>f_line</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>l_line</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grep</name><operator>-&gt;</operator><name>l_line</name></name> <operator>=</operator> <name>total_lines</name> <operator>+</operator> <name><name>grep</name><operator>-&gt;</operator><name>l_line</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>in</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>in</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tline</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>grep_color</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tl</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tl</name> <operator>=</operator> <call><name>r_str_ansi_filter</name> <argument_list>(<argument><expr><name>tline</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tl</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_cons_grep_line</name> <argument_list>(<argument><expr><name>tline</name></expr></argument>, <argument><expr><name>tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>grep</name><operator>-&gt;</operator><name>range_line</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>line</name></name> <operator>==</operator> <name><name>cons</name><operator>-&gt;</operator><name>lines</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>show</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>range_line</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>f_line</name></name> <operator>==</operator> <name><name>cons</name><operator>-&gt;</operator><name>lines</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>show</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>l_line</name></name> <operator>==</operator> <name><name>cons</name><operator>-&gt;</operator><name>lines</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>show</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>show</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>show</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>tline</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>grep_highlight</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>grep</name><operator>-&gt;</operator><name>nstrings</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><name>Color_INVERT</name><literal type="string">"%s"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name><name>grep</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <name>newstr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>icase</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_replace_icase</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>grep</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>grep</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>newstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer_len</name> <operator>+=</operator> <name>ret</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>grep</name><operator>-&gt;</operator><name>range_line</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>show</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>lines</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <call><name>r_strbuf_length</name> <argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>counter</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><ternary><condition><expr><name><name>grep</name><operator>-&gt;</operator><name>charCounter</name></name></expr>?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name><name>cons</name><operator>-&gt;</operator><name>lines</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>lines</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ob_len</name> <init>= <expr><call><name>r_strbuf_length</name> <argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ob_len</name> <operator>&gt;=</operator> <name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_sz</name></name> <operator>=</operator> <name>ob_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><call><name>r_strbuf_getbin</name> <argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ob_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>ob_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <name>ob_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>sort</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_LINES</name><parameter_list>(<parameter><type><name>list</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>do {r_list_foreach (list, iter, str) {int len = strlen (str);memcpy (ptr, str, len);memcpy (ptr + len, "\n", 2);ptr += len + 1;nl++;}}while (false)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sorted_column</name> <operator>=</operator> <name><name>grep</name><operator>-&gt;</operator><name>sort</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name>sorted_lines</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>sort_invert</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_reverse</name> <argument_list>(<argument><expr><name>sorted_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>INSERT_LINES</name> <argument_list>(<argument><expr><name>unsorted_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_LINES</name> <argument_list>(<argument><expr><name>sorted_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>lines</name></name> <operator>=</operator> <name>nl</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>sorted_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sorted_lines</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>unsorted_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>unsorted_lines</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_grep_line</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsGrep</name> <modifier>*</modifier></type><name>grep</name> <init>= <expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>grep</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delims</name> <init>= <expr><literal type="string">" |,;=\t"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tok</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hit</name> <init>= <expr><name><name>grep</name><operator>-&gt;</operator><name>neg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>outlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_tok</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>nstrings</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ampfail</name> <init>= <expr><name><name>grep</name><operator>-&gt;</operator><name>amp</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>icase</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>grep</name><operator>-&gt;</operator><name>nstrings</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name><name>grep</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>icase</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_strstr_ansi</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>grep</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ampfail</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>begin</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hit</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>==</operator> <name>in</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hit</name> <operator>=</operator> <operator>!</operator><name><name>grep</name><operator>-&gt;</operator><name>neg</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>end</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><name><name>grep</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>grep</name><operator>-&gt;</operator><name>amp</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>amp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hit</name> <operator>=</operator> <name>ampfail</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hit</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>grep</name><operator>-&gt;</operator><name>range_line</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>line</name></name> <operator>==</operator> <name><name>cons</name><operator>-&gt;</operator><name>lines</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_tok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>range_line</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_tok</name> <operator>=</operator> <call><name>R_BETWEEN</name> <argument_list>(<argument><expr><name><name>grep</name><operator>-&gt;</operator><name>f_line</name></name></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>lines</name></name></expr></argument>, <argument><expr><name><name>grep</name><operator>-&gt;</operator><name>l_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>use_tok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_tok</name> <operator>&amp;&amp;</operator> <name><name>grep</name><operator>-&gt;</operator><name>tokens_used</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_CONS_GREP_TOKENS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><ternary><condition><expr><name>i</name></expr>?</condition><then> <expr><name>NULL</name></expr></then><else>: <expr><name>in</name></expr></else></ternary></expr></argument>, <argument><expr><name>delims</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>toklen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>outlen</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>, <argument><expr><name>toklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>outlen</name> <operator>+</operator> <name>toklen</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>outlen</name> <operator>+=</operator> <name>toklen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>outlen</name> <operator>=</operator> <ternary><condition><expr><name>outlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>?</condition><then> <expr><name>outlen</name> <operator>-</operator> <literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>outlen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_cons_grep_line: wtf, how you reach this?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>outlen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grep</name><operator>-&gt;</operator><name>sort</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sorted_lines</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sorted_lines</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unsorted_lines</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>unsorted_lines</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>lines</name></name> <operator>&gt;=</operator> <name><name>grep</name><operator>-&gt;</operator><name>sort_row</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>sorted_lines</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>unsorted_lines</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_grep</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>grep</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>parse_grep_expression</name> <argument_list>(<argument><expr><name>grep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_grepbuf</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
