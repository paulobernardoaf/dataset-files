<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\cons\canvas.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>useUtf8</name></cpp:macro> <cpp:value>(r_cons_singleton ()-&gt;use_utf8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>useUtf8Curvy</name></cpp:macro> <cpp:value>(r_cons_singleton ()-&gt;use_utf8_curvy)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W</name><parameter_list>(<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_canvas_write (c, y)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_cons_canvas_gotoxy (c, x, y)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>__isAnsiSequence</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>s</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">033</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__getAnsiPiece</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>chr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>__isAnsiSequence</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>chr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>chr</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p</name> <operator>-</operator> <name>q</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>attribute_free_kv</name><parameter_list>(<parameter><decl><type><name>HtUPKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__attributeAt</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>, <argument><expr><name>loc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__stampAttribute</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ht_up_update</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>, <argument><expr><name>loc</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ht_up_delete</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>, <argument><expr><name>loc</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set_attr</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>__isAnsiSequence</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'J'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'m'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'H'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slen</name> <init>= <expr><name>p</name> <operator>-</operator> <name>s</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RStrBuf</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append_n</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <call><name>r_str_constpool_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>constpool</name></name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__getUtf8Length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fullwidths</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_char_fullwidth</name> <argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fullwidths</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>j</name> <operator>+</operator> <name>fullwidths</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__getUtf8Length2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fullwidths</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>left</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_str_char_fullwidth</name> <argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>left</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fullwidths</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>fullwidths</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__expandLine</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>real_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>utf8_len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>real_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_utf8_len</name> <init>= <expr><call><name>__getUtf8Length2</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>utf8_len</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>goback</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>buf_utf8_len</name> <operator>-</operator> <name>utf8_len</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><operator>(</operator><name>real_len</name> <operator>-</operator> <name>utf8_len</name><operator>)</operator> <operator>-</operator> <name>goback</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>padding</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>padding</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name> <operator>+</operator> <name>padding</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>bsize</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>newsize</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>bsize</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name> <operator>*</operator> <literal type="number">1.5</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name> <operator>+</operator> <name>padding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>newline</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>newsize</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newline</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>newline</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>bsize</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newsize</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>bsize</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name> <operator>=</operator> <name>newline</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bsize</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name>goback</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name>goback</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>padding</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lap</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>start</name> <operator>+</operator> <name>padding</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>start</name> <operator>+</operator> <name>padding</name> <operator>+</operator> <name>lap</name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <name>lap</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>lap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name> <operator>+=</operator> <name>padding</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>start</name> <operator>+</operator> <name>padding</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name> <operator>+=</operator> <name>padding</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_free</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>bsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>blen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ht_up_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_constpool_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>constpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>attribute_delete_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>HtUP</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><operator>(</operator><name>HtUP</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ht_up_delete</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_clear</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>c</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>bsize</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ht_up_foreach</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>, <argument><expr><name>attribute_delete_cb</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_cons_canvas_gotoxy</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>sy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>sx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name>y</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name>y</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RConsCanvas</name> <modifier>*</modifier></type><name>r_cons_canvas_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>h</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RConsCanvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bsize</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>blen</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name><name>c</name><operator>-&gt;</operator><name>b</name></name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>blen</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name><name>c</name><operator>-&gt;</operator><name>blen</name></name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>blen</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bsize</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name><name>c</name><operator>-&gt;</operator><name>bsize</name></name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>bsize</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>w</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bsize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_constpool_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>constpool</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>attrs</name></name> <operator>=</operator> <call><name>ht_up_new</name> <argument_list>(<argument><expr><operator>(</operator><name>HtUPDupValue</name><operator>)</operator><name>strdup</name></expr></argument>, <argument><expr><name>attribute_free_kv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>attrs</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name>Color_RESET</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_clear</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

<label><name>beach</name>:</label> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_constpool_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>constpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>bsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>blen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_write</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>s</name> <operator>||</operator> <operator>!</operator><call><name>R_BETWEEN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>R_BETWEEN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>slen</name></decl>, <decl><type ref="prev"/><name>attr_len</name></decl>, <decl><type ref="prev"/><name>piece_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orig_x</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl>, <decl><type ref="prev"/><name>attr_x</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>__getUtf8Length2</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s_part</name> <init>= <expr><call><name>set_attr</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>piece_len</name> <operator>=</operator> <call><name>__getAnsiPiece</name> <argument_list>(<argument><expr><name>s_part</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>piece_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>s_part</name> <operator>==</operator> <name>s</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <name>piece_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>piece_len</name> <operator>&gt;</operator> <name>left</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>utf8_piece_len</name> <init>= <expr><call><name>__getUtf8Length</name> <argument_list>(<argument><expr><name>s_part</name></expr></argument>, <argument><expr><name>piece_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>utf8_piece_len</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name>attr_x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>real_len</name> <init>= <expr><call><name>r_str_nlen</name> <argument_list>(<argument><expr><name>s_part</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>utf8_len</name> <init>= <expr><call><name>__getUtf8Length</name> <argument_list>(<argument><expr><name>s_part</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__expandLine</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>real_len</name></expr></argument>, <argument><expr><name>utf8_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>G</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>sx</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>sy</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>s_part</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>attr_len</name> <operator>=</operator> <ternary><condition><expr><name>slen</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>s_part</name> <operator>!=</operator> <name>s</name></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><name>utf8_len</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attr_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>attr_x</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__stampAttribute</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <name>attr_x</name></expr></argument>, <argument><expr><name>attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s_part</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name>Color_RESET</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__stampAttribute</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <name>attr_x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>__getUtf8Length2</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>orig_x</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>attr_x</name> <operator>=</operator> <name>orig_x</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <name>slen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr_x</name> <operator>+=</operator> <name>utf8_len</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>piece_len</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>orig_x</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_cons_canvas_to_string</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>olen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>attr_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>olen</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>olen</name> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name>CONS_MAX_ATTR_SZ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>olen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_first</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>o</name><index>[<expr><name>olen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>is_first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>atr</name> <init>= <expr><call><name>__attributeAt</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>y</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <name>attr_x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>atr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>atr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>olen</name></expr></argument>, <argument><expr><name>atr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>olen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>attr_x</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_char_fullwidth</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name>y</name></expr>]</index></name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>attr_x</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>o</name><index>[<expr><name>olen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rune</name> <init>= <expr><call><name>r_cons_get_rune</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rune</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>o</name> <operator>+</operator> <name>olen</name></expr></argument>, <argument><expr><name>rune</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>olen</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>rune</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>o</name><index>[<expr><name>olen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>olen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>o</name><index>[<expr><name>olen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>o</name><index>[<expr><operator>--</operator><name>olen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<expr_stmt><expr><name><name>o</name><index>[<expr><name>olen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>o</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_print_region</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>r_cons_canvas_to_string</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_trim_tail</name> <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>o</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_print</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>r_cons_canvas_to_string</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_cons_canvas_resize</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <name>w</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>h</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>newblen</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>blen</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name><name>c</name><operator>-&gt;</operator><name>blen</name></name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newblen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>blen</name></name> <operator>=</operator> <name>newblen</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>newbsize</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>bsize</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name><name>c</name><operator>-&gt;</operator><name>bsize</name></name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newbsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bsize</name></name> <operator>=</operator> <name>newbsize</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newb</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name><name>c</name><operator>-&gt;</operator><name>b</name></name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>newb</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newline</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>newline</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>w</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>newline</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name>w</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>blen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bsize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newline</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ht_up_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>blen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>bsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>newline</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_clear</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.1415</cpp:value></cpp:define>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_circle</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>xfactor</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>yfactor</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>h</name> <operator>/</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>size</name> <init>= <expr><name>w</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><name>size</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>a</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>PI</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>sa</name> <init>= <expr><call><name>r_num_sin</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>ca</name> <init>= <expr><call><name>r_num_cos</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>cx</name> <init>= <expr><name>s</name> <operator>*</operator> <name>ca</name> <operator>+</operator> <operator>(</operator><name>size</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>cy</name> <init>= <expr><name>s</name> <operator>*</operator> <name>sa</name> <operator>+</operator> <operator>(</operator><name>size</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>X</name> <init>= <expr><name>x</name> <operator>+</operator> <operator>(</operator><name>xfactor</name> <operator>*</operator> <name>cx</name><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><name>y</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>yfactor</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>cy</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>G</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <literal type="number">0.1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name>Color_RESET</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_box</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hline</name> <init>= <expr><ternary><condition><expr><name>useUtf8</name></expr>?</condition><then> <expr><name>RUNECODESTR_LINE_HORIZ</name></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vtmp</name> <init>= <expr><ternary><condition><expr><name>useUtf8</name></expr>?</condition><then> <expr><name>RUNECODESTR_LINE_VERT</name></expr> </then><else>: <expr><literal type="string">"|"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>vline</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>vline</name></expr></argument>, <argument><expr><name>Color_RESET</name><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>vtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tl_corner</name> <init>= <expr><ternary><condition><expr><name>useUtf8</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>useUtf8Curvy</name></expr> ?</condition><then> <expr><name>RUNECODESTR_CURVE_CORNER_TL</name></expr> </then><else>: <expr><name>RUNECODESTR_CORNER_TL</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tr_corner</name> <init>= <expr><ternary><condition><expr><name>useUtf8</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>useUtf8Curvy</name></expr> ?</condition><then> <expr><name>RUNECODESTR_CURVE_CORNER_TR</name></expr> </then><else>: <expr><name>RUNECODESTR_CORNER_TR</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bl_corner</name> <init>= <expr><ternary><condition><expr><name>useUtf8</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>useUtf8Curvy</name></expr> ?</condition><then> <expr><name>RUNECODESTR_CURVE_CORNER_BL</name></expr> </then><else>: <expr><name>RUNECODESTR_CORNER_BL</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">"`"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>br_corner</name> <init>= <expr><ternary><condition><expr><name>useUtf8</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>useUtf8Curvy</name></expr> ?</condition><then> <expr><name>RUNECODESTR_CURVE_CORNER_BR</name></expr> </then><else>: <expr><name>RUNECODESTR_CORNER_BR</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">"'"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x_mod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>roundcorners</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>row_ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>h</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name>Color_RESET</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>w</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>row</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>roundcorners</name></expr>?</condition><then> <expr><literal type="char">'.'</literal></expr></then><else>: <expr><name><name>tl_corner</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>hline</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>row</name><index>[<expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>roundcorners</name></expr>?</condition><then> <expr><literal type="char">'.'</literal></expr></then><else>: <expr><name><name>tr_corner</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>row</name><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>row_ptr</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x_mod</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>sx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x_mod</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>sx</name></name></expr></argument>, <argument><expr><name>x_mod</name> <operator>+</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row_ptr</name> <operator>+=</operator> <name>x_mod</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>G</name> <argument_list>(<argument><expr><name>x_mod</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>row_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>G</name> <argument_list>(<argument><expr><name>x_mod</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>roundcorners</name></expr>?</condition><then> <expr><literal type="char">'\''</literal></expr></then><else>: <expr><name><name>bl_corner</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>row</name><index>[<expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>roundcorners</name></expr>?</condition><then> <expr><literal type="char">'\''</literal></expr></then><else>: <expr><name><name>br_corner</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>row_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>G</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>vline</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>G</name> <argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>vline</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>vline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name>Color_RESET</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_fill</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>w</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>row</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>row</name><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>G</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_cons_canvas_line</name><parameter_list>(<parameter><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>RCanvasLineStyle</name> <modifier>*</modifier></type><name>style</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>linemode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_line_square</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_line_diagonal</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
