<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\cons\pager.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_regex.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pager_private.h"</cpp:file></cpp:include>

<function><type><name>R_IPI</name> <name>void</name></type> <name>pager_color_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>RStrpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>ml</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m_len</name></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>m_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRegexMatch</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>inv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><call><name>R_CONS_INVERT</name> <argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>,

<macro><name>R_CONS_INVERT</name> <argument_list>(<argument>false</argument>, <argument>true</argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>linv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>inv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>,

<macro><name>strlen</name> <argument_list>(<argument>inv[<literal type="number">1</literal>]</argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strpool_empty</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>ml</argument>, <argument>it</argument>, <argument>m</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_strpool_memcat</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>rm_so</name></name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strpool_memcat</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>inv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>linv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m_len</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>rm_eo</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>rm_so</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>m_addr</name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>rm_so</name></name></expr></argument>, <argument><expr><name>m_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m_addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m_len</name> <operator>=</operator> <call><name>r_str_ansi_filter</name> <argument_list>(<argument><expr><name>m_addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strpool_memcat</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m_addr</name></expr></argument>, <argument><expr><name>m_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strpool_memcat</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>inv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>linv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>rm_eo</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>m_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_strpool_append</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_IPI</name> <name>void</name></type> <name>pager_printpage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier><modifier>*</modifier></type><name>mla</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_clear00</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>to</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RStrpool</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_strpool_new</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>from</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>to</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>pager_color_line</name> <argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name><name>index</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>mla</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strpool_ansi_chop</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_reset_colors</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_strpool_free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_IPI</name> <name>int</name></type> <name>pager_next_match</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier><modifier>*</modifier></type><name>mla</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lcount</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;</operator> <name>lcount</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>from</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>lcount</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_list_first</name> <argument_list>(<argument><expr><name><name>mla</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>from</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_IPI</name> <name>int</name></type> <name>pager_prev_match</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier><modifier>*</modifier></type><name>mla</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>from</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>from</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>l</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_list_first</name> <argument_list>(<argument><expr><name><name>mla</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>from</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_IPI</name> <name>bool</name></type> <name>pager_all_matches</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RRegex</name> <modifier>*</modifier></type><name>rx</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier><modifier>*</modifier></type><name>mla</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lines</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lcount</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRegexMatch</name></type> <name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>slen</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>lcount</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>.</operator><name>rm_so</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>loff</name> <init>= <expr><name>s</name> <operator>+</operator> <name><name>lines</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>clean</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>loff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clean</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>cpos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ncpos</name> <init>= <expr><call><name>r_str_ansi_filter</name> <argument_list>(<argument><expr><name>clean</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpos</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>.</operator><name>rm_eo</name></name> <operator>=</operator> <name>slen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>clean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name><name>mla</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>r_regex_exec</name> <argument_list>(<argument><expr><name>rx</name></expr></argument>, <argument><expr><name>clean</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><name>R_REGEX_STARTEND</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cpos</name> <operator>||</operator> <name><name>m</name><operator>.</operator><name>rm_so</name></name> <operator>&gt;=</operator> <name>ncpos</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RRegexMatch</name> <modifier>*</modifier></type><name>ms</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RRegexMatch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ms</name> <operator>&amp;&amp;</operator> <name>cpos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>rm_so</name></name> <operator>=</operator> <name><name>cpos</name><index>[<expr><name><name>m</name><operator>.</operator><name>rm_so</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>rm_eo</name></name> <operator>=</operator> <name><name>cpos</name><index>[<expr><name><name>m</name><operator>.</operator><name>rm_eo</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>mla</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>.</operator><name>rm_so</name></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>rm_eo</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>.</operator><name>rm_eo</name></name> <operator>=</operator> <name>slen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>clean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_IPI</name> <name>int</name> <modifier>*</modifier></type><name>pager_splitlines</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lines_count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lines_size</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lines</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lines_size</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>lines_size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lines</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>lines_size</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lines</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lines</name><index>[<expr><name>row</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name>lines_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lines_size</name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lines_size</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>lines_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>lines_size</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lines</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lines</name><index>[<expr><name>row</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sidx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>lines_count</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>lines</name></expr>;</return>

</block_content>}</block></function>

</unit>
