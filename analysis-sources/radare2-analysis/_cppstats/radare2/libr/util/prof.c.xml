<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\prof.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_util.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>timeval_subtract</name><parameter_list>(<parameter><decl><type><name>tv</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>tv</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>tv</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>end</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&lt;</operator> <name><name>begin</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nsec</name> <init>= <expr><operator>(</operator><name><name>begin</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>end</name><operator>-&gt;</operator><name>tv_usec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>begin</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>-=</operator> <literal type="number">1000000</literal> <operator>*</operator> <name>nsec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>begin</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>+=</operator> <name>nsec</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>end</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>begin</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&gt;</operator> <literal type="number">1000000</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nsec</name> <init>= <expr><operator>(</operator><name><name>end</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>begin</name><operator>-&gt;</operator><name>tv_usec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>begin</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>+=</operator> <literal type="number">1000000</literal> <operator>*</operator> <name>nsec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>begin</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>-=</operator> <name>nsec</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>end</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>begin</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>end</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>begin</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>end</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>&lt;</operator> <name><name>begin</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_prof_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_prof_t</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>tv</name> <modifier>*</modifier></type><name>begin</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>begin</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>double</name></type> <name>r_prof_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_prof_t</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>tv</name></type> <name>end</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>begin</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>begin</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gettimeofday</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>timeval_subtract</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>diff</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>R_ABS</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>diff</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>diff</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000000.</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>R_ABS</name> <argument_list>(<argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
