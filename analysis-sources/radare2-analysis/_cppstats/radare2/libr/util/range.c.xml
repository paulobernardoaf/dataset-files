<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\range.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>R_API</name> <name>RRange</name> <modifier>*</modifier></type><name>r_range_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RRange</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RRange</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ranges</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>ranges</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_range_free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ranges</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RRange</name> <modifier>*</modifier></type><name>r_range_free</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_range_get_data</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RRangeItem</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_range_item_get</name> <argument_list>(<argument><expr><name>rgs</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>datalen</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>datalen</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_range_set_data</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RRangeItem</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_range_item_get</name> <argument_list>(<argument><expr><name>rgs</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>datalen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>RRangeItem</name> <modifier>*</modifier></type><name>r_range_item_get</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RRangeItem</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>rgs-&gt;ranges</argument>, <argument>iter</argument>, <argument>r</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_range_size</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRangeItem</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>rgs-&gt;ranges</argument>, <argument>iter</argument>, <argument>r</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>sum</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RRange</name> <modifier>*</modifier></type><name>r_range_new_from_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name> <init>= <expr><call><name>r_range_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_range_add_from_string</name> <argument_list>(<argument><expr><name>rgs</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rgs</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_range_add_from_string</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>addr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ostr</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ostr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name> <operator>=</operator> <name>ostr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">','</literal></expr>:</case>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>addr2</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_range_add</name><argument_list>(<argument><expr><name>rgs</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addr2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_range_add</name> <argument_list>(<argument><expr><name>rgs</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>addr2</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_range_add</name> <argument_list>(<argument><expr><name>rgs</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addr2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_range_add</name> <argument_list>(<argument><expr><name>rgs</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ostr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>rgs</name></expr>?</condition><then> <expr><name><name>rgs</name><operator>-&gt;</operator><name>changed</name></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

update to new one update fr update fr/to ignore

|______| |___| |_____| |____| |_______| range_t

+ |______| + |__| + |___| + |_________| + |__| fr/to

------------ ----------- ----------- ------------- -----------

= |_________| = |___||__| = |_______| = |_________| |_______| result

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>RRangeItem</name> <modifier>*</modifier></type><name>r_range_add</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>fr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRangeItem</name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>add</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_num_minmax_swap</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>rgs-&gt;ranges</argument>, <argument>iter</argument>, <argument>r</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>==</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>==</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>add</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&lt;=</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&lt;=</operator> <name>to</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;=</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;=</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&gt;=</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&lt;=</operator> <name>to</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;=</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;=</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>=</operator> <name>fr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&lt;=</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&lt;=</operator> <name>to</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;=</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;=</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>add</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&gt;=</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&lt;=</operator> <name>to</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;=</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;=</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>=</operator> <name>fr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>rw</name> <operator>&amp;&amp;</operator> <name>add</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr><name>RRangeItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>fr</name></name> <operator>=</operator> <name>fr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>datalen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>rgs</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgs</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

update to ignore update fr delete split

|______| |___| |_____| |____| |________| range_t

- |______| - |__| - |___| - |_________| - |__| fr/to

------------ ----------- ----------- ------------- ------------

= |__| = = |___| = |__| |__| result

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>R_API</name> <name>int</name></type> <name>r_range_sub</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>fr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RRangeItem</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_num_minmax_swap</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>__reloop</name>:</label>

<macro><name>r_list_foreach</name> <argument_list>(<argument>rgs-&gt;ranges</argument>, <argument>iter</argument>, <argument>r</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&lt;</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&lt;</operator> <name>to</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>fr</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&gt;</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&lt;</operator> <name>to</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&gt;</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&lt;</operator> <name>to</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name><name>rgs</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgs</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>__reloop</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&lt;</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&lt;</operator> <name>to</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>fr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_range_add</name> <argument_list>(<argument><expr><name>rgs</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>to</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>__reloop</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

R_API void r_range_merge(RRange *rgs, RRange *r) {

RListIter *iter;

RRangeItem *r;

r_list_foreach (rgs-&gt;ranges, iter, r)

r_range_add (rgs, r-&gt;fr, r-&gt;to, 0);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>R_API</name> <name>int</name></type> <name>r_range_contains</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RRangeItem</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>rgs-&gt;ranges</argument>, <argument>iter</argument>, <argument>r</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;=</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_ranges</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RRangeItem</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><operator>(</operator><name>RRangeItem</name> <operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRangeItem</name> <modifier>*</modifier></type><name>second</name> <init>= <expr><operator>(</operator><name>RRangeItem</name> <operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>first</name><operator>-&gt;</operator><name>fr</name></name> <operator>&gt;</operator> <name><name>second</name><operator>-&gt;</operator><name>fr</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_range_sort</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ch</name> <init>= <expr><name><name>rgs</name><operator>-&gt;</operator><name>ranges</name><operator>-&gt;</operator><name>sorted</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rgs</name><operator>-&gt;</operator><name>changed</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rgs</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name><name>rgs</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><operator>(</operator><name>RListComparator</name><operator>)</operator><name>cmp_ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <name><name>rgs</name><operator>-&gt;</operator><name>ranges</name><operator>-&gt;</operator><name>sorted</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rgs</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>rgs</name><operator>-&gt;</operator><name>changed</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_range_percent</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRangeItem</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>seek</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>dif</name></decl>, <decl><type ref="prev"/><name>fr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>to</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>rgs-&gt;ranges</argument>, <argument>iter</argument>, <argument>r</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">65</literal></expr> ;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dif</name> <operator>=</operator> <name>to</name> <operator>-</operator> <name>fr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dif</name> <operator>&lt;</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name>dif</name> <operator>/</operator> <name>w</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name>fr</name> <operator>=</operator> <name>to</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>seek</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" ["</literal></expr></argument>, <argument><expr><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_range_contains</name> <argument_list>(<argument><expr><name>rgs</name></expr></argument>, <argument><expr><name>seek</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>seek</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"] 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>r_range_list</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rad</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRangeItem</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_range_sort</name> <argument_list>(<argument><expr><name>rgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>rgs-&gt;ranges</argument>, <argument>iter</argument>, <argument>r</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rad</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"ar+ 0x%08"</literal><name>PFMT64x</name><literal type="string">" 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>fr</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" 0x%08"</literal><name>PFMT64x</name><literal type="string">" ; %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>fr</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>to</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>to</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Total bytes: %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>r_range_get_n</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRangeItem</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_range_sort</name> <argument_list>(<argument><expr><name>rgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>rgs-&gt;ranges</argument>, <argument>iter</argument>, <argument>r</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>fr</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

.....|______________________|...

|_____| |____| |_______|

---------------------------------

|__| |__| |_|

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>RRange</name> <modifier>*</modifier></type><name>r_range_inverse</name><parameter_list>(<parameter><decl><type><name>RRange</name> <modifier>*</modifier></type><name>rgs</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>fr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRangeItem</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRange</name> <modifier>*</modifier></type><name>newrgs</name> <init>= <expr><call><name>r_range_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_range_sort</name><argument_list>(<argument><expr><name>rgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>rgs-&gt;ranges</argument>, <argument>iter</argument>, <argument>r</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&gt;</operator> <name>fr</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>&lt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_range_add</name> <argument_list>(<argument><expr><name>newrgs</name></expr></argument>, <argument><expr><name>fr</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>fr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>fr</name></name> <operator>-</operator> <name>fr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>to</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>&lt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_range_add</name> <argument_list>(<argument><expr><name>newrgs</name></expr></argument>, <argument><expr><name>fr</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <operator>(</operator><name>to</name> <operator>-</operator> <name>fr</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>newrgs</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_range_overlap</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>a0</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>*</operator><name>d</name> <operator>=</operator> <operator>(</operator><name>b0</name> <operator>-</operator> <name>a0</name><operator>)</operator></expr><operator>,</operator> <expr><operator>!</operator><operator>(</operator><name><name>a1</name> <argument_list type="generic">&lt; <argument><expr><name>b0</name> <operator>||</operator> <name>a0</name></expr></argument> &gt;</argument_list></name> <name>b1</name><operator>)</operator></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (a1&lt;b0 || a0&gt;b1)

return 0;

return (b0-a0);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
