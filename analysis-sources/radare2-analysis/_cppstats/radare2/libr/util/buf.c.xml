<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\buf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{

<decl><name>R_BUFFER_FILE</name></decl>,

<decl><name>R_BUFFER_IO</name></decl>,

<decl><name>R_BUFFER_BYTES</name></decl>,

<decl><name>R_BUFFER_MMAP</name></decl>,

<decl><name>R_BUFFER_SPARSE</name></decl>,

<decl><name>R_BUFFER_REF</name></decl>,

}</block></enum></type> <name>RBufferType</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buf_file.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buf_sparse.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buf_bytes.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buf_mmap.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buf_io.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buf_ref.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>buf_init</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>init</name></name></expr>?</condition><then> <expr><call><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>init</name></name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>buf_fini</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>fini</name></name></expr>?</condition><then> <expr><call><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>fini</name></name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>buf_get_size</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>get_size</name></name></expr>?</condition><then> <expr><call><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>get_size</name></name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>UT64_MAX</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st64</name></type> <name>buf_read</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>read</name></name></expr>?</condition><then> <expr><call><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>read</name></name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st64</name></type> <name>buf_write</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>write</name></name></expr>?</condition><then> <expr><call><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>write</name></name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st64</name></type> <name>buf_seek</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>seek</name></name></expr>?</condition><then> <expr><call><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>seek</name></name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>buf_resize</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>newsize</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>resize</name></name></expr>?</condition><then> <expr><call><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>resize</name></name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name> <modifier>*</modifier></type><name>get_whole_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>get_whole_buf</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>get_whole_buf</name></name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>bsz</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bsz</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>whole_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>whole_buf</name></name> <operator>=</operator> <call><name>R_NEWS</name> <argument_list>(<argument><expr><name>ut8</name></expr></argument>, <argument><expr><name>bsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>whole_buf</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>whole_buf</name></name></expr></argument>, <argument><expr><name>bsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sz</name> <operator>=</operator> <name>bsz</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>whole_buf</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBuffer</name> <modifier>*</modifier></type><name>new_buffer</name><parameter_list>(<parameter><decl><type><name>RBufferType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBuffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_BUFFER_BYTES</name></expr>:</case>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>methods</name></name> <operator>=</operator> <operator>&amp;</operator><name>buffer_bytes_methods</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_BUFFER_MMAP</name></expr>:</case>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>methods</name></name> <operator>=</operator> <operator>&amp;</operator><name>buffer_mmap_methods</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_BUFFER_SPARSE</name></expr>:</case>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>methods</name></name> <operator>=</operator> <operator>&amp;</operator><name>buffer_sparse_methods</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_BUFFER_FILE</name></expr>:</case>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>methods</name></name> <operator>=</operator> <operator>&amp;</operator><name>buffer_file_methods</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_BUFFER_IO</name></expr>:</case>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>methods</name></name> <operator>=</operator> <operator>&amp;</operator><name>buffer_io_methods</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_BUFFER_REF</name></expr>:</case>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>methods</name></name> <operator>=</operator> <operator>&amp;</operator><name>buffer_ref_methods</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_warn_if_reached</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>buf_init</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBuffer</name> <modifier>*</modifier></type><name>r_buf_new_with_io</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iob</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>iob</name> <operator>&amp;&amp;</operator> <name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>buf_io_user</name></name></type> <name>u</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>iob</name></name> <operator>=</operator> <operator>(</operator><name>RIOBind</name> <operator>*</operator><operator>)</operator><name>iob</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<return>return <expr><call><name>new_buffer</name> <argument_list>(<argument><expr><name>R_BUFFER_IO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBuffer</name> <modifier>*</modifier></type><name>r_buf_new_with_pointers</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>steal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>buf_bytes_user</name></name></type> <name>u</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>data_steal</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>steal</name></name> <operator>=</operator> <name>steal</name></expr>;</expr_stmt>

<return>return <expr><call><name>new_buffer</name> <argument_list>(<argument><expr><name>R_BUFFER_BYTES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBuffer</name> <modifier>*</modifier></type><name>r_buf_new_empty</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>ut8</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>buf_bytes_user</name></name></type> <name>u</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>data_steal</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>steal</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>new_buffer</name> <argument_list>(<argument><expr><name>R_BUFFER_BYTES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBuffer</name> <modifier>*</modifier></type><name>r_buf_new_with_bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>buf_bytes_user</name></name></type> <name>u</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><call><name>new_buffer</name> <argument_list>(<argument><expr><name>R_BUFFER_BYTES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBuffer</name> <modifier>*</modifier></type><name>r_buf_new_slice</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>buf_ref_user</name></name></type> <name>u</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><call><name>new_buffer</name> <argument_list>(<argument><expr><name>R_BUFFER_REF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBuffer</name> <modifier>*</modifier></type><name>r_buf_new_with_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_buf_new_with_bytes</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBuffer</name> <modifier>*</modifier></type><name>r_buf_new_with_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_buf_data</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_buf_new_with_bytes</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBuffer</name> <modifier>*</modifier></type><name>r_buf_new_sparse</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>Oxff</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>new_buffer</name> <argument_list>(<argument><expr><name>R_BUFFER_SPARSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>Oxff_priv</name></name> <operator>=</operator> <name>Oxff</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBuffer</name> <modifier>*</modifier></type><name>r_buf_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>buf_bytes_user</name></name></type> <name>u</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>new_buffer</name> <argument_list>(<argument><expr><name>R_BUFFER_BYTES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>r_buf_data</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>whole_buf</name></name> <operator>=</operator> <call><name>get_whole_buf</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>whole_buf</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_buf_size</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>buf_get_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBuffer</name> <modifier>*</modifier></type><name>r_buf_new_mmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>buf_mmap_user</name></name></type> <name>u</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>filename</name></name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>perm</name></name> <operator>=</operator> <name>perm</name></expr>;</expr_stmt>

<return>return <expr><call><name>new_buffer</name> <argument_list>(<argument><expr><name>R_BUFFER_MMAP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBuffer</name> <modifier>*</modifier></type><name>r_buf_new_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>buf_file_user</name></name></type> <name>u</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>perm</name></name> <operator>=</operator> <name>perm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<return>return <expr><call><name>new_buffer</name> <argument_list>(<argument><expr><name>R_BUFFER_FILE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBuffer</name> <modifier>*</modifier></type><name>r_buf_new_slurp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>buf_bytes_user</name></name></type> <name>u</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>data_steal</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>steal</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><call><name>new_buffer</name> <argument_list>(<argument><expr><name>R_BUFFER_BYTES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_buf_dump</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name> <operator>||</operator> <operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>tmpsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_buf_data</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_file_dump</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmpsz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>st64</name></type> <name>r_buf_seek</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_buf_tell</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BUF_CUR</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_buf_set_bytes</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>readonly</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_buf_resize</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_buf_append_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_buf_prepend_bytes</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>readonly</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_buf_insert_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_buf_to_string</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>sz</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>sz</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_buf_append_bytes</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>readonly</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BUF_END</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_buf_write</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_buf_append_nbytes</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>readonly</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>ut8</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>r_buf_append_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>st64</name></type> <name>r_buf_insert_bytes</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>readonly</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BUF_CUR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>restore_pos</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>R_NEWS</name> <argument_list>(<argument><expr><name>ut8</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>free_tmp</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>tmp_length</name> <init>= <expr><name>r</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_buf_resize</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>sz</name> <operator>+</operator> <name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>free_tmp</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name>length</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>free_tmp</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_write</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>free_tmp</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>free_tmp</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_write</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>free_tmp</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>restore_pos</name>:</label>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_buf_append_ut16</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>readonly</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_buf_append_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_buf_append_ut32</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>readonly</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_buf_append_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_buf_append_ut64</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>readonly</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_buf_append_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_buf_append_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>readonly</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_buf_data</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_buf_append_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_buf_append_buf_slice</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>readonly</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>R_NEWS</name> <argument_list>(<argument><expr><name>ut8</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_buf_append_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_buf_get_string</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MIN_RES_SZ</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>R_NEWS</name> <argument_list>(<argument><expr><name>ut8</name></expr></argument>, <argument><expr><name>MIN_RES_SZ</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>MIN_RES_SZ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>null_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>needle</name> <init>= <expr><call><name>r_mem_mem</name> <argument_list>(<argument><expr><name>res</name> <operator>+</operator> <name>sz</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><literal type="string">"\x00"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>needle</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sz</name> <operator>+=</operator> <operator>(</operator><name>needle</name> <operator>-</operator> <operator>(</operator><name>res</name> <operator>+</operator> <name>sz</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>null_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>restmp</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>sz</name> <operator>+</operator> <name>MIN_RES_SZ</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>restmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>restmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>res</name> <operator>+</operator> <name>sz</name></expr></argument>, <argument><expr><name>MIN_RES_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>null_found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>st64</name></type> <name>r_buf_read</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>r</name> <init>= <expr><call><name>buf_read</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>r</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>Oxff_priv</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>st64</name></type> <name>r_buf_write</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>readonly</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>buf_write</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name></type> <name>r_buf_read8</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>r</name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></sizeof></expr>?</condition><then> <expr><name>res</name></expr></then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>Oxff_priv</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name></type> <name>r_buf_read8_at</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>r</name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></sizeof></expr>?</condition><then> <expr><name>res</name></expr></then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>Oxff_priv</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st64</name></type> <name>buf_format</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>st64</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tsize</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bigendian</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>fmt</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>fmt</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>

<case>case <expr><literal type="char">'1'</literal></expr>:</case>

<case>case <expr><literal type="char">'2'</literal></expr>:</case>

<case>case <expr><literal type="char">'3'</literal></expr>:</case>

<case>case <expr><literal type="char">'4'</literal></expr>:</case>

<case>case <expr><literal type="char">'5'</literal></expr>:</case>

<case>case <expr><literal type="char">'6'</literal></expr>:</case>

<case>case <expr><literal type="char">'7'</literal></expr>:</case>

<case>case <expr><literal type="char">'8'</literal></expr>:</case>

<case>case <expr><literal type="char">'9'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fmt</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>tsize</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>bigendian</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case> <expr_stmt><expr><name>tsize</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>bigendian</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> <expr_stmt><expr><name>tsize</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <expr_stmt><expr><name>bigendian</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'I'</literal></expr>:</case> <expr_stmt><expr><name>tsize</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <expr_stmt><expr><name>bigendian</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><name>tsize</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name>bigendian</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case> <expr_stmt><expr><name>tsize</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name>bigendian</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>tsize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>bigendian</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>tmp</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>d1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>d2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>d3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>d4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>tsize</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>tsize</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <call><name>r_read_ble8</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_write</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>d1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>d2</name> <operator>=</operator> <call><name>r_read_ble16</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_write</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>d2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>d3</name> <operator>=</operator> <call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_write</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>d3</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name>d4</name> <operator>=</operator> <call><name>r_read_ble64</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_write</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>d4</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bigendian</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>st64</name></type> <name>r_buf_fread</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name>fmt</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>r_buf_new_with_pointers</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>res</name> <init>= <expr><call><name>buf_format</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>st64</name></type> <name>r_buf_fread_at</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name>fmt</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>o_addr</name> <init>= <expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BUF_CUR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_fread</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>o_addr</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>st64</name></type> <name>r_buf_fwrite</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name>fmt</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>readonly</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>r_buf_new_with_pointers</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>res</name> <init>= <expr><call><name>buf_format</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>st64</name></type> <name>r_buf_fwrite_at</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name>fmt</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>readonly</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>o_addr</name> <init>= <expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BUF_CUR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>r</name> <init>= <expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_fwrite</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>o_addr</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>st64</name></type> <name>r_buf_read_at</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>o_addr</name> <init>= <expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BUF_CUR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>r</name> <init>= <expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>o_addr</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>st64</name></type> <name>r_buf_write_at</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>readonly</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>o_addr</name> <init>= <expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BUF_CUR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>r</name> <init>= <expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_write</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>o_addr</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_buf_fini</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>refctr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>refctr</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>get_whole_buf</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>free_whole_buf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>free_whole_buf</name></name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>whole_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>buf_fini</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_buf_free</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fini</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>st64</name></type> <name>r_buf_append_string</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name>str</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>readonly</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_buf_append_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_buf_resize</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>newsize</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>buf_resize</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBuffer</name> <modifier>*</modifier></type><name>r_buf_ref</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>refctr</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_buf_nonempty_list</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>nonempty_list</name></name></expr>?</condition><then> <expr><call><name><name>b</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>nonempty_list</name></name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>st64</name></type> <name>r_buf_uleb128</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>c</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>data</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>st64</name></type> <name>r_buf_sleb128</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>st64</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>st64</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>value</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>st64</name></type> <name>chunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <name>value</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><name>chunk</name> <operator>&lt;&lt;</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>value</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>~</operator><literal type="number">0ULL</literal> <operator>&lt;&lt;</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>offset</name> <operator>/</operator> <literal type="number">7</literal></expr>;</return>

</block_content>}</block></function>

</unit>
