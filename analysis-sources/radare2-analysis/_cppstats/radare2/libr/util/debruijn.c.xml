<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\debruijn.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>debruijn_charset</name> <init>= <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>de_bruijn_seq</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>prenecklace_len_t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lyndon_prefix_len_p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>prenecklace_a</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>sequence</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>charset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>charset</name> <operator>||</operator> <operator>!</operator><name>sequence</name> <operator>||</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>sequence</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>maxlen</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prenecklace_len_t</name> <operator>&gt;</operator> <name>order</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>order</name> <operator>%</operator> <name>lyndon_prefix_len_p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>lyndon_prefix_len_p</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sequence</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name><name>charset</name><index>[<expr><name><name>prenecklace_a</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>sequence</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>maxlen</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>prenecklace_a</name><index>[<expr><name>prenecklace_len_t</name></expr>]</index></name> <operator>=</operator>

<name><name>prenecklace_a</name><index>[<expr><name>prenecklace_len_t</name> <operator>-</operator> <name>lyndon_prefix_len_p</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>de_bruijn_seq</name><argument_list>(<argument><expr><name>prenecklace_len_t</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lyndon_prefix_len_p</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>,

<argument><expr><name>size</name></expr></argument>, <argument><expr><name>prenecklace_a</name></expr></argument>, <argument><expr><name>sequence</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>prenecklace_a</name><index>[<expr><name>prenecklace_len_t</name> <operator>-</operator> <name>lyndon_prefix_len_p</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init>

<condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>prenecklace_a</name><index>[<expr><name>prenecklace_len_t</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>de_bruijn_seq</name> <argument_list>(<argument><expr><name>prenecklace_len_t</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>prenecklace_len_t</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>,

<argument><expr><name>size</name></expr></argument>, <argument><expr><name>prenecklace_a</name></expr></argument>, <argument><expr><name>sequence</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>de_bruijn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>charset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>charset</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>prenecklace_a</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name>size</name> <operator>*</operator> <name>order</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prenecklace_a</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>sequence</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name>maxlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sequence</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>prenecklace_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>de_bruijn_seq</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>prenecklace_a</name></expr></argument>, <argument><expr><name>sequence</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>prenecklace_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sequence</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name><modifier>*</modifier></type> <name>r_debruijn_pattern</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>charset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pat</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pat2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>charset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>charset</name> <operator>=</operator> <name>debruijn_charset</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>de_bruijn</name> <argument_list>(<argument><expr><name>charset</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> , <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pat</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"warning: requested pattern of length %d, "</literal>

<literal type="string">"generated length %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pat</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pat2</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pat2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>pat2</name></expr></argument>, <argument><expr><name>pat</name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat2</name><index>[<expr><name>size</name><operator>-</operator><name>start</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>pat2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"warning: requested pattern of length %d, "</literal>

<literal type="string">"generated length %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>size</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pat2</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_debruijn_offset</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_big_endian</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>needle</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pattern</name></decl>, <decl><type ref="prev"/><name><name>buf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>lens</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x1000</literal></expr>, <expr><literal type="number">0x10000</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <call><name>r_debruijn_pattern</name> <argument_list>(<argument><expr><name><name>lens</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>debruijn_charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_big_endian</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_be64</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_write_le64</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>needle</name> <operator>=</operator> <name>buf</name></expr>;</init> <condition><expr><operator>!</operator><operator>*</operator><name>needle</name></expr>;</condition> <incr><expr><name>needle</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

</block_content>}</block></for>

<expr_stmt><expr><name>pch</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>needle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>pch</name> <operator>-</operator> <name>pattern</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

</unit>
