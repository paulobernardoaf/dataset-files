<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\date.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_util/r_print.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_util/r_date.h"</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_time_stamp_to_str</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>timeStamp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>time_t</name></type> <name>rawtime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tminfo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rawtime</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name>timeStamp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tminfo</name> <operator>=</operator> <call><name>localtime</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rawtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_str_trim_dup</name> <argument_list>(<argument><expr><call><name>asctime</name> <argument_list>(<argument><expr><name>tminfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<struct>struct <name>my_timezone</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>tz_minuteswest</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tz_dsttime</name></decl>;</decl_stmt> 

}</block> <decl><name>tz</name></decl>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gmtoff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>ts</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator> <name>timeStamp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gettimeofday</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gmtoff</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>tz</name><operator>.</operator><name>tz_minuteswest</name></name> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>ts</name> <operator>+=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name>gmtoff</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><call><name>ctime</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut32</name></type> <name>r_dos_time_stamp_to_posix</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>timeStamp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>date</name> <init>= <expr><name>timeStamp</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut16</name></type> <name>time</name> <init>= <expr><name>timeStamp</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>year</name> <init>= <expr><operator>(</operator><operator>(</operator><name>date</name> <operator>&amp;</operator> <literal type="number">0xfe00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>+</operator> <literal type="number">1980</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>month</name> <init>= <expr><operator>(</operator><name>date</name> <operator>&amp;</operator> <literal type="number">0x01e0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>day</name> <init>= <expr><name>date</name> <operator>&amp;</operator> <literal type="number">0x001f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>hour</name> <init>= <expr><operator>(</operator><name>time</name> <operator>&amp;</operator> <literal type="number">0xf800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>minutes</name> <init>= <expr><operator>(</operator><name>time</name> <operator>&amp;</operator> <literal type="number">0x07e0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>seconds</name> <init>= <expr><operator>(</operator><name>time</name> <operator>&amp;</operator> <literal type="number">0x001f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>t</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name>year</name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <ternary><condition><expr><name>month</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>month</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>month</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <ternary><condition><expr><name>day</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>day</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <name>hour</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <name>minutes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name>seconds</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>epochTime</name> <init>= <expr><call><name>mktime</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>ut32</name><operator>)</operator> <name>epochTime</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_time_stamp_is_dos_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>certainPosixTimeStamp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>possiblePosixOrDosTimeStamp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>certainPosixTimeStamp</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>possiblePosixOrDosTimeStamp</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_print_date_dos</name><parameter_list>(<parameter><decl><type><name>RPrint</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>dt</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>r_time_stamp_to_str</name> <argument_list>( <argument><expr><call><name>r_dos_time_stamp_to_posix</name> <argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_print_date_hfs</name><parameter_list>(<parameter><decl><type><name>RPrint</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hfs_unix_delta</name> <init>= <expr><literal type="number">2082844800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>datefmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>datezone</name></name> <operator>*</operator> <operator>(</operator><literal type="number">60</literal><operator>*</operator><literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>hfs_unix_delta</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>r_time_stamp_to_str</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_print_date_unix</name><parameter_list>(<parameter><decl><type><name>RPrint</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>datefmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>datezone</name></name> <operator>*</operator> <operator>(</operator><literal type="number">60</literal><operator>*</operator><literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>datestr</name> <init>= <expr><call><name>r_time_stamp_to_str</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>datestr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>datestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>datestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_print_date_get_now</name><parameter_list>(<parameter><decl><type><name>RPrint</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_time_stamp_to_str</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_print_date_w32</name><parameter_list>(<parameter><decl><type><name>RPrint</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>L</name> <init>= <expr><literal type="number">0x2b6109100LL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>r_read_ble64</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>/=</operator> <literal type="number">10000000</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>l</name> <operator>&gt;</operator> <name>L</name></expr> ?</condition><then> <expr><name>l</name><operator>-</operator><name>L</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <name>l</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>datefmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>r_time_stamp_to_str</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_time_to_string</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>ts</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<return>return <expr><call><name>r_time_stamp_to_str</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
