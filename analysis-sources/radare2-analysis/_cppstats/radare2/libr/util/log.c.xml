<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\log.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_CONFIGSTR_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_OUTPUTBUF_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>log_cbs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cfg_loglvl</name> <init>= <expr><name>R_LOGLVL_ERROR</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cfg_logtraplvl</name> <init>= <expr><name>R_LOGLVL_FATAL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>cfg_logsrcinfo</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>cfg_logcolors</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>cfg_logfile</name><index>[<expr><name>LOG_CONFIGSTR_SIZE</name></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>level_tags</name><index>[]</index></name> <init>= <expr><block>{ 

<expr><index>[<expr><name>R_LOGLVL_SILLY</name></expr>]</index> <operator>=</operator> <literal type="string">"SILLY"</literal></expr>,

<expr><index>[<expr><name>R_LOGLVL_VERBOSE</name></expr>]</index> <operator>=</operator> <literal type="string">"VERBOSE"</literal></expr>,

<expr><index>[<expr><name>R_LOGLVL_DEBUG</name></expr>]</index> <operator>=</operator> <literal type="string">"DEBUG"</literal></expr>,

<expr><index>[<expr><name>R_LOGLVL_INFO</name></expr>]</index> <operator>=</operator> <literal type="string">"INFO"</literal></expr>,

<expr><index>[<expr><name>R_LOGLVL_WARN</name></expr>]</index> <operator>=</operator> <literal type="string">"WARNING"</literal></expr>,

<expr><index>[<expr><name>R_LOGLVL_ERROR</name></expr>]</index> <operator>=</operator> <literal type="string">"ERROR"</literal></expr>,

<expr><index>[<expr><name>R_LOGLVL_FATAL</name></expr>]</index> <operator>=</operator> <literal type="string">"FATAL"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>void</name></type> <name>r_log_set_level</name><parameter_list>(<parameter><decl><type><name>RLogLevel</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>cfg_loglvl</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_log_set_traplevel</name><parameter_list>(<parameter><decl><type><name>RLogLevel</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>cfg_logtraplvl</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_log_set_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>value_len</name> <init>= <expr><call><name>r_str_nlen</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>LOG_CONFIGSTR_SIZE</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>cfg_logfile</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_log_set_srcinfo</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>show_info</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>cfg_logsrcinfo</name> <operator>=</operator> <name>show_info</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_log_set_colors</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>show_info</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>cfg_logcolors</name> <operator>=</operator> <name>show_info</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_log_add_callback</name><parameter_list>(<parameter><decl><type><name>RLogCallback</name></type> <name>cbfunc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>log_cbs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>log_cbs</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>log_cbs</name></expr></argument>, <argument><expr><name>cbfunc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>log_cbs</name></expr></argument>, <argument><expr><name>cbfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_log_del_callback</name><parameter_list>(<parameter><decl><type><name>RLogCallback</name></type> <name>cbfunc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>log_cbs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name>log_cbs</name></expr></argument>, <argument><expr><name>cbfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_vlog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name>ut32</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>RLogLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmtstr</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>args_copy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_copy</name> <argument_list>(<argument><expr><name>args_copy</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <name>cfg_loglvl</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>&lt;</operator> <name>cfg_logtraplvl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>args_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>output_buf</name><index>[<expr><name>LOG_OUTPUTBUF_SIZE</name></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <ternary><condition><expr><call><name>R_BETWEEN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><call><name>R_ARRAY_SIZE</name> <argument_list>(<argument><expr><name>level_tags</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><name><name>level_tags</name><index>[<expr><name>level</name></expr>]</index></name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>output_buf</name></expr></argument>, <argument><expr><name>LOG_OUTPUTBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cfg_logsrcinfo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>output_buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>LOG_OUTPUTBUF_SIZE</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"%s in %s:%i: "</literal></expr></argument>, <argument><expr><name>funcname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vsnprintf</name> <argument_list>(<argument><expr><name>output_buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>LOG_OUTPUTBUF_SIZE</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>fmtstr</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>log_cbs</name> <operator>&amp;&amp;</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name>log_cbs</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RLogCallback</name></type> <name>cb</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>log_cbs</argument>, <argument>it</argument>, <argument>cb</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>cb</name> <argument_list>(<argument><expr><name>output_buf</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fmtstr</name></expr></argument>, <argument><expr><name>args_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>output_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>args_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg_logfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>r_sandbox_fopen</name> <argument_list>(<argument><expr><name>cfg_logfile</name></expr></argument>, <argument><expr><literal type="string">"a+"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>r_sandbox_fopen</name> <argument_list>(<argument><expr><name>cfg_logfile</name></expr></argument>, <argument><expr><literal type="string">"w+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>output_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s failed to write to file: %s\n"</literal></expr></argument>, <argument><expr><name>MACRO_LOG_FUNC</name></expr></argument>, <argument><expr><name>cfg_logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>cfg_logtraplvl</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>!=</operator> <name>R_LOGLVL_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sys_breakpoint</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_log</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name>ut32</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>RLogLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmtstr</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmtstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vlog</name> <argument_list>(<argument><expr><name>funcname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>fmtstr</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
