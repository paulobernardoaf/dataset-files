<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\qrcode.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_qrcode.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getTextProperties</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isNumeric</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isAlphanumeric</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>textBits</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fitVersionToData</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>minVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxVersion</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>qrcodegen_Ecc</name></name></type> <name>ecl</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dataLen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dataBitLen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ver1To9LenBits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ver10To26LenBits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ver27To40LenBits</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>encodeQrCodeTail</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name><name>dataAndQrcode</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitLen</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>tempBuffer</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>qrcodegen_Ecc</name></name></type> <name>ecl</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>qrcodegen_Mask</name></name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>boostEcl</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>appendBitsToBuffer</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numBits</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>buffer</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bitLen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>appendErrorCorrection</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name><name>data</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>qrcodegen_Ecc</name></name></type> <name>ecl</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>result</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getNumDataCodewords</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>qrcodegen_Ecc</name></name></type> <name>ecl</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getNumRawDataModules</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>calcReedSolomonGenerator</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>degree</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>result</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>calcReedSolomonRemainder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>data</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dataLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>generator</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>degree</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>result</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ut8</name></type> <name>finiteFieldMultiply</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>initializeFunctionModules</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>drawWhiteFunctionModules</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>drawFormatBits</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>qrcodegen_Ecc</name></name></type> <name>ecl</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>qrcodegen_Mask</name></name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getAlignmentPatternPositions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>result</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fillRectangle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>drawCodewords</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>data</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dataLen</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>applyMask</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>functionModules</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>qrcodegen_Mask</name></name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>long</name></type> <name>getPenaltyScore</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>getModule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>setModule</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBlack</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setModuleBounded</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBlack</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>qrcodegen_getSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>qrcodegen_getModule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ALPHANUMERIC_CHARSET</name> <init>= <expr><literal type="string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>ECC_CODEWORDS_PER_BLOCK</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">41</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>NUM_ERROR_CORRECTION_BLOCKS</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">41</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">49</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">68</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">81</literal></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>PENALTY_N1</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>PENALTY_N2</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>PENALTY_N3</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>PENALTY_N4</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_qrcode_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>tempBuffer</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>qrcodegen_Ecc</name></name></type> <name>ecl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxVersion</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>qrcodegen_Mask</name></name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>boostEcl</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name> <operator>||</operator> <operator>!</operator><name>tempBuffer</name> <operator>||</operator> <operator>!</operator><name>qrcode</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>minVersion</name> <argument_list type="generic">&lt; <argument><expr><name>qrcodegen_VERSION_MIN</name> <operator>||</operator> <name>minVersion</name></expr></argument> &gt;</argument_list></name> <name>qrcodegen_VERSION_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>maxVersion</name> <argument_list type="generic">&lt; <argument><expr><name>qrcodegen_VERSION_MIN</name> <operator>||</operator> <name>maxVersion</name></expr></argument> &gt;</argument_list></name> <name>qrcodegen_VERSION_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ecl</name> <argument_list type="generic">&lt; <argument><expr><name>qrcodegen_Ecc_LOW</name> <operator>||</operator> <name>ecl</name></expr></argument> &gt;</argument_list></name> <name>qrcodegen_Ecc_HIGH</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mask</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>mask</name></expr></argument> &gt;</argument_list></name> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>qrcode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isNumeric</name></decl>, <decl><type ref="prev"/><name>isAlphanumeric</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>textBits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>textLen</name> <init>= <expr><call><name>getTextProperties</name> <argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNumeric</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isAlphanumeric</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>textBits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>textLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isAlphanumeric</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>textLen</name> <operator>&gt;</operator> <call><name>qrcodegen_BUFFER_LEN_FOR_VERSION</name> <argument_list>(<argument><expr><name>maxVersion</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>textLen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>tempBuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>r_qrcode_bin</name> <argument_list>(<argument><expr><name>tempBuffer</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>textLen</name></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>ecl</name></expr></argument>, <argument><expr><name>minVersion</name></expr></argument>, <argument><expr><name>maxVersion</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>boostEcl</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><call><name>fitVersionToData</name> <argument_list>(<argument><expr><name>minVersion</name></expr></argument>, <argument><expr><name>maxVersion</name></expr></argument>, <argument><expr><name>ecl</name></expr></argument>, <argument><expr><name>textLen</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>textBits</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>isNumeric</name></expr>?</condition><then> <expr><literal type="number">10</literal></expr></then><else>: <expr><literal type="number">9</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>isNumeric</name></expr>?</condition><then> <expr><literal type="number">12</literal></expr></then><else>: <expr><literal type="number">11</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>isNumeric</name></expr>?</condition><then> <expr><literal type="number">14</literal></expr></then><else>: <expr><literal type="number">13</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>qrcodegen_BUFFER_LEN_FOR_VERSION</name> <argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>qrcode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>isNumeric</name> <operator>&amp;&amp;</operator> <name>textLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>appendBitsToBuffer</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lengthBits</name> <init>= <expr><ternary><condition><expr><name>version</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>?</condition><then> <expr><literal type="number">10</literal></expr></then><else>: <expr><operator>(</operator><ternary><condition><expr><name>version</name> <operator>&lt;=</operator> <literal type="number">26</literal></expr>?</condition><then> <expr><literal type="number">12</literal></expr></then><else>: <expr><literal type="number">14</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>appendBitsToBuffer</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>textLen</name></expr></argument>, <argument><expr><name>lengthBits</name></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>accumData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>accumCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>text</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>accumData</name> <operator>=</operator> <name>accumData</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>accumCount</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>accumCount</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>appendBitsToBuffer</name> <argument_list>(<argument><expr><name>accumData</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>accumData</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>accumCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>accumCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>appendBitsToBuffer</name> <argument_list>(<argument><expr><name>accumData</name></expr></argument>, <argument><expr><name>accumCount</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>isAlphanumeric</name> <operator>&amp;&amp;</operator> <name>textLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>appendBitsToBuffer</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lengthBits</name> <init>= <expr><ternary><condition><expr><name>version</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>?</condition><then> <expr><literal type="number">9</literal></expr></then><else>: <expr><operator>(</operator><ternary><condition><expr><name>version</name> <operator>&lt;=</operator> <literal type="number">26</literal></expr>?</condition><then> <expr><literal type="number">11</literal></expr></then><else>: <expr><literal type="number">13</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>appendBitsToBuffer</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>textLen</name></expr></argument>, <argument><expr><name>lengthBits</name></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>accumData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>accumCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>text</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>accumData</name> <operator>=</operator> <name>accumData</name> <operator>*</operator> <literal type="number">45</literal> <operator>+</operator> <operator>(</operator><call><name>strchr</name> <argument_list>(<argument><expr><name>ALPHANUMERIC_CHARSET</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>ALPHANUMERIC_CHARSET</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>accumCount</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>accumCount</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>appendBitsToBuffer</name> <argument_list>(<argument><expr><name>accumData</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>accumData</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>accumCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>accumCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>appendBitsToBuffer</name> <argument_list>(<argument><expr><name>accumData</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>encodeQrCodeTail</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>bitLen</name></expr></argument>, <argument><expr><name>tempBuffer</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>ecl</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>boostEcl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_qrcode_bin</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>dataAndTemp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dataLen</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>qrcode</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>qrcodegen_Ecc</name></name></type> <name>ecl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxVersion</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>qrcodegen_Mask</name></name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>boostEcl</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dataAndTemp</name> <operator>||</operator> <operator>!</operator><name>qrcode</name> <operator>||</operator> <name>dataLen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>minVersion</name> <argument_list type="generic">&lt; <argument><expr><name>qrcodegen_VERSION_MIN</name> <operator>||</operator> <name>minVersion</name></expr></argument> &gt;</argument_list></name> <name>qrcodegen_VERSION_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>maxVersion</name> <argument_list type="generic">&lt; <argument><expr><name>qrcodegen_VERSION_MIN</name> <operator>||</operator> <name>maxVersion</name></expr></argument> &gt;</argument_list></name> <name>qrcodegen_VERSION_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ecl</name> <argument_list type="generic">&lt; <argument><expr><name>qrcodegen_Ecc_LOW</name> <operator>||</operator> <name>ecl</name></expr></argument> &gt;</argument_list></name> <name>qrcodegen_Ecc_HIGH</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mask</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>mask</name></expr></argument> &gt;</argument_list></name> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>qrcode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dataLen</name> <operator>&gt;</operator> <name>INT16_MAX</name> <operator>/</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><call><name>fitVersionToData</name> <argument_list>(<argument><expr><name>minVersion</name></expr></argument>, <argument><expr><name>maxVersion</name></expr></argument>, <argument><expr><name>ecl</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>dataLen</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>dataLen</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>qrcodegen_BUFFER_LEN_FOR_VERSION</name> <argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>qrcode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>appendBitsToBuffer</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>appendBitsToBuffer</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>dataLen</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>version</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>?</condition><then> <expr><literal type="number">8</literal></expr></then><else>: <expr><literal type="number">16</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dataLen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>appendBitsToBuffer</name> <argument_list>(<argument><expr><name><name>dataAndTemp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>encodeQrCodeTail</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>bitLen</name></expr></argument>, <argument><expr><name>dataAndTemp</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>ecl</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>boostEcl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getTextProperties</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isNumeric</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isAlphanumeric</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>textBits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>textLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>isNumeric</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>isAlphanumeric</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>text</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>textLen</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>textLen</name> <operator>&gt;=</operator> <name>INT16_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>isNumeric</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>isAlphanumeric</name> <operator>&amp;=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ALPHANUMERIC_CHARSET</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>long</name></type> <name>tempBits</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>isNumeric</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tempBits</name> <operator>=</operator> <name>textLen</name> <operator>*</operator> <literal type="number">3L</literal> <operator>+</operator> <operator>(</operator><name>textLen</name> <operator>+</operator> <literal type="number">2L</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>isAlphanumeric</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tempBits</name> <operator>=</operator> <name>textLen</name> <operator>*</operator> <literal type="number">5L</literal> <operator>+</operator> <operator>(</operator><name>textLen</name> <operator>+</operator> <literal type="number">1L</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tempBits</name> <operator>=</operator> <name>textLen</name> <operator>*</operator> <literal type="number">8L</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tempBits</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>textBits</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>tempBits</name></expr>;</expr_stmt>

<return>return <expr><name>textLen</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fitVersionToData</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>minVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxVersion</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>qrcodegen_Ecc</name></name></type> <name>ecl</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dataLen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dataBitLen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ver1To9LenBits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ver10To26LenBits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ver27To40LenBits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>qrcodegen_VERSION_MIN</name> <operator>&lt;=</operator> <name>minVersion</name> <operator>&amp;&amp;</operator> <name>minVersion</name> <operator>&lt;=</operator> <name>maxVersion</name> <operator>&amp;&amp;</operator> <name>maxVersion</name> <operator>&lt;=</operator> <name>qrcodegen_VERSION_MAX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>ecl</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>ecl</name></expr></argument> &gt;</argument_list></name> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dataLen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>dataBitLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ver1To9LenBits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>ver1To9LenBits</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ver10To26LenBits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>ver10To26LenBits</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ver27To40LenBits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>ver27To40LenBits</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>version</name> <operator>=</operator> <name>minVersion</name></expr>;</init><condition>;</condition> <incr><expr><name>version</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lengthBits</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lengthBits</name> <operator>=</operator> <name>ver1To9LenBits</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>version</name> <operator>&lt;=</operator> <literal type="number">26</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lengthBits</name> <operator>=</operator> <name>ver10To26LenBits</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>lengthBits</name> <operator>=</operator> <name>ver27To40LenBits</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dataLen</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1L</literal> <operator>&lt;&lt;</operator> <name>lengthBits</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dataCapacityBits</name> <init>= <expr><call><name>getNumDataCodewords</name> <argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>ecl</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>header</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <name>lengthBits</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dataBitLen</name> <operator>&lt;=</operator> <name>INT_MAX</name> <operator>-</operator> <name>header</name> <operator>&amp;&amp;</operator> <name>header</name> <operator>+</operator> <name>dataBitLen</name> <operator>&lt;=</operator> <name>dataCapacityBits</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>version</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name>maxVersion</name></expr>)</condition> <block>{<block_content> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encodeQrCodeTail</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name><name>dataAndQrcode</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitLen</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>tempBuffer</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>qrcodegen_Ecc</name></name></type> <name>ecl</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>qrcodegen_Mask</name></name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>boostEcl</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>boostEcl</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bitLen</name> <operator>&lt;=</operator> <call><name>getNumDataCodewords</name> <argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>qrcodegen_Ecc_MEDIUM</name></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ecl</name> <operator>=</operator> <name>qrcodegen_Ecc_MEDIUM</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitLen</name> <operator>&lt;=</operator> <call><name>getNumDataCodewords</name> <argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>qrcodegen_Ecc_QUARTILE</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ecl</name> <operator>=</operator> <name>qrcodegen_Ecc_QUARTILE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitLen</name> <operator>&lt;=</operator> <call><name>getNumDataCodewords</name> <argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>qrcodegen_Ecc_HIGH</name></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ecl</name> <operator>=</operator> <name>qrcodegen_Ecc_HIGH</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dataCapacityBits</name> <init>= <expr><call><name>getNumDataCodewords</name> <argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>ecl</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>terminatorBits</name> <init>= <expr><name>dataCapacityBits</name> <operator>-</operator> <name>bitLen</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>terminatorBits</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>terminatorBits</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>appendBitsToBuffer</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>terminatorBits</name></expr></argument>, <argument><expr><name>dataAndQrcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>appendBitsToBuffer</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>bitLen</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>dataAndQrcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>padByte</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>padByte</name> <operator>=</operator> <literal type="number">0xEC</literal></expr>;</init> <condition><expr><name>bitLen</name> <operator>&lt;</operator> <name>dataCapacityBits</name></expr>;</condition> <incr><expr><name>padByte</name> <operator>^=</operator> <literal type="number">0xEC</literal> <operator>^</operator> <literal type="number">0x11</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>appendBitsToBuffer</name> <argument_list>(<argument><expr><name>padByte</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>dataAndQrcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bitLen</name> <operator>%</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>appendErrorCorrection</name> <argument_list>(<argument><expr><name>dataAndQrcode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>ecl</name></expr></argument>, <argument><expr><name>tempBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>initializeFunctionModules</name> <argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>dataAndQrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drawCodewords</name> <argument_list>(<argument><expr><name>tempBuffer</name></expr></argument>, <argument><expr><call><name>getNumRawDataModules</name> <argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>dataAndQrcode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drawWhiteFunctionModules</name> <argument_list>(<argument><expr><name>dataAndQrcode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>initializeFunctionModules</name> <argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>tempBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>==</operator> <name>qrcodegen_Mask_AUTO</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>long</name></type> <name>minPenalty</name> <init>= <expr><name>LONG_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>drawFormatBits</name> <argument_list>(<argument><expr><name>ecl</name></expr></argument>, <argument><expr><operator>(</operator>enum <name>qrcodegen_Mask</name><operator>)</operator> <name>i</name></expr></argument>, <argument><expr><name>dataAndQrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>applyMask</name> <argument_list>(<argument><expr><name>tempBuffer</name></expr></argument>, <argument><expr><name>dataAndQrcode</name></expr></argument>, <argument><expr><operator>(</operator>enum <name>qrcodegen_Mask</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>penalty</name> <init>= <expr><call><name>getPenaltyScore</name> <argument_list>(<argument><expr><name>dataAndQrcode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>penalty</name> <operator>&lt;</operator> <name>minPenalty</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator>enum <name>qrcodegen_Mask</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>minPenalty</name> <operator>=</operator> <name>penalty</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>applyMask</name> <argument_list>(<argument><expr><name>tempBuffer</name></expr></argument>, <argument><expr><name>dataAndQrcode</name></expr></argument>, <argument><expr><operator>(</operator>enum <name>qrcodegen_Mask</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mask</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>mask</name></expr></argument> &gt;</argument_list></name> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drawFormatBits</name> <argument_list>(<argument><expr><name>ecl</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>dataAndQrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>applyMask</name> <argument_list>(<argument><expr><name>tempBuffer</name></expr></argument>, <argument><expr><name>dataAndQrcode</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>appendBitsToBuffer</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numBits</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>buffer</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bitLen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>numBits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>numBits</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>val</name> <operator>&gt;&gt;</operator> <name>numBits</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>numBits</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><operator>(</operator><operator>*</operator><name>bitLen</name><operator>)</operator><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><operator>*</operator><name>bitLen</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <operator>(</operator><operator>*</operator><name>bitLen</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>appendErrorCorrection</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name><name>data</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>qrcodegen_Ecc</name></name></type> <name>ecl</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>result</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>ecl</name> <argument_list type="generic">&lt; <argument><expr><name>qrcodegen_Ecc_LOW</name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>ecl</name></expr></argument> &gt;</argument_list></name> <name>qrcodegen_Ecc_HIGH</name> <operator>||</operator> <name><name>version</name> <argument_list type="generic">&lt; <argument><expr><name>qrcodegen_VERSION_MIN</name> <operator>||</operator> <name>version</name></expr></argument> &gt;</argument_list></name> <name>qrcodegen_VERSION_MAX</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numBlocks</name> <init>= <expr><name><name>NUM_ERROR_CORRECTION_BLOCKS</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <name>ecl</name></expr>]</index><index>[<expr><name>version</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blockEccLen</name> <init>= <expr><name><name>ECC_CODEWORDS_PER_BLOCK</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <name>ecl</name></expr>]</index><index>[<expr><name>version</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rawCodewords</name> <init>= <expr><call><name>getNumRawDataModules</name> <argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dataLen</name> <init>= <expr><name>rawCodewords</name> <operator>-</operator> <name>blockEccLen</name> <operator>*</operator> <name>numBlocks</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numShortBlocks</name> <init>= <expr><name>numBlocks</name> <operator>-</operator> <name>rawCodewords</name> <operator>%</operator> <name>numBlocks</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shortBlockDataLen</name> <init>= <expr><name>rawCodewords</name> <operator>/</operator> <name>numBlocks</name> <operator>-</operator> <name>blockEccLen</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>generator</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>calcReedSolomonGenerator</name> <argument_list>(<argument><expr><name>blockEccLen</name></expr></argument>, <argument><expr><name>generator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>dataLen</name></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numBlocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>blockLen</name> <init>= <expr><name>shortBlockDataLen</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>numShortBlocks</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>blockLen</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>calcReedSolomonRemainder</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>blockLen</name></expr></argument>, <argument><expr><name>generator</name></expr></argument>, <argument><expr><name>blockEccLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>blockEccLen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <name>blockLen</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numBlocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>l</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>shortBlockDataLen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr><operator>,</operator> <expr><name>l</name> <operator>+=</operator> <name>numBlocks</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>numShortBlocks</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>numShortBlocks</name></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <operator>(</operator><name>numShortBlocks</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>shortBlockDataLen</name></expr><operator>,</operator> <expr><name>l</name> <operator>=</operator> <name>numBlocks</name> <operator>*</operator> <name>shortBlockDataLen</name></expr>;</init>

<condition><expr><name>i</name> <operator>&lt;</operator> <name>numBlocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name> <operator>+=</operator> <name>shortBlockDataLen</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <name>dataLen</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numBlocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>l</name> <operator>=</operator> <name>dataLen</name> <operator>+</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>blockEccLen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr><operator>,</operator> <expr><name>l</name> <operator>+=</operator> <name>numBlocks</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getNumDataCodewords</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>qrcodegen_Ecc</name></name></type> <name>ecl</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name>version</name></expr></init></decl>, <decl><type ref="prev"/><name>e</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name>ecl</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>getNumRawDataModules</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal> <operator>-</operator> <name><name>ECC_CODEWORDS_PER_BLOCK</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>*</operator> <name><name>NUM_ERROR_CORRECTION_BLOCKS</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getNumRawDataModules</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>version</name> <argument_list type="generic">&lt; <argument><expr><name>qrcodegen_VERSION_MIN</name> <operator>||</operator> <name>version</name></expr></argument> &gt;</argument_list></name> <name>qrcodegen_VERSION_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>(</operator><literal type="number">16</literal> <operator>*</operator> <name>version</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>*</operator> <name>version</name> <operator>+</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>numAlign</name> <init>= <expr><name>version</name> <operator>/</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>-=</operator> <operator>(</operator><literal type="number">25</literal> <operator>*</operator> <name>numAlign</name> <operator>-</operator> <literal type="number">10</literal><operator>)</operator> <operator>*</operator> <name>numAlign</name> <operator>-</operator> <literal type="number">55</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>-=</operator> <literal type="number">18</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calcReedSolomonGenerator</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>degree</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>result</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>degree</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>degree</name></expr></argument> &gt;</argument_list></name> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>degree</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>degree</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>root</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>degree</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>degree</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>finiteFieldMultiply</name> <argument_list>(<argument><expr><name><name>result</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>degree</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>j</name></expr>]</index></name> <operator>^=</operator> <name><name>result</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>finiteFieldMultiply</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calcReedSolomonRemainder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>data</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dataLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>generator</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>degree</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>result</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>degree</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>degree</name></expr></argument> &gt;</argument_list></name> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>degree</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dataLen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>factor</name> <init>= <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>degree</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>degree</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>degree</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>j</name></expr>]</index></name> <operator>^=</operator> <call><name>finiteFieldMultiply</name> <argument_list>(<argument><expr><name><name>generator</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>finiteFieldMultiply</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x11D</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>z</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>initializeFunctionModules</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qrsize</name> <init>= <expr><name>version</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">17</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>qrsize</name> <operator>*</operator> <name>qrsize</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>qrcode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qrcode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <name>qrsize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fillRectangle</name> <argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>qrsize</name></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fillRectangle</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>qrsize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fillRectangle</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fillRectangle</name> <argument_list>(<argument><expr><name>qrsize</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fillRectangle</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>qrsize</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>alignPatPos</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>numAlign</name> <init>= <expr><call><name>getAlignmentPatternPositions</name> <argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>alignPatPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numAlign</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numAlign</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>numAlign</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name>numAlign</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fillRectangle</name> <argument_list>(<argument><expr><name><name>alignPatPos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>alignPatPos</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fillRectangle</name> <argument_list>(<argument><expr><name>qrsize</name> <operator>-</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fillRectangle</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>qrsize</name> <operator>-</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drawWhiteFunctionModules</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>qrsize</name> <init>= <expr><call><name>qrcodegen_getSize</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>qrsize</name> <operator>-</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>setModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dist</name> <init>= <expr><call><name>abs</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>abs</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>dist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <call><name>abs</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>dist</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setModuleBounded</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setModuleBounded</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>qrsize</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setModuleBounded</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>qrsize</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>alignPatPos</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numAlign</name> <init>= <expr><call><name>getAlignmentPatternPositions</name> <argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>alignPatPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numAlign</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numAlign</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>numAlign</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name>numAlign</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>setModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name><name>alignPatPos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>l</name></expr></argument>, <argument><expr><name><name>alignPatPos</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>k</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>l</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>rem</name> <init>= <expr><name>version</name></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>rem</name> <operator>=</operator> <operator>(</operator><name>rem</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>rem</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x1F25</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator> <name>version</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <name>rem</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>qrsize</name> <operator>-</operator> <literal type="number">11</literal> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drawFormatBits</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>qrcodegen_Ecc</name></name></type> <name>ecl</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>qrcodegen_Mask</name></name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mask</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>mask</name></expr></argument> &gt;</argument_list></name> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>ecl</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>qrcodegen_Ecc_LOW</name></expr>:</case> <expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>qrcodegen_Ecc_MEDIUM</name></expr>:</case> <expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>qrcodegen_Ecc_QUARTILE</name></expr>:</case> <expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>qrcodegen_Ecc_HIGH</name></expr>:</case> <expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <return>return;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>data</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>mask</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rem</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>rem</name> <operator>=</operator> <operator>(</operator><name>rem</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>rem</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x537</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>data</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal> <operator>|</operator> <name>rem</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>^=</operator> <literal type="number">0x5412</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>setModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>setModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">9</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>setModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><literal type="number">14</literal> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>qrsize</name> <init>= <expr><call><name>qrcodegen_getSize</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>setModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>qrsize</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>setModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>qrsize</name> <operator>-</operator> <literal type="number">15</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>setModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>qrsize</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getAlignmentPatternPositions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>result</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qrsize</name> <init>= <expr><name>version</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">17</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numAlign</name> <init>= <expr><name>version</name> <operator>/</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>step</name> <operator>=</operator> <operator>(</operator><name>version</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>numAlign</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>numAlign</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>numAlign</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>pos</name> <operator>=</operator> <name>qrsize</name> <operator>-</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>pos</name> <operator>-=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<return>return <expr><name>numAlign</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fillRectangle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>dy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dy</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>dy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>dx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dx</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>dx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>setModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>left</name> <operator>+</operator> <name>dx</name></expr></argument>, <argument><expr><name>top</name> <operator>+</operator> <name>dy</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>drawCodewords</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>data</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dataLen</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qrsize</name> <init>= <expr><call><name>qrcodegen_getSize</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>right</name></decl>, <decl><type ref="prev"/><name>vert</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>right</name> <operator>=</operator> <name>qrsize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>right</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>right</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>right</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>right</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>vert</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>vert</name> <operator>&lt;</operator> <name>qrsize</name></expr>;</condition> <incr><expr><name>vert</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>right</name> <operator>-</operator> <name>j</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>upward</name> <init>= <expr><operator>(</operator><operator>(</operator><name>right</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><ternary><condition><expr><name>upward</name></expr>?</condition><then> <expr><name>qrsize</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>vert</name></expr></then><else>: <expr><name>vert</name></expr></else></ternary></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>dataLen</name> <operator>*</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>black</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>data</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>black</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>i</name> <operator>==</operator> <name>dataLen</name> <operator>*</operator> <literal type="number">8</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>applyMask</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>functionModules</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>qrcodegen_Mask</name></name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mask</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>mask</name></expr></argument> &gt;</argument_list></name> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>qrsize</name> <init>= <expr><call><name>qrcodegen_getSize</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>qrsize</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>qrsize</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>getModule</name> <argument_list>(<argument><expr><name>functionModules</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>invert</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name>mask</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>invert</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>invert</name> <operator>=</operator> <name>y</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>invert</name> <operator>=</operator> <name>x</name> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>invert</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>invert</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">3</literal> <operator>+</operator> <name>y</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>invert</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>y</name> <operator>%</operator> <literal type="number">2</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <name>y</name> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>invert</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>*</operator> <name>y</name> <operator>%</operator> <literal type="number">2</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <name>y</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>invert</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <name>y</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>bool</name></type> <name>val</name> <init>= <expr><call><name>getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>val</name> <operator>^</operator> <name>invert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>getPenaltyScore</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>qrsize</name> <init>= <expr><call><name>qrcodegen_getSize</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>qrsize</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>colorX</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>runX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>qrsize</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>colorX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>colorX</name> <operator>=</operator> <call><name>getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>runX</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>runX</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>runX</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>+=</operator> <name>PENALTY_N1</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>runX</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>qrsize</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>colorY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>runY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>qrsize</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>colorY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>colorY</name> <operator>=</operator> <call><name>getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>runY</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>runY</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>runY</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>+=</operator> <name>PENALTY_N1</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>runY</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>qrsize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>qrsize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>color</name> <init>= <expr><call><name>getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <call><name>getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name>color</name> <operator>==</operator> <call><name>getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name>color</name> <operator>==</operator> <call><name>getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>+=</operator> <name>PENALTY_N2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>qrsize</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>qrsize</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bits</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><call><name>getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>bits</name> <operator>==</operator> <literal type="number">0x05D</literal> <operator>||</operator> <name>bits</name> <operator>==</operator> <literal type="number">0x5D0</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>result</name> <operator>+=</operator> <name>PENALTY_N3</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>qrsize</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>qrsize</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bits</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><call><name>getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>bits</name> <operator>==</operator> <literal type="number">0x05D</literal> <operator>||</operator> <name>bits</name> <operator>==</operator> <literal type="number">0x5D0</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>result</name> <operator>+=</operator> <name>PENALTY_N3</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>black</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>qrsize</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>qrsize</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>black</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><name>qrsize</name> <operator>*</operator> <name>qrsize</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>black</name> <operator>*</operator> <literal type="number">20L</literal> <operator>&lt;</operator> <operator>(</operator><literal type="number">9L</literal> <operator>-</operator> <name>k</name><operator>)</operator> <operator>*</operator> <name>total</name> <operator>||</operator> <name>black</name> <operator>*</operator> <literal type="number">20L</literal> <operator>&gt;</operator> <operator>(</operator><literal type="number">11L</literal> <operator>+</operator> <name>k</name><operator>)</operator> <operator>*</operator> <name>total</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>+=</operator> <name>PENALTY_N4</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qrcodegen_getSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>qrcode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qrcode</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name><name>qrcode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>qrcodegen_VERSION_MIN</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">17</literal><operator>)</operator> <operator>&lt;=</operator> <name>result</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>&lt;=</operator> <operator>(</operator><name>qrcodegen_VERSION_MAX</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">17</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>qrcodegen_getModule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qrcode</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qrsize</name> <init>= <expr><name><name>qrcode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name>qrsize</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>qrsize</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>getModule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qrsize</name> <init>= <expr><name><name>qrcode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">21</literal> <operator>&lt;=</operator> <name>qrsize</name> <operator>&amp;&amp;</operator> <name>qrsize</name> <operator>&lt;=</operator> <literal type="number">177</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name>qrsize</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>qrsize</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>y</name> <operator>*</operator> <name>qrsize</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitIndex</name> <init>= <expr><name>index</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>byteIndex</name> <init>= <expr><operator>(</operator><name>index</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>qrcode</name><index>[<expr><name>byteIndex</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>bitIndex</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>setModule</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBlack</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qrsize</name> <init>= <expr><name><name>qrcode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">21</literal> <operator>&lt;=</operator> <name>qrsize</name> <operator>&amp;&amp;</operator> <name>qrsize</name> <operator>&lt;=</operator> <literal type="number">177</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name>qrsize</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>qrsize</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>y</name> <operator>*</operator> <name>qrsize</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitIndex</name> <init>= <expr><name>index</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>byteIndex</name> <init>= <expr><operator>(</operator><name>index</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>isBlack</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>qrcode</name><index>[<expr><name>byteIndex</name></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bitIndex</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>qrcode</name><index>[<expr><name>byteIndex</name></expr>]</index></name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bitIndex</name><operator>)</operator> <operator>^</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setModuleBounded</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name><name>qrcode</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBlack</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qrsize</name> <init>= <expr><name><name>qrcode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name>qrsize</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>qrsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>isBlack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>qrcode_utf8_expansions</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">" "</literal></expr>,<expr><literal type="string">"â "</literal></expr>,<expr><literal type="string">" â"</literal></expr>,<expr><literal type="string">"ââ"</literal></expr>,

<expr><literal type="string">"â "</literal></expr>,<expr><literal type="string">"â "</literal></expr>,<expr><literal type="string">"ââ"</literal></expr>,<expr><literal type="string">"ââ"</literal></expr>,

<expr><literal type="string">" â"</literal></expr>,<expr><literal type="string">"ââ"</literal></expr>,<expr><literal type="string">" â"</literal></expr>,<expr><literal type="string">"ââ"</literal></expr>,

<expr><literal type="string">"ââ"</literal></expr>,<expr><literal type="string">"ââ"</literal></expr>,<expr><literal type="string">"ââ"</literal></expr>,<expr><literal type="string">"ââ"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_qrcode_gen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>utf8</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inverted</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>qrcode</name><index>[<expr><name>qrcodegen_BUFFER_LEN_MAX</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>qrcodegen_Ecc</name></name></type> <name>errCorLvl</name> <init>= <expr><name>qrcodegen_Ecc_HIGH</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><operator>(</operator><literal type="number">128</literal> <operator>+</operator> <name>len</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>r_qrcode_bin</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>errCorLvl</name></expr></argument>,

<argument><expr><name>qrcodegen_VERSION_MIN</name></expr></argument>, <argument><expr><name>qrcodegen_VERSION_MAX</name></expr></argument>,

<argument><expr><name>qrcodegen_Mask_AUTO</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>qrcodegen_getSize</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>border</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">1024</literal><operator>)</operator> <operator>*</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name>total</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>res</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>utf8</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <operator>-</operator><name>border</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>size</name> <operator>+</operator> <name>border</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>border</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size</name> <operator>+</operator> <name>border</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bmp</name> <init>= <expr><call><name>qrcodegen_getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bmp</name> <operator>|=</operator> <call><name>qrcodegen_getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bmp</name> <operator>|=</operator> <call><name>qrcodegen_getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bmp</name> <operator>|=</operator> <call><name>qrcodegen_getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pixel</name> <init>= 

<expr><name><name>qrcode_utf8_expansions</name><index>[

<expr><ternary><condition><expr><name>inverted</name></expr>

?</condition><then> <expr><literal type="number">15</literal> <operator>-</operator> <name>bmp</name></expr>

</then><else>: <expr><name>bmp</name></expr></else></ternary></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pixel</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <operator>-</operator><name>border</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>size</name> <operator>+</operator> <name>border</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>border</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size</name> <operator>+</operator> <name>border</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>fill</name> <init>= <expr><call><name>qrcodegen_getModule</name> <argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pixel</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>fill</name> <operator>^</operator> <name>inverted</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"##"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pixel</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

</unit>
