<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\rbtree.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_rbtree.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>red</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>x</name> <operator>&amp;&amp;</operator> <name><name>x</name><operator>-&gt;</operator><name>red</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RBNode</name> <modifier>*</modifier></type><name>zag</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>RBNodeSum</name></type> <name>sum</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>dir</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>dir</name></expr>]</index></name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>child</name><index>[<expr><operator>!</operator><name>dir</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>child</name><index>[<expr><operator>!</operator><name>dir</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sum</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RBNode</name> <modifier>*</modifier></type><name>zig_zag</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>RBNodeSum</name></type> <name>sum</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>dir</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>z</name> <init>= <expr><name><name>y</name><operator>-&gt;</operator><name>child</name><index>[<expr><operator>!</operator><name>dir</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>child</name><index>[<expr><operator>!</operator><name>dir</name></expr>]</index></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>dir</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>dir</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>dir</name></expr>]</index></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>child</name><index>[<expr><operator>!</operator><name>dir</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>child</name><index>[<expr><operator>!</operator><name>dir</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sum</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sum</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>z</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RBIter</name></type> <name>bound_iter</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>upper</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBIter</name></type> <name>it</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>it</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>cmp</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>it</name><operator>.</operator><name>path</name><index>[<expr><name><name>it</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<return>return <expr><name>it</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>upper</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>it</name><operator>.</operator><name>path</name><index>[<expr><name><name>it</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>upper</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>it</name><operator>.</operator><name>path</name><index>[<expr><name><name>it</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>it</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_rbtree_aug_delete</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cmp_user</name></decl></parameter>, <parameter><decl><type><name>RBNodeFree</name></type> <name>freefn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>free_user</name></decl></parameter>, <parameter><decl><type><name>RBNodeSum</name></type> <name>sum</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBNode</name></type> <name>head</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>del</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>del_link</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>g</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>head</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>path</name><index>[<expr><name>R_RBTREE_MAX_HEIGHT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>dep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>head</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>head</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>root</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>d</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d2</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>del_link</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>cmp</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>d2</name></expr>]</index></name></expr></argument>, <argument><expr><name>cmp_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>del_link</name> <operator>=</operator> <operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>d2</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <operator>&amp;</operator><name>head</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dep</name> <operator>&gt;=</operator> <name>R_RBTREE_MAX_HEIGHT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Too deep tree\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>dep</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>d2</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>red</name></name> <operator>||</operator> <call><name>red</name> <argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>red</name> <argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>child</name><index>[<expr><operator>!</operator><name>d</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>del_link</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>del_link</name> <operator>==</operator> <name>q</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>del_link</name> <operator>=</operator> <operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>child</name><index>[<expr><operator>!</operator><name>d</name></expr>]</index></name><operator>-&gt;</operator><name><name>child</name><index>[<expr><name>d</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>d2</name></expr>]</index></name> <operator>=</operator> <call><name>zag</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>!</operator><name>d</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>d2</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dep</name> <operator>&gt;=</operator> <name>R_RBTREE_MAX_HEIGHT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Too deep tree\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>dep</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>child</name><index>[<expr><operator>!</operator><name>d2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>red</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>red</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d3</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>red</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>d2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>del_link</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>del_link</name> <operator>==</operator> <name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>del_link</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>d2</name></expr>]</index></name><operator>-&gt;</operator><name><name>child</name><index>[<expr><name>d2</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>zig_zag</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>!</operator><name>d2</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>del_link</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>del_link</name> <operator>==</operator> <name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>del_link</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>d2</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>zag</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>!</operator><name>d2</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>red</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>red</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>d3</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>dep</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>dep</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>del_link</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>del</name> <operator>=</operator> <operator>*</operator><name>del_link</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>q</name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>child</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>del</name> <operator>!=</operator> <name>q</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <operator>*</operator><name>del</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>del_link</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>freefn</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>freefn</name> <argument_list>(<argument><expr><name>del</name></expr></argument>, <argument><expr><name>free_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sum</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>dep</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sum</name> <argument_list>(<argument><expr><ternary><condition><expr><name><name>path</name><index>[<expr><name>dep</name></expr>]</index></name> <operator>==</operator> <name>del</name></expr> ?</condition><then> <expr><name>q</name></expr> </then><else>: <expr><name><name>path</name><index>[<expr><name>dep</name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>root</name> <operator>=</operator> <name><name>head</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>root</name><operator>)</operator><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>del</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_rbtree_aug_insert</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cmp_user</name></decl></parameter>, <parameter><decl><type><name>RBNodeSum</name></type> <name>sum</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>root</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sum</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>g</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name> <init>= <expr><operator>*</operator><name>root</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name><name>path</name><index>[<expr><name>R_RBTREE_MAX_HEIGHT</name></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>d</name></expr>]</index></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>red</name> <argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>red</name> <argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>red</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>red</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <operator>*</operator><name>root</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>red</name></name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>red</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d3</name> <init>= <expr><ternary><condition><expr><name>t</name></expr> ?</condition><then> <expr><name><name>t</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>g</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>, <decl><type ref="prev"/><name>d2</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>d2</name></expr>]</index></name> <operator>==</operator> <name>q</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>zag</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dep</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>dep</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>zig_zag</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dep</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>d3</name></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>done</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>cmp</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>cmp_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dep</name> <operator>&gt;=</operator> <name>R_RBTREE_MAX_HEIGHT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Too deep tree\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>dep</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>sum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sum</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>dep</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sum</name> <argument_list>(<argument><expr><name><name>path</name><index>[<expr><operator>--</operator><name>dep</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>done</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_rbtree_aug_update_sum</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cmp_user</name></decl></parameter>, <parameter><decl><type><name>RBNodeSum</name></type> <name>sum</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name><name>path</name><index>[<expr><name>R_RBTREE_MAX_HEIGHT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dep</name> <operator>&gt;=</operator> <name>R_RBTREE_MAX_HEIGHT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Too deep tree\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>dep</name></expr>]</index></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dep</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>node</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>cmp</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>cmp_user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>dep</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>dep</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>sum</name> <argument_list>(<argument><expr><name><name>path</name><index>[<expr><name>dep</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_rbtree_delete</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cmp_user</name></decl></parameter>, <parameter><decl><type><name>RBNodeFree</name></type> <name>freefn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>free_user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_rbtree_aug_delete</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>cmp_user</name></expr></argument>, <argument><expr><name>freefn</name></expr></argument>, <argument><expr><name>free_user</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBNode</name> <modifier>*</modifier></type><name>r_rbtree_find</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<while>while <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>cmp</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_rbtree_free</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>RBNodeFree</name></type> <name>freefn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_rbtree_free</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>freefn</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_rbtree_free</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>freefn</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freefn</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_rbtree_insert</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_rbtree_aug_insert</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBNode</name> <modifier>*</modifier></type><name>r_rbtree_lower_bound</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>cmp</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBIter</name></type> <name>r_rbtree_lower_bound_forward</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>bound_iter</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBNode</name> <modifier>*</modifier></type><name>r_rbtree_upper_bound</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>cmp</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBIter</name></type> <name>r_rbtree_upper_bound_backward</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>bound_iter</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBIter</name></type> <name>_first</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBIter</name></type> <name>it</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>it</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>x</name></expr>;</condition> <incr><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>dir</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>it</name><operator>.</operator><name>path</name><index>[<expr><name><name>it</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>it</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBIter</name></type> <name>r_rbtree_first</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>_first</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBIter</name></type> <name>r_rbtree_last</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>_first</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_next</name><parameter_list>(<parameter><decl><type><name>RBIter</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>path</name><index>[<expr><operator>--</operator><name><name>it</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><operator>!</operator><name>dir</name></expr>]</index></name></expr>;</init> <condition><expr><name>x</name></expr>;</condition> <incr><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>dir</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>path</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_rbtree_iter_next</name><parameter_list>(<parameter><decl><type><name>RBIter</name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>_next</name> <argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_rbtree_iter_prev</name><parameter_list>(<parameter><decl><type><name>RBIter</name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>_next</name> <argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RContRBTree</name> <modifier>*</modifier></type><name>r_rbtree_cont_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<return>return <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RContRBTree</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RContRBTree</name> <modifier>*</modifier></type><name>r_rbtree_cont_newf</name><parameter_list>(<parameter><decl><type><name>RContRBFree</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RContRBTree</name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>r_rbtree_cont_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tree</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>tree</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>rcrb_cmp_wrap_t</name> <block>{

<decl_stmt><decl><type><name>RContRBCmp</name></type> <name>cmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RContRBFree</name></type> <name>free</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>

}</block></struct></type> <name>RCRBCmpWrap</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cont_rbtree_cmp_wrapper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBNode</name> <modifier>*</modifier></type><name>in_tree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCRBCmpWrap</name> <modifier>*</modifier></type><name>cmp_wrap</name> <init>= <expr><operator>(</operator><name>RCRBCmpWrap</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RContRBNode</name> <modifier>*</modifier></type><name>incoming_node</name> <init>= <expr><operator>(</operator><name>RContRBNode</name> <operator>*</operator><operator>)</operator><name>incoming</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RContRBNode</name> <modifier>*</modifier></type><name>in_tree_node</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><operator>(</operator><name>RBNode</name><operator>*</operator><operator>)</operator><name>in_tree</name></expr></argument>, <argument><expr><name>RContRBNode</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>cmp_wrap</name><operator>-&gt;</operator><name>cmp</name></name> <argument_list>(<argument><expr><name><name>incoming_node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>in_tree_node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>cmp_wrap</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cont_rbtree_search_cmp_wrapper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBNode</name> <modifier>*</modifier></type><name>in_tree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCRBCmpWrap</name> <modifier>*</modifier></type><name>cmp_wrap</name> <init>= <expr><operator>(</operator><name>RCRBCmpWrap</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RContRBNode</name> <modifier>*</modifier></type><name>in_tree_node</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><operator>(</operator><name>RBNode</name><operator>*</operator><operator>)</operator><name>in_tree</name></expr></argument>, <argument><expr><name>RContRBNode</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>cmp_wrap</name><operator>-&gt;</operator><name>cmp</name></name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>incoming</name></expr></argument>, <argument><expr><name><name>in_tree_node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>cmp_wrap</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cont_rbtree_free_cmp_wrapper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBNode</name> <modifier>*</modifier></type><name>in_tree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCRBCmpWrap</name> <modifier>*</modifier></type><name>cmp_wrap</name> <init>= <expr><operator>(</operator><name>RCRBCmpWrap</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ret</name> <init>= <expr><call><name>cont_rbtree_cmp_wrapper</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>in_tree</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name><name>cmp_wrap</name><operator>-&gt;</operator><name>free</name></name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>RContRBNode</name> <modifier>*</modifier></type><name>in_tree_node</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>in_tree</name></expr></argument>, <argument><expr><name>RContRBNode</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>cmp_wrap</name><operator>-&gt;</operator><name>free</name></name> <argument_list>(<argument><expr><name><name>in_tree_node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_rbtree_cont_insert</name><parameter_list>(<parameter><decl><type><name>RContRBTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RContRBCmp</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>tree</name> <operator>&amp;&amp;</operator> <name>cmp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RContRBNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Allocation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RContRBNode</name> <modifier>*</modifier></type><name>incoming_node</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RContRBNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>incoming_node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Allocation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>incoming_node</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RCRBCmpWrap</name></type> <name>cmp_wrap</name> <init>= <expr><block>{ <expr><name>cmp</name></expr>, <expr><name>NULL</name></expr>, <expr><name>user</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>root_node</name> <init>= <expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>ret</name> <init>= <expr><call><name>r_rbtree_aug_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>root_node</name></expr></argument>, <argument><expr><name>incoming_node</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>incoming_node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>cont_rbtree_cmp_wrapper</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp_wrap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>root_node</name> <operator>!=</operator> <operator>(</operator><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>node</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>container_of</name> <argument_list>(<argument><expr><name>root_node</name></expr></argument>, <argument><expr><name>RContRBNode</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Insertion failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>incoming_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cont_node_free</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RContRBNode</name> <modifier>*</modifier></type><name>contnode</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>RContRBNode</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>user</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>RContRBFree</name><operator>)</operator><name>user</name><operator>)</operator> <operator>(</operator><name><name>contnode</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>contnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_rbtree_cont_delete</name><parameter_list>(<parameter><decl><type><name>RContRBTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RContRBCmp</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tree</name> <operator>&amp;&amp;</operator> <name>cmp</name> <operator>&amp;&amp;</operator> <name><name>tree</name><operator>-&gt;</operator><name>root</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RCRBCmpWrap</name></type> <name>cmp_wrap</name> <init>= <expr><block>{ <expr><name>cmp</name></expr>, <expr><name><name>tree</name><operator>-&gt;</operator><name>free</name></name></expr>, <expr><name>user</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RContRBNode</name></type> <name>data_wrap</name> <init>= <expr><block>{ <expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>false</name></expr> }</block></expr>, <expr><name>data</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>root_node</name> <init>= <expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>ret</name> <init>= <expr><call><name>r_rbtree_aug_delete</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>root_node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_wrap</name></expr></argument>, <argument><expr><name>cont_rbtree_free_cmp_wrapper</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp_wrap</name></expr></argument>, <argument><expr><name>cont_node_free</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>root_node</name> <operator>!=</operator> <operator>(</operator><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>node</name></name><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>container_of</name> <argument_list>(<argument><expr><name>root_node</name></expr></argument>, <argument><expr><name>RContRBNode</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_rbtree_cont_find</name><parameter_list>(<parameter><decl><type><name>RContRBTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RContRBCmp</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>tree</name> <operator>&amp;&amp;</operator> <name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RCRBCmpWrap</name></type> <name>cmp_wrap</name> <init>= <expr><block>{ <expr><name>cmp</name></expr>, <expr><name>NULL</name></expr>, <expr><name>user</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>result_node</name> <init>= <expr><call><name>r_rbtree_find</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>cont_rbtree_search_cmp_wrapper</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp_wrap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result_node</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><call><name>container_of</name> <argument_list>(<argument><expr><name>result_node</name></expr></argument>, <argument><expr><name>RContRBNode</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>data</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_rbtree_cont_free</name><parameter_list>(<parameter><decl><type><name>RContRBTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tree</name> <operator>&amp;&amp;</operator> <name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_rbtree_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>cont_node_free</name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
