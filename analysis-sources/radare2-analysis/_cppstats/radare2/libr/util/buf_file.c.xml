<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\buf_file.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<struct>struct <name>buf_file_user</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>perm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>buf_file_priv</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>tmp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>buf_file_priv</name></name> <modifier>*</modifier></type><name>get_priv_file</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>buf_file_priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><operator>(</operator>struct <name>buf_file_priv</name> <operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_warn_if_fail</name> <argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>priv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>buf_file_init</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>buf_file_user</name></name> <modifier>*</modifier></type><name>u</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>buf_file_user</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>buf_file_priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>buf_file_priv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>priv</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>r_sandbox_open</name> <argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>buf_file_fini</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>buf_file_priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>get_priv_file</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_sandbox_close</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>buf_file_get_size</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>buf_file_priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>get_priv_file</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>r_sandbox_lseek</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>r_sandbox_lseek</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_sandbox_lseek</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ut64</name><operator>)</operator><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st64</name></type> <name>buf_file_read</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>buf_file_priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>get_priv_file</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_sandbox_read</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st64</name></type> <name>buf_file_write</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>buf_file_priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>get_priv_file</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_sandbox_write</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st64</name></type> <name>buf_file_seek</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>buf_file_priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>get_priv_file</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_BUF_CUR</name></expr>:</case> <expr_stmt><expr><name>whence</name> <operator>=</operator> <name>SEEK_CUR</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_BUF_SET</name></expr>:</case> <expr_stmt><expr><name>whence</name> <operator>=</operator> <name>SEEK_SET</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_BUF_END</name></expr>:</case> <expr_stmt><expr><name>whence</name> <operator>=</operator> <name>SEEK_END</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><call><name>r_sandbox_lseek</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>buf_file_resize</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>newsize</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>buf_file_priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>get_priv_file</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_sandbox_truncate</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>RBufferMethods</name></type> <name>buffer_file_methods</name> <init>= <expr><block>{

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>buf_file_init</name></expr>,

<expr><operator>.</operator><name>fini</name> <operator>=</operator> <name>buf_file_fini</name></expr>,

<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>buf_file_read</name></expr>,

<expr><operator>.</operator><name>write</name> <operator>=</operator> <name>buf_file_write</name></expr>,

<expr><operator>.</operator><name>get_size</name> <operator>=</operator> <name>buf_file_get_size</name></expr>,

<expr><operator>.</operator><name>resize</name> <operator>=</operator> <name>buf_file_resize</name></expr>,

<expr><operator>.</operator><name>seek</name> <operator>=</operator> <name>buf_file_seek</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
