<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\event.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_vector.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>r_event_callback_hook_t</name> <block>{

<decl_stmt><decl><type><name>REventCallback</name></type> <name>cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>handle</name></decl>;</decl_stmt>

}</block></struct></type> <name>REventCallbackHook</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ht_callback_free</name><parameter_list>(<parameter><decl><type><name>HtUPKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><operator>(</operator><name>RVector</name> <operator>*</operator><operator>)</operator><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>REvent</name> <modifier>*</modifier></type><name>r_event_new</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>REvent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ev</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>next_handle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>=</operator> <call><name>ht_up_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ht_callback_free</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ev</name><operator>-&gt;</operator><name>callbacks</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_vector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>all_callbacks</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>REventCallbackHook</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ev</name></expr>;</return>

<label><name>err</name>:</label>

<expr_stmt><expr><call><name>r_event_free</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_event_free</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ev</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ht_up_free</name> <argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>all_callbacks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RVector</name> <modifier>*</modifier></type><name>get_cbs</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>cbs</name> <init>= <expr><call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cbs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cbs</name> <operator>=</operator> <call><name>r_vector_new</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>REventCallbackHook</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cbs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ht_up_insert</name> <argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>cbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>cbs</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>REventCallbackHandle</name></type> <name>r_event_hook</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>REventCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>REventCallbackHandle</name></type> <name>handle</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>REventCallbackHook</name></type> <name>hook</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hook</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>next_handle</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>R_EVENT_ALL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_vector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>all_callbacks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>cbs</name> <init>= <expr><call><name>get_cbs</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cbs</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>handle</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_vector_push</name> <argument_list>(<argument><expr><name>cbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>handle</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name><name>hook</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>handle</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<return>return <expr><name>handle</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>del_hook</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>handle</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>cbs</name> <init>= <expr><operator>(</operator><name>RVector</name> <operator>*</operator><operator>)</operator><name>v</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>REventCallbackHook</name> <modifier>*</modifier></type><name>hook</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_vector_enumerate</name> <argument_list>(<argument>cbs</argument>, <argument>hook</argument>, <argument>i</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hook</name><operator>-&gt;</operator><name>handle</name></name> <operator>==</operator> <name>handle</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_vector_remove_at</name> <argument_list>(<argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_event_unhook</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>REventCallbackHandle</name></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>R_EVENT_ALL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ht_up_foreach</name> <argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>, <argument><expr><name>del_hook</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>handle</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_hook</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>all_callbacks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>cbs</name> <init>= <expr><call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>handle</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>cbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_hook</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_event_send</name><parameter_list>(<parameter><decl><type><name>REvent</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>REventCallbackHook</name> <modifier>*</modifier></type><name>hook</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>ev</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ev</name><operator>-&gt;</operator><name>incall</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>incall</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<macro><name>r_vector_foreach</name> <argument_list>(<argument>&amp;ev-&gt;all_callbacks</argument>, <argument>hook</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name><name>hook</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>hook</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>incall</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>cbs</name> <init>= <expr><call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>callbacks</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cbs</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>incall</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<macro><name>r_vector_foreach</name> <argument_list>(<argument>cbs</argument>, <argument>hook</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name><name>hook</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>hook</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>incall</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
