<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\utf32.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>int</name></type> <name>r_utf32_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ptrlen</name></decl></parameter>, <parameter><decl><type><name>RRune</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bigendian</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ptrlen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>low</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>high</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bigendian</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>low</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptrlen</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><name>bigendian</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ch</name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name><name>ptr</name><index>[<expr><name>low</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ch</name> <operator>|=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name><name>ptr</name><index>[<expr><literal type="number">3</literal> <operator>-</operator> <name>high</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>sign</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>high</name></expr>]</index></name> <operator>||</operator> <name><name>ptr</name><index>[<expr><name>high</name> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <name>sign</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>low</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>sign</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_utf32le_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ptrlen</name></decl></parameter>, <parameter><decl><type><name>RRune</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_utf32_decode</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptrlen</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_utf32be_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ptrlen</name></decl></parameter>, <parameter><decl><type><name>RRune</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_utf32_decode</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptrlen</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
