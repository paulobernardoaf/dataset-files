<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\intervaltree.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_intervaltree.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unwrap</name><parameter_list>(<parameter><type><name>rbnode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of (rbnode, RIntervalNode, node)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>node_max</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>intervalnode</name> <init>= <expr><call><name>unwrap</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>intervalnode</name><operator>-&gt;</operator><name>max_end</name></name> <operator>=</operator> <name><name>intervalnode</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>end</name> <init>= <expr><call><name>unwrap</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>max_end</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name><name>intervalnode</name><operator>-&gt;</operator><name>max_end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>intervalnode</name><operator>-&gt;</operator><name>max_end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBNode</name> <modifier>*</modifier></type><name>in_tree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>incoming_start</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ut64</name> <operator>*</operator><operator>)</operator><name>incoming</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>other_start</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><name>in_tree</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>RIntervalNode</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>start</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>incoming_start</name> <operator>&lt;</operator> <name>other_start</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>incoming_start</name> <operator>&gt;</operator> <name>other_start</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_exact_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBNode</name> <modifier>*</modifier></type><name>in_tree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>incoming_node</name> <init>= <expr><operator>(</operator><name>RIntervalNode</name> <operator>*</operator><operator>)</operator><name>incoming</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RIntervalNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><name>in_tree</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>RIntervalNode</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>incoming_node</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>incoming_node</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>incoming_node</name><operator>-&gt;</operator><name>start</name></name> <operator>&gt;</operator> <name><name>node</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBIter</name> <modifier>*</modifier></type><name>path_cache</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>path_cache</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>(</operator><name>RBNode</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>path_cache</name><operator>-&gt;</operator><name>path</name><index>[<expr><name><name>path_cache</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>incoming_node</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;=</operator> <call><name>unwrap</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><call><name>r_rbtree_iter_has</name> <argument_list>(<argument><expr><name>path_cache</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>intervalnode</name> <init>= <expr><call><name>r_rbtree_iter_get</name> <argument_list>(<argument><expr><name>path_cache</name></expr></argument>, <argument><expr><name>RIntervalNode</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>intervalnode</name> <operator>==</operator> <name>incoming_node</name> <operator>||</operator> <name><name>intervalnode</name><operator>-&gt;</operator><name>start</name></name> <operator>&gt;</operator> <name><name>incoming_node</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>rbnode</name> <init>= <expr><operator>&amp;</operator><name><name>intervalnode</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rbnode</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>rbnode</name> <operator>=</operator> <name><name>rbnode</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</init> <condition><expr><name>rbnode</name></expr>;</condition> <incr><expr><name>rbnode</name> <operator>=</operator> <name><name>rbnode</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>path_cache</name><operator>-&gt;</operator><name>path</name><index>[<expr><name><name>path_cache</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>rbnode</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>rbnode</name> <operator>=</operator> <name><name>path_cache</name><operator>-&gt;</operator><name>path</name><index>[<expr><operator>--</operator><name><name>path_cache</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name><name>path_cache</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>path_cache</name><operator>-&gt;</operator><name>path</name><index>[<expr><name><name>path_cache</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>rbnode</name></expr>)</condition>;</do>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>next_child</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>path_cache</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unwrap</name> <argument_list>(<argument><expr><name><name>path_cache</name><operator>-&gt;</operator><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_child</name> <operator>=</operator> <name><name>path_cache</name><operator>-&gt;</operator><name>path</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>next_child</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>next_child</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_interval_tree_init</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>RIntervalNodeFree</name></type> <name>free</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>interval_node_free</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>ragenode</name> <init>= <expr><call><name>unwrap</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>user</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>RContRBFree</name><operator>)</operator><name>user</name><operator>)</operator> <operator>(</operator><name><name>ragenode</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ragenode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_interval_tree_fini</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name> <operator>||</operator> <operator>!</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_rbtree_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>interval_node_free</name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_interval_tree_insert</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>end</name> <operator>&gt;=</operator> <name>start</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIntervalNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><ternary><condition><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>node</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>r</name> <init>= <expr><call><name>r_rbtree_aug_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>node_max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>unwrap</name> <argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_interval_tree_delete</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>free</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBIter</name></type> <name>path_cache</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>r</name> <init>= <expr><call><name>r_rbtree_aug_delete</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>cmp_exact_node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path_cache</name></expr></argument>, <argument><expr><name>interval_node_free</name></expr></argument>, <argument><expr><ternary><condition><expr><name>free</name></expr> ?</condition><then> <expr><name><name>tree</name><operator>-&gt;</operator><name>free</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>node_max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <ternary><condition><expr><name>root</name></expr> ?</condition><then> <expr><call><name>unwrap</name> <argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_interval_tree_resize</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>new_start</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>new_end</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>new_end</name> <operator>&gt;=</operator> <name>new_start</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>start</name></name> <operator>!=</operator> <name>new_start</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_interval_tree_delete</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_interval_tree_insert</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>new_start</name></expr></argument>, <argument><expr><name>new_end</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>end</name></name> <operator>!=</operator> <name>new_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>new_end</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBIter</name></type> <name>path_cache</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_rbtree_aug_update_sum</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>cmp_exact_node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path_cache</name></expr></argument>, <argument><expr><name>node_max</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RIntervalNode</name> <modifier>*</modifier></type><name>r_interval_tree_node_at</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>unwrap</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name><name>node</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>unwrap</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>node</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBIter</name></type> <name>r_interval_tree_first_at</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBIter</name></type> <name>it</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>top_intervalnode</name> <init>= <expr><call><name>r_interval_tree_node_at</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>top_intervalnode</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>it</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>&amp;</operator><name><name>top_intervalnode</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;=</operator> <call><name>unwrap</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>it</name><operator>.</operator><name>path</name><index>[<expr><name><name>it</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>it</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RIntervalNode</name> <modifier>*</modifier></type><name>r_interval_tree_node_at_data</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBIter</name></type> <name>it</name> <init>= <expr><call><name>r_interval_tree_first_at</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>r_rbtree_iter_has</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>intervalnode</name> <init>= <expr><call><name>r_rbtree_iter_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>RIntervalNode</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>intervalnode</name><operator>-&gt;</operator><name>start</name></name> <operator>!=</operator> <name>start</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>intervalnode</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>data</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>intervalnode</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_rbtree_iter_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_interval_tree_all_at</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>RIntervalIterCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBIter</name></type> <name>it</name> <init>= <expr><call><name>r_interval_tree_first_at</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>r_rbtree_iter_has</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>intervalnode</name> <init>= <expr><call><name>r_rbtree_iter_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>RIntervalNode</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>intervalnode</name><operator>-&gt;</operator><name>start</name></name> <operator>!=</operator> <name>start</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cb</name> <argument_list>(<argument><expr><name>intervalnode</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_rbtree_iter_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_interval_node_all_in</name><parameter_list>(<parameter><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>end_inclusive</name></decl></parameter>, <parameter><decl><type><name>RIntervalIterCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<while>while <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>unwrap</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>end_inclusive</name></expr> ?</condition><then> <expr><name>value</name> <operator>&gt;</operator> <name><name>node</name><operator>-&gt;</operator><name>max_end</name></name></expr> </then><else>: <expr><name>value</name> <operator>&gt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>max_end</name></name></expr></else></ternary></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>end_inclusive</name></expr> ?</condition><then> <expr><name>value</name> <operator>&lt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>end</name></name></expr> </then><else>: <expr><name>value</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>end</name></name></expr></else></ternary></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cb</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_interval_node_all_in</name> <argument_list>(<argument><expr><call><name>unwrap</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>end_inclusive</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_interval_node_all_in</name> <argument_list>(<argument><expr><call><name>unwrap</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>end_inclusive</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_interval_tree_all_in</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>end_inclusive</name></decl></parameter>, <parameter><decl><type><name>RIntervalIterCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_interval_node_all_in</name> <argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>end_inclusive</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_interval_node_all_intersect</name><parameter_list>(<parameter><decl><type><name>RIntervalNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>end_inclusive</name></decl></parameter>, <parameter><decl><type><name>RIntervalIterCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>end</name> <operator>&gt;=</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>end_inclusive</name></expr> ?</condition><then> <expr><name>end</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>start</name></name></expr> </then><else>: <expr><name>end</name> <operator>&lt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>start</name></name></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>unwrap</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>end_inclusive</name></expr> ?</condition><then> <expr><name>start</name> <operator>&gt;</operator> <name><name>node</name><operator>-&gt;</operator><name>max_end</name></name></expr> </then><else>: <expr><name>start</name> <operator>&gt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>max_end</name></name></expr></else></ternary></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>end_inclusive</name></expr> ?</condition><then> <expr><name>start</name> <operator>&lt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>end</name></name></expr> </then><else>: <expr><name>start</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>end</name></name></expr></else></ternary></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cb</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_interval_node_all_intersect</name> <argument_list>(<argument><expr><call><name>unwrap</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>end_inclusive</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_interval_node_all_intersect</name> <argument_list>(<argument><expr><call><name>unwrap</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>end_inclusive</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_interval_tree_all_intersect</name><parameter_list>(<parameter><decl><type><name>RIntervalTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>end_inclusive</name></decl></parameter>, <parameter><decl><type><name>RIntervalIterCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_interval_node_all_intersect</name> <argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>end_inclusive</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
