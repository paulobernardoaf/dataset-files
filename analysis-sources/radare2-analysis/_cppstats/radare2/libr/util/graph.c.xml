<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\graph.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<enum>enum <block>{

<decl><name>WHITE_COLOR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>GRAY_COLOR</name></decl>,

<decl><name>BLACK_COLOR</name></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <name>RGraphNode</name> <modifier>*</modifier></type><name>r_graph_node_new</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RGraphNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>out_nodes</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>in_nodes</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>all_neighbours</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_graph_node_free</name> <parameter_list>(<parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>free</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>n</name><operator>-&gt;</operator><name>free</name></name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>out_nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>in_nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>all_neighbours</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>node_cmp</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>idx</name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>idx</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dfs_node</name> <parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>RGraphVisitor</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>color</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RStack</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_stack_new</name> <argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>n_edges</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RGraphEdge</name> <modifier>*</modifier></type><name>edg</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RGraphEdge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>edg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_stack_free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>edg</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>edg</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_stack_push</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>edg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>r_stack_is_empty</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RGraphEdge</name> <modifier>*</modifier></type><name>cur_edge</name> <init>= <expr><operator>(</operator><name>RGraphEdge</name> <operator>*</operator><operator>)</operator><call><name>r_stack_pop</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>v</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>cur_edge</name><operator>-&gt;</operator><name>to</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>from</name> <init>= <expr><name><name>cur_edge</name><operator>-&gt;</operator><name>from</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&amp;&amp;</operator> <name>cur</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>color</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name> <operator>==</operator> <name>WHITE_COLOR</name> <operator>&amp;&amp;</operator> <name><name>vis</name><operator>-&gt;</operator><name>tree_edge</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>vis</name><operator>-&gt;</operator><name>tree_edge</name></name> <argument_list>(<argument><expr><name>cur_edge</name></expr></argument>, <argument><expr><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>color</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name> <operator>==</operator> <name>GRAY_COLOR</name> <operator>&amp;&amp;</operator> <name><name>vis</name><operator>-&gt;</operator><name>back_edge</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>vis</name><operator>-&gt;</operator><name>back_edge</name></name> <argument_list>(<argument><expr><name>cur_edge</name></expr></argument>, <argument><expr><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>color</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name> <operator>==</operator> <name>BLACK_COLOR</name> <operator>&amp;&amp;</operator> <name><name>vis</name><operator>-&gt;</operator><name>fcross_edge</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>vis</name><operator>-&gt;</operator><name>fcross_edge</name></name> <argument_list>(<argument><expr><name>cur_edge</name></expr></argument>, <argument><expr><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>cur</name> <operator>&amp;&amp;</operator> <name>from</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>color</name><index>[<expr><name><name>from</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name> <operator>!=</operator> <name>BLACK_COLOR</name> <operator>&amp;&amp;</operator> <name><name>vis</name><operator>-&gt;</operator><name>finish_node</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>vis</name><operator>-&gt;</operator><name>finish_node</name></name> <argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>color</name><index>[<expr><name><name>from</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name> <operator>=</operator> <name>BLACK_COLOR</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cur_edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name> <operator>||</operator> <name><name>color</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name> <operator>!=</operator> <name>WHITE_COLOR</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>color</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name> <operator>==</operator> <name>WHITE_COLOR</name> <operator>&amp;&amp;</operator> <name><name>vis</name><operator>-&gt;</operator><name>discover_node</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>vis</name><operator>-&gt;</operator><name>discover_node</name></name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>color</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name> <operator>=</operator> <name>GRAY_COLOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>edg</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RGraphEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>edg</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>edg</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_stack_push</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>edg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>neighbours</name> <init>= <expr><ternary><condition><expr><name>direction</name></expr> ?</condition><then> <expr><name><name>cur</name><operator>-&gt;</operator><name>out_nodes</name></name></expr> </then><else>: <expr><name><name>cur</name><operator>-&gt;</operator><name>in_nodes</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>neighbours</argument>, <argument>it</argument>, <argument>v</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>edg</name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr><name>RGraphEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>edg</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>edg</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>edg</name><operator>-&gt;</operator><name>nth</name></name> <operator>=</operator> <name>i</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_stack_push</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>edg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_stack_free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RGraph</name> <modifier>*</modifier></type><name>r_graph_new</name> <parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RGraph</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>nodes</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>nodes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_graph_free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>nodes</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator><name>r_graph_node_free</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>n_nodes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>last_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_graph_free</name> <parameter_list>(<parameter><decl><type><name>RGraph</name><modifier>*</modifier></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RGraphNode</name> <modifier>*</modifier></type><name>r_graph_get_node</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraph</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_list_find</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>idx</name></expr></argument>, <argument><expr><operator>(</operator><name>RListComparator</name><operator>)</operator><name>node_cmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>RGraphNode</name> <operator>*</operator><operator>)</operator><name><name>it</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RListIter</name> <modifier>*</modifier></type><name>r_graph_node_iter</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraph</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_list_find</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>idx</name></expr></argument>, <argument><expr><operator>(</operator><name>RListComparator</name><operator>)</operator><name>node_cmp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_graph_reset</name> <parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>nodes</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>nodes</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>nodes</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator><name>r_graph_node_free</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>n_nodes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>n_edges</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>last_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RGraphNode</name> <modifier>*</modifier></type><name>r_graph_add_node</name> <parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>r_graph_node_new</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>last_index</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>n_nodes</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_graph_del_node</name><parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>gn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>n-&gt;in_nodes</argument>, <argument>it</argument>, <argument>gn</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>out_nodes</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>all_neighbours</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>n_edges</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>r_list_foreach</name> <argument_list>(<argument>n-&gt;out_nodes</argument>, <argument>it</argument>, <argument>gn</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>in_nodes</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>all_neighbours</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>n_edges</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>n_nodes</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_graph_add_edge</name> <parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_graph_add_edge_at</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_graph_add_edge_at</name> <parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nth</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&amp;&amp;</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_insert</name> <argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>out_nodes</name></name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>all_neighbours</name></name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>in_nodes</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>all_neighbours</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>n_edges</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RGraphNode</name> <modifier>*</modifier></type><name>r_graph_node_split_forward</name> <parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>split_me</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>front</name> <init>= <expr><call><name>r_graph_add_node</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>front</name><operator>-&gt;</operator><name>out_nodes</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>front</name><operator>-&gt;</operator><name>out_nodes</name></name> <operator>=</operator> <name><name>split_me</name><operator>-&gt;</operator><name>out_nodes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>split_me</name><operator>-&gt;</operator><name>out_nodes</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>front-&gt;out_nodes</argument>, <argument>iter</argument>, <argument>n</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>in_nodes</name></name></expr></argument>, <argument><expr><name>split_me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>all_neighbours</name></name></expr></argument>, <argument><expr><name>split_me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>split_me</name><operator>-&gt;</operator><name>all_neighbours</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>all_neighbours</name></name></expr></argument>, <argument><expr><name>front</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>in_nodes</name></name></expr></argument>, <argument><expr><name>front</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>front</name><operator>-&gt;</operator><name>all_neighbours</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>front</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_graph_del_edge</name> <parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>from</name> <operator>||</operator> <operator>!</operator><name>to</name> <operator>||</operator> <operator>!</operator><call><name>r_graph_adjacent</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>out_nodes</name></name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>all_neighbours</name></name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>in_nodes</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>all_neighbours</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>n_edges</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_graph_get_neighbours</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>n</name></expr>?</condition><then> <expr><name><name>n</name><operator>-&gt;</operator><name>out_nodes</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RGraphNode</name> <modifier>*</modifier></type><name>r_graph_nth_neighbour</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nth</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>n</name></expr>?</condition><then> <expr><operator>(</operator><name>RGraphNode</name> <operator>*</operator><operator>)</operator><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>out_nodes</name></name></expr></argument>, <argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_graph_innodes</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>n</name></expr>?</condition><then> <expr><name><name>n</name><operator>-&gt;</operator><name>in_nodes</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_graph_all_neighbours</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>n</name></expr>?</condition><then> <expr><name><name>n</name><operator>-&gt;</operator><name>all_neighbours</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_graph_get_nodes</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>g</name></expr>?</condition><then> <expr><name><name>g</name><operator>-&gt;</operator><name>nodes</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_graph_adjacent</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RGraphNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RGraphNode</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name> <operator>||</operator> <operator>!</operator><name>from</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>out_nodes</name></name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_graph_dfs_node</name> <parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>RGraphVisitor</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name> <operator>||</operator> <operator>!</operator><name>n</name> <operator>||</operator> <operator>!</operator><name>vis</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>color</name> <init>= <expr><call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>last_index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dfs_node</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>vis</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_graph_dfs_node_reverse</name> <parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>RGraphVisitor</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name> <operator>||</operator> <operator>!</operator><name>n</name> <operator>||</operator> <operator>!</operator><name>vis</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>color</name> <init>= <expr><call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>last_index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dfs_node</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>vis</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_graph_dfs</name> <parameter_list>(<parameter><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>RGraphVisitor</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>g</name> <operator>&amp;&amp;</operator> <name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>color</name> <init>= <expr><call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>last_index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>g-&gt;nodes</argument>, <argument>it</argument>, <argument>n</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>color</name><index>[<expr><name><name>n</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name> <operator>==</operator> <name>WHITE_COLOR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dfs_node</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>vis</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
