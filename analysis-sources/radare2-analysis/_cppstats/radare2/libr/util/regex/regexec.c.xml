<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\regex\regexec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_regex.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex2.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>states</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>states1</name></cpp:macro> <cpp:value>states</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) = 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) &amp;= ~((unsigned long)1 &lt;&lt; (n)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) |= (unsigned long)1 &lt;&lt; (n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSET</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; ((unsigned long)1 &lt;&lt; (n))) != 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSIGN</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d) = (s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EQ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) == (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATEVARS</name></cpp:macro> <cpp:value>long dummy</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATESETUP</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATETEARDOWN</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETUP</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) = 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onestate</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((o) = (unsigned long)1 &lt;&lt; (n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INC</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((o) &lt;&lt;= 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSTATEIN</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; (o)) != 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FWD</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dst) |= ((unsigned long)(src)&amp;(here)) &lt;&lt; (n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACK</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dst) |= ((unsigned long)(src)&amp;(here)) &gt;&gt; (n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSETBACK</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; ((unsigned long)here &gt;&gt; (n))) != 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNAMES</name></cpp:macro></cpp:define> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"engine.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>states</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CLEAR</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET0</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET1</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ISSET</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ASSIGN</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EQ</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STATEVARS</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STATESETUP</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STATETEARDOWN</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SETUP</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>onestate</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INIT</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ISSTATEIN</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FWD</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BACK</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ISSETBACK</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SNAMES</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>states</name></cpp:macro> <cpp:value>char *</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(v, 0, m-&gt;g-&gt;nstates)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v)[n] = 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v)[n] = 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSET</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v)[n])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSIGN</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy(d, s, m-&gt;g-&gt;nstates)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EQ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(memcmp(a, b, m-&gt;g-&gt;nstates) == 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATEVARS</name></cpp:macro> <cpp:value>long vn; char *space</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATESETUP</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>nv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (m)-&gt;space = malloc((nv)*(m)-&gt;g-&gt;nstates); if (!(m)-&gt;space) return R_REGEX_ESPACE; (m)-&gt;vn = 0; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATETEARDOWN</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ free((m)-&gt;space); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETUP</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) = &amp;m-&gt;space[m-&gt;vn++ * m-&gt;g-&gt;nstates])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onestate</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((o) = (n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INC</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((o)++)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSTATEIN</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v)[o])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FWD</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dst)[here+(n)] |= (src)[here])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACK</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dst)[here-(n)] |= (src)[here])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSETBACK</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v)[here - (n)])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LNAMES</name></cpp:macro></cpp:define> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"engine.c"</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_regex_check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RRegex</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_regex_exec</name> <argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>re_flags</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> 

<name>r_regex_exec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RRegex</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmatch</name></decl></parameter>,

<parameter><decl><type><name>RRegexMatch</name></type> <name><name>pmatch</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>re_guts</name></name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOODFLAGS</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(f)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOODFLAGS</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((f)&amp;(R_REGEX_NOTBOL|R_REGEX_NOTEOL|R_REGEX_STARTEND))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>preg</name> <operator>||</operator> <operator>!</operator><name>string</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_REGEX_ASSERT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>preg</name><operator>-&gt;</operator><name>re_g</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>preg</name><operator>-&gt;</operator><name>re_magic</name></name> <operator>!=</operator> <name>MAGIC1</name> <operator>||</operator> <name><name>g</name><operator>-&gt;</operator><name>magic</name></name> <operator>!=</operator> <name>MAGIC2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>R_REGEX_BADPAT</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>iflags</name></name> <operator>&amp;</operator> <name>BAD</name></expr>)</condition> <block>{<block_content> 

<return>return <expr><operator>(</operator><name>R_REGEX_BADPAT</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>eflags</name> <operator>=</operator> <call><name>GOODFLAGS</name><argument_list>(<argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>nstates</name></name> <operator>&lt;=</operator> <name>CHAR_BIT</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>states1</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>eflags</name> <operator>&amp;</operator> <name>R_REGEX_LARGE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return<expr><operator>(</operator><call><name>smatcher</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>(</operator><call><name>lmatcher</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
