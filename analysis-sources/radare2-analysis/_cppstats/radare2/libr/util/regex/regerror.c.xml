<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\regex\regerror.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_regex.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>regatoi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RRegex</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct><specifier>static</specifier> struct <name>rerr</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>explain</name></decl>;</decl_stmt>

}</block> <decl><name><name>rerrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>R_REGEX_NOMATCH</name></expr>, <expr><literal type="string">"R_REGEX_NOMATCH"</literal></expr>, <expr><literal type="string">"regexec() failed to match"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>R_REGEX_BADPAT</name></expr>, <expr><literal type="string">"R_REGEX_BADPAT"</literal></expr>, <expr><literal type="string">"invalid regular expression"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>R_REGEX_ECOLLATE</name></expr>, <expr><literal type="string">"R_REGEX_ECOLLATE"</literal></expr>, <expr><literal type="string">"invalid collating element"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>R_REGEX_ECTYPE</name></expr>, <expr><literal type="string">"R_REGEX_ECTYPE"</literal></expr>, <expr><literal type="string">"invalid character class"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>R_REGEX_EESCAPE</name></expr>, <expr><literal type="string">"R_REGEX_EESCAPE"</literal></expr>, <expr><literal type="string">"trailing backslash (\\)"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>R_REGEX_ESUBREG</name></expr>, <expr><literal type="string">"R_REGEX_ESUBREG"</literal></expr>, <expr><literal type="string">"invalid backreference number"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>R_REGEX_EBRACK</name></expr>, <expr><literal type="string">"R_REGEX_EBRACK"</literal></expr>, <expr><literal type="string">"brackets ([ ]) not balanced"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>R_REGEX_EPAREN</name></expr>, <expr><literal type="string">"R_REGEX_EPAREN"</literal></expr>, <expr><literal type="string">"parentheses not balanced"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>R_REGEX_EBRACE</name></expr>, <expr><literal type="string">"R_REGEX_EBRACE"</literal></expr>, <expr><literal type="string">"braces not balanced"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>R_REGEX_BADBR</name></expr>, <expr><literal type="string">"R_REGEX_BADBR"</literal></expr>, <expr><literal type="string">"invalid repetition count(s)"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>R_REGEX_ERANGE</name></expr>, <expr><literal type="string">"R_REGEX_ERANGE"</literal></expr>, <expr><literal type="string">"invalid character range"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>R_REGEX_ESPACE</name></expr>, <expr><literal type="string">"R_REGEX_ESPACE"</literal></expr>, <expr><literal type="string">"out of memory"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>R_REGEX_BADRPT</name></expr>, <expr><literal type="string">"R_REGEX_BADRPT"</literal></expr>, <expr><literal type="string">"repetition-operator operand invalid"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>R_REGEX_EMPTY</name></expr>, <expr><literal type="string">"R_REGEX_EMPTY"</literal></expr>, <expr><literal type="string">"empty (sub)expression"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>R_REGEX_ASSERT</name></expr>, <expr><literal type="string">"R_REGEX_ASSERT"</literal></expr>, <expr><literal type="string">"\"can't happen\" -- you found a bug"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>R_REGEX_INVARG</name></expr>, <expr><literal type="string">"R_REGEX_INVARG"</literal></expr>, <expr><literal type="string">"invalid argument to regex routine"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"*** unknown regexp error code ***"</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><name>size_t</name></type>

<name>r_regex_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errcode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RRegex</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>errbuf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rerr</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>target</name> <init>= <expr><name>errcode</name> <operator>&amp;</operator><operator>~</operator> <name>R_REGEX_ITOA</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>convbuf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>errcode</name> <operator>==</operator> <name>R_REGEX_ATOI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>regatoi</name><argument_list>(<argument><expr><name>preg</name></expr></argument>, <argument><expr><name>convbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>convbuf</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name>rerrs</name></expr>;</init> <condition><expr><name><name>r</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>errcode</name><operator>&amp;</operator><name>R_REGEX_ITOA</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRLCPY</name> <argument_list>(<argument><expr><name>convbuf</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>convbuf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>convbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>convbuf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"R_REGEX_0x%x"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>convbuf</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>explain</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errbuf_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>errbuf_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>regatoi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RRegex</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>localbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>localbufsize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rerr</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name>rerrs</name></expr>;</init> <condition><expr><name><name>r</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>preg</name><operator>-&gt;</operator><name>re_endp</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><literal type="string">"0"</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>localbuf</name></expr></argument>, <argument><expr><name>localbufsize</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return<expr><operator>(</operator><name>localbuf</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

</unit>
