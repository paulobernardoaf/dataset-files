<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\pkcs7.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./x509.h"</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>r_x509_name_json</name> <parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>RX509Name</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>r_x509_free_crl</name> <parameter_list>(<parameter><decl><type><name>RX509CertificateRevocationList</name> <modifier>*</modifier></type><name>crl</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>r_x509_crlentry_dump</name> <parameter_list>(<parameter><decl><type><name>RX509CRLEntry</name> <modifier>*</modifier></type><name>crle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name></decl></parameter>, <parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>r_pkcs7_parse_attributes</name><parameter_list>(<parameter><decl><type><name>RPKCS7Attributes</name> <modifier>*</modifier></type><name>attribute</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_pkcs7_parse_contentinfo</name><parameter_list>(<parameter><decl><type><name>RPKCS7ContentInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ci</name> <operator>||</operator> <operator>!</operator><name>object</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>contentType</name></name> <operator>=</operator> <call><name>r_asn1_stringify_oid</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>obj1</name> <init>= <expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obj1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <call><name>r_asn1_create_binary</name> <argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_pkcs7_parse_certificaterevocationlists</name><parameter_list>(<parameter><decl><type><name>RPKCS7CertificateRevocationLists</name> <modifier>*</modifier></type><name>crls</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>crls</name> <operator>||</operator> <operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>crls</name><operator>-&gt;</operator><name>elements</name></name> <operator>=</operator> <operator>(</operator><name>RX509CertificateRevocationList</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RX509CertificateRevocationList</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>crls</name><operator>-&gt;</operator><name>elements</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>crls</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>crls</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>crls</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>r_x509_parse_crl</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_pkcs7_free_certificaterevocationlists</name><parameter_list>(<parameter><decl><type><name>RPKCS7CertificateRevocationLists</name> <modifier>*</modifier></type><name>crls</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>crls</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>crls</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_free_crl</name> <argument_list>(<argument><expr><name><name>crls</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crls</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>crls</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_pkcs7_parse_extendedcertificatesandcertificates</name><parameter_list>(<parameter><decl><type><name>RPKCS7ExtendedCertificatesAndCertificates</name> <modifier>*</modifier></type><name>ecac</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ecac</name> <operator>||</operator> <operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ecac</name><operator>-&gt;</operator><name>elements</name></name> <operator>=</operator> <operator>(</operator><name>RX509Certificate</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RX509Certificate</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ecac</name><operator>-&gt;</operator><name>elements</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ecac</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ecac</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ecac</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>r_x509_parse_certificate</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_pkcs7_free_extendedcertificatesandcertificates</name><parameter_list>(<parameter><decl><type><name>RPKCS7ExtendedCertificatesAndCertificates</name> <modifier>*</modifier></type><name>ecac</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ecac</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ecac</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_free_certificate</name> <argument_list>(<argument><expr><name><name>ecac</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecac</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ecac</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_pkcs7_parse_digestalgorithmidentifier</name><parameter_list>(<parameter><decl><type><name>RPKCS7DigestAlgorithmIdentifiers</name> <modifier>*</modifier></type><name>dai</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dai</name> <operator>||</operator> <operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dai</name><operator>-&gt;</operator><name>elements</name></name> <operator>=</operator> <operator>(</operator><name>RX509AlgorithmIdentifier</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RX509AlgorithmIdentifier</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dai</name><operator>-&gt;</operator><name>elements</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dai</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dai</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dai</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>RX509AlgorithmIdentifier</name> <operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RX509AlgorithmIdentifier</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dai</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>dai</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RX509AlgorithmIdentifier</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_parse_algorithmidentifier</name> <argument_list>(<argument><expr><name><name>dai</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_pkcs7_free_digestalgorithmidentifier</name><parameter_list>(<parameter><decl><type><name>RPKCS7DigestAlgorithmIdentifiers</name> <modifier>*</modifier></type><name>dai</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dai</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dai</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dai</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_free_algorithmidentifier</name> <argument_list>(<argument><expr><name><name>dai</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>dai</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>dai</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_pkcs7_free_contentinfo</name><parameter_list>(<parameter><decl><type><name>RPKCS7ContentInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ci</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_asn1_free_binary</name> <argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>contentType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_pkcs7_parse_issuerandserialnumber</name><parameter_list>(<parameter><decl><type><name>RPKCS7IssuerAndSerialNumber</name> <modifier>*</modifier></type><name>iasu</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iasu</name> <operator>||</operator> <operator>!</operator><name>object</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_x509_parse_name</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>iasu</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>obj1</name> <init>= <expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obj1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>iasu</name><operator>-&gt;</operator><name>serialNumber</name></name> <operator>=</operator> <call><name>r_asn1_create_binary</name> <argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_pkcs7_free_issuerandserialnumber</name><parameter_list>(<parameter><decl><type><name>RPKCS7IssuerAndSerialNumber</name> <modifier>*</modifier></type><name>iasu</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>iasu</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_free_name</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>iasu</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_binary</name> <argument_list>(<argument><expr><name><name>iasu</name><operator>-&gt;</operator><name>serialNumber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_pkcs7_parse_signerinfo</name><parameter_list>(<parameter><decl><type><name>RPKCS7SignerInfo</name> <modifier>*</modifier></type><name>si</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier><modifier>*</modifier></type><name>elems</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>si</name> <operator>||</operator> <operator>!</operator><name>object</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>elems</name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name><name>elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>sector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pkcs7_parse_issuerandserialnumber</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>issuerAndSerialNumber</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_parse_algorithmidentifier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>digestAlgorithm</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name><operator>-&gt;</operator><name>klass</name> <operator>==</operator> <name>CLASS_CONTEXT</name> <operator>&amp;&amp;</operator> <name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name><operator>-&gt;</operator><name>tag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_pkcs7_parse_attributes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>authenticatedAttributes</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_parse_algorithmidentifier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>digestEncryptionAlgorithm</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>obj1</name> <init>= <expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>shift</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obj1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>encryptedDigest</name></name> <operator>=</operator> <call><name>r_asn1_create_binary</name> <argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>elem</name> <init>= <expr><name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>elem</name> <operator>&amp;&amp;</operator> <name><name>elem</name><operator>-&gt;</operator><name>klass</name></name> <operator>==</operator> <name>CLASS_CONTEXT</name> <operator>&amp;&amp;</operator> <name><name>elem</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_pkcs7_parse_attributes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>unauthenticatedAttributes</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_pkcs7_free_attribute</name><parameter_list>(<parameter><decl><type><name>RPKCS7Attribute</name> <modifier>*</modifier></type><name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>attribute</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_asn1_free_binary</name> <argument_list>(<argument><expr><name><name>attribute</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name><name>attribute</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_pkcs7_free_attributes</name><parameter_list>(<parameter><decl><type><name>RPKCS7Attributes</name> <modifier>*</modifier></type><name>attributes</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>attributes</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>attributes</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_pkcs7_free_attribute</name> <argument_list>(<argument><expr><name><name>attributes</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>attributes</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_pkcs7_free_signerinfo</name><parameter_list>(<parameter><decl><type><name>RPKCS7SignerInfo</name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>si</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_pkcs7_free_issuerandserialnumber</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>issuerAndSerialNumber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_free_algorithmidentifier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>digestAlgorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pkcs7_free_attributes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>authenticatedAttributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_free_algorithmidentifier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>digestEncryptionAlgorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_binary</name> <argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>encryptedDigest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pkcs7_free_attributes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>unauthenticatedAttributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_pkcs7_parse_signerinfos</name><parameter_list>(<parameter><decl><type><name>RPKCS7SignerInfos</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ss</name> <operator>||</operator> <operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>elements</name></name> <operator>=</operator> <operator>(</operator><name>RPKCS7SignerInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPKCS7SignerInfo</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>elements</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ss</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RPKCS7SignerInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pkcs7_parse_signerinfo</name> <argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_pkcs7_free_signerinfos</name><parameter_list>(<parameter><decl><type><name>RPKCS7SignerInfos</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ss</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ss</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_pkcs7_free_signerinfo</name> <argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_pkcs7_parse_signeddata</name><parameter_list>(<parameter><decl><type><name>RPKCS7SignedData</name> <modifier>*</modifier></type><name>sd</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sd</name> <operator>||</operator> <operator>!</operator><name>object</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RPKCS7SignedData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier><modifier>*</modifier></type><name>elems</name> <init>= <expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name><name>elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>sector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pkcs7_parse_digestalgorithmidentifier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sd</name><operator>-&gt;</operator><name>digestAlgorithms</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pkcs7_parse_contentinfo</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sd</name><operator>-&gt;</operator><name>contentInfo</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>shift</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name><operator>-&gt;</operator><name>klass</name> <operator>==</operator> <name>CLASS_CONTEXT</name> <operator>&amp;&amp;</operator> <name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name><operator>-&gt;</operator><name>tag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_pkcs7_parse_extendedcertificatesandcertificates</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sd</name><operator>-&gt;</operator><name>certificates</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>shift</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name><operator>-&gt;</operator><name>klass</name> <operator>==</operator> <name>CLASS_CONTEXT</name> <operator>&amp;&amp;</operator> <name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name><operator>-&gt;</operator><name>tag</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_pkcs7_parse_certificaterevocationlists</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sd</name><operator>-&gt;</operator><name>crls</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_pkcs7_parse_signerinfos</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sd</name><operator>-&gt;</operator><name>signerinfos</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_pkcs7_free_signeddata</name><parameter_list>(<parameter><decl><type><name>RPKCS7SignedData</name> <modifier>*</modifier></type><name>sd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_pkcs7_free_digestalgorithmidentifier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sd</name><operator>-&gt;</operator><name>digestAlgorithms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pkcs7_free_contentinfo</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sd</name><operator>-&gt;</operator><name>contentInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pkcs7_free_extendedcertificatesandcertificates</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sd</name><operator>-&gt;</operator><name>certificates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pkcs7_free_certificaterevocationlists</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sd</name><operator>-&gt;</operator><name>crls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pkcs7_free_signerinfos</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sd</name><operator>-&gt;</operator><name>signerinfos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RCMS</name> <modifier>*</modifier></type><name>r_pkcs7_parse_cms</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCMS</name> <modifier>*</modifier></type><name>container</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <operator>!</operator><name>length</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>container</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>container</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>r_asn1_create_object</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name></name> <operator>||</operator>

<operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator>

<name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>list</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_asn1_free_object</name> <argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>container</name><operator>-&gt;</operator><name>contentType</name></name> <operator>=</operator> <call><name>r_asn1_stringify_oid</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_pkcs7_parse_signeddata</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>container</name><operator>-&gt;</operator><name>signedData</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asn1_free_object</name> <argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>container</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_pkcs7_free_cms</name><parameter_list>(<parameter><decl><type><name>RCMS</name> <modifier>*</modifier></type><name>container</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>container</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name><name>container</name><operator>-&gt;</operator><name>contentType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pkcs7_free_signeddata</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>container</name><operator>-&gt;</operator><name>signedData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RPKCS7Attribute</name> <modifier>*</modifier></type><name>r_pkcs7_parse_attribute</name><parameter_list>(<parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RPKCS7Attribute</name> <modifier>*</modifier></type><name>attribute</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>attribute</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RPKCS7Attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attribute</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>attribute</name><operator>-&gt;</operator><name>oid</name></name> <operator>=</operator> <call><name>r_asn1_stringify_oid</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>obj1</name> <init>= <expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obj1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>attribute</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>r_asn1_create_binary</name> <argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>attribute</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_pkcs7_parse_attributes</name><parameter_list>(<parameter><decl><type><name>RPKCS7Attributes</name> <modifier>*</modifier></type><name>attributes</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attributes</name> <operator>||</operator> <operator>!</operator><name>object</name> <operator>||</operator> <operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>attributes</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>attributes</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>attributes</name><operator>-&gt;</operator><name>elements</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>RPKCS7Attribute</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>attributes</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>attributes</name><operator>-&gt;</operator><name>elements</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>attributes</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>attributes</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>r_pkcs7_parse_attribute</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static void r_pkcs7_signerinfos_dump(RX509CertificateRevocationList *crl, const char* pad, RStrBuf *sb) {

RASN1String *algo = NULL, *last = NULL, *next = NULL;

ut32 i;

char *pad2, *pad3;

if (!crl) {

return;

}

if (!pad) {

pad = "";

}

pad3 = r_str_newf ("%s ", pad);

if (!pad3) return;

pad2 = pad3 + 2;

algo = crl-&gt;signature.algorithm;

last = crl-&gt;lastUpdate;

next = crl-&gt;nextUpdate;

r_strbuf_appendf (sb, "%sCRL:\n%sSignature:\n%s%s\n%sIssuer\n", pad, pad2, pad3, algo ? algo-&gt;string : "", pad2);

r_x509_name_dump (&amp;crl-&gt;issuer, pad3, sb);

r_strbuf_appendf (sb, "%sLast Update: %s\n%sNext Update: %s\n%sRevoked Certificates:\n",

pad2, last ? last-&gt;string : "Missing",

pad2, next ? next-&gt;string : "Missing", pad2);

for (i = 0; i &lt; crl-&gt;length; i++) {

r_x509_crlentry_dump (crl-&gt;revokedCertificates[i], pad3, sb);

}

free (pad3);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_x509_signedinfo_dump</name><parameter_list>(<parameter><decl><type><name>RPKCS7SignerInfo</name> <modifier>*</modifier></type><name>si</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name></decl></parameter>, <parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RASN1Binary</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pad2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pad3</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>si</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pad</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pad3</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pad3</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pad2</name> <operator>=</operator> <name>pad3</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sSignerInfo:\n%sVersion: v%u\n%sIssuer\n"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>pad2</name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>version</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pad2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_name_dump</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>issuerAndSerialNumber</name><operator>.</operator><name>issuer</name></name></expr></argument>, <argument><expr><name>pad3</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>o</name> <operator>=</operator> <name><name>si</name><operator>-&gt;</operator><name>issuerAndSerialNumber</name><operator>.</operator><name>serialNumber</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_asn1_stringify_integer</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sSerial Number:\n%s%s\n"</literal></expr></argument>, <argument><expr><name>pad2</name></expr></argument>, <argument><expr><name>pad3</name></expr></argument>, <argument><expr><ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">"Missing"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>si</name><operator>-&gt;</operator><name>digestAlgorithm</name><operator>.</operator><name>algorithm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sDigest Algorithm:\n%s%s\n%sAuthenticated Attributes:\n"</literal></expr></argument>,

<argument><expr><name>pad2</name></expr></argument>, <argument><expr><name>pad3</name></expr></argument>, <argument><expr><ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">"Missing"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>pad2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>authenticatedAttributes</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPKCS7Attribute</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name><name>si</name><operator>-&gt;</operator><name>authenticatedAttributes</name><operator>.</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s%s: %u bytes\n"</literal></expr></argument>, <argument><expr><name>pad3</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>attr</name><operator>-&gt;</operator><name>oid</name></name></expr> ?</condition><then> <expr><name><name>attr</name><operator>-&gt;</operator><name>oid</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">"Missing"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>attr</name><operator>-&gt;</operator><name>data</name></name></expr> ?</condition><then> <expr><name><name>attr</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>length</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>si</name><operator>-&gt;</operator><name>digestEncryptionAlgorithm</name><operator>.</operator><name>algorithm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sDigest Encryption Algorithm\n%s%s\n"</literal></expr></argument>, <argument><expr><name>pad2</name></expr></argument>, <argument><expr><name>pad3</name></expr></argument>, <argument><expr><ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">"Missing"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sEncrypted Digest: %u bytes\n"</literal></expr></argument>, <argument><expr><name>pad2</name></expr></argument>, <argument><expr><ternary><condition><expr><name>o</name></expr> ?</condition><then> <expr><name><name>o</name><operator>-&gt;</operator><name>length</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sUnauthenticated Attributes:\n"</literal></expr></argument>, <argument><expr><name>pad2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>unauthenticatedAttributes</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPKCS7Attribute</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name><name>si</name><operator>-&gt;</operator><name>unauthenticatedAttributes</name><operator>.</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s%s: %u bytes\n"</literal></expr></argument>, <argument><expr><name>pad3</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>attr</name><operator>-&gt;</operator><name>oid</name></name></expr> ?</condition><then> <expr><name><name>attr</name><operator>-&gt;</operator><name>oid</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">"Missing"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>o</name></expr> ?</condition><then> <expr><name><name>o</name><operator>-&gt;</operator><name>length</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pad3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_pkcs7_cms_to_string</name><parameter_list>(<parameter><decl><type><name>RCMS</name> <modifier>*</modifier></type><name>container</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>container</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RPKCS7SignedData</name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><operator>&amp;</operator><name><name>container</name><operator>-&gt;</operator><name>signedData</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"signedData\n Version: v%u\n Digest Algorithms:\n"</literal></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>digestAlgorithms</name><operator>.</operator><name>elements</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>digestAlgorithms</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>digestAlgorithms</name><operator>.</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>digestAlgorithms</name><operator>.</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>algorithm</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">"Missing"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" Certificates: %u\n"</literal></expr></argument>, <argument><expr><name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>certificates</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>certificates</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_certificate_dump</name> <argument_list>(<argument><expr><name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>certificates</name><operator>.</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>crls</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_x509_crl_to_string</name> <argument_list>(<argument><expr><name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>crls</name><operator>.</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" SignerInfos:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>signerinfos</name><operator>.</operator><name>elements</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>signerinfos</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_signedinfo_dump</name> <argument_list>(<argument><expr><name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>signerinfos</name><operator>.</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_x509_signedinfo_json</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>RPKCS7SignerInfo</name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>si</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_ki</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Version"</literal></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>version</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Issuer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_name_json</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>issuerAndSerialNumber</name><operator>.</operator><name>issuer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>issuerAndSerialNumber</name><operator>.</operator><name>serialNumber</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1Binary</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>si</name><operator>-&gt;</operator><name>issuerAndSerialNumber</name><operator>.</operator><name>serialNumber</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_asn1_stringify_integer</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"SerialNumber"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>digestAlgorithm</name><operator>.</operator><name>algorithm</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"DigestAlgorithm"</literal></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>digestAlgorithm</name><operator>.</operator><name>algorithm</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"AuthenticatedAttributes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>authenticatedAttributes</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPKCS7Attribute</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name><name>si</name><operator>-&gt;</operator><name>authenticatedAttributes</name><operator>.</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>oid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"oid"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>oid</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ki</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>digestEncryptionAlgorithm</name><operator>.</operator><name>algorithm</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"DigestEncryptionAlgorithm"</literal></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>digestEncryptionAlgorithm</name><operator>.</operator><name>algorithm</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>encryptedDigest</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1Binary</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>si</name><operator>-&gt;</operator><name>encryptedDigest</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_asn1_stringify_integer</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"EncryptedDigest"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"UnauthenticatedAttributes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>unauthenticatedAttributes</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RPKCS7Attribute</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name><name>si</name><operator>-&gt;</operator><name>unauthenticatedAttributes</name><operator>.</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>oid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"oid"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>oid</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ki</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>r_pkcs7_cms_json</name> <parameter_list>(<parameter><decl><type><name>RCMS</name> <modifier>*</modifier></type><name>container</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>container</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pj</name> <operator>=</operator> <call><name>pj_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Version"</literal></expr></argument>, <argument><expr><name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>digestAlgorithms</name><operator>.</operator><name>elements</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"DigestAlgorithms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>digestAlgorithms</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>digestAlgorithms</name><operator>.</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>digestAlgorithms</name><operator>.</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>algorithm</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_s</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Certificates"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>certificates</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_certificate_json</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>certificates</name><operator>.</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"CRL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>crls</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_crl_json</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>crls</name><operator>.</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"SignerInfos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>signerinfos</name><operator>.</operator><name>elements</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>signerinfos</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_signedinfo_json</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><name><name>container</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>signerinfos</name><operator>.</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_pkcs7_parse_spcdata</name><parameter_list>(<parameter><decl><type><name>SpcAttributeTypeAndOptionalValue</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name> <operator>||</operator> <operator>!</operator><name>object</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator>

<operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>r_asn1_stringify_oid</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>obj1</name> <init>= <expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>obj1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>r_asn1_create_binary</name> <argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_pkcs7_parse_spcmessagedigest</name><parameter_list>(<parameter><decl><type><name>SpcDigestInfo</name> <modifier>*</modifier></type><name>messageDigest</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>messageDigest</name> <operator>||</operator> <operator>!</operator><name>object</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator>

<operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_x509_parse_algorithmidentifier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>messageDigest</name><operator>-&gt;</operator><name>digestAlgorithm</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>obj1</name> <init>= <expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>messageDigest</name><operator>-&gt;</operator><name>digest</name></name> <operator>=</operator> <call><name>r_asn1_create_binary</name> <argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>SpcIndirectDataContent</name> <modifier>*</modifier></type><name>r_pkcs7_parse_spcinfo</name><parameter_list>(<parameter><decl><type><name>RCMS</name> <modifier>*</modifier></type><name>cms</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RASN1Binary</name> <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SpcIndirectDataContent</name> <modifier>*</modifier></type><name>spcinfo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cms</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spcinfo</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>SpcIndirectDataContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spcinfo</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>content</name> <operator>=</operator> <name><name>cms</name><operator>-&gt;</operator><name>signedData</name><operator>.</operator><name>contentInfo</name><operator>.</operator><name>content</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>r_asn1_create_object</name> <argument_list>(<argument><expr><name><name>content</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>, <argument><expr><name><name>content</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>content</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name></name> <operator>||</operator>

<operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_asn1_free_object</name> <argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>spcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_pkcs7_parse_spcdata</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>spcinfo</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_pkcs7_parse_spcmessagedigest</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>spcinfo</name><operator>-&gt;</operator><name>messageDigest</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asn1_free_object</name> <argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>spcinfo</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_pkcs7_free_spcdata</name><parameter_list>(<parameter><decl><type><name>SpcAttributeTypeAndOptionalValue</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_binary</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_pkcs7_free_spcmessagedigest</name><parameter_list>(<parameter><decl><type><name>SpcDigestInfo</name> <modifier>*</modifier></type><name>messageDigest</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>messageDigest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_asn1_free_binary</name> <argument_list>(<argument><expr><name><name>messageDigest</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_free_algorithmidentifier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>messageDigest</name><operator>-&gt;</operator><name>digestAlgorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_pkcs7_free_spcinfo</name><parameter_list>(<parameter><decl><type><name>SpcIndirectDataContent</name> <modifier>*</modifier></type><name>spcinfo</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>spcinfo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_pkcs7_free_spcdata</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>spcinfo</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pkcs7_free_spcmessagedigest</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>spcinfo</name><operator>-&gt;</operator><name>messageDigest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
