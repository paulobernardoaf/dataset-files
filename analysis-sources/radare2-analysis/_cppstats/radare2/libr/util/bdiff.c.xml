<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\bdiff.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_diff.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<struct>struct <name>line</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>pos</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>hunk</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>hunklist</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>hunk</name></name> <modifier>*</modifier></type><name>base</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>splitlines</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>line</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>lr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>plast</name> <init>= <expr><name>a</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>line</name></name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"null pointer received\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>a</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>a</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>p</name> <operator>==</operator> <name>plast</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>lr</name> <operator>=</operator> <name>l</name> <operator>=</operator> <operator>(</operator>struct <name>line</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>line</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>l</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>a</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>a</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>*</operator> <literal type="number">1664525</literal><operator>)</operator> <operator>+</operator> <operator>*</operator><name>p</name> <operator>+</operator> <literal type="number">1013904223</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>p</name> <operator>==</operator> <name>plast</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>line</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>h</name></name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>len</name></name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>l</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>l</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>equatelines</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>an</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>line</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>buckets</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pos</name></name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>buckets</name> <operator>&lt;</operator> <name>bn</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buckets</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for <control>(<init><expr><name>scale</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>scale</name></expr>;</condition> <incr><expr><name>scale</name> <operator>/=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator>struct <name>pos</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>scale</name> <operator>*</operator> <name>buckets</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>pos</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buckets</name> <operator>=</operator> <name>buckets</name> <operator>*</operator> <name>scale</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>buckets</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>bn</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>&amp;</operator> <name>buckets</name></expr>;</init> <condition><expr><name><name>h</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>!=</operator> <name>INT_MAX</name></expr>;</condition>

<incr><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>buckets</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cmp</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <name><name>h</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name> <operator>=</operator> <name><name>h</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>e</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>len</name><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><name>t</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>bn</name> <operator>&gt;=</operator> <literal type="number">4000</literal><operator>)</operator></expr> ?</condition><then> <expr><name>bn</name> <operator>/</operator> <literal type="number">1000</literal></expr> </then><else>: <expr><name>bn</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>an</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>&amp;</operator> <name>buckets</name></expr>;</init> <condition><expr><name><name>h</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>!=</operator> <name>INT_MAX</name></expr>;</condition>

<incr><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>buckets</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cmp</name> <argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <name><name>h</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>e</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&lt;=</operator> <name>t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name> <operator>=</operator> <name><name>h</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pos</name></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>longest_match</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>line</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pos</name></name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>omi</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>omj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mi</name> <init>= <expr><name>a1</name></expr></init></decl>, <decl><type ref="prev"/><name>mj</name> <init>= <expr><name>b1</name></expr></init></decl>, <decl><type ref="prev"/><name>mk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>a1</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>a2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>b1</name></expr>;</condition> <incr><expr><name>j</name> <operator>=</operator> <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>n</name></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>b2</name></expr>;</condition> <incr><expr><name>j</name> <operator>=</operator> <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>n</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>a1</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&gt;</operator> <name>b1</name> <operator>&amp;&amp;</operator> <name><name>pos</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name> <operator>==</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>pos</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pos</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <name>mk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mi</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mj</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mk</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>mk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mi</name> <operator>=</operator> <name>mi</name> <operator>-</operator> <name>mk</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mj</name> <operator>=</operator> <name>mj</name> <operator>-</operator> <name>mk</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>mi</name> <operator>-</operator> <name>mb</name> <operator>&gt;</operator> <name>a1</name> <operator>&amp;&amp;</operator> <name>mj</name> <operator>-</operator> <name>mb</name> <operator>&gt;</operator> <name>b1</name> <operator>&amp;&amp;</operator>

<name><name>a</name><index>[<expr><name>mi</name> <operator>-</operator> <name>mb</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>e</name> <operator>==</operator> <name><name>b</name><index>[<expr><name>mj</name> <operator>-</operator> <name>mb</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mb</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>mi</name> <operator>+</operator> <name>mk</name> <operator>&lt;</operator> <name>a2</name> <operator>&amp;&amp;</operator> <name>mj</name> <operator>+</operator> <name>mk</name> <operator>&lt;</operator> <name>b2</name> <operator>&amp;&amp;</operator>

<name><name>a</name><index>[<expr><name>mi</name> <operator>+</operator> <name>mk</name></expr>]</index></name><operator>.</operator><name>e</name> <operator>==</operator> <name><name>b</name><index>[<expr><name>mj</name> <operator>+</operator> <name>mk</name></expr>]</index></name><operator>.</operator><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mk</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>omi</name> <operator>=</operator> <name>mi</name> <operator>-</operator> <name>mb</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>omj</name> <operator>=</operator> <name>mj</name> <operator>-</operator> <name>mb</name></expr>;</expr_stmt>

<return>return <expr><name>mk</name> <operator>+</operator> <name>mb</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recurse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>line</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pos</name></name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b2</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hunklist</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>longest_match</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>k</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>recurse</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <name>j</name> <operator>+</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>head</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>recurse</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>hunklist</name></name></type> <name>diff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>an</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>line</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>hunklist</name></name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hunk</name></name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pos</name></name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>equatelines</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>an</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator>struct <name>pos</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><ternary><condition><expr><name>bn</name></expr> ?</condition><then> <expr><name>bn</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pos</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>.</operator><name>head</name></name> <operator>=</operator> <name><name>l</name><operator>.</operator><name>base</name></name> <operator>=</operator> <operator>(</operator>struct <name>hunk</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hunk</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>

<operator>(</operator><operator>(</operator><ternary><condition><expr><name>an</name><operator>&lt;</operator><name>bn</name></expr> ?</condition><then> <expr><name>an</name></expr></then><else>:<expr><name>bn</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&amp;&amp;</operator> <name><name>l</name><operator>.</operator><name>base</name></name> <operator>&amp;&amp;</operator> <name>t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>recurse</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>an</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>.</operator><name>head</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <name><name>l</name><operator>.</operator><name>head</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <name>an</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>.</operator><name>head</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <name><name>l</name><operator>.</operator><name>head</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <name>bn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>.</operator><name>head</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>curr</name> <operator>=</operator> <name><name>l</name><operator>.</operator><name>base</name></name></expr>;</init> <condition><expr><name>curr</name> <operator>!=</operator> <name><name>l</name><operator>.</operator><name>head</name></name></expr>;</condition> <incr><expr><name>curr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>hunk</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>curr</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name><name>l</name><operator>.</operator><name>head</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>a2</name></name> <operator>==</operator> <name><name>next</name><operator>-&gt;</operator><name>a1</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>a2</name></name> <operator>+</operator> <name>shift</name> <operator>&lt;</operator> <name>an</name> <operator>&amp;&amp;</operator> <name><name>curr</name><operator>-&gt;</operator><name>b2</name></name> <operator>+</operator> <name>shift</name> <operator>&lt;</operator> <name>bn</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>cmp</name> <argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name><name>curr</name><operator>-&gt;</operator><name>a2</name></name> <operator>+</operator> <name>shift</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <name><name>curr</name><operator>-&gt;</operator><name>b2</name></name> <operator>+</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>b2</name></name> <operator>==</operator> <name><name>next</name><operator>-&gt;</operator><name>b1</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>b2</name></name> <operator>+</operator> <name>shift</name> <operator>&lt;</operator> <name>bn</name> <operator>&amp;&amp;</operator> <name><name>curr</name><operator>-&gt;</operator><name>a2</name></name> <operator>+</operator> <name>shift</name> <operator>&lt;</operator> <name>an</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>cmp</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name><name>curr</name><operator>-&gt;</operator><name>b2</name></name> <operator>+</operator> <name>shift</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name><name>curr</name><operator>-&gt;</operator><name>a2</name></name> <operator>+</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shift</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>b2</name></name> <operator>+=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>b1</name></name> <operator>+=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>a2</name></name> <operator>+=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>a1</name></name> <operator>+=</operator> <name>shift</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_diff_buffers_delta</name><parameter_list>(<parameter><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>la</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RDiffOp</name></type> <name>dop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>line</name></name> <modifier>*</modifier></type><name>al</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>line</name></name> <modifier>*</modifier></type><name>bl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hunklist</name></name></type> <name>l</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hunk</name></name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>an</name></decl>, <decl><type ref="prev"/><name>bn</name></decl>, <decl><type ref="prev"/><name>offa</name></decl>, <decl><type ref="prev"/><name>rlen</name></decl>, <decl><type ref="prev"/><name>offb</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hits</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>an</name> <operator>=</operator> <call><name>splitlines</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>sa</name></expr></argument>, <argument><expr><name>la</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>an</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bn</name> <operator>=</operator> <call><name>splitlines</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>sb</name></expr></argument>, <argument><expr><name>lb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bn</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>al</name> <operator>||</operator> <operator>!</operator><name>bl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"bindiff_buffers: Out of memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>diff</name> <argument_list>(<argument><expr><name>al</name></expr></argument>, <argument><expr><name>an</name></expr></argument>, <argument><expr><name>bl</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>l</name><operator>.</operator><name>head</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"bindiff_buffers: Out of memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hits</name> <operator>=</operator> <name>la</name> <operator>=</operator> <name>lb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <name><name>l</name><operator>.</operator><name>base</name></name></expr>;</init> <condition><expr><name>h</name> <operator>!=</operator> <name><name>l</name><operator>.</operator><name>head</name></name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>a1</name></name> <operator>!=</operator> <name>la</name> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>b1</name></name> <operator>!=</operator> <name>lb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>bl</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>b1</name></name></expr>]</index></name><operator>.</operator><name>l</name> <operator>-</operator> <name><name>bl</name><index>[<expr><name>lb</name></expr>]</index></name><operator>.</operator><name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offa</name> <operator>=</operator> <name><name>al</name><index>[<expr><name>la</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>-</operator> <name><name>al</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offb</name> <operator>=</operator> <name><name>al</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>a1</name></name></expr>]</index></name><operator>.</operator><name>l</name> <operator>-</operator> <name><name>al</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rlen</name> <operator>=</operator> <name>offb</name><operator>-</operator><name>offa</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>callback</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dop</name><operator>.</operator><name>a_off</name></name> <operator>=</operator> <name>offa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dop</name><operator>.</operator><name>a_buf</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>al</name><index>[<expr><name>la</name></expr>]</index></name><operator>.</operator><name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dop</name><operator>.</operator><name>a_len</name></name> <operator>=</operator> <name>rlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dop</name><operator>.</operator><name>b_off</name></name> <operator>=</operator> <name>offa</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dop</name><operator>.</operator><name>b_buf</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>bl</name><index>[<expr><name>lb</name></expr>]</index></name><operator>.</operator><name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dop</name><operator>.</operator><name>b_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>d</name><operator>-&gt;</operator><name>callback</name></name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

if (rlen &gt; 0) {

printf ("r-%d @ 0x%"PFMT64x"\n", rlen, (ut64)offa);

}

printf ("e file.write=true\n"); 

printf ("wx ");

for(i=0;i&lt;len;i++)

printf ("%02x", bl[lb].l[i]);

printf (" @ 0x%"PFMT64x"\n", (ut64)offa);

rb += 12 + len;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>la</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>a2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lb</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>b2</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hits</name></expr>;</return>

</block_content>}</block></function>

</unit>
