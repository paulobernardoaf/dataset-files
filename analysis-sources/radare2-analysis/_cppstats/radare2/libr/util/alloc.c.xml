<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\alloc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_alloc.h&gt;</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>void</name></type> <name>r_alloc_init</name> <parameter_list>()</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_MALLOC_WRAPPER</name></expr></cpp:if>

<expr_stmt><expr><call><name>r_alloc_hooks</name> <argument_list>(<argument><expr><name>malloc</name></expr></argument>, <argument><expr><name>calloc</name></expr></argument>, <argument><expr><name>realloc</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_MALLOC_WRAPPER</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_MALLOC_GLOBAL</name></expr></cpp:if>

<decl_stmt><decl><type><name>R_API</name> <name>RMalloc</name> <modifier>*</modifier></type><name>r_malloc</name> <init>= <expr><name>malloc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>R_API</name> <name>RCalloc</name> <modifier>*</modifier></type><name>r_calloc</name> <init>= <expr><name>calloc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>R_API</name> <name>RRealloc</name> <modifier>*</modifier></type><name>r_realloc</name> <init>= <expr><name>realloc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>R_API</name> <name>RFree</name> <modifier>*</modifier></type><name>r_free</name> <init>= <expr><name>free</name></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>void</name></type> <name>r_alloc_hooks</name><parameter_list>(<parameter><decl><type><name>RMalloc</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>RCalloc</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>RRealloc</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>RFree</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>m</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&amp;&amp;</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r_malloc</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_calloc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_realloc</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r_free</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name>RMalloc</name> <modifier>*</modifier></type><name>_r_malloc</name> <init>= <expr><name>malloc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RCalloc</name> <modifier>*</modifier></type><name>_r_calloc</name> <init>= <expr><name>calloc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RRealloc</name> <modifier>*</modifier></type><name>_r_realloc</name> <init>= <expr><name>realloc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RFree</name> <modifier>*</modifier></type><name>_r_free</name> <init>= <expr><name>free</name></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>void</name></type> <name>r_alloc_hooks</name><parameter_list>(<parameter><decl><type><name>RMalloc</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>RCalloc</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>RRealloc</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>RFree</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>m</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&amp;&amp;</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_r_malloc</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>

<expr_stmt><expr><name>_r_calloc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>_r_realloc</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>_r_free</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>_r_malloc</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_calloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>_r_calloc</name> <argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>_r_realloc</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>_r_free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>R_API</name> <name>void</name><modifier>*</modifier></type> <name>r_malloc_aligned</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>alignment</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>_r_malloc</name> <argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p1</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p2</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p1</name><operator>)</operator> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>alignment</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p2</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>

<return>return <expr><name>p2</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_free_aligned</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>_r_free</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
