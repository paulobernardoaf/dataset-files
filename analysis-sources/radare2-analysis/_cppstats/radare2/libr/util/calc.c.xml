<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\calc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RNumCalcValue</name></type> <name>Nset</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>v</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> <return>return <expr><name>n</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RNumCalcValue</name></type> <name>Nsetf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name>v</name></expr>;</expr_stmt> <return>return <expr><name>n</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RNumCalcValue</name></type> <name>Naddi</name><parameter_list>(<parameter><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>v</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt> <return>return <expr><name>n</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RNumCalcValue</name></type> <name>Nsubi</name><parameter_list>(<parameter><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>-=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>v</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>-=</operator> <name>v</name></expr>;</expr_stmt> <return>return <expr><name>n</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RNumCalcValue</name></type> <name>Nneg</name><parameter_list>(<parameter><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>=</operator> <operator>~</operator><name><name>n</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt> <return>return <expr><name>n</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RNumCalcValue</name></type> <name>Norr</name><parameter_list>(<parameter><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>RNumCalcValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>|=</operator> <name><name>v</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt> <return>return <expr><name>n</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RNumCalcValue</name></type> <name>Nxor</name><parameter_list>(<parameter><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>RNumCalcValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>^=</operator> <name><name>v</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt> <return>return <expr><name>n</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RNumCalcValue</name></type> <name>Nand</name><parameter_list>(<parameter><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>RNumCalcValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>&amp;=</operator> <name><name>v</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt> <return>return <expr><name>n</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RNumCalcValue</name></type> <name>Nadd</name><parameter_list>(<parameter><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>RNumCalcValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>+=</operator> <name><name>v</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>+=</operator> <name><name>v</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt> <return>return <expr><name>n</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RNumCalcValue</name></type> <name>Nsub</name><parameter_list>(<parameter><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>RNumCalcValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>-=</operator> <name><name>v</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>-=</operator> <name><name>v</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt> <return>return <expr><name>n</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RNumCalcValue</name></type> <name>Nmul</name><parameter_list>(<parameter><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>RNumCalcValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>*=</operator> <name><name>v</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>*=</operator> <name><name>v</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RNumCalcValue</name></type> <name>Nshl</name><parameter_list>(<parameter><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>RNumCalcValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>+=</operator> <name><name>v</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>&lt;&lt;=</operator> <name><name>v</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt> <return>return <expr><name>n</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RNumCalcValue</name></type> <name>Nshr</name><parameter_list>(<parameter><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>RNumCalcValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>+=</operator> <name><name>v</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>&gt;&gt;=</operator> <name><name>v</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt> <return>return <expr><name>n</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RNumCalcValue</name></type> <name>Nrol</name><parameter_list>(<parameter><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>RNumCalcValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>+=</operator> <name><name>v</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>=</operator> <operator>(</operator><name><name>n</name><operator>.</operator><name>n</name></name> <operator>&lt;&lt;</operator> <name><name>v</name><operator>.</operator><name>n</name></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>n</name><operator>.</operator><name>n</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name><name>v</name><operator>.</operator><name>n</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RNumCalcValue</name></type> <name>Nror</name><parameter_list>(<parameter><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>RNumCalcValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>+=</operator> <name><name>v</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>=</operator> <operator>(</operator><name><name>n</name><operator>.</operator><name>n</name></name> <operator>&gt;&gt;</operator> <name><name>v</name><operator>.</operator><name>n</name></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>n</name><operator>.</operator><name>n</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name><name>v</name><operator>.</operator><name>n</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RNumCalcValue</name></type> <name>Nmod</name><parameter_list>(<parameter><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>RNumCalcValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>.</operator><name>d</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>=</operator> <operator>(</operator><name><name>n</name><operator>.</operator><name>d</name></name> <operator>-</operator> <operator>(</operator><name><name>n</name><operator>.</operator><name>d</name></name> <operator>/</operator> <name><name>v</name><operator>.</operator><name>d</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>.</operator><name>n</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>%=</operator> <name><name>v</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RNumCalcValue</name></type> <name>Ndiv</name><parameter_list>(<parameter><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>RNumCalcValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>.</operator><name>d</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>/=</operator> <name><name>v</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>.</operator><name>n</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>/=</operator> <name><name>v</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>RNumCalcValue</name></type> <name>expr</name><parameter_list>(<parameter><decl><type><name>RNum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>RNumCalc</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RNumCalcValue</name></type> <name>term</name><parameter_list>(<parameter><decl><type><name>RNum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>RNumCalc</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><name>RNum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>RNumCalc</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RNumCalcValue</name></type> <name>prim</name><parameter_list>(<parameter><decl><type><name>RNum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>RNumCalc</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RNumCalcToken</name></type> <name>get_token</name><parameter_list>(<parameter><decl><type><name>RNum</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>RNumCalc</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>RNumCalc</name> <modifier>*</modifier></type><name>nc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>errors</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>calc_err</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RNumCalcValue</name></type> <name>expr</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>RNumCalc</name> <modifier>*</modifier></type><name>nc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>get</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RNumCalcValue</name></type> <name>left</name> <init>= <expr><call><name>term</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>get</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RNCSHL</name></expr>:</case> <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>Nshl</name> <argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><call><name>term</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RNCSHR</name></expr>:</case> <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>Nshr</name> <argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><call><name>term</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RNCROL</name></expr>:</case> <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>Nrol</name> <argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><call><name>term</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RNCROR</name></expr>:</case> <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>Nror</name> <argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><call><name>term</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RNCPLUS</name></expr>:</case> <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>Nadd</name> <argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><call><name>term</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RNCMINUS</name></expr>:</case> <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>Nsub</name> <argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><call><name>term</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RNCXOR</name></expr>:</case> <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>Nxor</name> <argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><call><name>term</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RNCORR</name></expr>:</case> <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>Norr</name> <argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><call><name>term</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RNCAND</name></expr>:</case> <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>Nand</name> <argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><call><name>term</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<return>return <expr><name>left</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><name>left</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RNumCalcValue</name></type> <name>term</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>RNumCalc</name> <modifier>*</modifier></type><name>nc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>get</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RNumCalcValue</name></type> <name>left</name> <init>= <expr><call><name>prim</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>get</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>==</operator> <name>RNCMUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>Nmul</name> <argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><call><name>prim</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>==</operator> <name>RNCMOD</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RNumCalcValue</name></type> <name>d</name> <init>= <expr><call><name>prim</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><operator>.</operator><name>d</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>Nmod</name> <argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>==</operator> <name>RNCDIV</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RNumCalcValue</name></type> <name>d</name> <init>= <expr><call><name>prim</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>d</name><operator>.</operator><name>d</name></name> <operator>||</operator> <operator>!</operator><name><name>d</name><operator>.</operator><name>n</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>num</name><operator>-&gt;</operator><name>dbz</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>Ndiv</name> <argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>left</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RNumCalcValue</name></type> <name>prim</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>RNumCalc</name> <modifier>*</modifier></type><name>nc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>get</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RNumCalcValue</name></type> <name>v</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>get</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_token</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RNCNUMBER</name></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>nc</name><operator>-&gt;</operator><name>number_value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_token</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>v</name></expr>;</return>

<case>case <expr><name>RNCNAME</name></expr>:</case>

<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name><name>nc</name><operator>-&gt;</operator><name>string_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>Nset</name> <argument_list>(<argument><expr><call><name>r_num_get</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>nc</name><operator>-&gt;</operator><name>string_value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_token</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>==</operator> <name>RNCASSIGN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>expr</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>==</operator> <name>RNCINC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Naddi</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>==</operator> <name>RNCDEC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Nsubi</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>v</name></expr>;</return>

<case>case <expr><name>RNCNEG</name></expr>:</case>

<expr_stmt><expr><call><name>get_token</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>Nneg</name> <argument_list>(<argument><expr><name><name>nc</name><operator>-&gt;</operator><name>number_value</name></name></expr></argument>)</argument_list></call></expr>;</return> 

<case>case <expr><name>RNCINC</name></expr>:</case>

<return>return <expr><call><name>Naddi</name> <argument_list>(<argument><expr><call><name>prim</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>RNCDEC</name></expr>:</case>

<return>return <expr><call><name>Naddi</name> <argument_list>(<argument><expr><call><name>prim</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>RNCORR</name></expr>:</case>

<return>return <expr><call><name>Norr</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>prim</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>RNCMINUS</name></expr>:</case>

<return>return <expr><call><name>Nsub</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>prim</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>RNCLEFTP</name></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>expr</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>==</operator> <name>RNCRIGHTP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_token</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>error</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="string">" ')' expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<case>case <expr><name>RNCEND</name></expr>:</case>

<case>case <expr><name>RNCXOR</name></expr>:</case>

<case>case <expr><name>RNCAND</name></expr>:</case>

<case>case <expr><name>RNCPLUS</name></expr>:</case>

<case>case <expr><name>RNCMOD</name></expr>:</case>

<case>case <expr><name>RNCMUL</name></expr>:</case>

<case>case <expr><name>RNCDIV</name></expr>:</case>

<case>case <expr><name>RNCPRINT</name></expr>:</case>

<case>case <expr><name>RNCASSIGN</name></expr>:</case>

<case>case <expr><name>RNCRIGHTP</name></expr>:</case>

<case>case <expr><name>RNCSHL</name></expr>:</case>

<case>case <expr><name>RNCSHR</name></expr>:</case>

<case>case <expr><name>RNCROL</name></expr>:</case>

<case>case <expr><name>RNCROR</name></expr>:</case>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cin_putback</name> <parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>RNumCalc</name> <modifier>*</modifier></type><name>nc</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>oc</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_num_calc_index</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>num</name><operator>-&gt;</operator><name>nc</name><operator>.</operator><name>calc_buf</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>num</name><operator>-&gt;</operator><name>nc</name><operator>.</operator><name>calc_len</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>num</name><operator>-&gt;</operator><name>nc</name><operator>.</operator><name>calc_i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>num</name><operator>-&gt;</operator><name>nc</name><operator>.</operator><name>calc_buf</name></name> <operator>+</operator> <name><name>num</name><operator>-&gt;</operator><name>nc</name><operator>.</operator><name>calc_i</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cin_get</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>RNumCalc</name> <modifier>*</modifier></type><name>nc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>nc</name><operator>-&gt;</operator><name>oc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name><name>nc</name><operator>-&gt;</operator><name>oc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>oc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nc</name><operator>-&gt;</operator><name>calc_buf</name></name> <operator>||</operator> <operator>!</operator><operator>*</operator><name><name>nc</name><operator>-&gt;</operator><name>calc_buf</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name><name>nc</name><operator>-&gt;</operator><name>calc_buf</name><index>[<expr><name><name>nc</name><operator>-&gt;</operator><name>calc_i</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>calc_i</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cin_get_num</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>RNumCalc</name> <modifier>*</modifier></type><name>nc</name></decl></parameter>, <parameter><decl><type><name>RNumCalcValue</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>R_NUMCALC_STRSZ</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>cin_get</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isalnum</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cin_putback</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>R_NUMCALC_STRSZ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>n</name> <operator>=</operator> <call><name>Nset</name> <argument_list>(<argument><expr><call><name>r_num_get</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>n</name></name> <operator>&lt;</operator> <name>d</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>n</name> <operator>=</operator> <call><name>Nsetf</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RNumCalcToken</name></type> <name>get_token</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>RNumCalc</name> <modifier>*</modifier></type><name>nc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cin_get</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <name>RNCEND</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <call><name>isspace</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<case>case <expr><literal type="char">';'</literal></expr>:</case>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <name>RNCEND</name></expr>;</return>

<case>case <expr><literal type="char">'+'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><name>cin_get</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <name>RNCINC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cin_putback</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <operator>(</operator><name>RNumCalcToken</name><operator>)</operator> <name>ch</name></expr>;</return>

<case>case <expr><literal type="char">'~'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>cin_get</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <name>RNCNEG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cin_putback</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <operator>(</operator><name>RNumCalcToken</name><operator>)</operator> <name>ch</name></expr>;</return>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>cin_get</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <name>RNCDEC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cin_putback</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <operator>(</operator><name>RNumCalcToken</name><operator>)</operator> <name>ch</name></expr>;</return>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>cin_get</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cin_get</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <name>RNCROL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cin_putback</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <name>RNCSHL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cin_putback</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <name>RNCEND</name></expr>;</return>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>cin_get</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cin_get</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <name>RNCROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cin_putback</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <name>RNCSHR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cin_putback</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <name>RNCEND</name></expr>;</return>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>

<case>case <expr><literal type="char">'|'</literal></expr>:</case>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<case>case <expr><literal type="char">'%'</literal></expr>:</case>

<case>case <expr><literal type="char">'/'</literal></expr>:</case>

<case>case <expr><literal type="char">'('</literal></expr>:</case>

<case>case <expr><literal type="char">')'</literal></expr>:</case>

<case>case <expr><literal type="char">'='</literal></expr>:</case>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <operator>(</operator><name>RNumCalcToken</name><operator>)</operator> <name>ch</name></expr>;</return>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>

<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>

<expr_stmt><expr><call><name>cin_putback</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cin_get_num</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nc</name><operator>-&gt;</operator><name>number_value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="string">"invalid number conversion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <name>RNCNUMBER</name></expr>;</return>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isvalidchar</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isalnum(x) || (x)==':' || (x)=='$' || (x)=='.' || (x)=='_' || (x)=='?' || (x)=='\\' || (x)==' ' || (x)=='[' || (x)==']' || (x)=='}' || (x)=='{' || ((x)&gt;='0'&amp;&amp;(x)&lt;='9'))</cpp:value></cpp:define>

<default>default:</default>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stringValueAppend</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ const size_t max = sizeof (nc-&gt;string_value) - 1; if (i &lt; max) nc-&gt;string_value[i++] = x; else nc-&gt;string_value[max] = 0; }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>stringValueAppend</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>cin_get</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ch</name><operator>!=</operator><literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>R_NUMCALC_STRSZ</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="string">"string too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stringValueAppend</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>stringValueAppend</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><call><name>cin_get</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isvalidchar</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>R_NUMCALC_STRSZ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="string">"string too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stringValueAppend</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>stringValueAppend</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name><operator>!=</operator><literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cin_putback</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <name>RNCNAME</name></expr>;</return>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_token</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>RNumCalc</name> <modifier>*</modifier></type><name>nc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>calc_i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>calc_len</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>calc_buf</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>calc_err</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_num_calc</name><parameter_list>(<parameter><decl><type><name>RNum</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RNumCalc</name> <modifier>*</modifier></type><name>nc</name></decl>, <decl><type ref="prev"/><name>nc_local</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nc</name> <operator>=</operator> <operator>&amp;</operator><name><name>num</name><operator>-&gt;</operator><name>nc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>num</name><operator>-&gt;</operator><name>dbz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>nc</name> <operator>=</operator> <operator>&amp;</operator><name>nc_local</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>curr_tok</name></name> <operator>=</operator> <name>RNCPRINT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>number_value</name><operator>.</operator><name>d</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>number_value</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>errors</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>oc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>calc_err</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>calc_i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>calc_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>calc_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>under_calc</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load_token</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_token</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>expr</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name><name>nc</name><operator>-&gt;</operator><name>calc_err</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>num</name><operator>-&gt;</operator><name>fvalue</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>nc</name><operator>-&gt;</operator><name>under_calc</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name><name>n</name><operator>.</operator><name>n</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RNumCalcValue</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RNumCalc</name></type> <name>nc</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>feof</name> <argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_token</name> <argument_list>(<argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nc</name><operator>.</operator><name>curr_tok</name></name> <operator>==</operator> <name>RNCEND</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nc</name><operator>.</operator><name>curr_tok</name></name> <operator>==</operator> <name>RNCPRINT</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>expr</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>.</operator><name>d</name></name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>n</name><operator>.</operator><name>d</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content><macro><name>Â </name></macro><block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%llx\n"</literal></expr></argument>, <argument><expr><name><name>n</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></block_content></block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%lf\n"</literal></expr></argument>, <argument><expr><name><name>n</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name><name>nc</name><operator>-&gt;</operator><name>errors</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
