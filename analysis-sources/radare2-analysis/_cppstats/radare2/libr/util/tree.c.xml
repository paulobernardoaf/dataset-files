<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\tree.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tree_dfs_node</name> <parameter_list>(<parameter><decl><type><name>RTreeNode</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RTreeVisitor</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RStack</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTreeNode</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_stack_new</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_stack_push</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>r_stack_is_empty</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RTreeNode</name> <modifier>*</modifier></type><name>el</name> <init>= <expr><operator>(</operator><name>RTreeNode</name> <operator>*</operator><operator>)</operator><call><name>r_stack_pop</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vis</name><operator>-&gt;</operator><name>pre_visit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>vis</name><operator>-&gt;</operator><name>pre_visit</name></name> <argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach_prev</name> <argument_list>(<argument>el-&gt;children</argument>, <argument>it</argument>, <argument>n</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vis</name><operator>-&gt;</operator><name>discover_child</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>vis</name><operator>-&gt;</operator><name>discover_child</name></name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_stack_push</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>vis</name><operator>-&gt;</operator><name>post_visit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>vis</name><operator>-&gt;</operator><name>post_visit</name></name> <argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_stack_free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_tree_node_free</name> <parameter_list>(<parameter><decl><type><name>RTreeNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>free</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>n</name><operator>-&gt;</operator><name>free</name></name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>node_free</name> <parameter_list>(<parameter><decl><type><name>RTreeNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>RTreeVisitor</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_tree_node_free</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_all_children</name> <parameter_list>(<parameter><decl><type><name>RTree</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RTreeVisitor</name></type> <name>vis</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vis</name><operator>.</operator><name>post_visit</name></name> <operator>=</operator> <operator>(</operator><name>RTreeNodeVisitCb</name><operator>)</operator><name>node_free</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_tree_bfs</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_depth</name> <parameter_list>(<parameter><decl><type><name>RTreeNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>RTreeVisitor</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>parent</name></name></expr> ?</condition><then> <expr><name><name>n</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>depth</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RTreeNode</name> <modifier>*</modifier></type><name>node_new</name> <parameter_list>(<parameter><decl><type><name>RTree</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RTreeNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RTreeNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>tree</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RTree</name> <modifier>*</modifier></type><name>r_tree_new</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RTree</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_tree_free</name> <parameter_list>(<parameter><decl><type><name>RTree</name><modifier>*</modifier></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free_all_children</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_tree_reset</name> <parameter_list>(<parameter><decl><type><name>RTree</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free_all_children</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RTreeNode</name> <modifier>*</modifier></type><name>r_tree_add_node</name> <parameter_list>(<parameter><decl><type><name>RTree</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>RTreeNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>child_data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RTreeNode</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTreeVisitor</name></type> <name>vis</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name> <operator>||</operator> <operator>(</operator><name>node</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>tree</name></name> <operator>!=</operator> <name>t</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>root</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>node</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>node_new</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>child_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>n_children</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vis</name><operator>.</operator><name>pre_visit</name></name> <operator>=</operator> <operator>(</operator><name>RTreeNodeVisitCb</name><operator>)</operator><name>update_depth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tree_dfs_node</name> <argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>child</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_tree_dfs</name> <parameter_list>(<parameter><decl><type><name>RTree</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>RTreeVisitor</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name> <operator>||</operator> <operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tree_dfs_node</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_tree_bfs</name> <parameter_list>(<parameter><decl><type><name>RTree</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>RTreeVisitor</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RQueue</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name> <operator>||</operator> <operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>r_queue_new</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_queue_enqueue</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>r_queue_is_empty</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RTreeNode</name> <modifier>*</modifier></type><name>el</name> <init>= <expr><operator>(</operator><name>RTreeNode</name> <operator>*</operator><operator>)</operator><call><name>r_queue_dequeue</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>el</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_queue_free</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RTreeNode</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vis</name><operator>-&gt;</operator><name>pre_visit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>vis</name><operator>-&gt;</operator><name>pre_visit</name></name> <argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>el-&gt;children</argument>, <argument>it</argument>, <argument>n</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vis</name><operator>-&gt;</operator><name>discover_child</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>vis</name><operator>-&gt;</operator><name>discover_child</name></name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_queue_enqueue</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>vis</name><operator>-&gt;</operator><name>post_visit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>vis</name><operator>-&gt;</operator><name>post_visit</name></name> <argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_queue_free</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
