<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\pj.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_print.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pj_raw</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>j</name> <operator>&amp;&amp;</operator> <name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>msg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pj_comma</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>j</name><operator>-&gt;</operator><name>is_key</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>j</name><operator>-&gt;</operator><name>is_first</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>is_first</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>is_key</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>PJ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>sb</name></name> <operator>=</operator> <call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>is_first</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>pj_free</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name><name>pj</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>pj_drain</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>pj</name> <operator>&amp;&amp;</operator> <name><name>pj</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name><name>pj</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pj</name><operator>-&gt;</operator><name>sb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pj_string</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>j</name></expr>?</condition><then> <expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PJ</name> <modifier>*</modifier></type><name>pj_begin</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>j</name> <operator>||</operator> <name><name>j</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;=</operator> <name>R_PRINT_JSON_DEPTH_LIMIT</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>type</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>braces</name><index>[<expr><name><name>j</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>type</name> <operator>==</operator> <literal type="char">'{'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'}'</literal></expr> </then><else>: <expr><literal type="char">']'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>level</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>is_first</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_o</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_comma</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>pj_begin</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_a</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_comma</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>pj_begin</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_end</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>j</name><operator>-&gt;</operator><name>level</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>j</name><operator>-&gt;</operator><name>level</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>j</name><operator>-&gt;</operator><name>braces</name><index>[<expr><name><name>j</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>is_first</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>j</name><operator>-&gt;</operator><name>braces</name><index>[<expr><name><name>j</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_k</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name> <operator>&amp;&amp;</operator> <name>k</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>is_key</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_s</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>is_first</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>is_key</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_knull</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name> <operator>&amp;&amp;</operator> <name>k</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_null</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_kn</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name> <operator>&amp;&amp;</operator> <name>k</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_n</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_kN</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;&amp;</operator> <name>k</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_N</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_kd</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name> <operator>&amp;&amp;</operator> <name>k</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_d</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_kf</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name> <operator>&amp;&amp;</operator> <name>k</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_f</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_ki</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name> <operator>&amp;&amp;</operator> <name>k</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_i</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_ko</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name> <operator>&amp;&amp;</operator> <name>k</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_ka</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name> <operator>&amp;&amp;</operator> <name>k</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_ks</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>v</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_s</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_kb</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name> <operator>&amp;&amp;</operator> <name>k</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_b</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_null</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_b</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_comma</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>r_str_bool</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_s</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name> <operator>&amp;&amp;</operator> <name>k</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_comma</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ek</name> <init>= <expr><call><name>r_str_escape_utf8_for_json</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ek</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>ek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"cannot escape string\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_r</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>v_len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name> <operator>&amp;&amp;</operator> <name>v</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>v_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>pj_i</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_kr</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>v_len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>v</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_r</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>v_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_j</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name> <operator>&amp;&amp;</operator> <name>k</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>k</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_comma</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_n</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_comma</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PFMT64u</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_N</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_comma</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_f</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_comma</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_d</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_comma</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>PJ</name> <modifier>*</modifier></type><name>pj_i</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_comma</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>pj_fmt</name><parameter_list>(<parameter><decl><type><name>PrintfCallback</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>ch</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>pj_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>is_first</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>fmt</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"\x1b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"\b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'\''</literal></expr>:</case>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'%'</literal></expr>:</case>

<expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<expr_stmt><expr><call><name>pj_b</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><call><name>pj_s</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>r_base64_encode_dyn</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pj_s</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><call><name>pj_n</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ut64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><call><name>pj_d</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><call><name>pj_i</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_raw</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_free</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pj_drain</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
