<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\big.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_big_zero</name><parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name><name>n</name><operator>-&gt;</operator><name>last</name></name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>n</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name><name>n</name><operator>-&gt;</operator><name>last</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>last</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>n</name><operator>-&gt;</operator><name>last</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name><name>n</name><operator>-&gt;</operator><name>dgts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_big_print</name><parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>last</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>sign</name></name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name><name>n</name><operator>-&gt;</operator><name>last</name></name></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal><operator>+</operator><name><name>n</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_big_set_str</name><parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>len</name><operator>=</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>str</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>str</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>str</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RNumBig</name> <modifier>*</modifier></type><name>r_big_new</name><parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RNumBig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RNumBig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>r_big_set_st</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_big_free</name><parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_big_set</name><parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RNumBig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_big_set_st</name><parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>v</name><operator>&gt;=</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>dgts</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BIG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name><name>n</name><operator>-&gt;</operator><name>last</name></name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>t</name><operator>=</operator><call><name>R_ABS</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>t</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>t</name><operator>/=</operator><literal type="number">10</literal></expr><operator>,</operator> <expr><name><name>n</name><operator>-&gt;</operator><name>last</name></name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name><name>n</name><operator>-&gt;</operator><name>last</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_big_set_st64</name><parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>st64</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>v</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><operator>-</operator><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>dgts</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BIG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>t</name><operator>=</operator><call><name>R_ABS</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>t</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>t</name><operator>/=</operator><literal type="number">10</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>last</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name><name>n</name><operator>-&gt;</operator><name>last</name></name></expr>]</index></name> <operator>=</operator> <name>t</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_big_add</name> <parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>carry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RNumBig</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_big_set_st</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>sign</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>sign</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>r_big_sub</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>r_big_sub</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>t</name><operator>.</operator><name>sign</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>last</name></name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>carry</name><operator>=</operator><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name><name>t</name><operator>.</operator><name>last</name></name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>R_BIG_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name>carry</name><operator>+</operator><name><name>a</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>b</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <operator>(</operator><name>carry</name> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_zero</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_big_sub</name><parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RNumBig</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>borrow</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_big_set_st</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>sign</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>sign</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_big_cmp</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_big_sub</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>sign</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>last</name></name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>borrow</name><operator>=</operator><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><operator>(</operator><name><name>t</name><operator>.</operator><name>last</name></name><operator>)</operator> <operator>&amp;&amp;</operator><name>i</name><operator>&lt;</operator><name>R_BIG_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>borrow</name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>v</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_zero</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_big_cmp</name><parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>sign</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>last</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>sign</name></name><operator>*</operator><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>last</name></name></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>sign</name></name><operator>*</operator><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>sign</name></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_big_cmp_st</name><parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_big_shift</name><parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>n</name><operator>-&gt;</operator><name>last</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name><name>n</name><operator>-&gt;</operator><name>dgts</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name><name>n</name><operator>-&gt;</operator><name>last</name></name></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name><operator>+</operator><name>d</name></expr>]</index></name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>dgts</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>last</name></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_big_mul</name> <parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RNumBig</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_big_set_st</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_set_st</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>R_BIG_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name><name>b</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_big_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_big_shift</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>sign</name></name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_zero</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_big_mul_ut</name> <parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_big_div</name><parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RNumBig</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>asign</name></decl>, <decl><type ref="prev"/><name>bsign</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_big_set_st</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>sign</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>sign</name></name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>asign</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bsign</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_set_st</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_set_st</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name><name>a</name><operator>-&gt;</operator><name>last</name></name></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_big_shift</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>row</name><operator>.</operator><name>dgts</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>r_big_cmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>dgts</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_sub</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_zero</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>asign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>bsign</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_big_div_ut</name><parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_big_divisible_ut</name><parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_big_mod</name><parameter_list>(<parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RNumBig</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RNumBig</name></type> <name>t</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>r_big_div</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_big_mul</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_big_sub</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

</unit>
