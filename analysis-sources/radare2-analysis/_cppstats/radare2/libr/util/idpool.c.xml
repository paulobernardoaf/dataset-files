<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\idpool.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;search.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>get_msb</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">31</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x1U</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x1U</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RIDPool</name><modifier>*</modifier></type> <name>r_id_pool_new</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>start_id</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>last_id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIDPool</name><modifier>*</modifier></type> <name>pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start_id</name> <operator>&lt;</operator> <name>last_id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIDPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>next_id</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>start_id</name></name> <operator>=</operator> <name>start_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>last_id</name></name> <operator>=</operator> <name>last_id</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pool</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_id_pool_grab_id</name><parameter_list>(<parameter><decl><type><name>RIDPool</name><modifier>*</modifier></type> <name>pool</name></decl></parameter>, <parameter><decl><type><name>ut32</name><modifier>*</modifier></type> <name>grabber</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name> <operator>||</operator> <operator>!</operator><name>grabber</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>freed_ids</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>grab</name> <init>= <expr><operator>(</operator><name>ut32</name><operator>)</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>r_queue_dequeue</name> <argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>freed_ids</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>grabber</name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <name>grab</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_queue_is_empty</name> <argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>freed_ids</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_queue_free</name> <argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>freed_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>freed_ids</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>next_id</name></name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>last_id</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>grabber</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>next_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>next_id</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_id_pool_kick_id</name><parameter_list>(<parameter><decl><type><name>RIDPool</name><modifier>*</modifier></type> <name>pool</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>kick</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name> <operator>||</operator> <operator>(</operator><name>kick</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>start_id</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>start_id</name></name> <operator>==</operator> <name><name>pool</name><operator>-&gt;</operator><name>next_id</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>kick</name> <operator>==</operator> <operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>next_id</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>next_id</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pool</name><operator>-&gt;</operator><name>freed_ids</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>freed_ids</name></name> <operator>=</operator> <call><name>r_queue_new</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_queue_enqueue</name> <argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>freed_ids</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>kick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_id_pool_free</name><parameter_list>(<parameter><decl><type><name>RIDPool</name><modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pool</name> <operator>&amp;&amp;</operator> <name><name>pool</name><operator>-&gt;</operator><name>freed_ids</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_queue_free</name> <argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>freed_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RIDStorage</name><modifier>*</modifier></type> <name>r_id_storage_new</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>start_id</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>last_id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIDPool</name><modifier>*</modifier></type> <name>pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIDStorage</name><modifier>*</modifier></type> <name>storage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>start_id</name> <operator>&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pool</name> <operator>=</operator> <call><name>r_id_pool_new</name> <argument_list>(<argument><expr><name>start_id</name></expr></argument>, <argument><expr><name>last_id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>storage</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIDStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>storage</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_id_pool_free</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>storage</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>id_storage_reallocate</name><parameter_list>(<parameter><decl><type><name>RIDStorage</name><modifier>*</modifier></type> <name>storage</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>storage</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>storage</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name><name>storage</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size</name> <operator>-</operator> <name><name>storage</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>oid_storage_preallocate</name><parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>permutation</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>permutation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>psize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>permutation</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>permutation</name></name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>permutation</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>st</name><operator>-&gt;</operator><name>psize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>permutation</name> <operator>+</operator> <name><name>st</name><operator>-&gt;</operator><name>psize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size</name> <operator>-</operator> <name><name>st</name><operator>-&gt;</operator><name>psize</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>permutation</name></name> <operator>=</operator> <name>permutation</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>psize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_id_storage_set</name><parameter_list>(<parameter><decl><type><name>RIDStorage</name><modifier>*</modifier></type> <name>storage</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>storage</name> <operator>||</operator> <operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>pool</name></name> <operator>||</operator> <operator>(</operator><name>id</name> <operator>&gt;=</operator> <name><name>storage</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>next_id</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>get_msb</name> <argument_list>(<argument><expr><name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name><name>storage</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>storage</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;</operator> <name><name>storage</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>last_id</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>id_storage_reallocate</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>!=</operator> <operator>(</operator><name><name>storage</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>last_id</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>id_storage_reallocate</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name><name>storage</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>last_id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <name><name>storage</name><operator>-&gt;</operator><name>top_id</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>top_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_id_storage_add</name><parameter_list>(<parameter><decl><type><name>RIDStorage</name><modifier>*</modifier></type> <name>storage</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>ut32</name><modifier>*</modifier></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>storage</name> <operator>||</operator> <operator>!</operator><call><name>r_id_pool_grab_id</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_id_storage_set</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>*</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name><modifier>*</modifier></type> <name>r_id_storage_get</name><parameter_list>(<parameter><decl><type><name>RIDStorage</name><modifier>*</modifier></type> <name>storage</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>storage</name> <operator>||</operator> <operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> <operator>(</operator><name><name>storage</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <name>id</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>storage</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_id_storage_delete</name><parameter_list>(<parameter><decl><type><name>RIDStorage</name><modifier>*</modifier></type> <name>storage</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>storage</name> <operator>||</operator> <operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> <operator>(</operator><name><name>storage</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <name>id</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name><name>storage</name><operator>-&gt;</operator><name>top_id</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>storage</name><operator>-&gt;</operator><name>top_id</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>storage</name><operator>-&gt;</operator><name>top_id</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>top_id</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>top_id</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>storage</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>storage</name><operator>-&gt;</operator><name>top_id</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>id_storage_reallocate</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>RIDPool</name><modifier>*</modifier></type> <name>pool</name> <init>= <expr><call><name>r_id_pool_new</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>start_id</name></name></expr></argument>, <argument><expr><name><name>storage</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>last_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_id_pool_free</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>storage</name><operator>-&gt;</operator><name>top_id</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name><name>storage</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>id_storage_reallocate</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name><name>storage</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_id_pool_kick_id</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name><modifier>*</modifier></type> <name>r_id_storage_take</name><parameter_list>(<parameter><decl><type><name>RIDStorage</name><modifier>*</modifier></type> <name>storage</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><call><name>r_id_storage_get</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_id_storage_delete</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_id_storage_foreach</name><parameter_list>(<parameter><decl><type><name>RIDStorage</name><modifier>*</modifier></type> <name>storage</name></decl></parameter>, <parameter><decl><type><name>RIDStorageForeachCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cb</name> <operator>||</operator> <operator>!</operator><name>storage</name> <operator>||</operator> <operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>storage</name><operator>-&gt;</operator><name>top_id</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>storage</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cb</name> <argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>storage</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>cb</name> <argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_id_storage_free</name><parameter_list>(<parameter><decl><type><name>RIDStorage</name><modifier>*</modifier></type> <name>storage</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>storage</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_id_pool_free</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_list</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_id_storage_list</name><parameter_list>(<parameter><decl><type><name>RIDStorage</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> 

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_id_storage_foreach</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>_list</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ROIDStorage</name> <modifier>*</modifier></type> <name>r_oids_new</name> <parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>start_id</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>last_id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>ROIDStorage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>storage</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>storage</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>r_id_storage_new</name> <argument_list>(<argument><expr><name>start_id</name></expr></argument>, <argument><expr><name>last_id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>storage</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_oids_get</name><parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>storage</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_id_storage_get</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_oids_oget</name><parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>od</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_oids_get_id</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>od</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_id_storage_get</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_oids_get_id</name><parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>od</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>storage</name> <operator>&amp;&amp;</operator> <name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name> <operator>&gt;</operator> <name>od</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>id</name> <operator>=</operator> <name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><name>od</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_oids_get_od</name><parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>od</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>storage</name> <operator>&amp;&amp;</operator> <name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name> <operator>&amp;&amp;</operator>

<name><name>storage</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>id</name> <operator>&lt;</operator> <name><name>storage</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>next_id</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name><name>od</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>od</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name></expr>;</condition> <incr><expr><name><name>od</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><name><name>od</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_oids_add</name><parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>od</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>storage</name> <operator>||</operator> <operator>!</operator><name>id</name> <operator>||</operator> <operator>!</operator><name>od</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_id_storage_add</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>oid_storage_preallocate</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name> <operator>&gt;</operator> <operator>(</operator><name><name>storage</name><operator>-&gt;</operator><name>psize</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>oid_storage_preallocate</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name><name>storage</name><operator>-&gt;</operator><name>psize</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>storage</name><operator>-&gt;</operator><name>psize</name></name> <operator>&lt;=</operator> <name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_id_storage_delete</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>*</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>od</name> <operator>=</operator> <name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><operator>*</operator><name>od</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_oids_to_front</name> <parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>od</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>storage</name> <operator>||</operator> <operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>od</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>od</name> <operator>&lt;</operator> <name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name></expr>;</condition> <incr><expr><name>od</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><name>od</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>od</name> <operator>==</operator> <name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>od</name> <operator>==</operator> <operator>(</operator><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><name>od</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><name>od</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name> <operator>-</operator> <name>od</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>id</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_oids_to_rear</name> <parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>od</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>storage</name> <operator>||</operator> <operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name> <operator>||</operator>

<operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> <operator>(</operator><name>id</name> <operator>&gt;=</operator> <name><name>storage</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>next_id</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>od</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>od</name> <operator>&lt;</operator> <name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name></expr>;</condition> <incr><expr><name>od</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><name>od</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>od</name> <operator>==</operator> <name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>od</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>od</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_oids_delete</name> <parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_oids_to_front</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_id_storage_delete</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>psize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name><name>storage</name><operator>-&gt;</operator><name>psize</name></name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>oid_storage_preallocate</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name><name>storage</name><operator>-&gt;</operator><name>psize</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_oids_odelete</name> <parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>od</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name> <operator>||</operator> <operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>permutation</name></name> <operator>||</operator> <name>od</name> <operator>&gt;=</operator> <name><name>st</name><operator>-&gt;</operator><name>ptop</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>ptop</name></name> <operator>-</operator> <name>od</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_id_storage_delete</name> <argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><name>od</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><name>od</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><name>od</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>ptop</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>ptop</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>permutation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>psize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>ptop</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>psize</name></name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>oid_storage_preallocate</name> <argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>psize</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_oids_take</name> <parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>storage</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_id_storage_get</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_oids_delete</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_oids_otake</name> <parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>od</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_oids_oget</name> <argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>od</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_oids_odelete</name> <argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>od</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_oids_free</name> <parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>storage</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_id_storage_free</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_oids_last</name> <parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>storage</name> <operator>&amp;&amp;</operator> <name><name>storage</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>storage</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>data</name></name>

<operator>&amp;&amp;</operator> <name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>storage</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_oids_first</name> <parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>storage</name> <operator>&amp;&amp;</operator> <name><name>storage</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>storage</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>data</name></name>

<operator>&amp;&amp;</operator> <name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>storage</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_oids_foreach</name> <parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><name>RIDStorageForeachCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cb</name> <operator>||</operator> <operator>!</operator><name>storage</name> <operator>||</operator> <operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> <operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>data</name></name>

<operator>||</operator> <operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cb</name> <argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><call><name>cb</name> <argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_oids_foreach_prev</name> <parameter_list>(<parameter><decl><type><name>ROIDStorage</name><modifier>*</modifier></type> <name>storage</name></decl></parameter>, <parameter><decl><type><name>RIDStorageForeachCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cb</name> <operator>||</operator> <operator>!</operator><name>storage</name> <operator>||</operator> <operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> <operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>data</name></name>

<operator>||</operator> <operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cb</name> <argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>oids_od_bfind</name> <parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>od</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>st64</name></type> <name>high</name></decl>, <decl><type ref="prev"/><name>low</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmp_res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>ptop</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>ptop</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>high</name> <operator>&lt;=</operator> <name>low</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>od</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name>low</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>r_oids_oget</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>od</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>st</name><operator>-&gt;</operator><name>cmp</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>incoming</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp_res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp_res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>od</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>od</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>low</name> <operator>+</operator> <name>high</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>r_oids_oget</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>od</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>st</name><operator>-&gt;</operator><name>cmp</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>incoming</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp_res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp_res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp_res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>od</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>od</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>oids_od_binsert</name> <parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>od</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>oids_od_bfind</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>od</name></expr></argument>, <argument><expr><name>incoming</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>od</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><name><name>od</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><name><name>od</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name> <operator>-</operator> <name><name>od</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><name><name>od</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_oids_insert</name> <parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>od</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>storage</name> <operator>||</operator> <operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>cmp</name></name> <operator>||</operator> <operator>!</operator><name>id</name> <operator>||</operator> <operator>!</operator><name>od</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name></expr>)</condition> <block>{<block_content> 

<return>return <expr><call><name>r_oids_add</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>od</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_id_storage_add</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name> <operator>&gt;</operator> <operator>(</operator><name><name>storage</name><operator>-&gt;</operator><name>psize</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>oid_storage_preallocate</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name><name>storage</name><operator>-&gt;</operator><name>psize</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>oids_od_binsert</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>od</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_oids_sort</name> <parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>od</name></decl>, <decl><type ref="prev"/><name>id</name></decl>, <decl><type ref="prev"/><name>ptop</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>permutation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>incoming</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>storage</name> <operator>||</operator> <operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name> <operator>||</operator> <operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>cmp</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>permutation</name> <operator>=</operator> <name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>ut32</name></expr></argument>, <argument><expr><name><name>storage</name><operator>-&gt;</operator><name>psize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name> <operator>=</operator> <name>permutation</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>permutation</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>permutation</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptop</name> <operator>=</operator> <name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name> <operator>!=</operator> <name>ptop</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>permutation</name><index>[<expr><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>incoming</name> <operator>=</operator> <call><name>r_id_storage_get</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>oids_od_binsert</name> <argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>od</name></expr></argument>, <argument><expr><name>incoming</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>permutation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>permutation</name></name> <operator>=</operator> <name>permutation</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name> <operator>=</operator> <name>ptop</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut32</name></type> <name>r_oids_find</name> <parameter_list>(<parameter><decl><type><name>ROIDStorage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>ret</name></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><call><name>oids_od_bfind</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>incoming</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name><name>storage</name><operator>-&gt;</operator><name>ptop</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

</unit>
