<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\x509.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./x509.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_x509_parse_validity</name><parameter_list>(<parameter><decl><type><name>RX509Validity</name> <modifier>*</modifier></type><name>validity</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>validity</name> <operator>||</operator> <operator>!</operator><name>object</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>klass</name></name> <operator>==</operator> <name>CLASS_UNIVERSAL</name> <operator>&amp;&amp;</operator>

<name><name>object</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>TAG_SEQUENCE</name> <operator>&amp;&amp;</operator>

<name><name>object</name><operator>-&gt;</operator><name>form</name></name> <operator>==</operator> <name>FORM_CONSTRUCTED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>klass</name></name> <operator>==</operator> <name>CLASS_UNIVERSAL</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>form</name></name> <operator>==</operator> <name>FORM_PRIMITIVE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>TAG_UTCTIME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>validity</name><operator>-&gt;</operator><name>notBefore</name></name> <operator>=</operator> <call><name>r_asn1_stringify_utctime</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>TAG_GENERALIZEDTIME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>validity</name><operator>-&gt;</operator><name>notBefore</name></name> <operator>=</operator> <call><name>r_asn1_stringify_time</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>klass</name></name> <operator>==</operator> <name>CLASS_UNIVERSAL</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>form</name></name> <operator>==</operator> <name>FORM_PRIMITIVE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>TAG_UTCTIME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>validity</name><operator>-&gt;</operator><name>notAfter</name></name> <operator>=</operator> <call><name>r_asn1_stringify_utctime</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>TAG_GENERALIZEDTIME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>validity</name><operator>-&gt;</operator><name>notAfter</name></name> <operator>=</operator> <call><name>r_asn1_stringify_time</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>r_x509_parse_algorithmidentifier</name> <parameter_list>(<parameter><decl><type><name>RX509AlgorithmIdentifier</name> <modifier>*</modifier></type><name>ai</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ai</name> <operator>||</operator> <operator>!</operator><name>object</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>klass</name> <operator>==</operator> <name>CLASS_UNIVERSAL</name> <operator>&amp;&amp;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>tag</name> <operator>==</operator> <name>TAG_OID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>algorithm</name></name> <operator>=</operator> <call><name>r_asn1_stringify_oid</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>parameters</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>r_x509_parse_subjectpublickeyinfo</name> <parameter_list>(<parameter><decl><type><name>RX509SubjectPublicKeyInfo</name> <modifier>*</modifier></type><name>spki</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spki</name> <operator>||</operator> <operator>!</operator><name>object</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_x509_parse_algorithmidentifier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>spki</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spki</name><operator>-&gt;</operator><name>subjectPublicKey</name></name> <operator>=</operator> <call><name>r_asn1_create_binary</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>list</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>spki</name><operator>-&gt;</operator><name>subjectPublicKeyExponent</name></name> <operator>=</operator> <call><name>r_asn1_create_binary</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>spki</name><operator>-&gt;</operator><name>subjectPublicKeyModule</name></name> <operator>=</operator> <call><name>r_asn1_create_binary</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>r_x509_parse_name</name> <parameter_list>(<parameter><decl><type><name>RX509Name</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><name>object</name> <operator>||</operator> <operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>klass</name></name> <operator>==</operator> <name>CLASS_UNIVERSAL</name> <operator>&amp;&amp;</operator> <name><name>object</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>TAG_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>names</name></name> <operator>=</operator> <operator>(</operator><name>RASN1String</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name> <argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RASN1String</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>name</name><operator>-&gt;</operator><name>names</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>oids</name></name> <operator>=</operator> <operator>(</operator><name>RASN1String</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name> <argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RASN1String</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>name</name><operator>-&gt;</operator><name>oids</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>klass</name></name> <operator>==</operator> <name>CLASS_UNIVERSAL</name> <operator>&amp;&amp;</operator>

<name><name>o</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>TAG_SET</name> <operator>&amp;&amp;</operator>

<name><name>o</name><operator>-&gt;</operator><name>form</name></name> <operator>==</operator> <name>FORM_CONSTRUCTED</name> <operator>&amp;&amp;</operator>

<name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>o</name><operator>-&gt;</operator><name>klass</name></name> <operator>==</operator> <name>CLASS_UNIVERSAL</name> <operator>&amp;&amp;</operator>

<name><name>o</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>TAG_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>klass</name> <operator>==</operator> <name>CLASS_UNIVERSAL</name> <operator>&amp;&amp;</operator>

<name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>tag</name> <operator>==</operator> <name>TAG_OID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>oids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>r_asn1_stringify_oid</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>obj1</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obj1</name> <operator>&amp;&amp;</operator> <name><name>obj1</name><operator>-&gt;</operator><name>klass</name></name> <operator>==</operator> <name>CLASS_UNIVERSAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>r_asn1_stringify_string</name> <argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>r_x509_parse_extension</name> <parameter_list>(<parameter><decl><type><name>RX509Extension</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ext</name> <operator>||</operator> <operator>!</operator><name>object</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>TAG_OID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>extnID</name></name> <operator>=</operator> <call><name>r_asn1_stringify_oid</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>TAG_BOOLEAN</name> <operator>&amp;&amp;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>critical</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>sector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>TAG_OCTETSTRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>extnValue</name></name> <operator>=</operator> <call><name>r_asn1_create_binary</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>sector</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>r_x509_parse_extensions</name> <parameter_list>(<parameter><decl><type><name>RX509Extensions</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ext</name> <operator>||</operator> <operator>!</operator><name>object</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>extensions</name></name> <operator>=</operator> <operator>(</operator><name>RX509Extension</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RX509Extension</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ext</name><operator>-&gt;</operator><name>extensions</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RX509Extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_x509_parse_extension</name> <argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_free_extension</name> <argument_list>(<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>r_x509_parse_tbscertificate</name> <parameter_list>(<parameter><decl><type><name>RX509TBSCertificate</name> <modifier>*</modifier></type><name>tbsc</name></decl></parameter>, <parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier><modifier>*</modifier></type><name>elems</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tbsc</name> <operator>||</operator> <operator>!</operator><name>object</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>elems</name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>list</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>klass</name> <operator>==</operator> <name>CLASS_CONTEXT</name> <operator>&amp;&amp;</operator>

<name><name>elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>form</name> <operator>==</operator> <name>FORM_CONSTRUCTED</name> <operator>&amp;&amp;</operator>

<name><name>elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>tag</name> <operator>==</operator> <name>TAG_INTEGER</name> <operator>&amp;&amp;</operator>

<name><name>elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>length</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tbsc</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><name><name>elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>sector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>tbsc</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name><operator>-&gt;</operator><name>klass</name> <operator>==</operator> <name>CLASS_UNIVERSAL</name> <operator>&amp;&amp;</operator> <name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name><operator>-&gt;</operator><name>tag</name> <operator>==</operator> <name>TAG_INTEGER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tbsc</name><operator>-&gt;</operator><name>serialNumber</name></name> <operator>=</operator> <call><name>r_asn1_stringify_integer</name> <argument_list>(<argument><expr><name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name><operator>-&gt;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><name>shift</name></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_x509_parse_algorithmidentifier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><name>shift</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_parse_name</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><name>shift</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_parse_validity</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>validity</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><name>shift</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_parse_name</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>subject</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><name>shift</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_parse_subjectpublickeyinfo</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>subjectPublicKeyInfo</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><name>shift</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tbsc</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>shift</name> <operator>+</operator> <literal type="number">6</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>elems</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>klass</name> <operator>!=</operator> <name>CLASS_CONTEXT</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tag</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tbsc</name><operator>-&gt;</operator><name>issuerUniqueID</name></name> <operator>=</operator> <call><name>r_asn1_create_binary</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>elems</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tag</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tbsc</name><operator>-&gt;</operator><name>subjectUniqueID</name></name> <operator>=</operator> <call><name>r_asn1_create_binary</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>elems</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tbsc</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tag</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>form</name> <operator>==</operator> <name>FORM_CONSTRUCTED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_parse_extensions</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RX509Certificate</name> <modifier>*</modifier></type><name>r_x509_parse_certificate</name> <parameter_list>(<parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RX509Certificate</name> <modifier>*</modifier></type><name>cert</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RX509Certificate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cert</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>klass</name></name> <operator>!=</operator> <name>CLASS_UNIVERSAL</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>form</name></name> <operator>!=</operator> <name>FORM_CONSTRUCTED</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>klass</name></name> <operator>!=</operator> <name>CLASS_UNIVERSAL</name> <operator>||</operator> <name><name>tmp</name><operator>-&gt;</operator><name>form</name></name> <operator>!=</operator> <name>FORM_PRIMITIVE</name> <operator>||</operator> <name><name>tmp</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>TAG_BITSTRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>signature</name></name> <operator>=</operator> <call><name>r_asn1_create_binary</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_parse_tbscertificate</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>tbsCertificate</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_x509_parse_algorithmidentifier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>algorithmIdentifier</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>r_asn1_free_object</name> <argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cert</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RX509Certificate</name> <modifier>*</modifier></type><name>r_x509_parse_certificate2</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RX509Certificate</name> <modifier>*</modifier></type><name>certificate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <operator>!</operator><name>length</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>r_asn1_create_object</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>certificate</name> <operator>=</operator> <call><name>r_x509_parse_certificate</name> <argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>certificate</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RX509CRLEntry</name> <modifier>*</modifier></type><name>r_x509_parse_crlentry</name> <parameter_list>(<parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RX509CRLEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>RX509CRLEntry</name> <operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RX509CRLEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>userCertificate</name></name> <operator>=</operator> <call><name>r_asn1_create_binary</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>revocationDate</name></name> <operator>=</operator> <call><name>r_asn1_stringify_utctime</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>entry</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RX509CertificateRevocationList</name> <modifier>*</modifier></type><name>r_x509_parse_crl</name><parameter_list>(<parameter><decl><type><name>RASN1Object</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RX509CertificateRevocationList</name> <modifier>*</modifier></type><name>crl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RASN1Object</name> <modifier>*</modifier><modifier>*</modifier></type><name>elems</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name> <operator>||</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>crl</name> <operator>=</operator> <operator>(</operator><name>RX509CertificateRevocationList</name> <operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RX509CertificateRevocationList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>crl</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>crl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RX509CertificateRevocationList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>elems</name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_parse_algorithmidentifier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_parse_name</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crl</name><operator>-&gt;</operator><name>lastUpdate</name></name> <operator>=</operator> <call><name>r_asn1_stringify_utctime</name> <argument_list>(<argument><expr><name><name>elems</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crl</name><operator>-&gt;</operator><name>nextUpdate</name></name> <operator>=</operator> <call><name>r_asn1_stringify_utctime</name> <argument_list>(<argument><expr><name><name>elems</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>sector</name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>crl</name><operator>-&gt;</operator><name>revokedCertificates</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>-&gt;</operator><name><name>list</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RX509CRLEntry</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>crl</name><operator>-&gt;</operator><name>revokedCertificates</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>crl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>crl</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>-&gt;</operator><name><name>list</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>-&gt;</operator><name><name>list</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>crl</name><operator>-&gt;</operator><name>revokedCertificates</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>r_x509_parse_crlentry</name> <argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>-&gt;</operator><name><name>list</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>crl</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_x509_free_algorithmidentifier</name> <parameter_list>(<parameter><decl><type><name>RX509AlgorithmIdentifier</name> <modifier>*</modifier></type><name>ai</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ai</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>parameters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_x509_free_validity</name><parameter_list>(<parameter><decl><type><name>RX509Validity</name> <modifier>*</modifier></type><name>validity</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>validity</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name><name>validity</name><operator>-&gt;</operator><name>notAfter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name><name>validity</name><operator>-&gt;</operator><name>notBefore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_x509_free_name</name> <parameter_list>(<parameter><decl><type><name>RX509Name</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>names</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>name</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>oids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_x509_free_extension</name> <parameter_list>(<parameter><decl><type><name>RX509Extension</name> <modifier>*</modifier></type><name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name><name>ex</name><operator>-&gt;</operator><name>extnID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_binary</name> <argument_list>(<argument><expr><name><name>ex</name><operator>-&gt;</operator><name>extnValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_x509_free_extensions</name> <parameter_list>(<parameter><decl><type><name>RX509Extensions</name> <modifier>*</modifier></type><name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ex</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>-&gt;</operator><name>extensions</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ex</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_free_extension</name> <argument_list>(<argument><expr><name><name>ex</name><operator>-&gt;</operator><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ex</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_x509_free_subjectpublickeyinfo</name> <parameter_list>(<parameter><decl><type><name>RX509SubjectPublicKeyInfo</name> <modifier>*</modifier></type><name>spki</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>spki</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_free_algorithmidentifier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>spki</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_binary</name> <argument_list>(<argument><expr><name><name>spki</name><operator>-&gt;</operator><name>subjectPublicKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_binary</name> <argument_list>(<argument><expr><name><name>spki</name><operator>-&gt;</operator><name>subjectPublicKeyExponent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_binary</name> <argument_list>(<argument><expr><name><name>spki</name><operator>-&gt;</operator><name>subjectPublicKeyModule</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_x509_free_tbscertificate</name> <parameter_list>(<parameter><decl><type><name>RX509TBSCertificate</name> <modifier>*</modifier></type><name>tbsc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tbsc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name><name>tbsc</name><operator>-&gt;</operator><name>serialNumber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_free_algorithmidentifier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_free_name</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_free_validity</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>validity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_free_name</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>subject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_free_subjectpublickeyinfo</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>subjectPublicKeyInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_binary</name> <argument_list>(<argument><expr><name><name>tbsc</name><operator>-&gt;</operator><name>subjectUniqueID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_binary</name> <argument_list>(<argument><expr><name><name>tbsc</name><operator>-&gt;</operator><name>issuerUniqueID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_free_extensions</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_x509_free_certificate</name> <parameter_list>(<parameter><decl><type><name>RX509Certificate</name> <modifier>*</modifier></type><name>certificate</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>certificate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_asn1_free_binary</name> <argument_list>(<argument><expr><name><name>certificate</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_free_algorithmidentifier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>certificate</name><operator>-&gt;</operator><name>algorithmIdentifier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_free_tbscertificate</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>certificate</name><operator>-&gt;</operator><name>tbsCertificate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>certificate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_x509_free_crlentry</name><parameter_list>(<parameter><decl><type><name>RX509CRLEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_asn1_free_binary</name> <argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>userCertificate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>revocationDate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_x509_free_crl</name> <parameter_list>(<parameter><decl><type><name>RX509CertificateRevocationList</name> <modifier>*</modifier></type><name>crl</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>crl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_free_algorithmidentifier</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_free_name</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name><name>crl</name><operator>-&gt;</operator><name>nextUpdate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name><name>crl</name><operator>-&gt;</operator><name>lastUpdate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>crl</name><operator>-&gt;</operator><name>revokedCertificates</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>crl</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_free_crlentry</name> <argument_list>(<argument><expr><name><name>crl</name><operator>-&gt;</operator><name>revokedCertificates</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crl</name><operator>-&gt;</operator><name>revokedCertificates</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>crl</name><operator>-&gt;</operator><name>revokedCertificates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>crl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_x509_validity_dump</name><parameter_list>(<parameter><decl><type><name>RX509Validity</name> <modifier>*</modifier></type><name>validity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name></decl></parameter>, <parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>validity</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pad</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><ternary><condition><expr><name><name>validity</name><operator>-&gt;</operator><name>notBefore</name></name></expr> ?</condition><then> <expr><name><name>validity</name><operator>-&gt;</operator><name>notBefore</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">"Missing"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><ternary><condition><expr><name><name>validity</name><operator>-&gt;</operator><name>notAfter</name></name></expr> ?</condition><then> <expr><name><name>validity</name><operator>-&gt;</operator><name>notAfter</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">"Missing"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sNot Before: %s\n%sNot After: %s\n"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_x509_name_dump</name> <parameter_list>(<parameter><decl><type><name>RX509Name</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name></decl></parameter>, <parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pad</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>name</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>name</name><operator>-&gt;</operator><name>oids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>name</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s%s: %s\n"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>oids</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>string</name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_x509_subjectpublickeyinfo_dump</name><parameter_list>(<parameter><decl><type><name>RX509SubjectPublicKeyInfo</name> <modifier>*</modifier></type><name>spki</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name></decl></parameter>, <parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spki</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pad</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <ternary><condition><expr><name><name>spki</name><operator>-&gt;</operator><name>algorithm</name><operator>.</operator><name>algorithm</name></name></expr> ?</condition><then> <expr><name><name>spki</name><operator>-&gt;</operator><name>algorithm</name><operator>.</operator><name>algorithm</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">"Missing"</literal></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spki</name><operator>-&gt;</operator><name>subjectPublicKeyModule</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>r_asn1_stringify_integer</name> <argument_list>(<argument><expr><name><name>spki</name><operator>-&gt;</operator><name>subjectPublicKeyModule</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>, <argument><expr><name><name>spki</name><operator>-&gt;</operator><name>subjectPublicKeyModule</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sAlgorithm: %s\n%sModule: %s\n%sExponent: %u bytes\n"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><ternary><condition><expr><name>m</name></expr> ?</condition><then> <expr><name><name>m</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">"Missing"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>pad</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>spki</name><operator>-&gt;</operator><name>subjectPublicKeyExponent</name></name></expr> ?</condition><then> <expr><name><name>spki</name><operator>-&gt;</operator><name>subjectPublicKeyExponent</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_x509_extensions_dump</name><parameter_list>(<parameter><decl><type><name>RX509Extensions</name> <modifier>*</modifier></type><name>exts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name></decl></parameter>, <parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exts</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pad</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>exts</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RX509Extension</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>exts</name><operator>-&gt;</operator><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s%s: %s\n%s%u bytes\n"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>e</name><operator>-&gt;</operator><name>extnID</name></name></expr> ?</condition><then> <expr><name><name>e</name><operator>-&gt;</operator><name>extnID</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">"Missing"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>e</name><operator>-&gt;</operator><name>critical</name></name></expr> ?</condition><then> <expr><literal type="string">"critical"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>pad</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>e</name><operator>-&gt;</operator><name>extnValue</name></name></expr> ?</condition><then> <expr><name><name>e</name><operator>-&gt;</operator><name>extnValue</name><operator>-&gt;</operator><name>length</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_x509_tbscertificate_dump</name><parameter_list>(<parameter><decl><type><name>RX509TBSCertificate</name> <modifier>*</modifier></type><name>tbsc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name></decl></parameter>, <parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>sid</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tbsc</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pad</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pad2</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pad2</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sVersion: v%u\n"</literal>

<literal type="string">"%sSerial Number:\n%s %s\n"</literal>

<literal type="string">"%sSignature Algorithm:\n%s %s\n"</literal>

<literal type="string">"%sIssuer:\n"</literal></expr></argument>,

<argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>tbsc</name><operator>-&gt;</operator><name>version</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>tbsc</name><operator>-&gt;</operator><name>serialNumber</name></name></expr> ?</condition><then> <expr><name><name>tbsc</name><operator>-&gt;</operator><name>serialNumber</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">"Missing"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>tbsc</name><operator>-&gt;</operator><name>signature</name><operator>.</operator><name>algorithm</name></name></expr> ?</condition><then> <expr><name><name>tbsc</name><operator>-&gt;</operator><name>signature</name><operator>.</operator><name>algorithm</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">"Missing"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_name_dump</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument>, <argument><expr><name>pad2</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sValidity:\n"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_validity_dump</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>validity</name></name></expr></argument>, <argument><expr><name>pad2</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sSubject:\n"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_name_dump</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>subject</name></name></expr></argument>, <argument><expr><name>pad2</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sSubject Public Key Info:\n"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_subjectpublickeyinfo_dump</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>subjectPublicKeyInfo</name></name></expr></argument>, <argument><expr><name>pad2</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tbsc</name><operator>-&gt;</operator><name>issuerUniqueID</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>iid</name> <operator>=</operator> <call><name>r_asn1_stringify_integer</name> <argument_list>(<argument><expr><name><name>tbsc</name><operator>-&gt;</operator><name>issuerUniqueID</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>, <argument><expr><name><name>tbsc</name><operator>-&gt;</operator><name>issuerUniqueID</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>iid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sIssuer Unique ID:\n%s %s"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>iid</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>iid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tbsc</name><operator>-&gt;</operator><name>subjectUniqueID</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sid</name> <operator>=</operator> <call><name>r_asn1_stringify_integer</name> <argument_list>(<argument><expr><name><name>tbsc</name><operator>-&gt;</operator><name>subjectUniqueID</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>, <argument><expr><name><name>tbsc</name><operator>-&gt;</operator><name>subjectUniqueID</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sSubject Unique ID:\n%s %s"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>sid</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sExtensions:\n"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_extensions_dump</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>, <argument><expr><name>pad2</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pad2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_x509_certificate_dump</name> <parameter_list>(<parameter><decl><type><name>RX509Certificate</name> <modifier>*</modifier></type><name>cert</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name></decl></parameter>, <parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>algo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pad2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cert</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pad</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pad2</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pad2</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sTBSCertificate:\n"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_tbscertificate_dump</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>tbsCertificate</name></name></expr></argument>, <argument><expr><name>pad2</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>algo</name> <operator>=</operator> <name><name>cert</name><operator>-&gt;</operator><name>algorithmIdentifier</name><operator>.</operator><name>algorithm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sAlgorithm:\n%s%s\n%sSignature: %u bytes\n"</literal></expr></argument>,

<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>pad2</name></expr></argument>, <argument><expr><ternary><condition><expr><name>algo</name></expr> ?</condition><then> <expr><name><name>algo</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>cert</name><operator>-&gt;</operator><name>signature</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pad2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_x509_crlentry_dump</name> <parameter_list>(<parameter><decl><type><name>RX509CRLEntry</name> <modifier>*</modifier></type><name>crle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name></decl></parameter>, <parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>utc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>crle</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pad</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>utc</name> <operator>=</operator> <name><name>crle</name><operator>-&gt;</operator><name>revocationDate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>crle</name><operator>-&gt;</operator><name>userCertificate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>r_asn1_stringify_integer</name> <argument_list>(<argument><expr><name><name>crle</name><operator>-&gt;</operator><name>userCertificate</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>, <argument><expr><name><name>crle</name><operator>-&gt;</operator><name>userCertificate</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sUser Certificate:\n%s %s\n"</literal>

<literal type="string">"%sRevocation Date:\n%s %s\n"</literal></expr></argument>,

<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><name><name>id</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">"Missing"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><ternary><condition><expr><name>utc</name></expr> ?</condition><then> <expr><name><name>utc</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">"Missing"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_x509_crl_to_string</name><parameter_list>(<parameter><decl><type><name>RX509CertificateRevocationList</name> <modifier>*</modifier></type><name>crl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>algo</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pad2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pad3</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>crl</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pad</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pad3</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pad3</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pad2</name> <operator>=</operator> <name>pad3</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>algo</name> <operator>=</operator> <name><name>crl</name><operator>-&gt;</operator><name>signature</name><operator>.</operator><name>algorithm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>crl</name><operator>-&gt;</operator><name>lastUpdate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>crl</name><operator>-&gt;</operator><name>nextUpdate</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sCRL:\n%sSignature:\n%s%s\n%sIssuer\n"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>pad2</name></expr></argument>, <argument><expr><name>pad3</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>algo</name></expr> ?</condition><then> <expr><name><name>algo</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>pad2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_name_dump</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument>, <argument><expr><name>pad3</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sLast Update: %s\n%sNext Update: %s\n%sRevoked Certificates:\n"</literal></expr></argument>,

<argument><expr><name>pad2</name></expr></argument>, <argument><expr><ternary><condition><expr><name>last</name></expr> ?</condition><then> <expr><name><name>last</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">"Missing"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>pad2</name></expr></argument>, <argument><expr><ternary><condition><expr><name>next</name></expr> ?</condition><then> <expr><name><name>next</name><operator>-&gt;</operator><name>string</name></name></expr> </then><else>: <expr><literal type="string">"Missing"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>pad2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>crl</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_crlentry_dump</name> <argument_list>(<argument><expr><name><name>crl</name><operator>-&gt;</operator><name>revokedCertificates</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pad3</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pad3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_x509_validity_json</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>RX509Validity</name> <modifier>*</modifier></type><name>validity</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>validity</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>validity</name><operator>-&gt;</operator><name>notBefore</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"NotBefore"</literal></expr></argument>, <argument><expr><name><name>validity</name><operator>-&gt;</operator><name>notBefore</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>validity</name><operator>-&gt;</operator><name>notAfter</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"NotAfter"</literal></expr></argument>, <argument><expr><name><name>validity</name><operator>-&gt;</operator><name>notAfter</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_x509_name_json</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>RX509Name</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>name</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>name</name><operator>-&gt;</operator><name>oids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>name</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>oids</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>string</name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_x509_subjectpublickeyinfo_json</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>RX509SubjectPublicKeyInfo</name> <modifier>*</modifier></type><name>spki</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>spki</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>spki</name><operator>-&gt;</operator><name>algorithm</name><operator>.</operator><name>algorithm</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Algorithm"</literal></expr></argument>, <argument><expr><name><name>spki</name><operator>-&gt;</operator><name>algorithm</name><operator>.</operator><name>algorithm</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spki</name><operator>-&gt;</operator><name>subjectPublicKeyModule</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>r_asn1_stringify_integer</name> <argument_list>(<argument><expr><name><name>spki</name><operator>-&gt;</operator><name>subjectPublicKeyModule</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>, <argument><expr><name><name>spki</name><operator>-&gt;</operator><name>subjectPublicKeyModule</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Module"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spki</name><operator>-&gt;</operator><name>subjectPublicKeyExponent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>r_asn1_stringify_integer</name> <argument_list>(<argument><expr><name><name>spki</name><operator>-&gt;</operator><name>subjectPublicKeyExponent</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>, <argument><expr><name><name>spki</name><operator>-&gt;</operator><name>subjectPublicKeyExponent</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Exponent"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_x509_extensions_json</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>RX509Extensions</name> <modifier>*</modifier></type><name>exts</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exts</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>exts</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RX509Extension</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>exts</name><operator>-&gt;</operator><name>extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>extnID</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"OID"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>extnID</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>critical</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_kb</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Critical"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>critical</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>extnValue</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>r_asn1_stringify_integer</name> <argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>extnValue</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>extnValue</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Value"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_x509_crlentry_json</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>RX509CRLEntry</name> <modifier>*</modifier></type><name>crle</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>crle</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>crle</name><operator>-&gt;</operator><name>userCertificate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>r_asn1_stringify_integer</name> <argument_list>(<argument><expr><name><name>crle</name><operator>-&gt;</operator><name>userCertificate</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>, <argument><expr><name><name>crle</name><operator>-&gt;</operator><name>userCertificate</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"UserCertificate"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>crle</name><operator>-&gt;</operator><name>revocationDate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"RevocationDate"</literal></expr></argument>, <argument><expr><name><name>crle</name><operator>-&gt;</operator><name>revocationDate</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_x509_crl_json</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>RX509CertificateRevocationList</name> <modifier>*</modifier></type><name>crl</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>crl</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>crl</name><operator>-&gt;</operator><name>signature</name><operator>.</operator><name>algorithm</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Signature"</literal></expr></argument>, <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>signature</name><operator>.</operator><name>algorithm</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Issuer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_name_json</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>crl</name><operator>-&gt;</operator><name>lastUpdate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"LastUpdate"</literal></expr></argument>, <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>lastUpdate</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>crl</name><operator>-&gt;</operator><name>nextUpdate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"NextUpdate"</literal></expr></argument>, <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>nextUpdate</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"RevokedCertificates"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>crl</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_x509_crlentry_json</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>revokedCertificates</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_x509_tbscertificate_json</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>RX509TBSCertificate</name> <modifier>*</modifier></type><name>tbsc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tbsc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ki</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Version"</literal></expr></argument>, <argument><expr><name><name>tbsc</name><operator>-&gt;</operator><name>version</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tbsc</name><operator>-&gt;</operator><name>serialNumber</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"SerialNumber"</literal></expr></argument>, <argument><expr><name><name>tbsc</name><operator>-&gt;</operator><name>serialNumber</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tbsc</name><operator>-&gt;</operator><name>signature</name><operator>.</operator><name>algorithm</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"SignatureAlgorithm"</literal></expr></argument>, <argument><expr><name><name>tbsc</name><operator>-&gt;</operator><name>signature</name><operator>.</operator><name>algorithm</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Issuer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_name_json</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Validity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_validity_json</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>validity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Subject"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_name_json</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>subject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"SubjectPublicKeyInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_subjectpublickeyinfo_json</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>subjectPublicKeyInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tbsc</name><operator>-&gt;</operator><name>issuerUniqueID</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>r_asn1_stringify_integer</name> <argument_list>(<argument><expr><name><name>tbsc</name><operator>-&gt;</operator><name>issuerUniqueID</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>, <argument><expr><name><name>tbsc</name><operator>-&gt;</operator><name>issuerUniqueID</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"IssuerUniqueID"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tbsc</name><operator>-&gt;</operator><name>subjectUniqueID</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>r_asn1_stringify_integer</name> <argument_list>(<argument><expr><name><name>tbsc</name><operator>-&gt;</operator><name>subjectUniqueID</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>, <argument><expr><name><name>tbsc</name><operator>-&gt;</operator><name>subjectUniqueID</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"SubjectUniqueID"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Extensions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_extensions_json</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tbsc</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_x509_certificate_json</name><parameter_list>(<parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>RX509Certificate</name> <modifier>*</modifier></type><name>certificate</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>certificate</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RASN1String</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"TBSCertificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_x509_tbscertificate_json</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>certificate</name><operator>-&gt;</operator><name>tbsCertificate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>certificate</name><operator>-&gt;</operator><name>algorithmIdentifier</name><operator>.</operator><name>algorithm</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Algorithm"</literal></expr></argument>, <argument><expr><name><name>certificate</name><operator>-&gt;</operator><name>algorithmIdentifier</name><operator>.</operator><name>algorithm</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>certificate</name><operator>-&gt;</operator><name>signature</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>r_asn1_stringify_integer</name> <argument_list>(<argument><expr><name><name>certificate</name><operator>-&gt;</operator><name>signature</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>, <argument><expr><name><name>certificate</name><operator>-&gt;</operator><name>signature</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"Signature"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asn1_free_string</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
