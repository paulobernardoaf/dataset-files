<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\util\queue.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>RQueue</name> <modifier>*</modifier></type><name>r_queue_new</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RQueue</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RQueue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>elems</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>elems</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>front</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>rear</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<return>return <expr><name>q</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_queue_free</name><parameter_list>(<parameter><decl><type><name>RQueue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>elems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_full</name><parameter_list>(<parameter><decl><type><name>RQueue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>q</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>q</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>increase_capacity</name><parameter_list>(<parameter><decl><type><name>RQueue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>new_capacity</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>newelems</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>tmp_front</name></decl>;</decl_stmt>

<expr_stmt><expr><name>newelems</name> <operator>=</operator> <call><name>R_NEWS0</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>new_capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newelems</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_front</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>front</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newelems</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>tmp_front</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_front</name> <operator>=</operator> <operator>(</operator><name>tmp_front</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>q</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>elems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>elems</name></name> <operator>=</operator> <name>newelems</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>front</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>rear</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>new_capacity</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_queue_enqueue</name><parameter_list>(<parameter><decl><type><name>RQueue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_full</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>increase_capacity</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>rear</name></name> <operator>=</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>rear</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>q</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>rear</name></name></expr>]</index></name> <operator>=</operator> <name>el</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_queue_dequeue</name><parameter_list>(<parameter><decl><type><name>RQueue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_queue_is_empty</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>front</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>front</name></name> <operator>=</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>front</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>q</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_queue_is_empty</name><parameter_list>(<parameter><decl><type><name>RQueue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>q</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
