<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\reg\rvalue.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_reg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>ut32</name></type> <name>ut27</name>;</typedef>

<function><type><specifier>static</specifier> <name>ut27</name></type> <name>r_read_me27</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>boff</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut27</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_mem_copybits_delta</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>boff</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_mem_copybits_delta</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>boff</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_mem_copybits_delta</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>boff</name> <operator>+</operator> <literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_reg_get_value_big</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>utX</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>reg</name> <operator>&amp;&amp;</operator> <name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>ret</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRegSet</name> <modifier>*</modifier></type><name>regset</name> <init>= <expr><operator>&amp;</operator><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>arena</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>regset</name><operator>-&gt;</operator><name>arena</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">80</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>off</name> <operator>+</operator> <literal type="number">10</literal> <operator>&lt;=</operator> <name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v80</name><operator>.</operator><name>Low</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut64</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v80</name><operator>.</operator><name>High</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_reg_get_value: null or oob arena for current regset\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>v80</name><operator>.</operator><name>Low</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">96</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>off</name> <operator>+</operator> <literal type="number">12</literal> <operator>&lt;=</operator> <name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v96</name><operator>.</operator><name>Low</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut64</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v96</name><operator>.</operator><name>High</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_reg_get_value: null or oob arena for current regset\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>v96</name><operator>.</operator><name>Low</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">128</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>off</name> <operator>+</operator> <literal type="number">16</literal> <operator>&lt;=</operator> <name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v128</name><operator>.</operator><name>Low</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut64</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v128</name><operator>.</operator><name>High</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut64</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_reg_get_value: null or oob arena for current regset\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>v128</name><operator>.</operator><name>Low</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">256</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>off</name> <operator>+</operator> <literal type="number">32</literal> <operator>&lt;=</operator> <name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v256</name><operator>.</operator><name>Low</name><operator>.</operator><name>Low</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut64</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v256</name><operator>.</operator><name>Low</name><operator>.</operator><name>High</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut64</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v256</name><operator>.</operator><name>High</name><operator>.</operator><name>Low</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut64</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>v256</name><operator>.</operator><name>High</name><operator>.</operator><name>High</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ut64</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name> <operator>+</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_reg_get_value: null or oob arena for current regset\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>v256</name><operator>.</operator><name>Low</name><operator>.</operator><name>Low</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_reg_get_value_big: Bit size %d not supported\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_reg_get_value</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>reg</name> <operator>&amp;&amp;</operator> <name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg</name> <operator>||</operator> <operator>!</operator><name>item</name> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRegSet</name> <modifier>*</modifier></type><name>regset</name> <init>= <expr><operator>&amp;</operator><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>arena</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>regset</name><operator>-&gt;</operator><name>arena</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>&amp;</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>offset</name></name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>

?</condition><then> <expr><literal type="number">1</literal></expr>

</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>off</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><call><name>r_read_at_ble8</name> <argument_list>(<argument><expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>off</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_read_at_ble8</name> <argument_list>(<argument><expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>off</name> <operator>-</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_read_ble16</name> <argument_list>(<argument><expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">27</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_read_me27</name> <argument_list>(<argument><expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;=</operator> <name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_reg_get_value: 32bit oob read %d\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">64</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name></name> <operator>&amp;&amp;</operator> <name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>off</name> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;=</operator> <name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_read_ble64</name> <argument_list>(<argument><expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">80</literal></expr>:</case> 

<case>case <expr><literal type="number">96</literal></expr>:</case> 

<return>return <expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name>r_reg_get_longdouble</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">128</literal></expr>:</case>

<return>return <expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name>r_reg_get_longdouble</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_reg_get_value: Bit size %d not supported\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_reg_get_value_by_role</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegisterId</name></type> <name>role</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_reg_get_value</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><call><name>r_reg_get_name</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_reg_set_value</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>bytes</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>bytes</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>reg</name> <operator>&amp;&amp;</operator> <name>item</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_reg_is_readonly</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RRegArena</name> <modifier>*</modifier></type><name>arena</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>arena</name></name></expr>]</index></name><operator>.</operator><name>arena</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arena</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">80</literal></expr>:</case>

<case>case <expr><literal type="number">96</literal></expr>:</case> 

<expr_stmt><expr><call><name>r_reg_set_longdouble</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">64</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>big_endian</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_be64</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_write_le64</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>big_endian</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_be32</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_write_le32</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>big_endian</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_be16</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_write_le16</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><call><name>r_write_ble8</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>&amp;</operator> <name>UT8_MAX</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>offset</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>offset</name></name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xff</literal> <operator>^</operator> <name>mask</name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>mask</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>arena</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"RRegSetOverflow %d vs %d\n"</literal></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>arena</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name> <operator>%</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>mask</name> <init>= <expr><literal type="number">0xff</literal> <operator>^</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>|</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><literal type="number">128</literal></expr>:</case>

<return>return <expr><name>false</name></expr>;</return> 

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_reg_set_value: Bit size %d not supported\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>fits_in_arena</name> <init>= <expr><operator>(</operator><name><name>arena</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;&amp;</operator> <name>fits_in_arena</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_mem_copybits</name> <argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>arena</name></name></expr>]</index></name><operator>.</operator><name><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator>

<call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_reg_set_value: Cannot set %s to 0x%"</literal> <name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_reg_set_value_by_role</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegisterId</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><call><name>r_reg_get_name</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_reg_set_bvalue</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>num</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;&amp;</operator> <name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>r_str_bits_from_string</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>num</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>R_HEAP</name> <name>char</name> <modifier>*</modifier></type><name>r_reg_get_bvalue</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&amp;&amp;</operator> <name>item</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>flags</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>num</name> <init>= <expr><call><name>r_reg_get_value</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_bits</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>num</name></expr></argument>,

<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_reg_get_pack</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>packidx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>packbits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>reg</name> <operator>&amp;&amp;</operator> <name>item</name></expr></argument>, <argument><expr><literal type="number">0LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>packbits</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>packbits</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>packed_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>packbits</name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>packbits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Does not support pack bits &gt; 64\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>ret</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>packbytes</name> <init>= <expr><name>packbits</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>packmod</name> <init>= <expr><name>packbits</name> <operator>%</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>packmod</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid bit size for packet register\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>packidx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>packbits</name> <operator>&gt;</operator> <name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Packed index is beyond the register size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RRegSet</name> <modifier>*</modifier></type><name>regset</name> <init>= <expr><operator>&amp;</operator><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>arena</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>regset</name><operator>-&gt;</operator><name>arena</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <operator>(</operator><name>packidx</name> <operator>*</operator> <name>packbytes</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>off</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name><name>regset</name><operator>-&gt;</operator><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>packbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_reg_set_pack</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>packidx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>packbits</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>reg</name> <operator>&amp;&amp;</operator> <name><name>reg</name><operator>-&gt;</operator><name>regset</name><operator>-&gt;</operator><name>arena</name></name> <operator>&amp;&amp;</operator> <name>item</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>packbits</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>packbits</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>packed_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>packbits</name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>packbits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Does not support pack bits &gt; 64\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>packbytes</name> <init>= <expr><name>packbits</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>packidx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>packbits</name> <operator>&gt;</operator> <name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Packed index is beyond the register size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <operator>(</operator><name>packidx</name> <operator>*</operator> <name>packbytes</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>arena</name></name></expr>]</index></name><operator>.</operator><name><name>arena</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>BITS2BYTES</name> <argument_list>(<argument><expr><name>packbytes</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>arena</name></name></expr>]</index></name><operator>.</operator><name><name>arena</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+</operator> <name>off</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>packbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_reg_set_value: Cannot set %s to 0x%"</literal> <name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

</unit>
