<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\reg\rcond.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_reg.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Z</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>S</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>C</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>O</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>P</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z</name></cpp:macro> <cpp:value>f-&gt;z</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>f-&gt;s</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name></cpp:macro> <cpp:value>f-&gt;c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O</name></cpp:macro> <cpp:value>f-&gt;o</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name></cpp:macro> <cpp:value>f-&gt;p</cpp:value></cpp:define>

<function><type><name>R_API</name> <name>RRegItem</name> <modifier>*</modifier></type><name>r_reg_cond_get</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>R_REG_TYPE_GPR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>reg</name> <operator>&amp;&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>reg-&gt;regset[i].regs</argument>, <argument>iter</argument>, <argument>r</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_reg_cond_get_value</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>r_reg_get_value</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>r_reg_cond_get</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_reg_cond_set</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>r_reg_cond_get</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_reg_cond_to_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>cs</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"eq"</literal></expr>, <expr><literal type="string">"ne"</literal></expr>, <expr><literal type="string">"cf"</literal></expr>, <expr><literal type="string">"neg"</literal></expr>, <expr><literal type="string">"of"</literal></expr>, <expr><literal type="string">"hi"</literal></expr>, <expr><literal type="string">"he"</literal></expr>,

<expr><literal type="string">"lo"</literal></expr>, <expr><literal type="string">"loe"</literal></expr>, <expr><literal type="string">"ge"</literal></expr>, <expr><literal type="string">"gt"</literal></expr>, <expr><literal type="string">"lt"</literal></expr>, <expr><literal type="string">"le"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>n</name> <operator>&gt;</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>cs</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>cs</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_reg_cond_from_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"eq"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_REG_COND_EQ</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ne"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_REG_COND_NE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"cf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_REG_COND_CF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"neg"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_REG_COND_NEG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"of"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_REG_COND_OF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"hi"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_REG_COND_HI</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"he"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_REG_COND_HE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"lo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_REG_COND_LO</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"loe"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_REG_COND_LOE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ge"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_REG_COND_GE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"gt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_REG_COND_GT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"lt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_REG_COND_LT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"le"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_REG_COND_LE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"| Usage: drc[=] [condition](=1,0)\n"</literal>

<literal type="string">"| eq equal\n"</literal>

<literal type="string">"| ne not equal\n"</literal>

<literal type="string">"| cf carry flag set\n"</literal>

<literal type="string">"| neg negative value (has sign)\n"</literal>

<literal type="string">"| of overflow\n"</literal>

<literal type="string">"|unsigned:\n"</literal>

<literal type="string">"| hi higher\n"</literal>

<literal type="string">"| he higher or equal\n"</literal>

<literal type="string">"| lo lower\n"</literal>

<literal type="string">"| loe lower or equal\n"</literal>

<literal type="string">"|signed:\n"</literal>

<literal type="string">"| ge greater or equal\n"</literal>

<literal type="string">"| gt greater than\n"</literal>

<literal type="string">"| le less or equal\n"</literal>

<literal type="string">"| lt less than\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_reg_cond_bits</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>RRegFlags</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_REG_COND_EQ</name></expr>:</case> <return>return <expr><name>Z</name></expr>;</return>

<case>case <expr><name>R_REG_COND_NE</name></expr>:</case> <return>return <expr><operator>!</operator><name>Z</name></expr>;</return>

<case>case <expr><name>R_REG_COND_CF</name></expr>:</case> <return>return <expr><name>C</name></expr>;</return>

<case>case <expr><name>R_REG_COND_NEG</name></expr>:</case> <return>return <expr><name>S</name></expr>;</return>

<case>case <expr><name>R_REG_COND_OF</name></expr>:</case>

<return>return <expr><name>O</name></expr>;</return>

<case>case <expr><name>R_REG_COND_HI</name></expr>:</case> <return>return <expr><operator>(</operator><operator>!</operator><name>Z</name> <operator>&amp;&amp;</operator> <name>C</name><operator>)</operator></expr>;</return> 

<case>case <expr><name>R_REG_COND_HE</name></expr>:</case> <return>return <expr><name>Z</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>Z</name> <operator>&amp;&amp;</operator> <name>C</name><operator>)</operator></expr>;</return> 

<case>case <expr><name>R_REG_COND_LO</name></expr>:</case> <return>return <expr><operator>(</operator><name>Z</name> <operator>||</operator> <operator>!</operator><name>C</name><operator>)</operator></expr>;</return> 

<case>case <expr><name>R_REG_COND_LOE</name></expr>:</case>

<return>return <expr><operator>(</operator><name>Z</name> <operator>||</operator> <operator>!</operator><name>C</name><operator>)</operator></expr>;</return> 

<case>case <expr><name>R_REG_COND_GE</name></expr>:</case> <return>return <expr><operator>(</operator><operator>(</operator><name>S</name> <operator>&amp;&amp;</operator> <name>O</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>S</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>O</name><operator>)</operator><operator>)</operator></expr>;</return>

<case>case <expr><name>R_REG_COND_GT</name></expr>:</case> <return>return <expr><operator>(</operator><operator>(</operator><name>S</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>Z</name> <operator>&amp;&amp;</operator> <name>O</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>S</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>Z</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>O</name><operator>)</operator><operator>)</operator></expr>;</return>

<case>case <expr><name>R_REG_COND_LT</name></expr>:</case> <return>return <expr><operator>(</operator><operator>(</operator><name>S</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>O</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>S</name> <operator>&amp;&amp;</operator> <name>O</name><operator>)</operator><operator>)</operator></expr>;</return>

<case>case <expr><name>R_REG_COND_LE</name></expr>:</case> <return>return <expr><operator>(</operator><name>Z</name> <operator>||</operator> <operator>(</operator><name>S</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>O</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>S</name> <operator>&amp;&amp;</operator> <name>O</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_reg_cond_bits_set</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>RRegFlags</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_REG_COND_EQ</name></expr>:</case> <expr_stmt><expr><name>Z</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_REG_COND_NE</name></expr>:</case> <expr_stmt><expr><name>Z</name> <operator>=</operator> <operator>!</operator><name>v</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_REG_COND_CF</name></expr>:</case> <expr_stmt><expr><name>C</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_REG_COND_NEG</name></expr>:</case> <expr_stmt><expr><name>S</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_REG_COND_OF</name></expr>:</case> <expr_stmt><expr><name>O</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_REG_COND_HI</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>Z</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_REG_COND_HE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Z</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>Z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_REG_COND_LO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Z</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>Z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_REG_COND_LOE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Z</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>Z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_REG_COND_GE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <name>O</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>O</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_REG_COND_GT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>O</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Z</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>O</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_REG_COND_LT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>O</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>O</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_REG_COND_LE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Z</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>O</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>O</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_reg_cond</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RRegFlags</name></type> <name>f</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_reg_cond_retrieve</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_reg_cond_bits</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RRegFlags</name> <modifier>*</modifier></type><name>r_reg_cond_retrieve</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RRegFlags</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RRegFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <call><name>r_reg_cond_get_value</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"sign"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <call><name>r_reg_cond_get_value</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <call><name>r_reg_cond_get_value</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"carry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <call><name>r_reg_cond_get_value</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>r_reg_cond_get_value</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"parity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>f</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_reg_cond_apply</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>RRegFlags</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>r</name> <operator>&amp;&amp;</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_cond_set</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"sign"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_cond_set</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"zero"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_cond_set</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"carry"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_cond_set</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"overflow"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>o</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_cond_set</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"parity"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
