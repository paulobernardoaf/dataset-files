<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\include\r_skiplist.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_list.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>r_skiplist_node_t</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>r_skiplist_node_t</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>forward</name></decl>;</decl_stmt> 

}</block></struct></type> <name>RSkipListNode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_skiplist_t</name> <block>{

<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>list_level</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListFree</name></type> <name>freefn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListComparator</name></type> <name>compare</name></decl>;</decl_stmt>

}</block></struct></type> <name>RSkipList</name>;</typedef>

<function_decl><type><name>R_API</name> <name>RSkipList</name><modifier>*</modifier></type> <name>r_skiplist_new</name><parameter_list>(<parameter><decl><type><name>RListFree</name></type> <name>freefn</name></decl></parameter>, <parameter><decl><type><name>RListComparator</name></type> <name>comparefn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_skiplist_free</name><parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_skiplist_purge</name><parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RSkipListNode</name><modifier>*</modifier></type> <name>r_skiplist_insert</name><parameter_list>(<parameter><decl><type><name>RSkipList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_skiplist_delete</name><parameter_list>(<parameter><decl><type><name>RSkipList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_skiplist_delete_node</name><parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RSkipListNode</name><modifier>*</modifier></type> <name>r_skiplist_find</name><parameter_list>(<parameter><decl><type><name>RSkipList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RSkipListNode</name><modifier>*</modifier></type> <name>r_skiplist_find_geq</name><parameter_list>(<parameter><decl><type><name>RSkipList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RSkipListNode</name><modifier>*</modifier></type> <name>r_skiplist_find_leq</name><parameter_list>(<parameter><decl><type><name>RSkipList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_skiplist_join</name><parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>l1</name></decl></parameter>, <parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>l2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_skiplist_get_first</name><parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_skiplist_get_n</name><parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name><modifier>*</modifier></type> <name>r_skiplist_get_geq</name><parameter_list>(<parameter><decl><type><name>RSkipList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name><modifier>*</modifier></type> <name>r_skiplist_get_leq</name><parameter_list>(<parameter><decl><type><name>RSkipList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_skiplist_empty</name><parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_skiplist_to_list</name><parameter_list>(<parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_skiplist_islast</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>el</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(el-&gt;forward[0] == list-&gt;head)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_skiplist_length</name><parameter_list>(<parameter><type><name>list</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(list-&gt;size)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_skiplist_foreach</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>it</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if (list)for (it = list-&gt;head-&gt;forward[0]; it != list-&gt;head &amp;&amp; ((pos = it-&gt;data) || 1); it = it-&gt;forward[0])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_skiplist_foreach_safe</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>it</name></type></parameter>, <parameter><type><name>tmp</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if (list)for (it = list-&gt;head-&gt;forward[0]; it != list-&gt;head &amp;&amp; ((pos = it-&gt;data) || 1) &amp;&amp; ((tmp = it-&gt;forward[0]) || 1); it = tmp)</cpp:value></cpp:define>

</unit>
