<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\include\r_endian.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>r_read_ble8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UT8_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name>src</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>r_read_at_ble8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_read_ble8</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name><operator>)</operator> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_ble8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>dest</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_at_ble8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_ble8</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>r_read_be8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_read_ble8</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>r_read_at_be8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_read_at_ble8</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_be8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_ble8</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_at_be8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_at_ble8</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut16</name></type> <name>r_read_be16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ut16</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut16</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut16</name></type> <name>r_read_at_be16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_read_be16</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_be16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_be8</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_at_be8</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_at_be16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_be16</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>r_read_be32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>r_read_at_be32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_read_be32</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_be32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_be16</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_at_be16</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_be24</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_dest</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>_dest</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_be8</name> <argument_list>(<argument><expr><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_be8</name> <argument_list>(<argument><expr><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_be8</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_at_be32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_be32</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>r_read_be64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>val</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><call><name>r_read_be32</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <call><name>r_read_at_be32</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>r_read_at_be64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_read_be64</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_be64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_be32</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_at_be32</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_at_be64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_be64</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>r_read_le8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UT8_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_read_ble8</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>r_read_at_le8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_read_at_ble8</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_le8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_ble8</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_at_le8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_at_ble8</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut16</name></type> <name>r_read_le16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UT16_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ut16</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut16</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut16</name></type> <name>r_read_at_le16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UT16_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_read_le16</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_le16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_le8</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_at_le8</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_at_le16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>dest</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_le16</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_le24</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_dest</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>dest</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>_dest</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_le8</name> <argument_list>(<argument><expr><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_le8</name> <argument_list>(<argument><expr><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_le8</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>r_read_le32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UT32_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>r_read_at_le32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UT32_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_le32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_le16</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_at_le16</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_at_le32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name><operator>)</operator> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_le32</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>r_read_le64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>val</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><call><name>r_read_at_le32</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>r_read_at_le64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name><operator>)</operator> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_le64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_le32</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_at_le32</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_at_le64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_le64</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>r_read_me8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>src</name></expr> ?</condition><then> <expr><call><name>r_read_ble8</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>UT8_MAX</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>r_read_at_me8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_read_at_ble8</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_me8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_ble8</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_at_me8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_at_ble8</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut16</name></type> <name>r_read_me16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UT16_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ut16</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut16</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut16</name></type> <name>r_read_at_me16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UT16_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_read_me16</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_me16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_me8</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_at_me8</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_at_me16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>dest</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_me16</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>r_read_me32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UT32_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>r_read_at_me32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UT32_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_read_me32</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_me32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_me16</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_at_me16</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_at_me32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name><operator>)</operator> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_me32</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>r_read_me64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>val</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><call><name>r_read_at_me32</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <call><name>r_read_me32</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>r_read_at_me64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name><operator>)</operator> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_read_me64</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_me64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_me32</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_at_me32</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_at_me64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dest</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_me64</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut16</name></type> <name>r_read_ble16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>big_endian</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>big_endian</name></expr>?</condition><then> <expr><call><name>r_read_be16</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><call><name>r_read_le16</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>r_read_ble32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>big_endian</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>big_endian</name></expr>?</condition><then> <expr><call><name>r_read_be32</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>r_read_ble64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>big_endian</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>big_endian</name></expr>?</condition><then> <expr><call><name>r_read_be64</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>r_read_ble</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>big_endian</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<return>return <expr><operator>(</operator><name>ut64</name><operator>)</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>src</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<return>return <expr><call><name>r_read_ble16</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>big_endian</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<return>return <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>big_endian</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">64</literal></expr>:</case>

<return>return <expr><call><name>r_read_ble64</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>big_endian</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_ble16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>big_endian</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><ternary><condition><expr><name>big_endian</name></expr>?</condition><then> <expr><call><name>r_write_be16</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><call><name>r_write_le16</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_ble24</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>big_endian</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><ternary><condition><expr><name>big_endian</name></expr>?</condition><then> <expr><call><name>r_write_be24</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><call><name>r_write_le24</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_ble32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>big_endian</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><ternary><condition><expr><name>big_endian</name></expr>?</condition><then> <expr><call><name>r_write_be32</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><call><name>r_write_le32</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_ble64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>big_endian</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><ternary><condition><expr><name>big_endian</name></expr>?</condition><then> <expr><call><name>r_write_be64</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><call><name>r_write_le64</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_write_ble</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>big_endian</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <name>val</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<expr_stmt><expr><call><name>r_write_ble16</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>ut16</name><operator>)</operator> <name>val</name></expr></argument>, <argument><expr><name>big_endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case>

<expr_stmt><expr><call><name>r_write_ble24</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator> <name>val</name></expr></argument>, <argument><expr><name>big_endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<expr_stmt><expr><call><name>r_write_ble32</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator> <name>val</name></expr></argument>, <argument><expr><name>big_endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">64</literal></expr>:</case>

<expr_stmt><expr><call><name>r_write_ble64</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>big_endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ut8p_b</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)[0])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ut8p_bw</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)[0]|((x)[1]&lt;&lt;8))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ut8p_bd</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)[0]|((x)[1]&lt;&lt;8)|((x)[2]&lt;&lt;16)|((x)[3]&lt;&lt;24))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ut8p_bq</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)[0]|((x)[1]&lt;&lt;8)|((x)[2]&lt;&lt;16)|((x)[3]&lt;&lt;24)|((x)[4]&lt;&lt;32)|((x)[5]&lt;&lt;40)|((x)[6]&lt;&lt;48)|((x)[7]&lt;&lt;56))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ut8p_lw</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)[1]|((x)[0]&lt;&lt;8))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ut8p_ld</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)[3]|((x)[2]&lt;&lt;8)|((x)[1]&lt;&lt;16)|((x)[0]&lt;&lt;24))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ut8p_lq</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)[7]|((x)[6]&lt;&lt;8)|((x)[5]&lt;&lt;16)|((x)[4]&lt;&lt;24)|((x)[3]&lt;&lt;32)|((x)[2]&lt;&lt;40)|((x)[1]&lt;&lt;48)|((x)[0]&lt;&lt;56))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut16</name></type> <name>r_swap_ut16</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>st16</name></type> <name>r_swap_st16</name><parameter_list>(<parameter><decl><type><name>st16</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF00FF00</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF00FF</literal> <operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>r_swap_ut32</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF00FF00</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF00FF</literal> <operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>st32</name></type> <name>r_swap_st32</name><parameter_list>(<parameter><decl><type><name>st32</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF00FF00</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF00FF</literal> <operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>r_swap_ut64</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF00FF00FF00FF00ULL</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00FF00FF00FF00FFULL</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF0000FFFF0000ULL</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0000FFFF0000FFFFULL</literal> <operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>st64</name></type> <name>r_swap_st64</name><parameter_list>(<parameter><decl><type><name>st64</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF00FF00FF00FF00ULL</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00FF00FF00FF00FFULL</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF0000FFFF0000ULL</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0000FFFF0000FFFFULL</literal> <operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>UT64_ADD</name><parameter_list>(<parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>UT64_MAX</name> <operator>-</operator> <name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>UT64_MUL</name><parameter_list>(<parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>UT64_MAX</name> <operator>/</operator> <name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>UT64_SUB</name><parameter_list>(<parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <name>a</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>UT32_ADD</name><parameter_list>(<parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>UT32_MAX</name> <operator>-</operator> <name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>UT32_MUL</name><parameter_list>(<parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>UT32_MAX</name> <operator>/</operator> <name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>UT32_SUB</name><parameter_list>(<parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <name>a</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>UT16_ADD</name><parameter_list>(<parameter><decl><type><name>ut16</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>UT16_MAX</name> <operator>-</operator> <name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>UT16_MUL</name><parameter_list>(<parameter><decl><type><name>ut16</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>UT16_MAX</name> <operator>/</operator> <name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>UT16_SUB</name><parameter_list>(<parameter><decl><type><name>ut16</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <name>a</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>UT8_ADD</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>UT8_MAX</name> <operator>-</operator> <name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>UT8_MUL</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>UT8_MAX</name> <operator>/</operator> <name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>UT8_SUB</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <name>a</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
