<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\include\r_util\r_panels.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{

<decl><name>VERTICAL</name></decl>,

<decl><name>HORIZONTAL</name></decl>,

<decl><name>NONE</name></decl>

}</block></enum></type> <name>RPanelLayout</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>PANEL_TYPE_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PANEL_TYPE_MENU</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>

}</block></enum></type> <name>RPanelType</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>PANEL_EDGE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PANEL_EDGE_BOTTOM</name></decl>,

<decl><name>PANEL_EDGE_RIGHT</name></decl>

}</block></enum></type> <name>RPanelEdge</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RPanelMenuUpdateCallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RPanelDirectionCallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RPanelRotateCallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RPanelPrintCallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>r_panel_pos_t</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

}</block></struct></type> <name>RPanelPos</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_panel_model_t</name> <block>{

<decl_stmt><decl><type><name>RPanelDirectionCallback</name></type> <name>directionCb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelRotateCallback</name></type> <name>rotateCb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelPrintCallback</name></type> <name>print_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelType</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>baseAddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdStrCache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>readOnly</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>funcName</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rotate</name></decl>;</decl_stmt>

}</block></struct></type> <name>RPanelModel</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_panel_view_t</name> <block>{

<decl_stmt><decl><type><name>RPanelPos</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelPos</name></type> <name>prevPos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>refresh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>edge</name></decl>;</decl_stmt>

}</block></struct></type> <name>RPanelView</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_panel_t</name> <block>{

<decl_stmt><decl><type><name>RPanelModel</name> <modifier>*</modifier></type><name>model</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPanelView</name> <modifier>*</modifier></type><name>view</name></decl>;</decl_stmt>

}</block></struct></type> <name>RPanel</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RPanelAlmightyCallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RPanel</name> <modifier>*</modifier></type><name>panel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RPanelLayout</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
