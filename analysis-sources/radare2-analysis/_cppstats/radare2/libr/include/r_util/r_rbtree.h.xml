<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\include\r_util\r_rbtree.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_list.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_RBTREE_MAX_HEIGHT</name></cpp:macro> <cpp:value>62</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>r_rb_node_t</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>r_rb_node_t</name></name> <modifier>*</modifier></type><name><name>child</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>red</name></decl>;</decl_stmt>

}</block></struct></type> <name>RBNode</name>;</typedef>

<typedef>typedef <type><name>RBNode</name><modifier>*</modifier></type> <name>RBTree</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RBComparator</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBNode</name> <modifier>*</modifier></type><name>in_tree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RBNodeFree</name>)<parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RBNodeSum</name>)<parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>r_rb_iter_t</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name><name>path</name><index>[<expr><name>R_RBTREE_MAX_HEIGHT</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>RBIter</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RContRBCmp</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RContRBFree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>r_containing_rb_node_t</name> <block>{

<decl_stmt><decl><type><name>RBNode</name></type> <name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

}</block></struct></type> <name>RContRBNode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_containing_rb_tree_t</name> <block>{

<decl_stmt><decl><type><name>RContRBNode</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RContRBFree</name></type> <name>free</name></decl>;</decl_stmt>

}</block></struct></type> <name>RContRBTree</name>;</typedef>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_rbtree_aug_delete</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cmp_user</name></decl></parameter>, <parameter><decl><type><name>RBNodeFree</name></type> <name>freefn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>free_user</name></decl></parameter>, <parameter><decl><type><name>RBNodeSum</name></type> <name>sum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_rbtree_aug_insert</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cmp_user</name></decl></parameter>, <parameter><decl><type><name>RBNodeSum</name></type> <name>sum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_rbtree_aug_update_sum</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cmp_user</name></decl></parameter>, <parameter><decl><type><name>RBNodeSum</name></type> <name>sum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_rbtree_delete</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cmp_user</name></decl></parameter>, <parameter><decl><type><name>RBNodeFree</name></type> <name>freefn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>free_user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RBNode</name> <modifier>*</modifier></type><name>r_rbtree_find</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_rbtree_free</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RBNodeFree</name></type> <name>freefn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_rbtree_insert</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RBNode</name> <modifier>*</modifier></type><name>r_rbtree_lower_bound</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RBNode</name> <modifier>*</modifier></type><name>r_rbtree_upper_bound</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RBIter</name></type> <name>r_rbtree_first</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RBIter</name></type> <name>r_rbtree_last</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RBIter</name></type> <name>r_rbtree_lower_bound_forward</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RBIter</name></type> <name>r_rbtree_upper_bound_backward</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RBComparator</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_rbtree_iter_get</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>struc</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(container_of ((it)-&gt;path[(it)-&gt;len-1], struc, rb))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_rbtree_iter_has</name><parameter_list>(<parameter><type><name>it</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((it)-&gt;len)</cpp:value></cpp:define>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_rbtree_iter_next</name><parameter_list>(<parameter><decl><type><name>RBIter</name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_rbtree_iter_prev</name><parameter_list>(<parameter><decl><type><name>RBIter</name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_rbtree_iter_while</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>data</name></type></parameter>, <parameter><type><name>struc</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (; r_rbtree_iter_has(&amp;it) &amp;&amp; (data = r_rbtree_iter_get (&amp;it, struc, rb)); r_rbtree_iter_next (&amp;(it)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_rbtree_iter_while_prev</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>data</name></type></parameter>, <parameter><type><name>struc</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (; r_rbtree_iter_has(&amp;it) &amp;&amp; (data = r_rbtree_iter_get (&amp;it, struc, rb)); r_rbtree_iter_prev (&amp;(it)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_rbtree_foreach</name><parameter_list>(<parameter><type><name>root</name></type></parameter>, <parameter><type><name>it</name></type></parameter>, <parameter><type><name>data</name></type></parameter>, <parameter><type><name>struc</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((it) = r_rbtree_first (root); r_rbtree_iter_has(&amp;it) &amp;&amp; (data = r_rbtree_iter_get (&amp;it, struc, rb)); r_rbtree_iter_next (&amp;(it)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_rbtree_foreach_prev</name><parameter_list>(<parameter><type><name>root</name></type></parameter>, <parameter><type><name>it</name></type></parameter>, <parameter><type><name>data</name></type></parameter>, <parameter><type><name>struc</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((it) = r_rbtree_last (root); r_rbtree_iter_has(&amp;it) &amp;&amp; (data = r_rbtree_iter_get (&amp;it, struc, rb)); r_rbtree_iter_prev (&amp;(it)))</cpp:value></cpp:define>

<function_decl><type><name>R_API</name> <name>RContRBTree</name> <modifier>*</modifier></type><name>r_rbtree_cont_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RContRBTree</name> <modifier>*</modifier></type><name>r_rbtree_cont_newf</name><parameter_list>(<parameter><decl><type><name>RContRBFree</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_rbtree_cont_insert</name><parameter_list>(<parameter><decl><type><name>RContRBTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RContRBCmp</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_rbtree_cont_delete</name><parameter_list>(<parameter><decl><type><name>RContRBTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RContRBCmp</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_rbtree_cont_find</name><parameter_list>(<parameter><decl><type><name>RContRBTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RContRBCmp</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_rbtree_cont_foreach</name><parameter_list>(<parameter><type><name>tree</name></type></parameter>, <parameter><type><name>it</name></type></parameter>, <parameter><type><name>dat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((it) = r_rbtree_first (&amp;tree-&gt;root-&gt;node); r_rbtree_iter_has(&amp;it) &amp;&amp; (dat = r_rbtree_iter_get (&amp;it, RContRBNode, node)-&gt;data); r_rbtree_iter_next (&amp;(it)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_rbtree_cont_foreach_prev</name><parameter_list>(<parameter><type><name>tree</name></type></parameter>, <parameter><type><name>it</name></type></parameter>, <parameter><type><name>dat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((it) = r_rbtree_last (&amp;tree-&gt;root-&gt;node); r_rbtree_iter_has(&amp;it) &amp;&amp; (dat = r_rbtree_iter_get (&amp;it, RContRBNode, node)-&gt;data); r_rbtree_iter_prev (&amp;(it)))</cpp:value></cpp:define>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_rbtree_cont_free</name><parameter_list>(<parameter><decl><type><name>RContRBTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
