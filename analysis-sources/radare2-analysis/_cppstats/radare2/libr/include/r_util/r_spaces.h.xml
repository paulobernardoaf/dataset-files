<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\include\r_util\r_spaces.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SPACES_MAX</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_util.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>r_space_t</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBNode</name></type> <name>rb</name></decl>;</decl_stmt>

}</block></struct></type> <name>RSpace</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>R_SPACE_EVENT_COUNT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>R_SPACE_EVENT_RENAME</name></decl>,

<decl><name>R_SPACE_EVENT_UNSET</name></decl>,

}</block></enum></type> <name>RSpaceEventType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_space_event_t</name> <block>{

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>RSpace</name> <modifier>*</modifier></type><name>space</name></decl>;</decl_stmt>

}</block> <decl><name>count</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>RSpace</name> <modifier>*</modifier></type><name>space</name></decl>;</decl_stmt>

}</block> <decl><name>unset</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>RSpace</name> <modifier>*</modifier></type><name>space</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newname</name></decl>;</decl_stmt>

}</block> <decl><name>rename</name></decl>;</struct>

}</block> <decl><name>data</name></decl>;</union>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

}</block></struct></type> <name>RSpaceEvent</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_spaces_t</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBTree</name></type> <name>spaces</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>spacestack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>REvent</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>

}</block></struct></type> <name>RSpaces</name>;</typedef>

<function_decl><type><name>R_API</name> <name>RSpaces</name> <modifier>*</modifier></type><name>r_spaces_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_spaces_init</name><parameter_list>(<parameter><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_spaces_fini</name><parameter_list>(<parameter><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_spaces_free</name><parameter_list>(<parameter><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_spaces_purge</name><parameter_list>(<parameter><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RSpace</name> <modifier>*</modifier></type><name>r_spaces_get</name><parameter_list>(<parameter><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RSpace</name> <modifier>*</modifier></type><name>r_spaces_add</name><parameter_list>(<parameter><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RSpace</name> <modifier>*</modifier></type><name>r_spaces_set</name><parameter_list>(<parameter><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_spaces_unset</name><parameter_list>(<parameter><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_spaces_rename</name><parameter_list>(<parameter><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nname</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_spaces_count</name><parameter_list>(<parameter><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_spaces_push</name><parameter_list>(<parameter><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_spaces_pop</name><parameter_list>(<parameter><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RSpace</name> <modifier>*</modifier></type><name>r_spaces_current</name><parameter_list>(<parameter><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>sp</name><operator>-&gt;</operator><name>current</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_spaces_current_name</name><parameter_list>(<parameter><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>sp</name><operator>-&gt;</operator><name>current</name></name></expr>?</condition><then> <expr><name><name>sp</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>name</name></name></expr></then><else>: <expr><literal type="string">"*"</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>r_spaces_is_empty</name><parameter_list>(<parameter><decl><type><name>RSpaces</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBIter</name></type> <name>it</name> <init>= <expr><call><name>r_rbtree_first</name> <argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>spaces</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>it</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><name>RBIter</name></type> <name>RSpaceIter</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_spaces_foreach</name><parameter_list>(<parameter><type><name>sp</name></type></parameter>, <parameter><type><name>it</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_rbtree_foreach ((sp)-&gt;spaces, (it), (s), RSpace, rb)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
