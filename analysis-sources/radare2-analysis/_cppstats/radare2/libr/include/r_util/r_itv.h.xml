<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\include\r_util\r_itv.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>r_interval_t</name> <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>

}</block></struct></type> <name>RInterval</name>;</typedef>

<typedef>typedef <type><name>RInterval</name></type> <name>r_itv_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RInterval</name> <modifier>*</modifier></type><name>r_itv_new</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RInterval</name> <modifier>*</modifier></type><name>itv</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RInterval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>itv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>itv</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>itv</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>itv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_itv_free</name><parameter_list>(<parameter><decl><type><name>RInterval</name> <modifier>*</modifier></type><name>itv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>itv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>r_itv_begin</name><parameter_list>(<parameter><decl><type><name>RInterval</name></type> <name>itv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>itv</name><operator>.</operator><name>addr</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>r_itv_size</name><parameter_list>(<parameter><decl><type><name>RInterval</name></type> <name>itv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>itv</name><operator>.</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut64</name></type> <name>r_itv_end</name><parameter_list>(<parameter><decl><type><name>RInterval</name></type> <name>itv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>itv</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>itv</name><operator>.</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>r_itv_contain</name><parameter_list>(<parameter><decl><type><name>RInterval</name></type> <name>itv</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>end</name> <init>= <expr><name><name>itv</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>itv</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>itv</name><operator>.</operator><name>addr</name></name> <operator>&lt;=</operator> <name>addr</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>end</name> <operator>||</operator> <name>addr</name> <operator>&lt;</operator> <name>end</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>r_itv_include</name><parameter_list>(<parameter><decl><type><name>RInterval</name></type> <name>itv</name></decl></parameter>, <parameter><decl><type><name>RInterval</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>end</name> <init>= <expr><name><name>itv</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>itv</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>itv</name><operator>.</operator><name>addr</name></name> <operator>&lt;=</operator> <name><name>x</name><operator>.</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>end</name> <operator>||</operator> <operator>(</operator><name><name>x</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>x</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>x</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>x</name><operator>.</operator><name>size</name></name> <operator>&lt;=</operator> <name>end</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>r_itv_overlap</name><parameter_list>(<parameter><decl><type><name>RInterval</name></type> <name>itv</name></decl></parameter>, <parameter><decl><type><name>RInterval</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>end</name> <init>= <expr><name><name>itv</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>itv</name><operator>.</operator><name>size</name></name></expr></init></decl>, <decl><type ref="prev"/><name>end1</name> <init>= <expr><name><name>x</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>x</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>!</operator><name>end1</name> <operator>||</operator> <name><name>itv</name><operator>.</operator><name>addr</name></name> <operator>&lt;</operator> <name>end1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>end</name> <operator>||</operator> <name><name>x</name><operator>.</operator><name>addr</name></name> <operator>&lt;</operator> <name>end</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>r_itv_overlap2</name><parameter_list>(<parameter><decl><type><name>RInterval</name></type> <name>itv</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RInterval</name></type> <name>rai</name> <init>= <expr><block>{<expr><name>addr</name></expr>, <expr><name>size</name></expr>}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_itv_overlap</name> <argument_list>(<argument><expr><name>itv</name></expr></argument>, <argument><expr><name>rai</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>RInterval</name></type> <name>r_itv_intersect</name><parameter_list>(<parameter><decl><type><name>RInterval</name></type> <name>itv</name></decl></parameter>, <parameter><decl><type><name>RInterval</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>itv</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>end</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>itv</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>itv</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>x</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RInterval</name></type> <name>rai</name> <init>= <expr><block>{<expr><name>addr</name></expr>, <expr><name>end</name> <operator>-</operator> <name>addr</name></expr>}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name>rai</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
