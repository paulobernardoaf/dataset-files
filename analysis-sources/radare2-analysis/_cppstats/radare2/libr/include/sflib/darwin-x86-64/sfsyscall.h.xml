<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\include\sflib\darwin-x86-64\sfsyscall.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SF_USE_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>errno</name></decl>;</decl_stmt>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"SF_USER_ERRNO not supported yet"</cpp:literal></cpp:error>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__sfsyscall_return</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { return (type) (res); } while (0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall0</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name(void) { long __res; __asm__ volatile ("syscall" : "=a" (__res) : "0" (0x2000000 | __NR_##name)); __sfsyscall_return(type,__res); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall1</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name(type1 arg1) { long __res; __asm__ volatile ("mov %2, %%rdi\n\t" "syscall\n\t" : "=a" (__res) : "0" (0x2000000 | __NR_##name),"g" ((long)(arg1))); __sfsyscall_return(type,__res); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall2</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name(type1 arg1,type2 arg2) { long __res; __asm__ volatile ("mov %2, %%rdi\n\t" "mov %3, %%rsi\n\t" "syscall\n\t" : "=a" (__res) : "0" (0x2000000 | __NR_##name),"g" ((long)(arg1)),"g" ((long)(arg2)) ); __sfsyscall_return(type,__res); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall3ipi</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name(type1 arg1,type2 arg2,type3 arg3) { long __res; __asm__ volatile ("mov %4, %%rdx\n\t" "syscall\n\t" : "=a" (__res) : "0" (0x2000000 | __NR_##name), "D" (arg1),"S" (arg2), "g" ((long)(arg3)) ); __sfsyscall_return(type,__res); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall3</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name(type1 arg1,type2 arg2,type3 arg3) { long __res; __asm__ volatile ("mov %2, %%rdi\n\t" "mov %3, %%rsi\n\t" "mov %4, %%rdx\n\t" "syscall\n\t" : "=a" (__res) : "0" (0x2000000 | __NR_##name),"g" ((long)(arg1)),"g" ((long)(arg2)), "g" ((long)(arg3)) ); __sfsyscall_return(type,__res); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall4</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name (type1 arg1, type2 arg2, type3 arg3, type4 arg4) { long __res; __asm__ volatile ("mov %2, %%rdi\n\t" "mov %3, %%rsi\n\t" "mov %4, %%rdx\n\t" "mov %5, %%r10\n\t" "syscall\n\t" : "=a" (__res) : "0" (0x2000000 | __NR_##name),"g" ((long)(arg1)),"c" ((long)(arg2)), "d" ((long)(arg3)),"S" ((long)(arg4)) ); __sfsyscall_return(type,__res); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall5</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>, <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5) { long __res; __asm__ volatile ("mov %2, %%rdi\n\t" "mov %3, %%rsi\n\t" "mov %4, %%rdx\n\t" "mov %5, %%r10\n\t" "mov %6, %%r8\n\t" "syscall\n\t" : "=a" (__res) : "0" (0x2000000 | __NR_##name),"g" ((long)(arg1)),"g" ((long)(arg2)), "g" ((long)(arg3)),"g" ((long)(arg4)),"g" ((long)(arg5))); __sfsyscall_return(type,__res); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall6</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>, <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>,<parameter><type><name>type6</name></type></parameter>,<parameter><type><name>arg6</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5, type6 arg6) { long __res; __asm__ volatile ("mov %2, %%rdi\n\t" "mov %3, %%rsi\n\t" "mov %4, %%rdx\n\t" "mov %5, %%r10\n\t" "mov %6, %%r8\n\t" "mov %7, %%r9\n\t" "syscall\n\t" : "=a" (__res) : "0" (0x2000000 | __NR_##name),"g" ((long)(arg1)),"g" ((long)(arg2)), "g" ((long)(arg3)),"g" ((long)(arg4)),"g" ((long)(arg5)), "g" ((long)(arg6))); __sfsyscall_return(type,__res); }</cpp:value></cpp:define>

</unit>
