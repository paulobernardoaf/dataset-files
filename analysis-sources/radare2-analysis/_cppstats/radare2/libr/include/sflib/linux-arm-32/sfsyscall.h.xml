<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\include\sflib\linux-arm-32\sfsyscall.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SF_USE_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>errno</name> <init>= <expr><literal type="number">1234</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__sfsyscall_return</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((unsigned long)(res) &gt;= (unsigned long)(-125)) { errno = -(res); res = -1; } return (type) (res); } while (0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__sfsyscall_return</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { return (type) (res); } while (0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall0</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name(void) { long __res; __asm__ volatile("###&gt; " #name " &lt;###\n\t" "svc 0" : "=a" (__res) : "0" (__NR_##name) : "memory", "cc"); __sfsyscall_return(type,__res); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall1</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name(type1 arg1) { long __res; register type1 r1 asm("r0"); r1 = arg1; asm volatile ("###&gt; " #name "(%2) &lt;###\n\t" "mov r7, %0\n\t" "svc 0" : "=g" (__res) : "0" (__NR_##name), "r"(r1) ); __sfsyscall_return(type,__res); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall2</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name(type1 arg1, type2 arg2) { long __res; register type1 r1 asm("r1"); register type2 r2 asm("r2"); r1 = arg1; r2 = arg2; __asm__ volatile("###&gt; " #name "(%2, %3) &lt;###\n\t" "svc 0" : "=g" (__res) : "0" (__NR_##name), "r" (r1), "r" (r2) ); __sfsyscall_return(type, __res); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall3</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>type3</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name(type1 arg1, type2 arg2, type3 arg3) { long __res; register type1 r0 asm("r0"); register type2 r1 asm("r1"); register type3 r2 asm("r2"); r0 = arg1; r1 = arg2; r2 = arg3; __asm__ __volatile__ ("###&gt; " #name "(%2, %3, %4) &lt;###\n\t" "mov r7, %1\n\t" "svc 0" : "=g" (__res) : "0" (__NR_##name), "r" (r0), "r" (r1), "r" (r2) : "memory", "cc"); __sfsyscall_return(type, __res); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall4</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>type3</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>, <parameter><type><name>type4</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4) { long __res; register type1 r1 asm("r1"); ; register type2 r2 asm("r2"); register type3 r3 asm("r3"); register type4 r4 asm("r4"); r1 = arg1; r2 = arg2; r3 = arg3; r4 = arg4; asm volatile("###&gt; " #name "(%2, %3, %4, %5) &lt;###\n\t" "svc 0" : "=g" (__res) : "0" (__NR_##name), "r" (r1), "r" (r2), "r" (r3), "r" (r4) : "memory", "cc" ); __sfsyscall_return(type, __res); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall5</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>type3</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>, <parameter><type><name>type4</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>, <parameter><type><name>type5</name></type></parameter>, <parameter><type><name>arg5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5) { long __res; register type1 r1 asm("r1"); register type2 r2 asm("r2"); register type3 r3 asm("r3"); register type4 r4 asm("r4"); register type5 r5 asm("r5"); r1 = arg1; r2 = arg2; r3 = arg3; r4 = arg4; r5 = arg5; asm volatile("###&gt; " #name "(%2, %3, %4, %5, %6) &lt;###\n\t" "svc 0" : "=g" (__res) : "0" (__NR_##name), "r" (r1), "r" (r2), "r" (r3), "r" (r4), "r" (r5) : "memory", "cc" ); __sfsyscall_return(type, __res); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sfsyscall6</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>type3</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>, <parameter><type><name>type4</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>, <parameter><type><name>type5</name></type></parameter>, <parameter><type><name>arg5</name></type></parameter>, <parameter><type><name>type6</name></type></parameter>, <parameter><type><name>arg6</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5, type6 arg6) { long __res; register type1 r1 asm("r1"); register type2 r2 asm("r2"); register type3 r3 asm("r3"); register type4 r4 asm("r4"); register type5 r5 asm("r5"); register type6 r6 asm("r6"); r1 = arg1; r2 = arg2; r3 = arg3; r4 = arg4; r5 = arg5; r6 = arg6; asm volatile("###&gt; " #name "(%2, %3, %4, %5, %6, %7) &lt;###\n\t" "svc 0" : "=a" (__res) : "0" (__NR_##name), "r" (r1), "r" (r2), "r" (r3), "r" (r4), "r" (r5), "r" (r6) : "memory", "cc" ); __sfsyscall_return(type, __res); }</cpp:value></cpp:define>

</unit>
