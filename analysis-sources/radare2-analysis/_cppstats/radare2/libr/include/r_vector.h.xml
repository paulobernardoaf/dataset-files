<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\include\r_vector.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util/r_assert.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RPVectorComparator</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RVectorFree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RPVectorFree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>r_vector_t</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>capacity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>elem_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RVectorFree</name></type> <name>free</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>free_user</name></decl>;</decl_stmt>

}</block></struct></type> <name>RVector</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_pvector_t</name> <block>{ <decl_stmt><decl><type><name>RVector</name></type> <name>v</name></decl>;</decl_stmt> }</block></struct></type> <name>RPVector</name>;</typedef>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_vector_init</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elem_size</name></decl></parameter>, <parameter><decl><type><name>RVectorFree</name></type> <name>free</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>free_user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RVector</name> <modifier>*</modifier></type><name>r_vector_new</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>elem_size</name></decl></parameter>, <parameter><decl><type><name>RVectorFree</name></type> <name>free</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>free_user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_vector_clear</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_vector_free</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RVector</name> <modifier>*</modifier></type><name>r_vector_clone</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>r_vector_empty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>vec</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_vector_index_ptr</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_vector_assign</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_vector_assign_at</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_vector_remove_at</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>into</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_vector_insert</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_vector_insert_range</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_vector_pop</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>into</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_vector_pop_front</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>into</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_vector_push</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_vector_push_front</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_vector_reserve</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_vector_shrink</name><parameter_list>(<parameter><decl><type><name>RVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_vector_foreach</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>, <parameter><type><name>it</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!r_vector_empty (vec)) for (it = (void *)(vec)-&gt;a; (char *)it != (char *)(vec)-&gt;a + ((vec)-&gt;len * (vec)-&gt;elem_size); it = (void *)((char *)it + (vec)-&gt;elem_size))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_vector_enumerate</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>, <parameter><type><name>it</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!r_vector_empty (vec)) for (it = (void *)(vec)-&gt;a, i = 0; i &lt; (vec)-&gt;len; it = (void *)((char *)it + (vec)-&gt;elem_size), i++)</cpp:value></cpp:define>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_pvector_init</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>RPVectorFree</name></type> <name>free</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RPVector</name> <modifier>*</modifier></type><name>r_pvector_new</name><parameter_list>(<parameter><decl><type><name>RPVectorFree</name></type> <name>free</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_pvector_clear</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_pvector_free</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>r_pvector_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>vec</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>len</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>r_pvector_at</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><name>index</name></expr>]</index></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>r_pvector_set</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator><index>[<expr><name>index</name></expr>]</index> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>r_pvector_empty</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_pvector_len</name> <argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>r_pvector_index_ptr</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>a</name></name><operator>)</operator> <operator>+</operator> <name>index</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>r_pvector_data</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>a</name></name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>r_pvector_contains</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_pvector_remove_at</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_pvector_remove_data</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>r_pvector_insert</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_insert</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>r_pvector_insert_range</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_insert_range</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_pvector_pop</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_pvector_pop_front</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>r_pvector_push</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>r_pvector_push_front</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_push_front</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_pvector_sort</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>RPVectorComparator</name></type> <name>cmp</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>r_pvector_reserve</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_reserve</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>r_pvector_shrink</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>r_vector_shrink</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_pvector_foreach</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>, <parameter><type><name>it</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (it = (void **)(vec)-&gt;v.a; it != (void **)(vec)-&gt;v.a + (vec)-&gt;v.len; it++)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_pvector_lower_bound</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>cmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int h = (vec)-&gt;v.len, m; for (i = 0; i &lt; h; ) { m = i + ((h - i) &gt;&gt; 1); if ((cmp (x, ((void **)(vec)-&gt;v.a)[m])) &gt; 0) { i = m + 1; } else { h = m; } } } while (0)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_pvector_upper_bound</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>cmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int h = (vec)-&gt;v.len, m; for (i = 0; i &lt; h; ) { m = i + ((h - i) &gt;&gt; 1); if (!((cmp (x, ((void **)(vec)-&gt;v.a)[m])) &lt; 0)) { i = m + 1; } else { h = m; } } } while (0)</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
