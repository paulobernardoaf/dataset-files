<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\include\r_magic.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>R_LIB_VERSION_HEADER</name><argument_list>(<argument><expr><name>r_magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAGICFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGICFILE</name></cpp:macro> <cpp:value>"/etc/magic"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__EMX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATHSEP</name></cpp:macro> <cpp:value>';'</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATHSEP</name></cpp:macro> <cpp:value>':'</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HOWMANY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOWMANY</name></cpp:macro> <cpp:value>(256 * 1024)</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXDESC</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMAGIS</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXstring</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 

<union>union <name>VALUETYPE</name> <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>hs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut8</name></type> <name><name>hl</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut8</name></type> <name><name>hq</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>MAXstring</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

}</block>;</union> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGICNO</name></cpp:macro> <cpp:value>0xF11E041C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERSIONNO</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_MAGICSIZE</name></cpp:macro> <cpp:value>(32 * 6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LOAD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_CHECK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_COMPILE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<struct>struct <name>r_magic</name> <block>{

<decl_stmt><decl><type><name>ut16</name></type> <name>cont_level</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut8</name></type> <name>flag</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDIR</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFADD</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDIROFFADD</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNSIGNED</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOSPACE</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINTEST</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXTTEST</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>ut8</name></type> <name>dummy1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reln</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut8</name></type> <name>vallen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut8</name></type> <name>type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut8</name></type> <name>in_type</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_INVALID</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_BYTE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_SHORT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_DEFAULT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LONG</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_STRING</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_DATE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_BESHORT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_BELONG</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_BEDATE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LESHORT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LELONG</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LEDATE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_PSTRING</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LDATE</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_BELDATE</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LELDATE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_REGEX</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_BESTRING16</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LESTRING16</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_SEARCH</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_MEDATE</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_MELDATE</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_MELONG</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_QUAD</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LEQUAD</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_BEQUAD</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_QDATE</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LEQDATE</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_BEQDATE</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_QLDATE</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LEQLDATE</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_BEQLDATE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_FLOAT</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_BEFLOAT</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LEFLOAT</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_DOUBLE</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_BEDOUBLE</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LEDOUBLE</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_NAMES_SIZE</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC_IS_STRING</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((t) == FILE_STRING || (t) == FILE_PSTRING || (t) == FILE_BESTRING16 || (t) == FILE_LESTRING16 || (t) == FILE_REGEX || (t) == FILE_SEARCH || (t) == FILE_DEFAULT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_FMT_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_FMT_NUM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_FMT_STR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_FMT_QUAD</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_FMT_FLOAT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_FMT_DOUBLE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>ut8</name></type> <name>in_op</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut8</name></type> <name>mask_op</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut8</name></type> <name>cond</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut8</name></type> <name>dummy2</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_OPS</name></cpp:macro> <cpp:value>"&amp;|^+-*/%"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_OPAND</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_OPOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_OPXOR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_OPADD</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_OPMINUS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_OPMULTIPLY</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_OPDIVIDE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_OPMODULO</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_OPS_MASK</name></cpp:macro> <cpp:value>0x07</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_UNUSED_1</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_UNUSED_2</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_UNUSED_3</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_OPINVERSE</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_OPINDIRECT</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COND_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COND_IF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COND_ELIF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COND_ELSE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>in_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>lineno</name></decl>;</decl_stmt> 

<union>union <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>_mask</name></decl>;</decl_stmt> 

<struct>struct <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>_flags</name></decl>;</decl_stmt> 

}</block> <decl><name>_s</name></decl>;</struct> 

}</block> <decl><name>_u</name></decl>;</union>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>num_mask</name></cpp:macro> <cpp:value>_u._mask</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str_range</name></cpp:macro> <cpp:value>_u._s._count</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str_flags</name></cpp:macro> <cpp:value>_u._s._flags</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>union</name> <name>VALUETYPE</name></name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>desc</name><index>[<expr><name>MAXDESC</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>mimetype</name><index>[<expr><name>MAXDESC</name></expr>]</index></name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1 &lt;&lt; (A))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_COMPACT_BLANK</name></cpp:macro> <cpp:value>BIT(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_COMPACT_OPTIONAL_BLANK</name></cpp:macro> <cpp:value>BIT(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_IGNORE_LOWERCASE</name></cpp:macro> <cpp:value>BIT(2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_IGNORE_UPPERCASE</name></cpp:macro> <cpp:value>BIT(3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGEX_OFFSET_START</name></cpp:macro> <cpp:value>BIT(4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_COMPACT_BLANK</name></cpp:macro> <cpp:value>'B'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_COMPACT_OPTIONAL_BLANK</name></cpp:macro> <cpp:value>'b'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_IGNORE_LOWERCASE</name></cpp:macro> <cpp:value>'c'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_IGNORE_UPPERCASE</name></cpp:macro> <cpp:value>'C'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_REGEX_OFFSET_START</name></cpp:macro> <cpp:value>'s'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_IGNORE_CASE</name></cpp:macro> <cpp:value>(STRING_IGNORE_LOWERCASE|STRING_IGNORE_UPPERCASE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_DEFAULT_RANGE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<struct>struct <name>mlist</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>r_magic</name></name> <modifier>*</modifier></type><name>magic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>nmagic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mapped</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_NONE</name></cpp:macro> <cpp:value>0x000000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_DEBUG</name></cpp:macro> <cpp:value>0x000001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_SYMLINK</name></cpp:macro> <cpp:value>0x000002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_COMPRESS</name></cpp:macro> <cpp:value>0x000004</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_DEVICES</name></cpp:macro> <cpp:value>0x000008</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_MIME_TYPE</name></cpp:macro> <cpp:value>0x000010</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_CONTINUE</name></cpp:macro> <cpp:value>0x000020</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_CHECK</name></cpp:macro> <cpp:value>0x000040</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_PRESERVE_ATIME</name></cpp:macro> <cpp:value>0x000080</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_RAW</name></cpp:macro> <cpp:value>0x000100</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_ERROR</name></cpp:macro> <cpp:value>0x000200</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_MIME_ENCODING</name></cpp:macro> <cpp:value>0x000400</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_MIME</name></cpp:macro> <cpp:value>(R_MAGIC_MIME_TYPE|R_MAGIC_MIME_ENCODING)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_NO_CHECK_COMPRESS</name></cpp:macro> <cpp:value>0x001000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_NO_CHECK_TAR</name></cpp:macro> <cpp:value>0x002000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_NO_CHECK_SOFT</name></cpp:macro> <cpp:value>0x004000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_NO_CHECK_APPTYPE</name></cpp:macro> <cpp:value>0x008000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_NO_CHECK_ELF</name></cpp:macro> <cpp:value>0x010000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_NO_CHECK_ASCII</name></cpp:macro> <cpp:value>0x020000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAGIC_NO_CHECK_TOKENS</name></cpp:macro> <cpp:value>0x100000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC_NO_CHECK_FORTRAN</name></cpp:macro> <cpp:value>0x000000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC_NO_CHECK_TROFF</name></cpp:macro> <cpp:value>0x000000</cpp:value></cpp:define> 

<struct>struct <name>r_magic_set</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>mlist</name></decl>;</decl_stmt>

<struct>struct <name>cont</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<struct>struct <name>level_info</name> <block>{

<decl_stmt><decl><type><name>st32</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_cond</name></decl>;</decl_stmt> 

}</block> <decl><modifier>*</modifier><name>li</name></decl>;</struct>

}</block> <decl><name>c</name></decl>;</struct>

<struct>struct <name>out</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pbuf</name></decl>;</decl_stmt> 

}</block> <decl><name>o</name></decl>;</struct>

<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>haderr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>line</name></decl>;</decl_stmt> 

<struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>s_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>rm_len</name></decl>;</decl_stmt> 

}</block> <decl><name>search</name></decl>;</struct>

<decl_stmt><decl><type><name><name>union</name> <name>VALUETYPE</name></name></type> <name>ms_value</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_LIB_MAGIC</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMagic</name></cpp:macro> <cpp:value>struct magic_set</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name><name>struct</name> <name>r_magic_set</name></name></type> <name>RMagic</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>R_API</name> <name>RMagic</name><modifier>*</modifier></type> <name>r_magic_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_magic_free</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_magic_file</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_magic_descriptor</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_magic_buffer</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_magic_error</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_magic_setflags</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_magic_load</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_magic_load_buffer</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_magic_compile</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_magic_check</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_magic_errno</name><parameter_list>(<parameter><decl><type><name>RMagic</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
