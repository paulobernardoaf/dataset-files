<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\include\r_th.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_types.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PTHREAD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_PTHREAD</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PTHREAD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_TH_TID</name></cpp:macro> <cpp:value>HANDLE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_TH_LOCK_T</name></cpp:macro> <cpp:value>CRITICAL_SECTION</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_TH_COND_T</name></cpp:macro> <cpp:value>CONDITION_VARIABLE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_TH_SEM_T</name></cpp:macro> <cpp:value>HANDLE</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_PTHREAD</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__GNU</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;semaphore.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sched.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name> <operator>&amp;&amp;</operator> <name>__GLIBC_MINOR</name> <operator>&lt;</operator> <literal type="number">12</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PTHREAD_NP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PTHREAD_NP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__FreeBSD__</name> <operator>||</operator> <name>__OpenBSD__</name> <operator>||</operator> <name>__DragonFly__</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__FreeBSD__</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cpuset.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread_np.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_TH_TID</name></cpp:macro> <cpp:value>pthread_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_TH_LOCK_T</name></cpp:macro> <cpp:value>pthread_mutex_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_TH_COND_T</name></cpp:macro> <cpp:value>pthread_cond_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_TH_SEM_T</name></cpp:macro> <cpp:value>sem_t *</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> Threading library only supported for pthread and w32</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{ <decl><name>R_TH_FREED</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><name>R_TH_STOP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>R_TH_REPEAT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block></enum></type> <name>RThreadFunctionRet</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_TH_FUNCTION</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RThreadFunctionRet (*x)(struct r_th_t *)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>r_th_sem_t</name> <block>{

<decl_stmt><decl><type><name>R_TH_SEM_T</name></type> <name>sem</name></decl>;</decl_stmt>

}</block></struct></type> <name>RThreadSemaphore</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_th_lock_t</name> <block>{

<decl_stmt><decl><type><name>R_TH_LOCK_T</name></type> <name>lock</name></decl>;</decl_stmt>

}</block></struct></type> <name>RThreadLock</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_th_cond_t</name> <block>{

<decl_stmt><decl><type><name>R_TH_COND_T</name></type> <name>cond</name></decl>;</decl_stmt>

}</block></struct></type> <name>RThreadCond</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_th_t</name> <block>{

<decl_stmt><decl><type><name>R_TH_TID</name></type> <name>tid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RThreadLock</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>R_TH_FUNCTION</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>running</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>breaked</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>delay</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ready</name></decl>;</decl_stmt> 

}</block></struct></type> <name>RThread</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_th_pool_t</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RThread</name> <modifier>*</modifier><modifier>*</modifier></type><name>threads</name></decl>;</decl_stmt>

}</block></struct></type> <name>RThreadPool</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RThread</name> <modifier>*</modifier></type><name>r_th_new</name><argument_list>(<argument><expr><call><name>R_TH_FUNCTION</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>user</name></expr></argument>, <argument><expr><name>int</name> <name>delay</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_th_start</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_th_wait</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_th_wait_async</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_th_break</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_th_free</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_th_kill_free</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_th_kill</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>R_TH_TID</name></type> <name>r_th_self</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_th_setname</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_th_getname</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_th_setaffinity</name><parameter_list>(<parameter><decl><type><name>RThread</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cpuid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RThreadSemaphore</name> <modifier>*</modifier></type><name>r_th_sem_new</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>initial</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_th_sem_free</name><parameter_list>(<parameter><decl><type><name>RThreadSemaphore</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_th_sem_post</name><parameter_list>(<parameter><decl><type><name>RThreadSemaphore</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_th_sem_wait</name><parameter_list>(<parameter><decl><type><name>RThreadSemaphore</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RThreadLock</name> <modifier>*</modifier></type><name>r_th_lock_new</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>recursive</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_th_lock_wait</name><parameter_list>(<parameter><decl><type><name>RThreadLock</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_th_lock_tryenter</name><parameter_list>(<parameter><decl><type><name>RThreadLock</name> <modifier>*</modifier></type><name>thl</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_th_lock_enter</name><parameter_list>(<parameter><decl><type><name>RThreadLock</name> <modifier>*</modifier></type><name>thl</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_th_lock_leave</name><parameter_list>(<parameter><decl><type><name>RThreadLock</name> <modifier>*</modifier></type><name>thl</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_th_lock_free</name><parameter_list>(<parameter><decl><type><name>RThreadLock</name> <modifier>*</modifier></type><name>thl</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RThreadCond</name> <modifier>*</modifier></type><name>r_th_cond_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_th_cond_signal</name><parameter_list>(<parameter><decl><type><name>RThreadCond</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_th_cond_signal_all</name><parameter_list>(<parameter><decl><type><name>RThreadCond</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_th_cond_wait</name><parameter_list>(<parameter><decl><type><name>RThreadCond</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>RThreadLock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_th_cond_free</name><parameter_list>(<parameter><decl><type><name>RThreadCond</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
