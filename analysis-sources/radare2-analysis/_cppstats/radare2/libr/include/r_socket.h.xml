<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\include\r_socket.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WINDOWS__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_bind.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_list.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>R_LIB_VERSION_HEADER</name> <argument_list>(<argument><expr><name>r_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LIB_SSL</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSG_DONTWAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_DONTWAIT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SD_BOTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SD_RECEIVE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SD_SEND</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SD_BOTH</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_INVALID_SOCKET</name></cpp:macro> <cpp:value>INVALID_SOCKET</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_INVALID_SOCKET</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>child</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>pipe</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>RCoreBind</name></type> <name>coreb</name></decl>;</decl_stmt>

}</block></struct></type> <name>R2Pipe</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_socket_t</name> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>fd</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>bool</name></type> <name>is_ssl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>proto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>local</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sa</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LIB_SSL</name></expr></cpp:if>

<decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>sfd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>bio</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>RSocket</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_socket_http_options</name> <block>{

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>authtokens</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>accept_timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>httpauth</name></decl>;</decl_stmt>

}</block></struct></type> <name>RSocketHTTPOptions</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SOCKET_PROTO_TCP</name></cpp:macro> <cpp:value>IPPROTO_TCP</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SOCKET_PROTO_UDP</name></cpp:macro> <cpp:value>IPPROTO_UDP</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_SOCKET_PROTO_UNIX</name></cpp:macro> <cpp:value>0x1337</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>R_API</name> <name>RSocket</name> <modifier>*</modifier></type><name>r_socket_new_from_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RSocket</name> <modifier>*</modifier></type><name>r_socket_new</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>is_ssl</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_socket_spawn</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_socket_connect</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>proto</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_connect_serial</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>speed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parity</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_socket_connect_tcp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_socket_connect (a, b, c, R_SOCKET_PROTO_TCP, d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_socket_connect_udp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_socket_connect (a, b, c, R_SOCKET_PROTO_UDP, d)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_socket_connect_unix</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_socket_connect (a, b, b, R_SOCKET_PROTO_UNIX, 0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_socket_connect_unix</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(false)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_socket_listen</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>certfile</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_port_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_close_fd</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_close</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_free</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RSocket</name> <modifier>*</modifier></type><name>r_socket_accept</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RSocket</name> <modifier>*</modifier></type><name>r_socket_accept_timeout</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_block_time</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>usec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_flush</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_ready</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>secs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>usecs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_socket_to_string</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_write</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_puts</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_socket_printf</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_read</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>read</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_read_block</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_gets</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_socket_slurp</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_socket_is_connected</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>r_socket_proc_t</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name><name>fd0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>fd1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>

}</block></struct></type> <name>RSocketProc</name>;</typedef>

<function_decl><type><name>R_API</name> <name>RSocketProc</name> <modifier>*</modifier></type><name>r_socket_proc_open</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_proc_close</name><parameter_list>(<parameter><decl><type><name>RSocketProc</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_proc_read</name><parameter_list>(<parameter><decl><type><name>RSocketProc</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_proc_gets</name><parameter_list>(<parameter><decl><type><name>RSocketProc</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_proc_write</name><parameter_list>(<parameter><decl><type><name>RSocketProc</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_socket_proc_printf</name><parameter_list>(<parameter><decl><type><name>RSocketProc</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_proc_ready</name><parameter_list>(<parameter><decl><type><name>RSocketProc</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>secs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>usecs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_socket_http_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_socket_http_post</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_socket_http_server_set_breaked</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>r_socket_http_request</name> <block>{

<decl_stmt><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>agent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>referer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>auth</name></decl>;</decl_stmt>

}</block></struct></type> <name>RSocketHTTPRequest</name>;</typedef>

<function_decl><type><name>R_API</name> <name>RSocketHTTPRequest</name> <modifier>*</modifier></type><name>r_socket_http_accept</name><parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RSocketHTTPOptions</name> <modifier>*</modifier></type><name>so</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_socket_http_response</name><parameter_list>(<parameter><decl><type><name>RSocketHTTPRequest</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>headers</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_socket_http_close</name><parameter_list>(<parameter><decl><type><name>RSocketHTTPRequest</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_socket_http_handle_upload</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rap_server_open</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rap_server_seek</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rap_server_read</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rap_server_write</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>rap_server_cmd</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rap_server_close</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<enum>enum <block>{

<decl><name>RAP_RMT_OPEN</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>RAP_RMT_READ</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>RAP_RMT_WRITE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>RAP_RMT_SEEK</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>RAP_RMT_CLOSE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>RAP_RMT_CMD</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>RAP_RMT_REPLY</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>,

<decl><name>RAP_RMT_MAX</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>r_socket_rap_server_t</name> <block>{

<decl_stmt><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><name>RAP_RMT_MAX</name> <operator>+</operator> <literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>rap_server_open</name></type> <name>open</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rap_server_seek</name></type> <name>seek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rap_server_read</name></type> <name>read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rap_server_write</name></type> <name>write</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rap_server_cmd</name></type> <name>system</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rap_server_cmd</name></type> <name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rap_server_close</name></type> <name>close</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt> 

}</block></struct></type> <name>RSocketRapServer</name>;</typedef>

<function_decl><type><name>R_API</name> <name>RSocketRapServer</name> <modifier>*</modifier></type><name>r_socket_rap_server_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>is_ssl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RSocketRapServer</name> <modifier>*</modifier></type><name>r_socket_rap_server_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_socket_rap_server_free</name><parameter_list>(<parameter><decl><type><name>RSocketRapServer</name> <modifier>*</modifier></type><name>rap_s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_socket_rap_server_listen</name><parameter_list>(<parameter><decl><type><name>RSocketRapServer</name> <modifier>*</modifier></type><name>rap_s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>certfile</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>RSocket</name> <modifier>*</modifier></type><name>r_socket_rap_server_accept</name><parameter_list>(<parameter><decl><type><name>RSocketRapServer</name> <modifier>*</modifier></type><name>rap_s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_socket_rap_server_continue</name><parameter_list>(<parameter><decl><type><name>RSocketRapServer</name> <modifier>*</modifier></type><name>rap_s</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_RUN_PROFILE_NARGS</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>r_run_profile_t</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>_args</name><index>[<expr><name>R_RUN_PROFILE_NARGS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_argc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_system</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_program</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_runlib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_runlib_fcn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_stdio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_stdin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_stdout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_stderr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_chgdir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_chroot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_libpath</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_preload</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_pidfile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_r2preload</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_docore</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_dofork</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_dodebug</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_aslr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_maxstack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_maxproc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_maxfd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_r2sleep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_execve</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_setuid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_seteuid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_setgid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_setegid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_connect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_listen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_pty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_timeout_sig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_nice</name></decl>;</decl_stmt>

}</block></struct></type> <name>RRunProfile</name>;</typedef>

<function_decl><type><name>R_API</name> <name>RRunProfile</name> <modifier>*</modifier></type><name>r_run_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_run_parse</name><parameter_list>(<parameter><decl><type><name>RRunProfile</name> <modifier>*</modifier></type><name>pf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_run_free</name><parameter_list>(<parameter><decl><type><name>RRunProfile</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>bool</name></type> <name>r_run_parseline</name><parameter_list>(<parameter><decl><type><name>RRunProfile</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_run_help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_run_config_env</name><parameter_list>(<parameter><decl><type><name>RRunProfile</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_run_start</name><parameter_list>(<parameter><decl><type><name>RRunProfile</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>void</name></type> <name>r_run_reset</name><parameter_list>(<parameter><decl><type><name>RRunProfile</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r_run_parsefile</name><parameter_list>(<parameter><decl><type><name>RRunProfile</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>R2Pipe</name> <modifier>*</modifier></type><name>rap_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>R2Pipe</name> <modifier>*</modifier></type><name>rap_open_corebind</name><parameter_list>(<parameter><decl><type><name>RCoreBind</name> <modifier>*</modifier></type><name>coreb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>rap_close</name><parameter_list>(<parameter><decl><type><name>R2Pipe</name> <modifier>*</modifier></type><name>rap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>rap_cmd</name><parameter_list>(<parameter><decl><type><name>R2Pipe</name> <modifier>*</modifier></type><name>rap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>rap_cmdf</name><parameter_list>(<parameter><decl><type><name>R2Pipe</name> <modifier>*</modifier></type><name>rap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>rap_write</name><parameter_list>(<parameter><decl><type><name>R2Pipe</name> <modifier>*</modifier></type><name>rap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>rap_read</name><parameter_list>(<parameter><decl><type><name>R2Pipe</name> <modifier>*</modifier></type><name>rap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r2pipe_write</name><parameter_list>(<parameter><decl><type><name>R2Pipe</name> <modifier>*</modifier></type><name>r2pipe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r2pipe_read</name><parameter_list>(<parameter><decl><type><name>R2Pipe</name> <modifier>*</modifier></type><name>r2pipe</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>int</name></type> <name>r2pipe_close</name><parameter_list>(<parameter><decl><type><name>R2Pipe</name> <modifier>*</modifier></type><name>r2pipe</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>R2Pipe</name> <modifier>*</modifier></type><name>r2pipe_open_corebind</name><parameter_list>(<parameter><decl><type><name>RCoreBind</name> <modifier>*</modifier></type><name>coreb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>R2Pipe</name> <modifier>*</modifier></type><name>r2pipe_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>R2Pipe</name> <modifier>*</modifier></type><name>r2pipe_open_dl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r2pipe_cmd</name><parameter_list>(<parameter><decl><type><name>R2Pipe</name> <modifier>*</modifier></type><name>r2pipe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r2pipe_cmdf</name><parameter_list>(<parameter><decl><type><name>R2Pipe</name> <modifier>*</modifier></type><name>r2pipe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
