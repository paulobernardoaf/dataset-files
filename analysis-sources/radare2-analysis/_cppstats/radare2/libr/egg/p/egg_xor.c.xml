<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\egg\p\egg_xor.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_egg.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_XOR_KEY</name></cpp:macro> <cpp:value>"0xFF"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>RBuffer</name> <modifier>*</modifier></type><name>build</name> <parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>aux</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>nkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_key</name> <init>= <expr><name>DEFAULT_XOR_KEY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>r_egg_option_get</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>key</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>default_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"XOR key not provided. Using (%s) as the key\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nkey</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nkey</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid key (%s)\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nkey</name> <operator>!=</operator> <operator>(</operator><name>nkey</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nkey</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"xor key wrapped to (%d)\n"</literal></expr></argument>, <argument><expr><name>nkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">240</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"shellcode is too long :(\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <name><name>egg</name><operator>-&gt;</operator><name>bin</name></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No shellcode found!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_buf_read8_at</name> <argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>^</operator> <name>nkey</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"This xor key generates null bytes. Try again.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_append_buf</name> <argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>arch</name></name> <operator>==</operator> <name>R_SYS_ARCH_X86</name></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STUBLEN</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>stub</name><index>[<expr><name>STUBLEN</name></expr>]</index></name> <init>=

<expr><literal type="string">"\xe8\xff\xff\xff\xff"</literal> 

<literal type="string">"\xc1"</literal> 

<literal type="string">"\x5e"</literal> 

<literal type="string">"\x48\x83\xc6\x0d"</literal> 

<literal type="string">"\x30\x1e"</literal> 

<literal type="string">"\x48\xff\xc6"</literal> 

<literal type="string">"\xe2\xf9"</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>aux</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x6a</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>aux</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aux</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x59</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>aux</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x6a</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>aux</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>nkey</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aux</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x5b</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_buf_set_bytes</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_append_bytes</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>stub</name></expr></argument>, <argument><expr><name>STUBLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>v</name> <init>= <expr><call><name>r_buf_read8_at</name> <argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>^</operator> <name>nkey</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_buf_append_buf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>REggPlugin</name></type> <name>r_egg_plugin_xor</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"xor"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_EGG_PLUGIN_ENCODER</name></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"xor encoder for shellcode"</literal></expr>,

<expr><operator>.</operator><name>build</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>build</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
R_API RLibStruct radare_plugin = {

.type = R_LIB_TYPE_EGG,

.data = &amp;r_egg_plugin_xor,

.version = R2_VERSION

};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
