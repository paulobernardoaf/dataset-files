<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\egg\egg_lang.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_egg.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTX</name></cpp:macro> <cpp:value>egg-&gt;context</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_var</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&amp;'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_space</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>skipspaces</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<while>while <condition>(<expr><call><name>is_space</name> <argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_op</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<case>case <expr><literal type="char">'/'</literal></expr>:</case>

<return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>

<case>case <expr><literal type="char">'|'</literal></expr>:</case>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>

<return>return <expr><literal type="number">3</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_op</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list><block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>pos</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>is_op</name> <argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_var</name> <argument_list>(<argument><expr><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><operator>*</operator><name>pos</name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><operator>(</operator><call><name>is_op</name> <argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>trim</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><operator>*</operator><name>o</name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_space</name> <argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rcc_pushstr</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rcc_context</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <block>{

<decl><name>NORMAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ALIAS</name></decl>,

<decl><name>INCLUDE</name></decl>,

<decl><name>DATA</name></decl>,

<decl><name>INLINE</name></decl>,

<decl><name>NAKED</name></decl>,

<decl><name>SYSCALL</name></decl>,

<decl><name>SYSCALLBODY</name></decl>,

<decl><name>GOTO</name></decl>,

<decl><name>LAST</name></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>find_include</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pfx</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>env</name> <init>= <expr><call><name>r_sys_getenv</name> <argument_list>(<argument><expr><name>R_EGG_INCDIR_ENV</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prefix</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>prefix</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>r_sys_getenv</name> <argument_list>(<argument><expr><name>prefix</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pfx</name> <operator>=</operator> <ternary><condition><expr><name>out</name></expr>?</condition><then> <expr><name>out</name></expr></then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pfx</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pfx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>env</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>env</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filepath</name> <init>= <expr><call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%s/%s/%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pfx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>filepath</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pfx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_egg_lang_init</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>varsize</name></name> <operator>=</operator> <literal type="char">'l'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>docall</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>file</name></name> <operator>=</operator> <literal type="string">"stdin"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>oc</name></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_egg_lang_free</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nsyscalls</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>syscalls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>syscalls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ctxpush</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ctxpush</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_egg_lang_include_path</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><call><name>r_sys_getenv</name> <argument_list>(<argument><expr><name>R_EGG_INCDIR_ENV</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>env</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>env</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_egg_lang_include_init</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><name>R_EGG_INCDIR_ENV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <name>env</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><name>R_EGG_INCDIR_ENV</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_egg_lang_include_init</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">".:%s/%s"</literal></expr></argument>, <argument><expr><call><name>r_sys_prefix</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>R_EGG_INCDIR_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><name>R_EGG_INCDIR_ENV</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rcc_set_callname</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nargs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name> <operator>=</operator> <call><name>trim</name> <argument_list>(<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><call><name>skipspaces</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>pushargs</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"goto"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"break"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rcc_reset_callname</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nargs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNTAX_ATT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SYNTAX_ATT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAME_FMT</name></cpp:macro> <cpp:value>".LC%d_%d_frame%d"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAME_END_FMT</name></cpp:macro> <cpp:value>".LC%d_%d_end_frame%d"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAME_FMT</name></cpp:macro> <cpp:value>"__%d_%d_frame%d"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAME_END_FMT</name></cpp:macro> <cpp:value>"__%d_%d_end_frame%d"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static char *get_frame_label(int type) {

static char label[128];

int nf = egg-&gt;lang.nfunctions;

int nb = egg-&gt;lang.nbrackets;

int ct = context;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

if (type == 1) {

nb--;

} else if (type == 2) {

ct--;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

snprintf (label, sizeof (label), FRAME_FMT, nf, nb, ct);

return label;

}

static char *get_end_frame_label(REgg *egg) {

static char label[128];

snprintf (label, sizeof (label) - 1, FRAME_END_FMT,

egg-&gt;lang.nfunctions, egg-&gt;lang.nbrackets, context - 1);

return label;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>find_alias</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_space</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\x00'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nalias</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rcc_internal_mathop</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>type</name> <init>= <expr><literal type="char">' '</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><name>oldp</name> <operator>=</operator> <name>p</name> <operator>=</operator> <name>q</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_op</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\x00'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>REggEmit</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>egg</name><operator>-&gt;</operator><name>remit</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>is_space</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>is_var</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_egg_mkvar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>varxs</name></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>load</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>varsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>oldp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name> <operator>=</operator> <name>p</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name><name>e</name><operator>-&gt;</operator><name>regs</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>varxs</name></name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>load_ptr</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>oldp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name> <operator>=</operator> <name>p</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name><name>e</name><operator>-&gt;</operator><name>regs</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'$'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>mathop</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>varsize</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>oldp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>oldp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rcc_mathop</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>REggEmit</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>egg</name><operator>-&gt;</operator><name>remit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>op_ret</name> <init>= <expr><name>level</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>op</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_pos</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>pos</name> <operator>&amp;&amp;</operator> <call><name>is_space</name> <argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>next_pos</name> <operator>=</operator> <operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>is_op</name> <argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>is_var</name> <argument_list>(<argument><expr><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>?</condition><then> <expr><operator>*</operator><operator>*</operator><name>pos</name></expr></then><else>: <expr><literal type="char">'='</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>is_op</name> <argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>is_var</name> <argument_list>(<argument><expr><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>?</condition><then> <expr><operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></then><else>: <expr><operator>*</operator><name>pos</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>op_ret</name> <operator>=</operator> <call><name>get_op</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>next_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op_ret</name> <operator>&gt;</operator> <name>level</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rcc_mathop</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>op_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rcc_internal_mathop</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>-&gt;</operator><name>regs</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>op_ret</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><call><name><name>e</name><operator>-&gt;</operator><name>regs</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>level</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_pos</name> <operator>=</operator> <operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>rcc_internal_mathop</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><operator>*</operator><name>pos</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><call><name><name>e</name><operator>-&gt;</operator><name>regs</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>level</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>next_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_pos</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>*</operator><operator>*</operator><name>pos</name> <operator>&amp;&amp;</operator> <name>op_ret</name> <operator>&gt;=</operator> <name>level</name></expr>)</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rcc_pusharg</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>REggEmit</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>egg</name><operator>-&gt;</operator><name>remit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_egg_mkvar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ctxpush</name><index>[<expr><name>CTX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ctxpush</name><index>[<expr><name>CTX</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nargs</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>pushargs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>push_arg</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>varxs</name></name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nargs</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rcc_element</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>egg</name> <operator>||</operator> <operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>REggEmit</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>egg</name><operator>-&gt;</operator><name>remit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inside</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>num2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>CTX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>slurp</name></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>NORMAL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">".fix0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rcc_pushstr</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr></argument>, <argument><expr><literal type="string">"while"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr></argument>, <argument><expr><literal type="string">"if"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>conditionstr</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nargs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>GOTO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>p</name><operator>--</operator> <operator>!=</operator> <name>str</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inside</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>inside</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>skipspaces</name> <argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rcc_pusharg</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>rcc_pusharg</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALIAS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"does not set name or content for alias\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>equ</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nalias</name></name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"global-buffer-overflow in aliases\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nalias</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nalias</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nalias</name></name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nalias</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></then><else>: <expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nalias</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SYSCALL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"does not set name or arg for syscall\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nsyscalls</name></name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"global-buffer-overflow in syscalls\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nsyscalls</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nsyscalls</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>syscalls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>syscalls</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>syscalls</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>syscalls</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>syscalls</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nsyscalls</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>GOTO</name></expr>:</case>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>jmp</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INCLUDE</name></expr>:</case>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>find_alias</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><call><name>skipspaces</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\x00'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"loss back quote in include directory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>includedir</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"wrong include syntax\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>includedir</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>includedir</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num2</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>num2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>num2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>stackframe</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>stackfixed</name></name> <operator>=</operator> <name>num2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>!=</operator> <name>NAKED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>frame</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>stackframe</name></name> <operator>+</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>stackfixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rcc_pushstr</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dotrim</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>REggEmit</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>egg</name><operator>-&gt;</operator><name>remit</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>comment</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"encode %s string (%s) (%s)"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>filter</name></expr>?</condition><then> <expr><literal type="string">"filtered"</literal></expr></then><else>: <expr><literal type="string">"unfiltered"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>filter</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dotrim</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>str</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dotrim</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dotrim</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\x1b'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dotrim</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>r_hex_pair2bin</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s:%d Error string format\n"</literal></expr></argument>,

<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dotrim</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>dotrim</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>dotrim</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>dotrim</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>-</operator> <name>len</name> <operator>%</operator> <name><name>e</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>set_string</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_egg_mkvar</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>qi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oldstr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name><name>foo</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>delta</name> <operator>+=</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>stackfixed</name></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_str</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>str</name> <operator>=</operator> <name>oldstr</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>skipspaces</name> <argument_list>(<argument><expr><name>_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>qi</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>q</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>varsize</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>qi</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="char">'b'</literal></expr></then><else>: <expr><literal type="char">'l'</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>varsize</name></name> <operator>=</operator> <literal type="char">'l'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>varxs</name></name> <operator>=</operator> <operator>*</operator><name>str</name></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>varxs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>REggEmit</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>egg</name><operator>-&gt;</operator><name>remit</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ret"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>retvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fix"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>delta</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>get_var</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>idx</name> <operator>-</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>stackfixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"var"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>delta</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>get_var</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"rarg"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>get_ar</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>get_ar</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"arg"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>stackframe</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>get_var</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>delta</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>get_var</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nsyscalls</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>syscalls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>oldstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>syscalls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unknown arg for syscall '%s'\n"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"NO CALLNAME '%s'\n"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"reg"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>attsyntax</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%%%s"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>-&gt;</operator><name>regs</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><call><name>atoi</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>-&gt;</operator><name>regs</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><call><name>atoi</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Something is really wrong\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>oldstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mustfilter</name> <init>= <expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'"'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>stackfixed</name></name> <operator>||</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>stackfixed</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"WARNING: No room in the static stackframe! (%d must be %d)\n"</literal></expr></argument>,

<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>stackfixed</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>foo</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>foo</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">".fix%d"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nargs</name></name> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>skipspaces</name> <argument_list>(<argument><expr><name>foo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rcc_pushstr</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>mustfilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_egg_mkvar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>foo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>oldstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rcc_fun</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>REggEmit</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>egg</name><operator>-&gt;</operator><name>remit</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>skipspaces</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CTX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>skipspaces</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>skipspaces</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rcc_set_callname</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><call><name>skipspaces</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>skipspaces</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rcc_set_callname</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><call><name>skipspaces</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>egg</name><operator>-&gt;</operator><name>remit</name><operator>-&gt;</operator><name>comment</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"rcc_fun %d (%s)"</literal></expr></argument>,

<argument><expr><name>CTX</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"env"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>setenviron</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>setenviron</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>skipspaces</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>slurp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"fastcall"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"syscall"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>SYSCALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>skipspaces</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>INLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>syscallbody</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>syscallbody</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name> <operator>=</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>syscallbody</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ndstval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>syscallbody</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"include"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>INCLUDE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>includefile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>includefile</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>skipspaces</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"alias"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>ALIAS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>skipspaces</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ptr2</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_space</name> <argument_list>(<argument><expr><operator>*</operator><name>ptr2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr2</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>ptr2</name> <operator>=</operator> <literal type="char">'\x00'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ndstval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>skipspaces</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"naked"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>NAKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"%s:\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"inline"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>INLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>skipspaces</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ndstval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"\n.%s %s\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"%s:\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>CTX</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"LABEL %d\n"</literal></expr></argument>, <argument><expr><name>CTX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"\n%s:\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"goto"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>GOTO</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>call</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static void shownested() {

int i;

eprintf ("[[[NESTED %d]]] ", context);

for (i = 0; egg-&gt;lang.nested[i]; i++) {

eprintf ("%s ", egg-&gt;lang.nested[i]);

}

eprintf ("\n");

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_nested</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>CTX</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nested</name><index>[<expr><name>CTX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nested</name><index>[<expr><name>CTX</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nested</name><index>[<expr><name>CTX</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rcc_context</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>REggEmit</name> <modifier>*</modifier></type><name>emit</name> <init>= <expr><name><name>egg</name><operator>-&gt;</operator><name>remit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>CTX</name> <operator>&gt;</operator> <literal type="number">31</literal> <operator>||</operator> <name>CTX</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nestedi</name><index>[<expr><name>CTX</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nested_callname</name><index>[<expr><name>CTX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nested_callname</name><index>[<expr><name>CTX</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name> <operator>&amp;&amp;</operator> <name>CTX</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>CTX</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>lastctxdelta</name></name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CTX</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>!=</operator> <name>NAKED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>emit</name><operator>-&gt;</operator><name>frame_end</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>stackframe</name></name> <operator>+</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>stackfixed</name></name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nbrackets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>NORMAL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>stackframe</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>elm</name> <init>= <expr><call><name>skipspaces</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (delta &lt; 0 &amp;&amp; context &gt; 0) {

eprintf ("close bracket foo!!!\n");

shownested ();

cn = strdup (egg-&gt;lang.nested[context - 1]);

eprintf ("STATEMENT cn=(%s) idx=%d (%s)\n", cn, context - 1, egg-&gt;lang.nested[context - 1]);

eprintf ("CNTXXXPUSH (%s)\n", egg-&gt;lang.ctxpush[context - 1]);

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (!strcmp (cn, "while")) {

emit-&gt;while_end (egg, get_frame_label (context - 1));

return;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>g</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>emit</name><operator>-&gt;</operator><name>comment</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"cond frame %s (%s)"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr></argument>, <argument><expr><name>elm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>conditionstr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>conditionstr</name></name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>conditionstr</name></name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>conditionstr</name></name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>conditionstr</name></name></expr></argument>, <argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>g</name> <operator>=</operator> <name>e</name> <operator>=</operator> <name>n</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr></argument>, <argument><expr><literal type="string">"while"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>lab</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>lab</name></expr></argument>, <argument><expr><literal type="string">"__begin_%d_%d_%d"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nfunctions</name></name></expr></argument>,

<argument><expr><name>CTX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nestedi</name><index>[<expr><name>CTX</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>emit</name><operator>-&gt;</operator><name>get_while_end</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ctxpush</name><index>[<expr><name>CTX</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_nested</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rcc_set_callname</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"if"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr></argument>, <argument><expr><literal type="string">"if"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"__end_%d_%d_%d"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nfunctions</name></name></expr></argument>, <argument><expr><name>CTX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nestedi</name><index>[<expr><name>CTX</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>emit</name><operator>-&gt;</operator><name>branch</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>varsize</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CTX</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rcc_reset_callname</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>conditionstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

</block_content>}</block></if></if_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parsedatachar</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>rcc_context</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><operator>(</operator><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>inlinectr</name></name><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ndstval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>inlinectr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>stackframe</name></name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ndstval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ndstval</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>CTX</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>inlinectr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rcc_context</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>slurp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name> <operator>&amp;&amp;</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ndstval</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>egg</name><operator>-&gt;</operator><name>remit</name><operator>-&gt;</operator><name>comment</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"data (%s)(%s)size=(%d)\n"</literal></expr></argument>,

<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>stackframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">".data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>str</name> <operator>=</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name></expr>;</init> <condition><expr><call><name>is_space</name> <argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>str</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>j</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>stackframe</name></name><operator>)</operator></expr>?</condition><then> <expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>stackframe</name></name></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"%s:\n"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">".ascii %s%s\n"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>j</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"\"\\x00\""</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">".long %s\n"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">".text\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ndstval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>CTX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ndstval</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parseinlinechar</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>rcc_context</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>inlinectr</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>inlinectr</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>inlinectr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>CTX</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rcc_context</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>slurp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>inlinectr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name> <operator>&amp;&amp;</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name> <operator>==</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>syscallbody</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name> <operator>&amp;&amp;</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ndstval</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>inlines</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ninlines</name></name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>skipspaces</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>inlines</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ninlines</name></name></expr>]</index></name><operator>.</operator><name>body</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>skipspaces</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ninlines</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Parse error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ndstval</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstval</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ndstval</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rcc_next</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ocn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>REggEmit</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>egg</name><operator>-&gt;</operator><name>remit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"/><name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>setenviron</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>setenviron</name></name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>setenviron</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>includefile</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>find_include</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>includedir</name></name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>includefile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot find include file '%s'\n"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>includefile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>includedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rcc_reset_callname</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name> <operator>=</operator> <call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>oline</name> <init>= <expr><operator>++</operator><operator>(</operator><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>line</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_egg_lang_parsechar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name>oline</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot find '%s'\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>docall</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr></argument>, <argument><expr><literal type="string">"goto"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nargs</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid number of arguments for goto()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>jmp</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ctxpush</name><index>[<expr><name>CTX</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rcc_reset_callname</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr></argument>, <argument><expr><literal type="string">"break"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>trap</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rcc_reset_callname</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ocn</name> <operator>=</operator> <call><name>skipspaces</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>callname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ocn</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_egg_mkvar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ocn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot mkvar\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ocn</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>call</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"while"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>var</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>lastctxdelta</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ERROR: Unsupported while syntax\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"__begin_%d_%d_%d\n"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nfunctions</name></name></expr></argument>, <argument><expr><name>CTX</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nestedi</name><index>[<expr><name>CTX</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>while_end</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

eprintf ("------------------------------------------ lastctx: %d\n", egg-&gt;lang.lastctxdelta);

rcc_printf (" pop %%eax\n");

rcc_printf (" cmp $0, %%eax\n"); 

if (egg-&gt;lang.lastctxdelta &lt; 0) {

rcc_printf (" jnz %s\n", get_frame_label (1));

} else {

rcc_printf (" jnz %s\n", get_frame_label (0));

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nargs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nsyscalls</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>syscalls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>syscallbody</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>comment</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"set syscall args"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>syscall_args</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>docall</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>comment</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"syscall"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_egg_lang_parsechar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_egg_lang_parsechar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name> <init>= <expr><call><name><name>e</name><operator>-&gt;</operator><name>syscall</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nargs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><operator>*</operator><name>q</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_egg_lang_parsechar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><operator>*</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot get @syscall payload\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>docall</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>docall</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ninlines</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>inlines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>inlines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>body</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>docall</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>comment</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"inline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_egg_lang_parsechar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_egg_lang_parsechar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>docall</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>docall</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>comment</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"call in egg-&gt;lang.mode %d"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>call</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nargs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>restore_stack</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nargs</name></name> <operator>*</operator> <name><name>e</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_egg_mkvar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot resolve variable '%s'\n"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>get_result</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>dstvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rcc_reset_callname</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>vs</name> <init>= <expr><literal type="char">'l'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eq</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>skipspaces</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>eq</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eq</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>skipspaces</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vs</name> <operator>=</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>varsize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <operator>*</operator><name>eq</name> <operator>=</operator> <literal type="char">'\x00'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>mathop</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><name>vs</name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>-&gt;</operator><name>regs</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mathline</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>skipspaces</name> <argument_list>(<argument><expr><name>eq</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mathline</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rcc_mathop</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mathline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_egg_mkvar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_var</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>r_egg_mkvar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>varxs</name></name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>varxs</name></name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"not support for *ptr in egg-&gt;lang.dstvar\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'$'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>mathop</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><name>vs</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>-&gt;</operator><name>regs</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"break"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>trap</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rcc_reset_callname</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>mathop</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><name>vs</name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_egg_lang_parsechar</name><parameter_list>(<parameter><decl><type><name>REgg</name> <modifier>*</modifier></type><name>egg</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>REggEmit</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>egg</name><operator>-&gt;</operator><name>remit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"/><name><name>str</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>line</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>skipline</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>oc</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>skipline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>DATA</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>parsedatachar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>INLINE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>parseinlinechar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>quoteline</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>quoteline</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>quotelinevar</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'`'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <call><name>r_egg_mkvar</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>tmp_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>quotelinevar</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'`'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>quotelinevar</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>oc</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>quoteline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>commentmode</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>oc</name></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>commentmode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>oc</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>oc</name></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>commentmode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>slurp</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>slurp</name></name> <operator>!=</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>slurpin</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><call><name>eprintf</name> <argument_list>(

<argument><expr><literal type="string">"%s:%d Nesting of expressions not yet supported\n"</literal></expr></argument>,

<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>slurp</name></name> <operator>&amp;&amp;</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>oc</name></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rcc_element</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>frame</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>slurp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">';'</literal></expr>:</case>

<expr_stmt><expr><call><name>rcc_next</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>slurp</name></name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'('</literal></expr>:</case>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>slurpin</name></name> <operator>=</operator> <literal type="char">'('</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>slurp</name></name> <operator>=</operator> <literal type="char">')'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'{'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CTX</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>CTX</name> <operator>&gt;</operator> <literal type="number">31</literal> <operator>||</operator> <name>CTX</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Sinking before overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>CTX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nested_callname</name><index>[<expr><name>CTX</name></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nested_callname</name><index>[<expr><name>CTX</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"if"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>strstr</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name></name></expr></argument>, <argument><expr><literal type="string">"else"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name></name> <operator>=</operator> <literal type="char">'\x00'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>R_FREE</name> <argument_list>(<argument>egg-&gt;lang.ifelse_table[CTX][egg-&gt;lang.nestedi[CTX] - <literal type="number">1</literal>]</argument>)</argument_list></macro>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ifelse_table</name><index>[<expr><name>CTX</name></expr>]</index><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nestedi</name><index>[<expr><name>CTX</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">" __end_%d_%d_%d"</literal></expr></argument>,

<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nfunctions</name></name></expr></argument>, <argument><expr><name>CTX</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nestedi</name><index>[<expr><name>CTX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" __begin_%d_%d_%d:\n"</literal></expr></argument>,

<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nfunctions</name></name></expr></argument>, <argument><expr><name>CTX</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nestedi</name><index>[<expr><name>CTX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rcc_context</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'}'</literal></expr>:</case>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>endframe</name></name> <operator>=</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nested</name><index>[<expr><name>CTX</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>endframe</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>endframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nested</name><index>[<expr><name>CTX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CTX</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nested_callname</name><index>[<expr><name>CTX</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nested_callname</name><index>[<expr><name>CTX</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"if"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"__ifelse_%d_%d"</literal></expr></argument>, <argument><expr><name>CTX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nestedi</name><index>[<expr><name>CTX</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>jmp</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>tmp_ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>tmp_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ifelse_table</name><index>[<expr><name>CTX</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nestedi</name><index>[<expr><name>CTX</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"__end_%d_%d_%d"</literal></expr></argument>,

<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nfunctions</name></name></expr></argument>, <argument><expr><name>CTX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nestedi</name><index>[<expr><name>CTX</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" __end_%d_%d_%d:\n"</literal></expr></argument>,

<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nfunctions</name></name></expr></argument>, <argument><expr><name>CTX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nestedi</name><index>[<expr><name>CTX</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CTX</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nbrackets</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rcc_context</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CTX</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nestedi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ifelse_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_egg_printf</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><literal type="string">" __ifelse_%d_%d:\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>jmp</name></name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ifelse_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>ifelse_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nbrackets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>nfunctions</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">':'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>oc</name></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>oc</name></name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>quoteline</name></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>oc</name></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>skipline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'/'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>oc</name></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>skipline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>slurp</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem</name><index>[<expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>is_space</name> <argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>rcc_fun</name> <argument_list>(<argument><expr><name>egg</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>elem_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>egg</name><operator>-&gt;</operator><name>lang</name><operator>.</operator><name>oc</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
