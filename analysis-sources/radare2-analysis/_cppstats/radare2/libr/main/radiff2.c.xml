<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\main\radiff2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_diff.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_hash.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_main.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32_LEAN_AND_MEAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <block>{

<decl><name>MODE_DIFF</name></decl>,

<decl><name>MODE_DIFF_STRS</name></decl>,

<decl><name>MODE_DIFF_IMPORTS</name></decl>,

<decl><name>MODE_DIST</name></decl>,

<decl><name>MODE_DIST_MYERS</name></decl>,

<decl><name>MODE_DIST_LEVENSTEIN</name></decl>,

<decl><name>MODE_CODE</name></decl>,

<decl><name>MODE_GRAPH</name></decl>,

<decl><name>MODE_COLS</name></decl>,

<decl><name>MODE_COLSII</name></decl>

}</block>;</enum>

<enum>enum <block>{

<decl><name>GRAPH_DEFAULT_MODE</name></decl>,

<decl><name>GRAPH_SDB_MODE</name></decl>,

<decl><name>GRAPH_JSON_MODE</name></decl>,

<decl><name>GRAPH_JSON_DIS_MODE</name></decl>,

<decl><name>GRAPH_TINY_MODE</name></decl>,

<decl><name>GRAPH_INTERACTIVE_MODE</name></decl>,

<decl><name>GRAPH_DOT_MODE</name></decl>,

<decl><name>GRAPH_STAR_MODE</name></decl>,

<decl><name>GRAPH_GML_MODE</name></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>zignatures</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut32</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>showcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>useva</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>delta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>showbare</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>json_started</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diffmode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>disasm</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pdc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>quiet</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>runcmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>anal_all</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>verbose</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>evals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>RCore</name> <modifier>*</modifier></type><name>opencore</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>baddr</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>r_core_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_core_loadlibs</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>R_CORE_LOADLIBS_ALL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.va"</literal></expr></argument>, <argument><expr><name>useva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.interactive"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>evals</argument>, <argument>iter</argument>, <argument>e</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_eval</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>r_acp_to_utf8</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_core_file_open</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_core_bin_load</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_core_bin_update_arch_bits</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_list_empty</name> <argument_list>(<argument><expr><call><name>r_bin_get_sections</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.va"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>anal_all</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><literal type="string">"aac"</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>anal_all</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="string">"aaa"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="string">"aaaa"</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>runcmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>runcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>zignatures</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"zg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>readstr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb</name><parameter_list>(<parameter><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RDiffOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>showcount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>diffmode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'U'</literal></expr>:</case> 

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>a_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>readstr</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>a_buf</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>a_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"-0x%08"</literal><name>PFMT64x</name><literal type="string">":"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>a_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>a_len</name></name></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>a_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_str_escape</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>a_buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" \"%s\""</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>b_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>readstr</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_buf</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_GREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"+0x%08"</literal><name>PFMT64x</name><literal type="string">":"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_str_escape</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>b_buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" \"%s\""</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>disasm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r2cmds (-r) + disasm (-D) not yet implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>a_len</name></name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"wx "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" @ 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>a_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"r-%d @ 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>op</name><operator>-&gt;</operator><name>a_len</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>a_off</name></name> <operator>+</operator> <name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>b_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"r+%d @ 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_off</name></name> <operator>+</operator> <name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"wx "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" @ 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_off</name></name> <operator>+</operator> <name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>delta</name> <operator>+=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>b_off</name></name> <operator>-</operator> <name><name>op</name><operator>-&gt;</operator><name>a_off</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>disasm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"JSON (-j) + disasm (-D) not yet implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>json_started</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">",\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>json_started</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"{\"offset\":%"</literal><name>PFMT64d</name> <literal type="string">","</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>a_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\"from\":\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>a_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>a_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\", \"to\":\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>disasm</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"--- 0x%08"</literal><name>PFMT64x</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>a_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>core</name> <operator>=</operator> <call><name>opencore</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>, <argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>a_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>a_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>core</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>a_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAsmCode</name> <modifier>*</modifier></type><name>ac</name> <init>= <expr><call><name>r_asm_mdisassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>a_buf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acbufasm</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>assembly</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>quiet</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufasm</name> <init>= <expr><call><name>r_str_prefix_all</name> <argument_list>(<argument><expr><name>acbufasm</name></expr></argument>, <argument><expr><literal type="string">"- "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>bufasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bufasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>acbufasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufasm</name> <init>= <expr><call><name>r_str_prefix_all</name> <argument_list>(<argument><expr><name>acbufasm</name></expr></argument>, <argument><expr><name>Color_RED</name><literal type="string">"- "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal><name>Color_RESET</name></expr></argument>, <argument><expr><name>bufasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bufasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>acbufasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>a_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>a_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>a_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>disasm</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"+++ 0x%08"</literal><name>PFMT64x</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>core</name> <operator>=</operator> <call><name>opencore</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>core</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAsmCode</name> <modifier>*</modifier></type><name>ac</name> <init>= <expr><call><name>r_asm_mdisassemble</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>assembler</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_buf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acbufasm</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>assembly</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>quiet</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufasm</name> <init>= <expr><call><name>r_str_prefix_all</name> <argument_list>(<argument><expr><name>acbufasm</name></expr></argument>, <argument><expr><literal type="string">"+ "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>bufasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bufasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>acbufasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufasm</name> <init>= <expr><call><name>r_str_prefix_all</name> <argument_list>(<argument><expr><name>acbufasm</name></expr></argument>, <argument><expr><name>Color_GREEN</name><literal type="string">"+ "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal> <name>Color_RESET</name></expr></argument>, <argument><expr><name>bufasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bufasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>acbufasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" =&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>gdiff_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>print_bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>big_endian</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>ch</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>p</name><operator>)</operator><index>[<expr><ternary><condition><expr><name>big_endian</name></expr> ?</condition><then> <expr><operator>(</operator><name>len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bcb</name><parameter_list>(<parameter><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>RDiffOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset_diff</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>a_off</name></name> <operator>-</operator> <name>gdiff_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>opcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>USAddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>IAddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>UCLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>USLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ILen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset_diff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>gdiff_start</name> <operator>&lt;=</operator> <name>USHRT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <literal type="number">249</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>USAddr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>gdiff_start</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gdiff_start</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <literal type="number">252</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>IAddr</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>gdiff_start</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>!=</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <name>offset_diff</name> <operator>&lt;=</operator> <name>UCHAR_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>UCLen</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>offset_diff</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>!=</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <name>offset_diff</name> <operator>&lt;=</operator> <name>USHRT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>USLen</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>offset_diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>opcode</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>!=</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <name>offset_diff</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ILen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>offset_diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>opcode</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>offset_diff</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>times</name> <init>= <expr><name>offset_diff</name> <operator>/</operator> <name>INT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>times</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>print_bytes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opcode</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_bytes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>max</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>print_bytes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opcode</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&lt;=</operator> <literal type="number">251</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_bytes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>USAddr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>USAddr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_bytes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>IAddr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>IAddr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>print_bytes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gdiff_start</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gdiff_start</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">249</literal></expr>:</case>

<case>case <expr><literal type="number">252</literal></expr>:</case>

<expr_stmt><expr><call><name>print_bytes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>UCLen</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>UCLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">250</literal></expr>:</case>

<case>case <expr><literal type="number">253</literal></expr>:</case>

<expr_stmt><expr><call><name>print_bytes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>USLen</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>USLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">251</literal></expr>:</case>

<case>case <expr><literal type="number">254</literal></expr>:</case>

<case>case <expr><literal type="number">255</literal></expr>:</case>

<expr_stmt><expr><call><name>print_bytes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ILen</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ILen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>b_len</name></name> <operator>&lt;=</operator> <literal type="number">246</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>data</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>b_len</name></name> <operator>&lt;=</operator> <name>USHRT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>USLen</name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>)</operator> <name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>data</name> <init>= <expr><literal type="number">247</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_bytes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>USLen</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>USLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>b_len</name></name> <operator>&lt;=</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>data</name> <init>= <expr><literal type="number">248</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ILen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_bytes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ILen</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ILen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>times</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>b_len</name></name> <operator>/</operator> <name>INT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>times</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>data</name> <init>= <expr><literal type="number">248</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_bytes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>max</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_bytes</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_buf</name></name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>b_buf</name></name> <operator>+=</operator> <name>max</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>b_len</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>b_len</name></name> <operator>%</operator> <name>max</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remain_size</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>print_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>remain_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>remain_size</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>print_bytes</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_buf</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gdiff_start</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>b_off</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>b_len</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_help</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Usage: radiff2 [-abBcCdjrspOxuUvV] [-A[A]] [-g sym] [-m graph_mode][-t %%] [file] [file]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(

<argument><expr><literal type="string">" -a [arch] specify architecture plugin to use (x86, arm, ..)\n"</literal>

<literal type="string">" -A [-A] run aaa or aaaa after loading each binary (see -C)\n"</literal>

<literal type="string">" -b [bits] specify register size for arch (16 (thumb), 32, 64, ..)\n"</literal>

<literal type="string">" -B output in binary diff (GDIFF)\n"</literal>

<literal type="string">" -c count of changes\n"</literal>

<literal type="string">" -C graphdiff code (columns: off-A, match-ratio, off-B) (see -A)\n"</literal>

<literal type="string">" -d use delta diffing\n"</literal>

<literal type="string">" -D show disasm instead of hexpairs\n"</literal>

<literal type="string">" -e [k=v] set eval config var value for all RCore instances\n"</literal>

<literal type="string">" -g [sym|off1,off2] graph diff of given symbol, or between two offsets\n"</literal>

<literal type="string">" -G [cmd] run an r2 command on every RCore instance created\n"</literal>

<literal type="string">" -i diff imports of target files (see -u, -U and -z)\n"</literal>

<literal type="string">" -j output in json format\n"</literal>

<literal type="string">" -n print bare addresses only (diff.bare=1)\n"</literal>

<literal type="string">" -m [aditsjJ] choose the graph output mode\n"</literal>

<literal type="string">" -O code diffing with opcode bytes only\n"</literal>

<literal type="string">" -p use physical addressing (io.va=0)\n"</literal>

<literal type="string">" -q quiet mode (disable colors, reduce output)\n"</literal>

<literal type="string">" -r output in radare commands\n"</literal>

<literal type="string">" -s compute edit distance (no substitution, Eugene W. Myers' O(ND) diff algorithm)\n"</literal>

<literal type="string">" -ss compute Levenshtein edit distance (substitution is allowed, O(N^2))\n"</literal>

<literal type="string">" -S [name] sort code diff (name, namelen, addr, size, type, dist) (only for -C or -g)\n"</literal>

<literal type="string">" -t [0-100] set threshold for code diff (default is 70%%)\n"</literal>

<literal type="string">" -x show two column hexdump diffing\n"</literal>

<literal type="string">" -X show two column hexII diffing\n"</literal>

<literal type="string">" -u unified output (---+++)\n"</literal>

<literal type="string">" -U unified output using system 'diff'\n"</literal>

<literal type="string">" -v show version information\n"</literal>

<literal type="string">" -V be verbose (current only for -s)\n"</literal>

<literal type="string">" -z diff on extracted strings\n"</literal>

<literal type="string">" -Z diff code comparing zignatures\n\n"</literal>

<literal type="string">"Graph Output formats: (-m [mode])\n"</literal>

<literal type="string">" &lt;blank/a&gt; Ascii art\n"</literal>

<literal type="string">" s r2 commands\n"</literal>

<literal type="string">" d Graphviz dot\n"</literal>

<literal type="string">" g Graph Modelling Language (gml)\n"</literal>

<literal type="string">" j json\n"</literal>

<literal type="string">" J json with disarm\n"</literal>

<literal type="string">" k SDB key-value\n"</literal>

<literal type="string">" t Tiny ascii art\n"</literal>

<literal type="string">" i Interactive ascii art\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMP_CONTEXT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_cols</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>as</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>sz</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctx</name> <init>= <expr><name>DUMP_CONTEXT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name> <operator>||</operator> <operator>!</operator><name>b</name> <operator>||</operator> <name>as</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>bs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>w</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" offset 0 1 2 3 4 5 6 7 01234567 0 1 2 3 4 5 6 7 01234567\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" offset "</literal>

<literal type="string">"0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF "</literal>

<literal type="string">"0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid column width\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>w</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>w</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <name>w</name> <operator>-</operator> <name>sz</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>sz</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>eq</name> <init>= <expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ctx</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name>DUMP_CONTEXT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><ternary><condition><expr><name>eq</name></expr>?</condition><then> <expr><name>Color_GREEN</name></expr></then><else>: <expr><name>Color_RED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08x%c "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name>eq</name></expr>?</condition><then> <expr><literal type="char">' '</literal></expr></then><else>: <expr><literal type="char">'!'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>eq2</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><ternary><condition><expr><name>eq2</name></expr>?</condition><then> <expr><name>Color_GREEN</name></expr></then><else>: <expr><name>Color_RED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>pad</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>eq2</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><ternary><condition><expr><name>eq2</name></expr>?</condition><then> <expr><name>Color_GREEN</name></expr></then><else>: <expr><name>Color_RED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>IS_PRINTABLE</name> <argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>pad</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>eq2</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><ternary><condition><expr><name>eq2</name></expr>?</condition><then> <expr><name>Color_GREEN</name></expr></then><else>: <expr><name>Color_RED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>pad</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>eq2</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><ternary><condition><expr><name>eq2</name></expr>?</condition><then> <expr><name>Color_GREEN</name></expr></then><else>: <expr><name>Color_RED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>IS_PRINTABLE</name> <argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_cons_break_end</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>as</name> <operator>!=</operator> <name>bs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_cols_hexii</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>as</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>spacy</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>sz</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctx</name> <init>= <expr><name>DUMP_CONTEXT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name> <operator>||</operator> <operator>!</operator><name>b</name> <operator>||</operator> <name>as</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>bs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>PrintfCallback</name></type> <name>p</name> <init>= <expr><name>r_cons_printf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>w</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>w</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <name>w</name> <operator>-</operator> <name>sz</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>sz</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>eq</name> <init>= <expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ctx</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name>DUMP_CONTEXT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><ternary><condition><expr><name>eq</name></expr>?</condition><then> <expr><name>Color_GREEN</name></expr></then><else>: <expr><name>Color_RED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08x%c "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name>eq</name></expr>?</condition><then> <expr><literal type="char">' '</literal></expr></then><else>: <expr><literal type="char">'!'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>eq2</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><ternary><condition><expr><name>eq2</name></expr>?</condition><then> <expr><name>Color_GREEN</name></expr></then><else>: <expr><name>Color_RED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>ch</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>spacy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"##"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_PRINTABLE</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">".%c"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>pad</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>pad</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>eq2</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><ternary><condition><expr><name>eq2</name></expr>?</condition><then> <expr><name>Color_GREEN</name></expr></then><else>: <expr><name>Color_RED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>ch</name> <init>= <expr><name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>spacy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"##"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_PRINTABLE</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">".%c"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>pad</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_cons_break_end</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal><name>Color_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>as</name> <operator>!=</operator> <name>bs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_sha256</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>r_hash_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>R_HASH_SHA256</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>r_hash_do_sha256</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_hash_free</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R_HASH_SIZE_SHA256</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_hash_free</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name> <modifier>*</modifier></type><name>slurp</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier><modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <name>file</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <call><name>opencore</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"opencore failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>io</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>c</name><operator>)</operator><operator>-&gt;</operator><name>io</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>r_io_open</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>r_io_size</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&lt;</operator> <name>ST32_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sz</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"slurp: read error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"slurp: Invalid file size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_io_desc_close</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>import_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RBinImport</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBinImport</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name> <modifier>*</modifier></type><name>get_imports</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>old</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_bin_get_imports</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>(</operator><name>RListComparator</name><operator>)</operator> <name>import_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old</name> <operator>||</operator> <operator>(</operator><name>old</name> <operator>&amp;&amp;</operator> <call><name>import_cmp</name> <argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>old</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>*</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>old</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>import_cmp</name> <argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>namelen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>namelen</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>old</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bs_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RBinString</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBinString</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>diff</name> <operator>==</operator> <literal type="number">0</literal></expr>?</condition><then> <expr><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>diff</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name> <modifier>*</modifier></type><name>get_strings</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_bin_get_strings</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinString</name> <modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>old</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>(</operator><name>RListComparator</name><operator>)</operator> <name>bs_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old</name> <operator>||</operator> <operator>(</operator><name>old</name> <operator>&amp;&amp;</operator> <call><name>bs_cmp</name> <argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <name><name>str</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>old</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>*</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>old</name> <operator>&amp;&amp;</operator> <call><name>bs_cmp</name> <argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>str</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>old</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_graph_commands</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>tmp_html</name> <init>= <expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>is_html</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>is_html</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_push</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_anal_graph</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>R_CORE_ANAL_GRAPHBODY</name> <operator>|</operator> <name>R_CORE_ANAL_GRAPHDIFF</name> <operator>|</operator> <name>R_CORE_ANAL_STAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>static_str</name> <init>= <expr><call><name>r_cons_get_buffer</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>retstr</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><name>static_str</name></expr>?</condition><then> <expr><name>static_str</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_echo</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name>is_html</name> <operator>=</operator> <name>tmp_html</name></expr>;</expr_stmt>

<return>return <expr><name>retstr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__generate_graph</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>get_graph_commands</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eol</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eol</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>eol</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eol</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>eol</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__print_diff_graph</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gmode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>opts</name> <init>= <expr><name>R_CORE_ANAL_GRAPHBODY</name> <operator>|</operator> <name>R_CORE_ANAL_GRAPHDIFF</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_utf8</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.utf8"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_agraph_reset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>gmode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>GRAPH_DOT_MODE</name></expr>:</case>

<expr_stmt><expr><call><name>r_core_anal_graph</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GRAPH_STAR_MODE</name></expr>:</case>

<expr_stmt><expr><call><name>r_core_anal_graph</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>opts</name> <operator>|</operator> <name>R_CORE_ANAL_STAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GRAPH_TINY_MODE</name></expr>:</case>

<expr_stmt><expr><call><name>__generate_graph</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_agraph_print</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>use_utf8</name></expr></argument>, <argument><expr><literal type="string">"t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GRAPH_INTERACTIVE_MODE</name></expr>:</case>

<expr_stmt><expr><call><name>__generate_graph</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_agraph_print</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>use_utf8</name></expr></argument>, <argument><expr><literal type="string">"v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_reset_colors</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GRAPH_SDB_MODE</name></expr>:</case>

<expr_stmt><expr><call><name>__generate_graph</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_agraph_print</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>use_utf8</name></expr></argument>, <argument><expr><literal type="string">"k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GRAPH_GML_MODE</name></expr>:</case>

<expr_stmt><expr><call><name>__generate_graph</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_agraph_print</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>use_utf8</name></expr></argument>, <argument><expr><literal type="string">"g"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GRAPH_JSON_MODE</name></expr>:</case>

<expr_stmt><expr><call><name>r_core_anal_graph</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>opts</name> <operator>|</operator> <name>R_CORE_ANAL_JSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GRAPH_JSON_DIS_MODE</name></expr>:</case>

<expr_stmt><expr><call><name>r_core_anal_graph</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>opts</name> <operator>|</operator> <name>R_CORE_ANAL_JSON</name> <operator>|</operator> <name>R_CORE_ANAL_JSON_FORMAT_DISASM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GRAPH_DEFAULT_MODE</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>__generate_graph</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_agraph_print</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>use_utf8</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_reset_colors</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_main_radiff2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>columnSort</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bufa</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bufb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>o</name></decl>, <decl><type ref="prev"/><name>delta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sza</name></decl>, <decl><type ref="prev"/><name>szb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><name>MODE_DIFF</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gmode</name> <init>= <expr><name>GRAPH_DEFAULT_MODE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diffops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>threshold</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sim</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>evals</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGetopt</name></type> <name>opt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_getopt_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"Aa:b:BCDe:npg:m:G:OijrhcdsS:uUvVxXt:zqZ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>o</name> <operator>=</operator> <call><name>r_getopt_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>o</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>

<expr_stmt><expr><name>anal_all</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<expr_stmt><expr><name>diffmode</name> <operator>=</operator> <literal type="char">'B'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>evals</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><name>useva</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<expr_stmt><expr><name>diffmode</name> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_GRAPH</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> <expr_stmt><expr><name>gmode</name> <operator>=</operator> <name>GRAPH_INTERACTIVE_MODE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case> <expr_stmt><expr><name>gmode</name> <operator>=</operator> <name>GRAPH_SDB_MODE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> <expr_stmt><expr><name>gmode</name> <operator>=</operator> <name>GRAPH_JSON_MODE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'J'</literal></expr>:</case> <expr_stmt><expr><name>gmode</name> <operator>=</operator> <name>GRAPH_JSON_DIS_MODE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name>gmode</name> <operator>=</operator> <name>GRAPH_TINY_MODE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> <expr_stmt><expr><name>gmode</name> <operator>=</operator> <name>GRAPH_DOT_MODE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>gmode</name> <operator>=</operator> <name>GRAPH_STAR_MODE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case> <expr_stmt><expr><name>gmode</name> <operator>=</operator> <name>GRAPH_GML_MODE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<default>default:</default> <expr_stmt><expr><name>gmode</name> <operator>=</operator> <name>GRAPH_DEFAULT_MODE</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block> <break>break;</break>

<case>case <expr><literal type="char">'G'</literal></expr>:</case>

<expr_stmt><expr><name>runcmd</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><name>showcount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_CODE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_DIFF_IMPORTS</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><name>showbare</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'O'</literal></expr>:</case>

<expr_stmt><expr><name>diffops</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><name>threshold</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>disasm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pdc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>disasm</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_CODE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>disasm</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<return>return <expr><call><name>show_help</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_DIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_DIST_LEVENSTEIN</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_DIST_LEVENSTEIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_DIST_MYERS</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_DIST</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<expr_stmt><expr><name>columnSort</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_COLS</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_COLSII</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<expr_stmt><expr><name>diffmode</name> <operator>=</operator> <literal type="char">'u'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>

<expr_stmt><expr><name>diffmode</name> <operator>=</operator> <literal type="char">'U'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<return>return <expr><call><name>r_main_version_print</name> <argument_list>(<argument><expr><literal type="string">"radiff2"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<expr_stmt><expr><name>quiet</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case>

<expr_stmt><expr><name>verbose</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><name>diffmode</name> <operator>=</operator> <literal type="char">'j'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_DIFF_STRS</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case>

<expr_stmt><expr><name>zignatures</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><call><name>show_help</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>argc</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">3</literal> <operator>||</operator> <name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument> &gt;</argument_list></name> <name>argc</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>show_help</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>&lt;</operator> <name>argc</name><operator>)</operator></expr>?</condition><then> <expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>file2</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>argc</name><operator>)</operator></expr>?</condition><then> <expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MODE_GRAPH</name></expr>:</case>

<case>case <expr><name>MODE_CODE</name></expr>:</case>

<case>case <expr><name>MODE_DIFF_STRS</name></expr>:</case>

<case>case <expr><name>MODE_DIFF_IMPORTS</name></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>opencore</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot open '%s'\n"</literal></expr></argument>, <argument><expr><call><name>r_str_get</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>opencore</name> <argument_list>(<argument><expr><name>file2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <operator>!</operator><name>c2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot open '%s'\n"</literal></expr></argument>, <argument><expr><call><name>r_str_get</name> <argument_list>(<argument><expr><name>file2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>c2</name></name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c2</name><operator>-&gt;</operator><name>c2</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_parse_radare2rc</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>, <argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>c2</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.arch"</literal></expr></argument>, <argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>c2</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"asm.bits"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>columnSort</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"diff.sort"</literal></expr></argument>, <argument><expr><name>columnSort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>c2</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"diff.sort"</literal></expr></argument>, <argument><expr><name>columnSort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"diff.bare"</literal></expr></argument>, <argument><expr><name>showbare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>c2</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"diff.bare"</literal></expr></argument>, <argument><expr><name>showbare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_diff_setup_i</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>diffops</name></expr></argument>, <argument><expr><name>threshold</name></expr></argument>, <argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_diff_setup_i</name> <argument_list>(<argument><expr><name><name>c2</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>diffops</name></expr></argument>, <argument><expr><name>threshold</name></expr></argument>, <argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pdc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <literal type="string">"main"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>, <argument><expr><name>COLOR_MODE_DISABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>c2</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>, <argument><expr><name>COLOR_MODE_DISABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addra</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bufa</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>r_core_cmd_strf</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"af;pdc @ 0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>addra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sza</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><call><name>strlen</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>bufa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addrb</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>c2</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bufb</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>r_core_cmd_strf</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><literal type="string">"af;pdc @ 0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>addrb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>szb</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><call><name>strlen</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>bufb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_DIFF</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_GRAPH</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"anal.depth"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>words</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><name>addr</name></expr>?</condition><then> <expr><name>addr</name></expr></then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>second</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>words</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>second</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>second</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_anal_fcn</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>R_ANAL_REF_TYPE_NULL</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_anal_fcn</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>c2</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>R_ANAL_REF_TYPE_NULL</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_gdiff</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__print_diff_graph</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>gmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_core_anal_fcn</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>R_ANAL_REF_TYPE_NULL</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_anal_fcn</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>c2</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><name>R_ANAL_REF_TYPE_NULL</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_gdiff</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__print_diff_graph</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_CODE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>zignatures</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"z~?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><literal type="string">"z~?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_zdiff</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_core_gdiff</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_diff_show</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_DIFF_IMPORTS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bufa</name> <operator>=</operator> <call><name>get_imports</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sza</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bufb</name> <operator>=</operator> <call><name>get_imports</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>szb</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_DIFF_STRS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bufa</name> <operator>=</operator> <call><name>get_strings</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sza</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bufb</name> <operator>=</operator> <call><name>get_strings</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>szb</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_CODE</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>MODE_GRAPH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_core_free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_free</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_CODE</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>MODE_GRAPH</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>fsz</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bufa</name> <operator>=</operator> <call><name>slurp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sza</name> <operator>=</operator> <name>fsz</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bufa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"radiff2: Cannot open %s\n"</literal></expr></argument>, <argument><expr><call><name>r_str_get</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bufb</name> <operator>=</operator> <call><name>slurp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>file2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>szb</name> <operator>=</operator> <name>fsz</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bufb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"radiff2: Cannot open: %s\n"</literal></expr></argument>, <argument><expr><call><name>r_str_get</name> <argument_list>(<argument><expr><name>file2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bufa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sza</name> <operator>!=</operator> <name>szb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"File size differs %"</literal><name>PFMT64u</name><literal type="string">" vs %"</literal><name>PFMT64u</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>sza</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>szb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_cons_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MODE_COLSII</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>evals</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>opencore</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dump_cols_hexii</name> <argument_list>(<argument><expr><name>bufa</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sza</name></expr></argument>, <argument><expr><name>bufb</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>szb</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">112</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">16</literal></expr></then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MODE_COLS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>evals</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>opencore</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dump_cols</name> <argument_list>(<argument><expr><name>bufa</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sza</name></expr></argument>, <argument><expr><name>bufb</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>szb</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><call><name>r_cons_get_size</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">112</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">16</literal></expr></then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MODE_DIFF</name></expr>:</case>

<case>case <expr><name>MODE_DIFF_STRS</name></expr>:</case>

<case>case <expr><name>MODE_DIFF_IMPORTS</name></expr>:</case>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>r_diff_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_diff_set_delta</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diffmode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"{\"files\":[{\"filename\":\"%s\", \"size\":%"</literal><name>PFMT64u</name><literal type="string">", \"sha256\":\""</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>sza</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_sha256</name> <argument_list>(<argument><expr><name>bufa</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sza</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\"},\n{\"filename\":\"%s\", \"size\":%"</literal><name>PFMT64u</name><literal type="string">", \"sha256\":\""</literal></expr></argument>, <argument><expr><name>file2</name></expr></argument>, <argument><expr><name>szb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_sha256</name> <argument_list>(<argument><expr><name>bufb</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>szb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\"}],\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\"changes\":["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diffmode</name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"\xd1\xff\xd1\xff"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"\x04"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diffmode</name> <operator>==</operator> <literal type="char">'U'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>res</name> <init>= <expr><call><name>r_diff_buffers_unified</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>bufa</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sza</name></expr></argument>, <argument><expr><name>bufb</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>szb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>diffmode</name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_diff_set_callback</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bcb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_diff_buffers</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>bufa</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>sza</name></expr></argument>, <argument><expr><name>bufb</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>szb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"\x00"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_diff_set_callback</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_diff_buffers</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>bufa</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>sza</name></expr></argument>, <argument><expr><name>bufb</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>szb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diffmode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_diff_free</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MODE_DIST</name></expr>:</case>

<case>case <expr><name>MODE_DIST_MYERS</name></expr>:</case>

<case>case <expr><name>MODE_DIST_LEVENSTEIN</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>RDiff</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>r_diff_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <name>verbose</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_DIST_LEVENSTEIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="char">'l'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_DIST_MYERS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="char">'m'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_diff_buffers_distance</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>bufa</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>sza</name></expr></argument>, <argument><expr><name>bufb</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>szb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_diff_free</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"similarity: %.3f\n"</literal></expr></argument>, <argument><expr><name>sim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"distance: %d\n"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_cons_free</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diffmode</name> <operator>==</operator> <literal type="char">'j'</literal> <operator>&amp;&amp;</operator> <name>showcount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">",\"count\":%d}\n"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>showcount</name> <operator>&amp;&amp;</operator> <name>diffmode</name> <operator>!=</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>showcount</name> <operator>&amp;&amp;</operator> <name>diffmode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bufa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bufb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
