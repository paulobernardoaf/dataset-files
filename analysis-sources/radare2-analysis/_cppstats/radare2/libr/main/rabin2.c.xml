<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\main\rabin2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_main.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libr/bin/pdb/pdb_downloader.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rabin_show_help</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Usage: rabin2 [-AcdeEghHiIjlLMqrRsSUvVxzZ] [-@ at] [-a arch] [-b bits] [-B addr]\n"</literal>

<literal type="string">" [-C F:C:D] [-f str] [-m addr] [-n str] [-N m:M] [-P[-P] pdb]\n"</literal>

<literal type="string">" [-o str] [-O str] [-k query] [-D lang symname] file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(

<argument><expr><literal type="string">" -@ [addr] show section, symbol or import at addr\n"</literal>

<literal type="string">" -A list sub-binaries and their arch-bits pairs\n"</literal>

<literal type="string">" -a [arch] set arch (x86, arm, .. or &lt;arch&gt;_&lt;bits&gt;)\n"</literal>

<literal type="string">" -b [bits] set bits (32, 64 ...)\n"</literal>

<literal type="string">" -B [addr] override base address (pie bins)\n"</literal>

<literal type="string">" -c list classes\n"</literal>

<literal type="string">" -cc list classes in header format\n"</literal>

<literal type="string">" -C [fmt:C:D] create [elf,mach0,pe] with Code and Data hexpairs (see -a)\n"</literal>

<literal type="string">" -d show debug/dwarf information\n"</literal>

<literal type="string">" -D lang name demangle symbol name (-D all for bin.demangle=true)\n"</literal>

<literal type="string">" -e entrypoint\n"</literal>

<literal type="string">" -ee constructor/destructor entrypoints\n"</literal>

<literal type="string">" -E globally exportable symbols\n"</literal>

<literal type="string">" -f [str] select sub-bin named str\n"</literal>

<literal type="string">" -F [binfmt] force to use that bin plugin (ignore header check)\n"</literal>

<literal type="string">" -g same as -SMZIHVResizcld -SS -SSS -ee (show all info)\n"</literal>

<literal type="string">" -G [addr] load address . offset to header\n"</literal>

<literal type="string">" -h this help message\n"</literal>

<literal type="string">" -H header fields\n"</literal>

<literal type="string">" -i imports (symbols imported from libraries)\n"</literal>

<literal type="string">" -I binary info\n"</literal>

<literal type="string">" -j output in json\n"</literal>

<literal type="string">" -k [sdb-query] run sdb query. for example: '*'\n"</literal>

<literal type="string">" -K [algo] calculate checksums (md5, sha1, ..)\n"</literal>

<literal type="string">" -l linked libraries\n"</literal>

<literal type="string">" -L [plugin] list supported bin plugins or plugin details\n"</literal>

<literal type="string">" -m [addr] show source line at addr\n"</literal>

<literal type="string">" -M main (show address of main symbol)\n"</literal>

<literal type="string">" -n [str] show section, symbol or import named str\n"</literal>

<literal type="string">" -N [min:max] force min:max number of chars per string (see -z and -zz)\n"</literal>

<literal type="string">" -o [str] output file/folder for write operations (out by default)\n"</literal>

<literal type="string">" -O [str] write/extract operations (-O help)\n"</literal>

<literal type="string">" -p show physical addresses\n"</literal>

<literal type="string">" -P show debug/pdb information\n"</literal>

<literal type="string">" -PP download pdb file for binary\n"</literal>

<literal type="string">" -q be quiet, just show fewer data\n"</literal>

<literal type="string">" -qq show less info (no offset/size for -z for ex.)\n"</literal>

<literal type="string">" -Q show load address used by dlopen (non-aslr libs)\n"</literal>

<literal type="string">" -r radare output\n"</literal>

<literal type="string">" -R relocations\n"</literal>

<literal type="string">" -s symbols\n"</literal>

<literal type="string">" -S sections\n"</literal>

<literal type="string">" -SS segments\n"</literal>

<literal type="string">" -SSS sections mapping to segments\n"</literal>

<literal type="string">" -t display file hashes\n"</literal>

<literal type="string">" -T display file signature\n"</literal>

<literal type="string">" -u unfiltered (no rename duplicated symbols/sections)\n"</literal>

<literal type="string">" -U resoUrces\n"</literal>

<literal type="string">" -v display version and quit\n"</literal>

<literal type="string">" -V Show binary version information\n"</literal>

<literal type="string">" -w display try/catch blocks\n"</literal>

<literal type="string">" -x extract bins contained in file\n"</literal>

<literal type="string">" -X [fmt] [f] .. package in fat or zip the given files and bins contained in file\n"</literal>

<literal type="string">" -z strings (from data section)\n"</literal>

<literal type="string">" -zz strings (from raw bins [e bin.rawstr=1])\n"</literal>

<literal type="string">" -zzz dump raw strings to stdout (for huge files)\n"</literal>

<literal type="string">" -Z guess size of binary program\n"</literal></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Environment:\n"</literal>

<literal type="string">" RABIN2_LANG: e bin.lang #assume lang for demangling\n"</literal>

<literal type="string">" RABIN2_NOPLUGINS: #do not load shared plugins (speedup loading)\n"</literal>

<literal type="string">" RABIN2_DEMANGLE=0:e bin.demangle #do not demangle symbols\n"</literal>

<literal type="string">" RABIN2_MAXSTRBUF: e bin.maxstrbuf #specify maximum buffer size\n"</literal>

<literal type="string">" RABIN2_STRFILTER: e bin.str.filter #r2 -qc 'e bin.str.filter=?"</literal> <literal type="string">"?' -\n"</literal>

<literal type="string">" RABIN2_STRPURGE: e bin.str.purge #try to purge false positives\n"</literal>

<literal type="string">" RABIN2_DEBASE64: e bin.debase64 #try to debase64 all strings\n"</literal>

<literal type="string">" RABIN2_DMNGLRCMD: e bin.demanglercmd #try to purge false positives\n"</literal>

<literal type="string">" RABIN2_PDBSERVER: e pdb.server #use alternative PDB server\n"</literal>

<literal type="string">" RABIN2_SYMSTORE: e pdb.symstore #path to downstream symbol store\n"</literal>

<literal type="string">" RABIN2_PREFIX: e bin.prefix #prefix symbols/sections/relocs with a specific string\n"</literal>

<literal type="string">" R2_CONFIG: #sdb config file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>stdin_gets</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>liberate</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>stdin_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDIN_BUF_SIZE</name></cpp:macro> <cpp:value>96096</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>liberate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>stdin_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stdin_buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stdin_buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stdin_buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>STDIN_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stdin_buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>stdin_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>STDIN_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fgets</name> <argument_list>(<argument><expr><name>stdin_buf</name></expr></argument>, <argument><expr><name>STDIN_BUF_SIZE</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>feof</name> <argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>stdin_buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__sdb_prompt</name><parameter_list>(<parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name>stdin_gets</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_query</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isBinopHelp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>extract_binobj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RBinXtrData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>bin_size</name> <init>= <expr><ternary><condition><expr><name>data</name></expr>?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>size</name></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xtr_type</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arch</name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>libname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><ternary><condition><expr><name>bf</name></expr>?</condition><then> <expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name> <operator>||</operator> <operator>!</operator><name>data</name> <operator>||</operator> <operator>!</operator><name>filename</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>metadata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>metadata</name><operator>-&gt;</operator><name>arch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>metadata</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>libname</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>metadata</name><operator>-&gt;</operator><name>libname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>xtr_type</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>metadata</name><operator>-&gt;</operator><name>xtr_type</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>xtr_type</name></expr></argument>, <argument><expr><literal type="string">"fat"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>bin_size</name> <operator>==</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name>bin_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"This is not a fat bin\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>bin_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: BinFile buffer is empty\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>bin_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Couldn't read xtrdata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_file_basename</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outpath</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.fat"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outpath</name> <operator>||</operator> <operator>!</operator><call><name>r_sys_mkdirp</name> <argument_list>(<argument><expr><name>outpath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>outpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error creating dir structure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outfile</name> <init>= <expr><ternary><condition><expr><name>libname</name></expr>

?</condition><then> <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s/%s.%s.%s_%i.%d"</literal></expr></argument>, <argument><expr><name>outpath</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arch</name></expr></argument>, <argument><expr><name>libname</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s/%s.%s_%i.%d"</literal></expr></argument>, <argument><expr><name>outpath</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arch</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outfile</name> <operator>||</operator> <operator>!</operator><call><name>r_file_dump</name> <argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>bin_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error extracting %s\n"</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s created (%"</literal><name>PFMT64d</name><literal type="string">")\n"</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>bin_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>outpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rabin_extract</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>all</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinXtrData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><call><name>r_bin_cur</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>all</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bf-&gt;xtr_data</argument>, <argument>iter</argument>, <argument>data</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>extract_binobj</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>idx</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>xtr_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>extract_binobj</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rabin_dump_symbols</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>symbols</name> <init>= <expr><call><name>r_bin_get_symbols</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>symbols</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>symbol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>olen</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>symbols</argument>, <argument>iter</argument>, <argument>symbol</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>symbol</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>olen</name> <operator>&gt;</operator> <name><name>symbol</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <operator>!</operator><name>olen</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>symbol</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>symbol</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>olen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>olen</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name>len</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>symbol</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_hex_bin2str</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><name><name>symbol</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot read from buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__dumpSections</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scnname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>sections</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>section</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><name>r_bin_get_sections</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>sections</argument>, <argument>iter</argument>, <argument>section</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>scnname</name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>section</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name> <operator>&gt;</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>section</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <name><name>section</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>,

<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_file_dump</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_hex_bin2str</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rabin_do_operation</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>rc</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr2</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ptr2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr2</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><call><name>r_bin_cur</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bf</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>nb</name> <init>= <expr><call><name>r_buf_new_with_buf</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>nb</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>r_bin_wr_entry</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>r_bin_wr_output</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>_rabin_do_operation_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>a</name> <init>= <expr><ternary><condition><expr><name>ptr2</name></expr>?</condition><then> <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rabin_dump_symbols</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr2</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>_rabin_do_operation_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__dumpSections</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<goto>goto <name>_rabin_do_operation_error</name>;</goto>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>_rabin_do_operation_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr2</name> <operator>||</operator> <operator>!</operator><call><name>r_bin_wr_addlib</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>r_bin_wr_output</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<goto>goto <name>_rabin_do_operation_error</name>;</goto>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_bin_wr_rpath_del</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>r_bin_wr_output</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>r_bin_cur</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinPlugin</name> <modifier>*</modifier></type><name>plg</name> <init>= <expr><call><name>r_bin_file_cur_plugin</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>plg</name> <operator>&amp;&amp;</operator> <name>cur</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>xtr_data</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBinXtrData</name> <modifier>*</modifier></type><name>xtr_data</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>xtr_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>xtr_data</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>xtr_data</name><operator>-&gt;</operator><name>loaded</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_bin_file_object_new_from_xtr_data</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>,

<argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><call><name>r_bin_get_laddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>xtr_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>plg</name> <operator>=</operator> <call><name>r_bin_file_cur_plugin</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>plg</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>plg</name> <operator>&amp;&amp;</operator> <name><name>plg</name><operator>-&gt;</operator><name>signature</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sign</name> <init>= <expr><call><name><name>plg</name><operator>-&gt;</operator><name>signature</name></name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>rad</name> <operator>==</operator> <name>R_MODE_JSON</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_bin_wr_scn_resize</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>r_bin_wr_output</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>perms</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>perms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>perms</name> <operator>=</operator> <call><name>r_str_rwx</name> <argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_bin_wr_scn_perms</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>r_bin_wr_output</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<label><name>_rabin_do_operation_error</name>:</label>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unknown operation. use -O help\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot dump :(\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rabin_show_srcline</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>srcline</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>srcline</name> <operator>=</operator> <call><name>r_bin_addr2text</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>srcline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>srcline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__lib_bin_cb</name><parameter_list>(<parameter><decl><type><name>RLibPlugin</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_plugin_t</name></name> <modifier>*</modifier></type><name>hand</name> <init>= <expr><operator>(</operator>struct <name>r_bin_plugin_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_bin_add</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>hand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__lib_bin_dt</name><parameter_list>(<parameter><decl><type><name>RLibPlugin</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__lib_bin_xtr_cb</name><parameter_list>(<parameter><decl><type><name>RLibPlugin</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_xtr_plugin_t</name></name> <modifier>*</modifier></type><name>hand</name> <init>= <expr><operator>(</operator>struct <name>r_bin_xtr_plugin_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_bin_xtr_add</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>hand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__lib_bin_xtr_dt</name><parameter_list>(<parameter><decl><type><name>RLibPlugin</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__lib_bin_ldr_cb</name><parameter_list>(<parameter><decl><type><name>RLibPlugin</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_ldr_plugin_t</name></name> <modifier>*</modifier></type><name>hand</name> <init>= <expr><operator>(</operator>struct <name>r_bin_ldr_plugin_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_bin_ldr_add</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>hand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__lib_bin_ldr_dt</name><parameter_list>(<parameter><decl><type><name>RLibPlugin</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__demangleAs</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>syscmd</name> <init>= <expr><ternary><condition><expr><name>bin</name></expr>?</condition><then> <expr><name><name>bin</name><operator>-&gt;</operator><name>demanglercmd</name></name></expr></then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_BIN_NM_CXX</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_bin_demangle_cxx</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_BIN_NM_JAVA</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_bin_demangle_java</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_BIN_NM_OBJC</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_bin_demangle_objc</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_BIN_NM_SWIFT</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_bin_demangle_swift</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>syscmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_BIN_NM_MSVC</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_bin_demangle_msvc</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_BIN_NM_RUST</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_bin_demangle_rust</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unsupported demangler\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__listPlugins</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>plugin_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rad</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>format</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>rad</name> <operator>==</operator> <name>R_MODE_JSON</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'j'</literal></expr></then><else>: <expr><ternary><condition><expr><name>rad</name></expr>?</condition><then> <expr><literal type="char">'q'</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <operator>(</operator><name>PrintfCallback</name><operator>)</operator><name>printf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>plugin_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_bin_list_plugin</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>plugin_name</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_bin_list</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_main_rabin2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>laddr</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>baddr</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>do_demangle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>actions_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>actions</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>create</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>va</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>action</name> <init>= <expr><name>R_BIN_REQ_UNK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>arch_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>forcebin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chksum</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCoreFile</name> <modifier>*</modifier></type><name>fh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCoreBinFilter</name></type> <name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xtr_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>rawstr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCore</name></type> <name>core</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RLib</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>at</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>core</name><operator>.</operator><name>bin</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"RABIN2_NOPLUGINS"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>homeplugindir</name> <init>= <expr><call><name>r_str_home</name> <argument_list>(<argument><expr><name>R2_HOME_PLUGINS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>plugindir</name> <init>= <expr><call><name>r_str_r2_prefix</name> <argument_list>(<argument><expr><name>R2_PLUGINS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>extrasdir</name> <init>= <expr><call><name>r_str_r2_prefix</name> <argument_list>(<argument><expr><name>R2_EXTRAS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bindingsdir</name> <init>= <expr><call><name>r_str_r2_prefix</name> <argument_list>(<argument><expr><name>R2_BINDINGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>r_lib_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_lib_add_handler</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>R_LIB_TYPE_BIN</name></expr></argument>, <argument><expr><literal type="string">"bin plugins"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>__lib_bin_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>__lib_bin_dt</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_lib_add_handler</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>R_LIB_TYPE_BIN_XTR</name></expr></argument>, <argument><expr><literal type="string">"bin xtr plugins"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>__lib_bin_xtr_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>__lib_bin_xtr_dt</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_lib_add_handler</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>R_LIB_TYPE_BIN_LDR</name></expr></argument>, <argument><expr><literal type="string">"bin ldr plugins"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>__lib_bin_ldr_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>__lib_bin_ldr_dt</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>r_sys_getenv</name> <argument_list>(<argument><expr><name>R_LIB_ENV</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>path</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_lib_opendir</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_lib_opendir</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>homeplugindir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_lib_opendir</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>plugindir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_lib_opendir</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>extrasdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_lib_opendir</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>bindingsdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>homeplugindir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>plugindir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>extrasdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bindingsdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"R2_CONFIG"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>config_sdb</name> <init>= <expr><call><name>sdb_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>config_sdb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_unserialize</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name>config_sdb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>config_sdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot open file specified in R2_CONFIG\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"RABIN2_DMNGLRCMD"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.demanglecmd"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"RABIN2_LANG"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.lang"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"RABIN2_DEMANGLE"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.demangle"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"RABIN2_MAXSTRBUF"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.maxstrbuf"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"RABIN2_STRFILTER"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.str.filter"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"RABIN2_STRPURGE"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.str.purge"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"RABIN2_DEBASE64"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.debase64"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"RABIN2_PDBSERVER"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"pdb.server"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_active</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(action &amp; (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_action</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ actions++; action |= (x); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unset_action</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>action &amp;= ~x</cpp:value></cpp:define>

<decl_stmt><decl><type><name>RGetopt</name></type> <name>opt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_getopt_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"DjgAf:F:a:B:G:b:cC:k:K:dD:Mm:n:N:@:isSVIHeEUlRwO:o:pPqQrTtvLhuxXzZ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>r_getopt_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_CLASSES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_IMPORTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_SYMBOLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_SECTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_SEGMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_SECTIONS_MAPPING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_STRINGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_FIELDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_DWARF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_ENTRIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_INITFINI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_MAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_LIBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_RELOCS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_VERSIONINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case> <expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_VERSIONINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case> <expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_SIGNATURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_HASHES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'w'</literal></expr>:</case> <expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_TRYCATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<expr_stmt><expr><name>rad</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>rad</name> <operator>&amp;</operator> <name>R_MODE_SIMPLE</name></expr> ?</condition><then>

<expr><name>R_MODE_SIMPLEST</name></expr> </then><else>: <expr><name>R_MODE_SIMPLE</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> <expr_stmt><expr><name>rad</name> <operator>=</operator> <name>R_MODE_JSON</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> <expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_LISTARCHS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <expr_stmt><expr><name>arch</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>create</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case> <expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case> <expr_stmt><expr><name>query</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'K'</literal></expr>:</case> <expr_stmt><expr><name>chksum</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>is_active</name> <argument_list>(<argument><expr><name>R_BIN_REQ_CLASSES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rad</name> <operator>=</operator> <name>R_MODE_CLASSDUMP</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_CLASSES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><name>arch_name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'F'</literal></expr>:</case> <expr_stmt><expr><name>forcebin</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<expr_stmt><expr><name>at</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_SRCLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_IMPORTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_SYMBOLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>is_active</name> <argument_list>(<argument><expr><name>R_BIN_REQ_SEGMENTS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>action</name> <operator>&amp;=</operator> <operator>~</operator><name>R_BIN_REQ_SEGMENTS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>action</name> <operator>|=</operator> <name>R_BIN_REQ_SECTIONS_MAPPING</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_active</name> <argument_list>(<argument><expr><name>R_BIN_REQ_SECTIONS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>action</name> <operator>&amp;=</operator> <operator>~</operator><name>R_BIN_REQ_SECTIONS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>action</name> <operator>|=</operator> <name>R_BIN_REQ_SEGMENTS</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_SECTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>is_active</name> <argument_list>(<argument><expr><name>R_BIN_REQ_STRINGS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rawstr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rawstr</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rawstr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_STRINGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case> <expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'I'</literal></expr>:</case> <expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'H'</literal></expr>:</case>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_FIELDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> <expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_DWARF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>is_active</name> <argument_list>(<argument><expr><name>R_BIN_REQ_PDB</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_PDB_DWNLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_PDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> \

<operator>(</operator><operator>!</operator><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.lang"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.demangle"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>do_demangle</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>&amp;</operator> <name>R_BIN_REQ_ENTRIES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>action</name> <operator>&amp;=</operator> <operator>~</operator><name>R_BIN_REQ_ENTRIES</name></expr>;</expr_stmt>

<expr_stmt><expr><name>action</name> <operator>|=</operator> <name>R_BIN_REQ_INITFINI</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_ENTRIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'E'</literal></expr>:</case> <expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_EXPORTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'U'</literal></expr>:</case> <expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_RESOURCES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case> <expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_DLOPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case> <expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_MAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_LIBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'R'</literal></expr>:</case> <expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_RELOCS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case> <expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_EXTRACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case> <expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_PACKAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'O'</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_OPERATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>op</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_setenv</name> <argument_list>(<argument><expr><literal type="string">"RABIN2_CODESIGN_VERBOSE"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isBinopHelp</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Usage: iO [expression]:\n"</literal>

<literal type="string">" e/0x8048000 change entrypoint\n"</literal>

<literal type="string">" d/s/1024 dump symbols\n"</literal>

<literal type="string">" d/S/.text dump section\n"</literal>

<literal type="string">" r/.data/1024 resize section\n"</literal>

<literal type="string">" R remove RPATH\n"</literal>

<literal type="string">" a/l/libfoo.dylib add library\n"</literal>

<literal type="string">" p/.data/rwx change section permissions\n"</literal>

<literal type="string">" c show Codesign data\n"</literal>

<literal type="string">" C show LDID entitlements\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>==</operator> <name>argc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Missing filename\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case> <expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case> <expr_stmt><expr><name>va</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name>rad</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_main_version_print</name> <argument_list>(<argument><expr><literal type="string">"rabin2"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><call><name>set_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_LISTPLUGINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'G'</literal></expr>:</case>

<expr_stmt><expr><name>laddr</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>laddr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>va</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<expr_stmt><expr><name>baddr</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'@'</literal></expr>:</case>

<expr_stmt><expr><name>at</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <literal type="number">0LL</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>opt</name><operator>.</operator><name>arg</name></name> <operator>!=</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>at</name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'N'</literal></expr>:</case>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.minstr"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.maxstr"</literal></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rabin_show_help</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><name>action</name> <operator>|=</operator> <name>R_BIN_REQ_HELP</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>is_active</name> <argument_list>(<argument><expr><name>R_BIN_REQ_LISTPLUGINS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>plugin_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>plugin_name</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__listPlugins</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>plugin_name</name></expr></argument>, <argument><expr><name>rad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_demangle</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>argc</name> <operator>-</operator> <name><name>opt</name><operator>.</operator><name>ind</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rabin_show_help</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>r_bin_demangle_type</name> <argument_list>(<argument><expr><name>do_demangle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>stdin_gets</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>file</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__demangleAs</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unknown lang to demangle. Use: cxx, java, objc, swift\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>file</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stdin_gets</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__demangleAs</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>query</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>&amp;</operator> <name>R_BIN_REQ_HELP</name> <operator>||</operator> <name>action</name> <operator>==</operator> <name>R_BIN_REQ_UNK</name> <operator>||</operator> <operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rabin_show_help</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>arch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ptr</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>&amp;</operator> <name>R_BIN_REQ_CREATE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>datalen</name></decl>, <decl><type ref="prev"/><name>codelen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>code</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>create</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid format for -C flag. Use 'format:codehexpair:datahexpair'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p2</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>datalen</name> <operator>=</operator> <call><name>r_hex_str2bin</name> <argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>datalen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>datalen</name> <operator>=</operator> <operator>-</operator><name>datalen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>datalen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>code</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>codelen</name> <operator>=</operator> <call><name>r_hex_str2bin</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinArchOptions</name></type> <name>opts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_bin_arch_options_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>arch</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>r_bin_create</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>create</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>codelen</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>tmpsz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_buf_data</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_file_dump</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmpsz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Dumped %"</literal> <name>PFMT64d</name> <literal type="string">" bytes in '%s'\n"</literal></expr></argument>,

<argument><expr><name>tmpsz</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_file_chmod</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"+x"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error dumping into a.out\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot create binary for this format '%s'.\n"</literal></expr></argument>, <argument><expr><name>create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rawstr</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unset_action</name> <argument_list>(<argument><expr><name>R_BIN_REQ_STRINGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.rawstr"</literal></expr></argument>, <argument><expr><name>rawstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Missing file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>file</name> <operator>&amp;&amp;</operator> <name>action</name> <operator>&amp;</operator> <name>R_BIN_REQ_DLOPEN</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>child</name> <init>= <expr><call><name>r_sys_fork</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>waitpid</name> <argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>r_lib_dl_open</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s is loaded at 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_lib_dl_close</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot open the '%s' library\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>&amp;</operator> <name>R_BIN_REQ_PACKAGE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>files</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>argv</name><index>[<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Usage: rabin2 -X [fat|zip] foo.zip a b c\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"FMT %s\n"</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"PKG %s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>ind</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ADD %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_bin_package</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>bin</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>files</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>r_buf_dump</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>file</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fh</name> <operator>=</operator> <call><name>r_core_file_open</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>R_PERM_R</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>r_io_fd_get_current</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_core: Cannot open file '%s'\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_file_free</name> <argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_core: Cannot open file '%s'\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>minstrlen</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.minstr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>maxstrbuf</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.maxstrbuf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_bin_force_plugin</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>forcebin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_bin_load_filter</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinOptions</name></type> <name>bo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_bin_options_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>, <argument><expr><name>laddr</name></expr></argument>, <argument><expr><name>rawstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bo</name><operator>.</operator><name>xtr_idx</name></name> <operator>=</operator> <name>xtr_idx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_open</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>cur</name></name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>xtr_data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin: Cannot open file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_file_free</name> <argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_core_bin_update_arch_bits</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>baddr</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_bin_set_baddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rawstr</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><call><name>r_bin_cur</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>strmode</name></name> <operator>=</operator> <name>rad</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_bin_dump_strings</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>minstrlen</name></name></expr></argument>, <argument><expr><name><name>bf</name><operator>-&gt;</operator><name>rawstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rad</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_bin_export_info_rad</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>__sdb_prompt</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>sdb_query</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_core_file_free</name> <argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isradjson</name></cpp:macro> <cpp:value>(rad==R_MODE_JSON&amp;&amp;actions&gt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>run_action</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{if (action&amp;(x)) {if (isradjson) r_cons_printf ("%s\"%s\":",actions_done?",":"",n);if (!r_core_bin_info (&amp;core, y, rad, va, &amp;filter, chksum)) {if (isradjson) r_cons_print ("false");};actions_done++;}}</cpp:value></cpp:define>

<expr_stmt><expr><name><name>core</name><operator>.</operator><name>bin</name></name> <operator>=</operator> <name>bin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <name>r_cons_printf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_new</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>is_interactive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>isradjson</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>&amp;</operator> <name>R_BIN_REQ_LISTARCHS</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>arch</name> <operator>||</operator> <name>bits</name> <operator>||</operator> <name>arch_name</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>r_bin_select</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>arch</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>arch_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rad</name> <operator>==</operator> <name>R_MODE_SIMPLEST</name> <operator>||</operator> <name>rad</name> <operator>==</operator> <name>R_MODE_SIMPLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_bin_list_archs</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><literal type="char">'q'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_bin_list_archs</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>rad</name> <operator>==</operator> <name>R_MODE_JSON</name><operator>)</operator></expr>?</condition><then> <expr><literal type="char">'j'</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>actions_done</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>arch_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>&amp;</operator> <name>R_BIN_REQ_PDB_DWNLD</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SPDBOptions</name></type> <name>pdbopts</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pdbopts</name><operator>.</operator><name>user_agent</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"pdb.useragent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdbopts</name><operator>.</operator><name>symbol_server</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"pdb.server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdbopts</name><operator>.</operator><name>extract</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"pdb.extract"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"RABIN2_SYMSTORE"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"pdb.symstore"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pdbopts</name><operator>.</operator><name>symbol_store_path</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"pdb.symstore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_bin_pdb_download</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>, <argument><expr><name>isradjson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actions_done</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pdbopts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_file_free</name> <argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"RABIN2_PREFIX"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_config_set</name> <argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.prefix"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"sections"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_SECTIONS</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_SECTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"segments"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_SEGMENTS</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_SEGMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"entries"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_ENTRIES</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_ENTRIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"initfini"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_INITFINI</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_INITFINI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_MAIN</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_MAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"imports"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_IMPORTS</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_IMPORTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"classes"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_CLASSES</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_CLASSES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"symbols"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_SYMBOLS</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_SYMBOLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"exports"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_EXPORTS</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_EXPORTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"resources"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_RESOURCES</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_RESOURCES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"strings"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_STRINGS</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_STRINGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"info"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_INFO</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"fields"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_FIELDS</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_FIELDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"header"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_HEADER</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"libs"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_LIBS</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_LIBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"relocs"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_RELOCS</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_RELOCS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"dwarf"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_DWARF</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_DWARF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"pdb"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_PDB</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_PDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_SIZE</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"versioninfo"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_VERSIONINFO</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_VERSIONINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"sections"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_SIGNATURE</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_SIGNATURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"hashes"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_HASHES</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_HASHES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_action</name> <argument_list>(<argument><expr><literal type="string">"sections mapping"</literal></expr></argument>, <argument><expr><name>R_BIN_REQ_SECTIONS_MAPPING</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_SECTIONS_MAPPING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>&amp;</operator> <name>R_BIN_REQ_SRCLINE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rabin_show_srcline</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>&amp;</operator> <name>R_BIN_REQ_EXTRACT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><call><name>r_bin_cur</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>xtr_data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rabin_extract</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>(</operator><operator>!</operator><name>arch</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>arch_name</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>bits</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(

<argument><expr><literal type="string">"Cannot extract bins from '%s'. No supported "</literal>

<literal type="string">"plugins found!\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;&amp;</operator> <name>action</name> <operator>&amp;</operator> <name>R_BIN_REQ_OPERATION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rabin_do_operation</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>rad</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>isradjson</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_file_free</name> <argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_lib_free</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
