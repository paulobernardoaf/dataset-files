<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\socket\http_server.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_socket.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <modifier>*</modifier></type><name>breaked</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>void</name></type> <name>r_socket_http_server_set_breaked</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>breaked</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RSocketHTTPRequest</name> <modifier>*</modifier></type><name>r_socket_http_accept</name> <parameter_list>(<parameter><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RSocketHTTPOptions</name> <modifier>*</modifier></type><name>so</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>content_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>xx</name></decl>, <decl><type ref="prev"/><name>yy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pxx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1500</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSocketHTTPRequest</name> <modifier>*</modifier></type><name>hr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSocketHTTPRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>so</name><operator>-&gt;</operator><name>accept_timeout</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hr</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <call><name>r_socket_accept_timeout</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>hr</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <call><name>r_socket_accept</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hr</name><operator>-&gt;</operator><name>s</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>so</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_socket_block_time</name> <argument_list>(<argument><expr><name><name>hr</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>so</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hr</name><operator>-&gt;</operator><name>auth</name></name> <operator>=</operator> <operator>!</operator><name><name>so</name><operator>-&gt;</operator><name>httpauth</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>breaked</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>breaked</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_socket_http_close</name> <argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xx</name> <operator>=</operator> <call><name>r_socket_gets</name> <argument_list>(<argument><expr><name><name>hr</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yy</name> <operator>=</operator> <call><name>r_socket_ready</name> <argument_list>(<argument><expr><name><name>hr</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yy</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>xx</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pxx</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pxx</name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_socket_http_close</name> <argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hr</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">" HTTP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hr</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hr</name><operator>-&gt;</operator><name>referer</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Referer: "</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hr</name><operator>-&gt;</operator><name>referer</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>hr</name><operator>-&gt;</operator><name>agent</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"User-Agent: "</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hr</name><operator>-&gt;</operator><name>agent</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>hr</name><operator>-&gt;</operator><name>host</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Host: "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hr</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Content-Length: "</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>content_length</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>so</name><operator>-&gt;</operator><name>httpauth</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Authorization: Basic "</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>authtoken</name> <init>= <expr><name>buf</name> <operator>+</operator> <literal type="number">21</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>authlen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>authtoken</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>curauthtoken</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>decauthtoken</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>authlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>decauthtoken</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Could not allocate decoding buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_base64_decode</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>decauthtoken</name></expr></argument>, <argument><expr><name>authtoken</name></expr></argument>, <argument><expr><name>authlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Could not decode authorization token\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>so-&gt;authtokens</argument>, <argument>iter</argument>, <argument>curauthtoken</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>decauthtoken</name></expr></argument>, <argument><expr><name>curauthtoken</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hr</name><operator>-&gt;</operator><name>auth</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>decauthtoken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hr</name><operator>-&gt;</operator><name>auth</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed attempt login from '%s'\n"</literal></expr></argument>, <argument><expr><name><name>hr</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>content_length</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_socket_read_block</name> <argument_list>(<argument><expr><name><name>hr</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>hr</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>content_length</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hr</name><operator>-&gt;</operator><name>data_length</name></name> <operator>=</operator> <name>content_length</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_read_block</name> <argument_list>(<argument><expr><name><name>hr</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>hr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>hr</name><operator>-&gt;</operator><name>data_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>content_length</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_socket_http_response</name> <parameter_list>(<parameter><decl><type><name>RSocketHTTPRequest</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>headers</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strcode</name> <init>= \

<expr><ternary><condition><expr><name>code</name><operator>==</operator><literal type="number">200</literal></expr>?</condition><then><expr><literal type="string">"ok"</literal></expr></then><else>:

<expr><ternary><condition><expr><name>code</name><operator>==</operator><literal type="number">301</literal></expr>?</condition><then><expr><literal type="string">"Moved permanently"</literal></expr></then><else>:

<expr><ternary><condition><expr><name>code</name><operator>==</operator><literal type="number">302</literal></expr>?</condition><then><expr><literal type="string">"Found"</literal></expr></then><else>:

<expr><ternary><condition><expr><name>code</name><operator>==</operator><literal type="number">401</literal></expr>?</condition><then><expr><literal type="string">"Unauthorized"</literal></expr></then><else>:

<expr><ternary><condition><expr><name>code</name><operator>==</operator><literal type="number">403</literal></expr>?</condition><then><expr><literal type="string">"Permission denied"</literal></expr></then><else>:

<expr><ternary><condition><expr><name>code</name><operator>==</operator><literal type="number">404</literal></expr>?</condition><then><expr><literal type="string">"not found"</literal></expr></then><else>:

<expr><literal type="string">"UNKNOWN"</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>out</name></expr> ?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>headers</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>headers</name> <operator>=</operator> <ternary><condition><expr><name>code</name> <operator>==</operator> <literal type="number">401</literal></expr> ?</condition><then> <expr><literal type="string">"WWW-Authenticate: Basic realm=\"R2 Web UI Access\"\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_socket_printf</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="string">"HTTP/1.0 %d %s\r\n%s"</literal>

<literal type="string">"Connection: close\r\nContent-Length: %d\r\n\r\n"</literal></expr></argument>,

<argument><expr><name>code</name></expr></argument>, <argument><expr><name>strcode</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_socket_write</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_socket_http_handle_upload</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>retlen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>retlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>retlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"------------------------------"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>datalen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>token</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>str</name><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"Content-Disposition: form-data; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">10</literal> <operator>||</operator> <operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>str</name><operator>+</operator><name>len</name><operator>-</operator><literal type="number">40</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="number">10</literal> <operator>||</operator> <operator>*</operator><name>end</name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>datalen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name><operator>-</operator><name>data</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>datalen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><index>[<expr><name>datalen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>retlen</name> <operator>=</operator> <name>datalen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_socket_http_close</name> <parameter_list>(<parameter><decl><type><name>RSocketHTTPRequest</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_socket_free</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>agent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAIN</name></expr></cpp:if>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RSocket</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_socket_new</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_socket_listen</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"8080"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot listen here\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RSocketHTTPRequest</name> <modifier>*</modifier></type><name>rs</name> <init>= <expr><call><name>r_socket_http_accept</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rs</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>method</name></name></expr></argument>, <argument><expr><literal type="string">"GET"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_socket_http_response</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>,

<argument><expr><literal type="string">"&lt;html&gt;&lt;body&gt;&lt;form method=post action=/&gt;"</literal>

<literal type="string">"&lt;input name=a /&gt;&lt;input type=button&gt;&lt;/form&gt;&lt;/body&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>method</name></name></expr></argument>, <argument><expr><literal type="string">"POST"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>data_length</name></name><operator>+</operator> <literal type="number">50</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&lt;html&gt;&lt;body&gt;&lt;h2&gt;XSS test&lt;/h2&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_unescape</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_socket_http_response</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>method</name></name></expr></argument>, <argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_socket_http_response</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_socket_http_response</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><literal type="number">404</literal></expr></argument>, <argument><expr><literal type="string">"Invalid protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_socket_http_close</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
