<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\esil_trace.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB</name></cpp:macro> <cpp:value>esil-&gt;db_trace</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sdb_fmt ("%d."x, esil-&gt;trace_idx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYAT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sdb_fmt ("%d."x".0x%"PFMT64x, esil-&gt;trace_idx, y)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYREG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sdb_fmt ("%d."x".%s", esil-&gt;trace_idx, y)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ocbs_set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RAnalEsilCallbacks</name></type> <name>ocbs</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>trace_hook_reg_read</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ocbs</name><operator>.</operator><name>hook_reg_read</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalEsilCallbacks</name></type> <name>cbs</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>ocbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ocbs</name><operator>.</operator><name>hook_reg_read</name></name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cbs</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>reg_read</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>reg_read</name></name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>val</name> <init>= <expr><operator>*</operator><name>res</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_array_add</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>KEY</name> <argument_list>(<argument><expr><literal type="string">"reg.read"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>KEYREG</name> <argument_list>(<argument><expr><literal type="string">"reg.read"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>trace_hook_reg_write</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_array_add</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>KEY</name> <argument_list>(<argument><expr><literal type="string">"reg.write"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>KEYREG</name> <argument_list>(<argument><expr><literal type="string">"reg.write"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ocbs</name><operator>.</operator><name>hook_reg_write</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalEsilCallbacks</name></type> <name>cbs</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>ocbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ocbs</name><operator>.</operator><name>hook_reg_write</name></name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cbs</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>trace_hook_mem_read</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hexbuf</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>len</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>mem_read</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>mem_read</name></name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_array_add_num</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>KEY</name> <argument_list>(<argument><expr><literal type="string">"mem.read"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_hex_bin2str</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>hexbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>KEYAT</name> <argument_list>(<argument><expr><literal type="string">"mem.read.data"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hexbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hexbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ocbs</name><operator>.</operator><name>hook_mem_read</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalEsilCallbacks</name></type> <name>cbs</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>ocbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ocbs</name><operator>.</operator><name>hook_mem_read</name></name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cbs</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>trace_hook_mem_write</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hexbuf</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal><operator>+</operator><name>len</name><operator>)</operator><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_array_add_num</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>KEY</name> <argument_list>(<argument><expr><literal type="string">"mem.write"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_hex_bin2str</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>hexbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>KEYAT</name> <argument_list>(<argument><expr><literal type="string">"mem.write.data"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hexbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hexbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ocbs</name><operator>.</operator><name>hook_mem_write</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalEsilCallbacks</name></type> <name>cbs</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>ocbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ocbs</name><operator>.</operator><name>hook_mem_write</name></name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cbs</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_esil_trace</name> <parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>esil</name> <operator>||</operator> <operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>R_STR_ISEMPTY</name> <argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>esil_verbose</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>verbose</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ocbs_set</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"cannot call recursively\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ocbs</name> <operator>=</operator> <name><name>esil</name><operator>-&gt;</operator><name>cb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ocbs_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>DB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>DB</name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><literal type="string">"idx"</literal></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>trace_idx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>KEY</name> <argument_list>(<argument><expr><literal type="string">"addr"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_reg_read</name></name> <operator>=</operator> <name>trace_hook_reg_read</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_reg_write</name></name> <operator>=</operator> <name>trace_hook_reg_write</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_mem_read</name></name> <operator>=</operator> <name>trace_hook_mem_read</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_mem_write</name></name> <operator>=</operator> <name>trace_hook_mem_write</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_parse</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_stack_free</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>ocbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ocbs_set</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <name>esil_verbose</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>trace_idx</name></name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_strings_by_leading_number</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data2</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>a</name> <init>= <expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SdbKv</name> <operator>*</operator><operator>)</operator><name>data1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>b</name> <init>= <expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SdbKv</name> <operator>*</operator><operator>)</operator><name>data2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>j</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>j</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>k</name> <operator>&lt;=</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for <control>(<init>;</init> <condition><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_esil_trace_list</name> <parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>PrintfCallback</name></type> <name>p</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>sdb_foreach_list</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>db_trace</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ls_sort</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>(</operator><name>SdbListComparator</name><operator>)</operator> <name>cmp_strings_by_leading_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"%s=%s\n"</literal></expr></argument>, <argument><expr><call><name>sdbkv_key</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sdbkv_value</name> <argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_esil_trace_show</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>PrintfCallback</name></type> <name>p</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>trace_idx</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>trace_idx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>trace_idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>str2</name> <operator>=</operator> <call><name>sdb_const_get</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>KEY</name> <argument_list>(<argument><expr><literal type="string">"addr"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str2</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"ar PC = %s\n"</literal></expr></argument>, <argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>sdb_const_get</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>KEY</name> <argument_list>(<argument><expr><literal type="string">"reg.read"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>regname</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>sdb_const_anext</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><name>next</name></expr>?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>next</name><operator>-</operator><name>ptr</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str2</name> <operator>=</operator> <call><name>sdb_const_get</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>KEYREG</name> <argument_list>(<argument><expr><literal type="string">"reg.read"</literal></expr></argument>, <argument><expr><name>regname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"ar %s = %s\n"</literal></expr></argument>, <argument><expr><name>regname</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid entry in reg.read\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>next</name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>sdb_const_get</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>KEY</name> <argument_list>(<argument><expr><literal type="string">"mem.read"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>addr</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>sdb_const_anext</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><name>next</name></expr>?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>next</name><operator>-</operator><name>ptr</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>addr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str2</name> <operator>=</operator> <call><name>sdb_const_get</name> <argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><call><name>KEYAT</name> <argument_list>(<argument><expr><literal type="string">"mem.read.data"</literal></expr></argument>,

<argument><expr><call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"wx %s @ %s\n"</literal></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid entry in reg.read\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>next</name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>trace_idx</name></name> <operator>=</operator> <name>trace_idx</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
