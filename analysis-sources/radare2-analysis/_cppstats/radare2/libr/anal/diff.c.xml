<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\diff.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_diff.h&gt;</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>RAnalDiff</name> <modifier>*</modifier></type><name>r_anal_diff_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalDiff</name> <modifier>*</modifier></type><name>diff</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalDiff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_DIFF_TYPE_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diff</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diff</name><operator>-&gt;</operator><name>dist</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diff</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diff</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>diff</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name><modifier>*</modifier></type> <name>r_anal_diff_free</name><parameter_list>(<parameter><decl><type><name>RAnalDiff</name> <modifier>*</modifier></type><name>diff</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&amp;&amp;</operator> <name><name>diff</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>diff</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_diff_setup</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doops</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>thbb</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>thfcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>doops</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>diff_ops</name></name> <operator>=</operator> <name>doops</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>diff_thbb</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>thbb</name><operator>&gt;=</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><name>thbb</name></expr></then><else>: <expr><name>R_ANAL_THRESHOLDBB</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>diff_thfcn</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>thfcn</name><operator>&gt;=</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><name>thfcn</name></expr></then><else>: <expr><name>R_ANAL_THRESHOLDFCN</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_diff_setup_i</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doops</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thbb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thfcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>doops</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>diff_ops</name></name> <operator>=</operator> <name>doops</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>diff_thbb</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>thbb</name><operator>&gt;=</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>thbb</name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr></then><else>: <expr><name>R_ANAL_THRESHOLDBB</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>diff_thfcn</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>thfcn</name><operator>&gt;=</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>thfcn</name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr></then><else>: <expr><name>R_ANAL_THRESHOLDFCN</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_diff_fingerprint_bb</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>oplen</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anal</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>fingerprint_bb</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><call><name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>fingerprint_bb</name></name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bb</name><operator>-&gt;</operator><name>fingerprint</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>bb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>diff_ops</name></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>op</name> <operator>=</operator> <call><name>r_anal_op_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>bb</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oplen</name> <operator>=</operator> <call><name>r_anal_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><name>idx</name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>size</name></name><operator>-</operator><name>idx</name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_BASIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>nopcode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>fingerprint</name></name><operator>+</operator><name>idx</name><operator>+</operator><name><name>op</name><operator>-&gt;</operator><name>nopcode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>oplen</name><operator>-</operator><name><name>op</name><operator>-&gt;</operator><name>nopcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>oplen</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>bb</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>size_t</name></type> <name>r_anal_diff_fingerprint_fcn</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>anal</name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>fingerprint_fcn</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><call><name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>fingerprint_fcn</name></name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>fingerprint</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>fingerprint_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn-&gt;bbs</argument>, <argument>iter</argument>, <argument>bb</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>fingerprint_size</name></name> <operator>+=</operator> <name><name>bb</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>fingerprint</name></name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>fingerprint_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fcn</name><operator>-&gt;</operator><name>fingerprint</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>fingerprint</name></name> <operator>+</operator> <name><name>fcn</name><operator>-&gt;</operator><name>fingerprint_size</name></name> <operator>-</operator> <name><name>bb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name><name>fcn</name><operator>-&gt;</operator><name>fingerprint_size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_diff_bb</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn2</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bb2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mbb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mbb2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>ot</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anal</name> <operator>||</operator> <operator>!</operator><name>fcn</name> <operator>||</operator> <operator>!</operator><name>fcn2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>diff_bb</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><call><name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>diff_bb</name></name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>fcn2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>fcn2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_DIFF_TYPE_MATCH</name></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn-&gt;bbs</argument>, <argument>iter</argument>, <argument>bb</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bb</name><operator>-&gt;</operator><name>diff</name></name> <operator>&amp;&amp;</operator> <name><name>bb</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>R_ANAL_DIFF_TYPE_NULL</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mbb</name> <operator>=</operator> <name>mbb2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn2-&gt;bbs</argument>, <argument>iter2</argument>, <argument>bb2</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bb2</name><operator>-&gt;</operator><name>diff</name></name> <operator>||</operator> <name><name>bb2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_DIFF_TYPE_NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_diff_buffers_distance</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><name><name>bb2</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>, <argument><expr><name><name>bb2</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <name><name>anal</name><operator>-&gt;</operator><name>diff_thbb</name></name> <operator>&amp;&amp;</operator> <name>t</name> <operator>&gt;</operator> <name>ot</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ot</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mbb</name> <operator>=</operator> <name>bb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mbb2</name> <operator>=</operator> <name>bb2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>mbb</name> <operator>&amp;&amp;</operator> <name>mbb2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mbb</name><operator>-&gt;</operator><name>diff</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mbb</name><operator>-&gt;</operator><name>diff</name></name> <operator>=</operator> <call><name>r_anal_diff_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mbb2</name><operator>-&gt;</operator><name>diff</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mbb2</name><operator>-&gt;</operator><name>diff</name></name> <operator>=</operator> <call><name>r_anal_diff_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mbb</name><operator>-&gt;</operator><name>diff</name></name> <operator>||</operator> <operator>!</operator><name><name>mbb2</name><operator>-&gt;</operator><name>diff</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ot</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>t</name> <operator>&gt;</operator> <name><name>anal</name><operator>-&gt;</operator><name>diff_thfcn</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mbb</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>mbb2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_DIFF_TYPE_MATCH</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mbb</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>mbb2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> \

<name><name>fcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>fcn2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> \

<name>R_ANAL_DIFF_TYPE_UNMATCH</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>mbb</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>mbb2</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mbb</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>mbb2</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mbb2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>mbb</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mbb</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>mbb2</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mbb2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>mbb</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>fcn2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>fcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>dist</name></name> <operator>&gt;=</operator> <literal type="number">0.6</literal><operator>)</operator></expr>

?</condition><then> <expr><name>R_ANAL_DIFF_TYPE_MATCH</name></expr>

</then><else>: <expr><name>R_ANAL_DIFF_TYPE_UNMATCH</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_diff_fcn</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>fcns</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>fcns2</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fcn2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mfcn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mfcn2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>maxsize</name></decl>, <decl><type ref="prev"/><name>minsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>ot</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anal</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>diff_fcn</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><call><name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>diff_fcn</name></name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>fcns</name></expr></argument>, <argument><expr><name>fcns2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fcns</name></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcns</argument>, <argument>iter</argument>, <argument>fcn</argument>)</argument_list></macro> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcns2</argument>, <argument>iter2</argument>, <argument>fcn2</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name><name>fcn2</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>fcn2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_diff_buffers_distance</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>fingerprint_size</name></name></expr></argument>,

<argument><expr><name><name>fcn2</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>, <argument><expr><name><name>fcn2</name><operator>-&gt;</operator><name>fingerprint_size</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>fcn2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>t</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr>

?</condition><then> <expr><name>R_ANAL_DIFF_TYPE_MATCH</name></expr>

</then><else>: <expr><name>R_ANAL_DIFF_TYPE_UNMATCH</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>dist</name></name> <operator>=</operator> <name><name>fcn2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>dist</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>fcn2</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>fcn2</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>fcn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fcn2</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>fcn2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>fcn2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fcn2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_diff_bb</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>fcn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcns</argument>, <argument>iter</argument>, <argument>fcn</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>R_ANAL_DIFF_TYPE_NULL</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mfcn</name> <operator>=</operator> <name>mfcn2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcns2</argument>, <argument>iter2</argument>, <argument>fcn2</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>fcn_size</name> <init>= <expr><call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>fcn2_size</name> <init>= <expr><call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>fcn2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fcn_size</name> <operator>&gt;</operator> <name>fcn2_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxsize</name> <operator>=</operator> <name>fcn_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>minsize</name> <operator>=</operator> <name>fcn2_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>maxsize</name> <operator>=</operator> <name>fcn2_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>minsize</name> <operator>=</operator> <name>fcn_size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>maxsize</name> <operator>*</operator> <name><name>anal</name><operator>-&gt;</operator><name>diff_thfcn</name></name> <operator>&gt;</operator> <name>minsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Exceeded anal threshold while diffing %s and %s\n"</literal></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>fcn2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fcn2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>R_ANAL_DIFF_TYPE_NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Function %s already diffed\n"</literal></expr></argument>, <argument><expr><name><name>fcn2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fcn2</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>R_ANAL_FCN_TYPE_FCN</name> <operator>&amp;&amp;</operator> <name><name>fcn2</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>R_ANAL_FCN_TYPE_SYM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Function %s type not supported\n"</literal></expr></argument>, <argument><expr><name><name>fcn2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_diff_buffers_distance</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>fingerprint_size</name></name></expr></argument>, <argument><expr><name><name>fcn2</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>, <argument><expr><name><name>fcn2</name><operator>-&gt;</operator><name>fingerprint_size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>dist</name></name> <operator>=</operator> <name><name>fcn2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>dist</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <name><name>anal</name><operator>-&gt;</operator><name>diff_thfcn</name></name> <operator>&amp;&amp;</operator> <name>t</name> <operator>&gt;</operator> <name>ot</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ot</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mfcn</name> <operator>=</operator> <name>fcn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mfcn2</name> <operator>=</operator> <name>fcn2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>mfcn</name> <operator>&amp;&amp;</operator> <name>mfcn2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mfcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>mfcn2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ot</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>

?</condition><then> <expr><name>R_ANAL_DIFF_TYPE_MATCH</name></expr>

</then><else>: <expr><name>R_ANAL_DIFF_TYPE_UNMATCH</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>mfcn</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>mfcn2</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>mfcn2</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfcn2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>mfcn</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>mfcn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfcn2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>mfcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>mfcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mfcn2</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mfcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>mfcn2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>mfcn2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mfcn</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mfcn2</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>mfcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_diff_bb</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>mfcn</name></expr></argument>, <argument><expr><name>mfcn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_diff_eval</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>anal</name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>diff_eval</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><call><name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>diff_eval</name></name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return> 

</block_content>}</block></function>

</unit>
