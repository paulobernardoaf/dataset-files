<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\value.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>RAnalValue</name> <modifier>*</modifier></type><name>r_anal_value_new</name><parameter_list>()</parameter_list> <block>{<block_content> 

<return>return <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalValue</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalValue</name> <modifier>*</modifier></type><name>r_anal_value_new_from_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalValue</name> <modifier>*</modifier></type><name>r_anal_value_copy</name><parameter_list>(<parameter><decl><type><name>RAnalValue</name> <modifier>*</modifier></type><name>ov</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalValue</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>ov</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_value_free</name><parameter_list>(<parameter><decl><type><name>RAnalValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

ut64 pval = (ut64)(size_t)value;

if (pval &amp;&amp; pval != UT64_MAX) {

free (value);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_anal_value_to_ut64</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>base</name></name> <operator>+</operator> <operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>delta</name></name><operator>*</operator><operator>(</operator><ternary><condition><expr><name><name>val</name><operator>-&gt;</operator><name>mul</name></name></expr>?</condition><then><expr><name><name>val</name><operator>-&gt;</operator><name>mul</name></name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>reg</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>+=</operator> <call><name>r_reg_get_value</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>regdelta</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>+=</operator> <call><name>r_reg_get_value</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>regdelta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>memref</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"TODO: memref for to_ut64 not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>num</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_value_set_ut64</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>memref</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>r_anal_value_to_ut64</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_mem_set_num</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>memref</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>write_at</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>memref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No IO binded to r_anal\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>reg</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>false</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_anal_value_to_string</name> <parameter_list>(<parameter><decl><type><name>RAnalValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>value</name><operator>-&gt;</operator><name>base</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>value</name><operator>-&gt;</operator><name>reg</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>imm</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1LL</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>memref</name></name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>memref</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"(char)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"(short)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"(word)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"(dword)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>mul</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%d*"</literal></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>mul</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>reg</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>reg</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>regdelta</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"+%s"</literal></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>regdelta</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>base</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>delta</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"+0x%"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>delta</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"-0x%"</literal> <name>PFMT64x</name></expr></argument>, <argument><expr><operator>-</operator><name><name>value</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>memref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

</unit>
