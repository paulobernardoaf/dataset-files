<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\p\anal_hexagon.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hexagon.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hexagon_insn.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hexagon_anal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hexagon_v6_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>HexInsn</name></type> <name>hi</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>hexagon_disasm_instruction</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hi</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator> <name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>hexagon_anal_instruction</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>hi</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>=

<expr><literal type="string">"=PC pc\n"</literal>

<literal type="string">"=SP r29\n"</literal>

<literal type="string">"=BP r30\n"</literal>

<literal type="string">"=LR r31\n"</literal>

<literal type="string">"=SN r6\n"</literal>

<literal type="string">"=ZF z\n"</literal>

<literal type="string">"=SF s\n"</literal>

<literal type="string">"=OF ov\n"</literal>

<literal type="string">"=CF cy\n"</literal>

<literal type="string">"gpr r0 .32 0 0\n"</literal>

<literal type="string">"gpr r1 .32 4 0\n"</literal>

<literal type="string">"gpr r2 .32 8 0\n"</literal>

<literal type="string">"gpr r3 .32 12 0\n"</literal>

<literal type="string">"gpr r4 .32 16 0\n"</literal>

<literal type="string">"gpr r5 .32 20 0\n"</literal>

<literal type="string">"gpr r6 .32 24 0\n"</literal>

<literal type="string">"gpr r7 .32 28 0\n"</literal>

<literal type="string">"gpr r8 .32 32 0\n"</literal>

<literal type="string">"gpr r9 .32 36 0\n"</literal>

<literal type="string">"gpr r10 .32 40 0\n"</literal>

<literal type="string">"gpr r11 .32 44 0\n"</literal>

<literal type="string">"gpr r12 .32 48 0\n"</literal>

<literal type="string">"gpr r13 .32 52 0\n"</literal>

<literal type="string">"gpr r14 .32 56 0\n"</literal>

<literal type="string">"gpr r15 .32 60 0\n"</literal>

<literal type="string">"gpr r16 .32 64 0\n"</literal>

<literal type="string">"gpr r17 .32 68 0\n"</literal>

<literal type="string">"gpr r18 .32 72 0\n"</literal>

<literal type="string">"gpr r19 .32 76 0\n"</literal>

<literal type="string">"gpr r20 .32 80 0\n"</literal>

<literal type="string">"gpr r21 .32 84 0\n"</literal>

<literal type="string">"gpr r22 .32 88 0\n"</literal>

<literal type="string">"gpr r23 .32 92 0\n"</literal>

<literal type="string">"gpr r24 .32 96 0\n"</literal>

<literal type="string">"gpr r25 .32 100 0\n"</literal>

<literal type="string">"gpr r26 .32 104 0\n"</literal>

<literal type="string">"gpr r27 .32 108 0\n"</literal>

<literal type="string">"gpr r28 .32 112 0\n"</literal>

<literal type="string">"gpr r29 .32 116 0\n"</literal>

<literal type="string">"gpr r30 .32 120 0\n"</literal>

<literal type="string">"gpr r31 .32 124 0\n"</literal>

<literal type="string">"gpr pc .32 128 0\n"</literal>

<literal type="string">"gpr psw .32 132 0\n"</literal>

<literal type="string">"gpr np .1 132.16 0\n"</literal>

<literal type="string">"gpr ep .1 132.17 0\n"</literal>

<literal type="string">"gpr ae .1 132.18 0\n"</literal>

<literal type="string">"gpr id .1 132.19 0\n"</literal>

<literal type="string">"flg cy .1 132.28 0\n"</literal>

<literal type="string">"flg ov .1 132.29 0\n"</literal>

<literal type="string">"flg s .1 132.30 0\n"</literal>

<literal type="string">"flg z .1 132.31 0\n"</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_hexagon</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hexagon"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Qualcomm Hexagon (QDSP6) V6"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"hexagon"</literal></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,

<expr><operator>.</operator><name>op</name> <operator>=</operator> <name>hexagon_v6_op</name></expr>,

<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>set_reg_profile</name> <operator>=</operator> <name>set_reg_profile</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_hexagon_v6</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
