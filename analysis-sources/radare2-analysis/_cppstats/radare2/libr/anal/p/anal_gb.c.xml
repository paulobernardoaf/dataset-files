<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\p\anal_gb.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_reg.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_DIS_LEN_ONLY</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../asm/arch/gb/gbdis.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../arch/gb/gb_makros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../arch/gb/meta_gb_cmt.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gb_makros.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gb.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>regs_1</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"Z"</literal></expr>, <expr><literal type="string">"N"</literal></expr>, <expr><literal type="string">"H"</literal></expr>, <expr><literal type="string">"C"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>regs_8</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"l"</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"a"</literal></expr>}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>regs_x</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"l"</literal></expr>, <expr><literal type="string">"hl"</literal></expr>, <expr><literal type="string">"a"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>regs_16</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"bc"</literal></expr>, <expr><literal type="string">"de"</literal></expr>, <expr><literal type="string">"hl"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>regs_16_alt</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"bc"</literal></expr>, <expr><literal type="string">"de"</literal></expr>, <expr><literal type="string">"hl"</literal></expr>, <expr><literal type="string">"af"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>gb_op_calljump</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GB_IS_RAM_DST</name> <argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>GB_SOFTCAST</name> <argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_meta_set_string</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_META_TYPE_COMMENT</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="string">"--&gt; unpredictable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_IS_VBANK_DST</name> <argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>GB_SOFTCAST</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>GB_IB_DST</name> <argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static inline int gb_anal_esil_banksw (RAnalOp *op) 

{

ut64 base = op-&gt;dst-&gt;base;

if (op-&gt;addr &lt; 0x4000 &amp;&amp; 0x1fff &lt; base &amp;&amp; base &lt; 0x4000) {

r_strbuf_set (&amp;op-&gt;esil, "mbcrom=0,?a%0x20,mbcrom=a-1"); 

return true;

}

if (base &lt; 0x6000 &amp;&amp; 0x3fff &lt; base) {

r_strbuf_set (&amp;op-&gt;esil, "mbcram=a");

return true;

}

return false;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gb_anal_esil_call</name> <parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"2,sp,-=,pc,sp,=[2],%"</literal><name>PFMT64d</name><literal type="string">",pc,:="</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_esil_ccall</name> <parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>cond</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0xc4</literal></expr>:</case>

<case>case <expr><literal type="number">0xcc</literal></expr>:</case>

<expr_stmt><expr><name>cond</name> <operator>=</operator> <literal type="char">'Z'</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>cond</name> <operator>=</operator> <literal type="char">'C'</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>==</operator> <name>R_ANAL_COND_EQ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%c,?{,2,sp,-=,pc,sp,=[2],%"</literal><name>PFMT64d</name><literal type="string">",pc,:=,}"</literal></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%c,!,?{,2,sp,-=,pc,sp,=[2],%"</literal> <name>PFMT64d</name> <literal type="string">",pc,:=,}"</literal></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_esil_ret</name> <parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"sp,[2],pc,:=,2,sp,+="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_esil_cret</name> <parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>cond</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xd0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xd0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cond</name> <operator>=</operator> <literal type="char">'C'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cond</name> <operator>=</operator> <literal type="char">'Z'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>==</operator> <name>R_ANAL_COND_EQ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%c,?{,sp,[2],pc,:=,2,sp,+=,}"</literal></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%c,!,?{,sp,[2],pc,:=,2,sp,+=,}"</literal></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_esil_cjmp</name> <parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>cond</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x20</literal></expr>:</case>

<case>case <expr><literal type="number">0x28</literal></expr>:</case>

<case>case <expr><literal type="number">0xc2</literal></expr>:</case>

<case>case <expr><literal type="number">0xca</literal></expr>:</case>

<expr_stmt><expr><name>cond</name> <operator>=</operator> <literal type="char">'Z'</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>cond</name> <operator>=</operator> <literal type="char">'C'</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>==</operator> <name>R_ANAL_COND_EQ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%c,?{,0x%"</literal><name>PFMT64x</name><literal type="string">",pc,:=,}"</literal></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%c,!,?{,0x%"</literal><name>PFMT64x</name><literal type="string">",pc,:=,}"</literal></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_esil_jmp</name> <parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">",pc,:="</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_jmp_hl</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"pc"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"hl"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"hl,pc,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_id</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>absolute</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="number">0x34</literal> <operator>||</operator> <name>data</name> <operator>==</operator> <literal type="number">0x35</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"hl"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,hl,[1],+,hl,=[1],3,$c,H,:=,$z,Z,:=,0,N,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,hl,[1],-,hl,=[1],4,$b,H,:=,$z,Z,:=,1,N,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>regs_16</name><index>[<expr><name>data</name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,+="</literal></expr></argument>, <argument><expr><name><name>regs_16</name><index>[<expr><name>data</name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,-="</literal></expr></argument>, <argument><expr><name><name>regs_16</name><index>[<expr><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>regs_8</name><index>[<expr><name>data</name><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,+=,3,$c,H,:=,$z,Z,:=,0,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_8</name><index>[<expr><name>data</name><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,-=,4,$b,H,:=,$z,Z,:=,1,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_8</name><index>[<expr><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_add_hl</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"hl"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_16</name><index>[<expr><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,hl,+=,0,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_16</name><index>[<expr><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_add_sp</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"sp"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <operator>(</operator><name>st8</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,sp,+="</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,sp,-="</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>-</operator> <operator>(</operator><name>st8</name><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",0,Z,=,0,N,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gb_anal_mov_imm</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_16</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <call><name>GB_SOFTCAST</name> <argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%04x,%s,="</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name></expr></argument>, <argument><expr><name><name>regs_16</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_8</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,%s,="</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name></expr></argument>, <argument><expr><name><name>regs_8</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>absolute</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_mov_sp_hl</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"sp"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"hl"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"hl,sp,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_mov_hl_sp</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_16</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <operator>(</operator><name>st8</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,sp,+,hl,="</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,sp,-,hl,="</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>-</operator> <operator>(</operator><name>st8</name><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",0,Z,=,0,N,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gb_anal_mov_reg</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_8</name><index>[<expr><operator>(</operator><name>data</name><operator>/</operator><literal type="number">8</literal><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_8</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,="</literal></expr></argument>, <argument><expr><name><name>regs_8</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_8</name><index>[<expr><operator>(</operator><name>data</name><operator>/</operator><literal type="number">8</literal><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_mov_ime</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"ime"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>absolute</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>!=</operator> <literal type="number">0xf3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,ime,="</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="number">0xd9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_mov_scf</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,C,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_xor_cpl</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_8</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xff,a,^=,1,N,:=,1,H,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_xor_ccf</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"C,!="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_cond</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_EQ</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_NE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x20</literal></expr>:</case>

<case>case <expr><literal type="number">0x28</literal></expr>:</case>

<case>case <expr><literal type="number">0xc0</literal></expr>:</case>

<case>case <expr><literal type="number">0xc2</literal></expr>:</case>

<case>case <expr><literal type="number">0xc4</literal></expr>:</case>

<case>case <expr><literal type="number">0xc8</literal></expr>:</case>

<case>case <expr><literal type="number">0xca</literal></expr>:</case>

<case>case <expr><literal type="number">0xcc</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_pp</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>RAnalValue</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_16_alt</name><index>[<expr><operator>(</operator><name>data</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"sp,[2],%s,=,2,sp,+="</literal></expr></argument>, <argument><expr><name><name>regs_16_alt</name><index>[<expr><operator>(</operator><name>data</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"2,sp,-=,%s,sp,=[2]"</literal></expr></argument>, <argument><expr><name><name>regs_16_alt</name><index>[<expr><operator>(</operator><name>data</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_and_res</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>~</operator><operator>(</operator><literal type="number">0x1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,%s,[1],&amp;,%s,=[1]"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,%s,&amp;="</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_and_bit</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><operator>(</operator><name>data</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%i,%s,[1],&amp;,0,==,$z,Z,:=,0,N,:=,1,H,:="</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%i,%s,&amp;,0,==,$z,Z,:=,0,N,:=,1,H,:="</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_or_set</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <operator>(</operator><name>data</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,%s,[1],|,%s,=[1]"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,%s,|="</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gb_anal_xoaasc</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>memref</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_OP_TYPE_XOR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>memref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],a,^=,$z,Z,:=,0,N,:=,0,H,:=,0,C,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,a,^=,$z,Z,:=,0,N,:=,0,H,:=,0,C,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_OR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>memref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],a,|=,$z,Z,:=,0,N,:=,0,H,:=,0,C,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,a,|=,$z,Z,:=,0,N,:=,0,H,:=,0,C,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_AND</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>memref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],a,&amp;=,$z,Z,:=,0,N,:=,1,H,:=,0,C,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,a,&amp;=,$z,Z,:=,0,N,:=,1,H,:=,0,C,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>memref</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x87</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>( <argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"C,%s,[1],+,a,+=,$z,Z,:=,3,$c,H,:=,7,$c,C,:=,0,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],a,+=,$z,Z,:=,3,$c,H,:=,7,$c,C,:=,0,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x87</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"C,%s,+,a,+=,$z,Z,:=,3,$c,H,:=,7,$c,C,:=,0,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,a,+=,$z,Z,:=,3,$c,H,:=,7,$c,C,:=,0,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>memref</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x97</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"C,%s,[1],+,a,-=,$z,Z,:=,4,$b,H,:=,8,$b,C,:=,1,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],a,-=,$z,Z,:=,4,$b,H,:=,8,$b,C,:=,1,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x97</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"C,%s,+,a,-=,$z,Z,:=,4,$b,H,:=,8,$b,C,:=,1,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,a,-=,$z,Z,:=,4,$b,H,:=,8,$b,C,:=,1,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>memref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],a,==,$z,Z,:=,4,$b,H,:=,8,$b,C,:=,1,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,a,==,$z,Z,:=,4,$b,H,:=,8,$b,C,:=,1,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gb_anal_xoaasc_imm</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>absolute</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_OP_TYPE_XOR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,a,^=,$z,Z,:=,0,N,:=,0,H,:=,0,C,:="</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_OR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,a,|=,$z,Z,:=,0,N,:=,0,H,:=,0,C,:="</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_AND</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,a,&amp;=,$z,Z,:=,0,N,:=,1,H,:=,0,C,:="</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,"</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xce</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"a,+=,C,NUM,7,$c,C,:=,3,$c,H,:=,a,+=,7,$c,C,|,C,:=,3,$c,H,|=,a,a,=,$z,Z,:=,0,N,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"a,+=,3,$c,H,:=,7,$c,C,:=,0,N,:=,a,a,=,$z,Z,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,"</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xde</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"a,-=,C,NUM,8,$b,C,:=,4,$b,H,:=,a,-=,8,$b,C,|,C,=,4,$b,H,|,H,=,a,a,=,$z,Z,:=,1,N,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"a,-=,4,$b,H,:=,8,$b,C,:=,1,N,:=,a,a,=,$z,Z,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,a,==,$z,Z,:=,4,$b,H,:=,8,$b,C,:=,1,N,:="</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_load_hl</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"hl"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>memref</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>absolute</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_8</name><index>[<expr><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x38</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"hl,[1],%s,="</literal></expr></argument>, <argument><expr><name><name>regs_8</name><index>[<expr><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x38</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="number">0x3a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",1,hl,-="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="number">0x2a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"hl,[1],a,=,1,hl,+="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_load</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>memref</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0xf0</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>base</name> <operator>=</operator> <literal type="number">0xff00</literal> <operator>+</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%04x,[1],a,="</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xf2</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>base</name> <operator>=</operator> <literal type="number">0xff00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>regdelta</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xff00,c,+,[1],a,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xfa</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>base</name> <operator>=</operator> <call><name>GB_SOFTCAST</name> <argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>base</name> <operator>&lt;</operator> <literal type="number">0x4000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>base</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;</operator> <literal type="number">0x3fff</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>base</name> <operator>&lt;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>base</name> <operator>+</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;</operator> <literal type="number">0xffffffffffff0000LL</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%04x,[1],a,="</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_16</name><index>[<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],a,="</literal></expr></argument>, <argument><expr><name><name>regs_16</name><index>[<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_store_hl</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"hl"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>absolute</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x36</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,hl,=[1]"</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_8</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,hl,=[1]"</literal></expr></argument>, <argument><expr><name><name>regs_8</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"a,hl,=[1],1,hl,-="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x22</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"a,hl,=[1],1,hl,+="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gb_anal_store</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x08</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <call><name>GB_SOFTCAST</name> <argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"sp"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"sp,0x%04x,=[2]"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xe0</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <literal type="number">0xff00</literal> <operator>+</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"a,0x%04x,=[1]"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xe2</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <literal type="number">0xff00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>regdelta</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"a,0xff00,c,+,=[1]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xea</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <call><name>GB_SOFTCAST</name> <argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"a,0x%04x,=[1]"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_16</name><index>[<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument> , <argument><expr><literal type="string">"a,%s,=[1]"</literal></expr></argument>, <argument><expr><name><name>regs_16</name><index>[<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_cb_swap</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"4,%s,[1],&gt;&gt;,4,%s,[1],&lt;&lt;,|,%s,=[1],$z,Z,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"4,%s,&gt;&gt;,4,%s,&lt;&lt;,|,%s,=,$z,Z,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_cb_rlc</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"7,%s,[1],&gt;&gt;,1,&amp;,C,:=,1,%s,[1],&lt;&lt;,C,|,%s,=[1],$z,Z,:=,0,H,:=,0,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,&lt;&lt;=,7,$c,C,:=,C,%s,|=,$z,Z,:=,0,H,:=,0,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_cb_rl</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,&lt;&lt;,C,|,%s,=[1],7,$c,C,:=,$z,Z,:=,0,H,:=,0,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,&lt;&lt;,C,|,%s,=,7,$c,C,:=,$z,Z,:=,0,H,:=,0,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_cb_rrc</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>data</name> <operator>&amp;</operator><literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,[1],&amp;,C,:=,1,%s,[1],&gt;&gt;,7,C,&lt;&lt;,|,%s,=[1],$z,Z,:=,0,H,:=,0,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,&amp;,C,:=,1,%s,&gt;&gt;,7,C,&lt;&lt;,|,%s,=,$z,Z,:=,0,H,:=,0,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_cb_rr</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,[1],&amp;,H,:=,1,%s,[1],&gt;&gt;,7,C,&lt;&lt;,|,%s,=[1],H,C,:=,0,H,:=,0,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,&amp;,H,:=,1,%s,&gt;&gt;,7,C,&lt;&lt;,|,%s,=,H,C,:=,0,H,:=,0,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_cb_sla</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,[1],&lt;&lt;,%s,=[1],7,$c,C,:=,%s,[1],%s,=[1],$z,Z,:=,0,H,:=,0,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,&lt;&lt;=,7,$c,C,:=,%s,%s,=,$z,Z,:=,0,H,:=0,N,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_cb_sra</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,[1],&amp;,C,:=,0x80,%s,[1],&amp;,1,%s,[1],&gt;&gt;,|,%s,=[1],$z,Z,:=,0,N,:=,0,H,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,&amp;,C,:=,0x80,%s,&amp;,1,%s,&gt;&gt;,|,%s,=,$z,Z,:=,0,N,:=,0,H,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gb_anal_cb_srl</name> <parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,[1],&amp;,C,:=,1,%s,[1],&gt;&gt;,%s,=[1],$z,Z,:=,0,N,:=,0,H,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,&amp;,C,:=,1,%s,&gt;&gt;=,$z,Z,:=,0,N,:=,0,H,:="</literal></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>regs_x</name><index>[<expr><name>data</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gb_custom_daa</name> <parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>esil</name> <operator>||</operator> <operator>!</operator><name><name>esil</name><operator>-&gt;</operator><name>anal</name></name> <operator>||</operator> <operator>!</operator><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>r_anal_esil_pop</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name> <operator>||</operator> <operator>!</operator><call><name>r_anal_esil_get_parm</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>val</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_esil_reg_read</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"H"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>H</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_esil_reg_read</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>C</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_esil_reg_read</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"N"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>C</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>-</operator> <literal type="number">0x60</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>H</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>-</operator> <literal type="number">0x06</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>C</name> <operator>||</operator> <operator>(</operator><name>val</name> <operator>&gt;</operator> <literal type="number">0x99</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>+</operator> <literal type="number">0x60</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>H</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x09</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <literal type="number">0x06</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gb_anop</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ilen</name> <init>= <expr><call><name>gbOpLength</name> <argument_list>(<argument><expr><name><name>gb_op</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ilen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ilen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_DISASM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>mn</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>reg</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>gb_op</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>GB_8BIT</name></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>gb_op</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GB_16BIT</name></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>cb_ops</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cb_regs</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GB_8BIT</name> <operator>+</operator> <name>ARG_8</name></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><name><name>gb_op</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GB_8BIT</name> <operator>+</operator> <name>ARG_16</name></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><name><name>gb_op</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GB_8BIT</name> <operator>+</operator> <name>ARG_8</name> <operator>+</operator> <name>GB_IO</name></expr>:</case>

<expr_stmt><expr><call><name>gb_hardware_register_name</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><name><name>gb_op</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>mn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ilen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>nopcode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x00</literal></expr>:</case>

<case>case <expr><literal type="number">0x40</literal></expr>:</case>

<case>case <expr><literal type="number">0x49</literal></expr>:</case>

<case>case <expr><literal type="number">0x52</literal></expr>:</case>

<case>case <expr><literal type="number">0x5b</literal></expr>:</case>

<case>case <expr><literal type="number">0x64</literal></expr>:</case>

<case>case <expr><literal type="number">0x6d</literal></expr>:</case>

<case>case <expr><literal type="number">0x7f</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x01</literal></expr>:</case>

<case>case <expr><literal type="number">0x11</literal></expr>:</case>

<case>case <expr><literal type="number">0x21</literal></expr>:</case>

<case>case <expr><literal type="number">0x31</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_mov_imm</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xf8</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_mov_hl_sp</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type2</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x06</literal></expr>:</case>

<case>case <expr><literal type="number">0x0e</literal></expr>:</case>

<case>case <expr><literal type="number">0x16</literal></expr>:</case>

<case>case <expr><literal type="number">0x1e</literal></expr>:</case>

<case>case <expr><literal type="number">0x26</literal></expr>:</case>

<case>case <expr><literal type="number">0x2e</literal></expr>:</case>

<case>case <expr><literal type="number">0x3e</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_mov_imm</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xf9</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_mov_sp_hl</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="number">0x03</literal></expr>:</case>

<case>case <expr><literal type="number">0x13</literal></expr>:</case>

<case>case <expr><literal type="number">0x23</literal></expr>:</case>

<case>case <expr><literal type="number">0x33</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_id</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x04</literal></expr>:</case>

<case>case <expr><literal type="number">0x0c</literal></expr>:</case>

<case>case <expr><literal type="number">0x14</literal></expr>:</case>

<case>case <expr><literal type="number">0x1c</literal></expr>:</case>

<case>case <expr><literal type="number">0x24</literal></expr>:</case>

<case>case <expr><literal type="number">0x2c</literal></expr>:</case>

<case>case <expr><literal type="number">0x3c</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>gb_anal_id</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x34</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_id</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xea</literal></expr>:</case>

<expr_stmt><expr><call><name>meta_gb_bankswitch_cmt</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><call><name>GB_SOFTCAST</name> <argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_store</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x08</literal></expr>:</case>

<expr_stmt><expr><call><name>meta_gb_bankswitch_cmt</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><call><name>GB_SOFTCAST</name> <argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_store</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x02</literal></expr>:</case>

<case>case <expr><literal type="number">0x12</literal></expr>:</case>

<case>case <expr><literal type="number">0xe2</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_store</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x36</literal></expr>:</case>

<case>case <expr><literal type="number">0x22</literal></expr>:</case>

<case>case <expr><literal type="number">0x32</literal></expr>:</case>

<case>case <expr><literal type="number">0x70</literal></expr>:</case>

<case>case <expr><literal type="number">0x71</literal></expr>:</case>

<case>case <expr><literal type="number">0x72</literal></expr>:</case>

<case>case <expr><literal type="number">0x73</literal></expr>:</case>

<case>case <expr><literal type="number">0x74</literal></expr>:</case>

<case>case <expr><literal type="number">0x75</literal></expr>:</case>

<case>case <expr><literal type="number">0x77</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_store_hl</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="number">0xe0</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_store</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x41</literal></expr>:</case>

<case>case <expr><literal type="number">0x42</literal></expr>:</case>

<case>case <expr><literal type="number">0x43</literal></expr>:</case>

<case>case <expr><literal type="number">0x44</literal></expr>:</case>

<case>case <expr><literal type="number">0x45</literal></expr>:</case>

<case>case <expr><literal type="number">0x47</literal></expr>:</case>

<case>case <expr><literal type="number">0x48</literal></expr>:</case>

<case>case <expr><literal type="number">0x4a</literal></expr>:</case>

<case>case <expr><literal type="number">0x4b</literal></expr>:</case>

<case>case <expr><literal type="number">0x4c</literal></expr>:</case>

<case>case <expr><literal type="number">0x4d</literal></expr>:</case>

<case>case <expr><literal type="number">0x4f</literal></expr>:</case>

<case>case <expr><literal type="number">0x50</literal></expr>:</case>

<case>case <expr><literal type="number">0x51</literal></expr>:</case>

<case>case <expr><literal type="number">0x53</literal></expr>:</case>

<case>case <expr><literal type="number">0x54</literal></expr>:</case>

<case>case <expr><literal type="number">0x55</literal></expr>:</case>

<case>case <expr><literal type="number">0x57</literal></expr>:</case>

<case>case <expr><literal type="number">0x58</literal></expr>:</case>

<case>case <expr><literal type="number">0x59</literal></expr>:</case>

<case>case <expr><literal type="number">0x5a</literal></expr>:</case>

<case>case <expr><literal type="number">0x5c</literal></expr>:</case>

<case>case <expr><literal type="number">0x5d</literal></expr>:</case>

<case>case <expr><literal type="number">0x5f</literal></expr>:</case>

<case>case <expr><literal type="number">0x60</literal></expr>:</case>

<case>case <expr><literal type="number">0x61</literal></expr>:</case>

<case>case <expr><literal type="number">0x62</literal></expr>:</case>

<case>case <expr><literal type="number">0x63</literal></expr>:</case>

<case>case <expr><literal type="number">0x65</literal></expr>:</case>

<case>case <expr><literal type="number">0x67</literal></expr>:</case>

<case>case <expr><literal type="number">0x68</literal></expr>:</case>

<case>case <expr><literal type="number">0x69</literal></expr>:</case>

<case>case <expr><literal type="number">0x6a</literal></expr>:</case>

<case>case <expr><literal type="number">0x6b</literal></expr>:</case>

<case>case <expr><literal type="number">0x6c</literal></expr>:</case>

<case>case <expr><literal type="number">0x6f</literal></expr>:</case>

<case>case <expr><literal type="number">0x78</literal></expr>:</case>

<case>case <expr><literal type="number">0x79</literal></expr>:</case>

<case>case <expr><literal type="number">0x7a</literal></expr>:</case>

<case>case <expr><literal type="number">0x7b</literal></expr>:</case>

<case>case <expr><literal type="number">0x7c</literal></expr>:</case>

<case>case <expr><literal type="number">0x7d</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_mov_reg</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="number">0x0a</literal></expr>:</case>

<case>case <expr><literal type="number">0x1a</literal></expr>:</case>

<case>case <expr><literal type="number">0xf2</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_load</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x2a</literal></expr>:</case>

<case>case <expr><literal type="number">0x3a</literal></expr>:</case>

<case>case <expr><literal type="number">0x46</literal></expr>:</case>

<case>case <expr><literal type="number">0x4e</literal></expr>:</case>

<case>case <expr><literal type="number">0x56</literal></expr>:</case>

<case>case <expr><literal type="number">0x5e</literal></expr>:</case>

<case>case <expr><literal type="number">0x66</literal></expr>:</case>

<case>case <expr><literal type="number">0x6e</literal></expr>:</case>

<case>case <expr><literal type="number">0x7e</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_load_hl</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xf0</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_load</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xfa</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_load</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x80</literal></expr>:</case>

<case>case <expr><literal type="number">0x81</literal></expr>:</case>

<case>case <expr><literal type="number">0x82</literal></expr>:</case>

<case>case <expr><literal type="number">0x83</literal></expr>:</case>

<case>case <expr><literal type="number">0x84</literal></expr>:</case>

<case>case <expr><literal type="number">0x85</literal></expr>:</case>

<case>case <expr><literal type="number">0x87</literal></expr>:</case>

<case>case <expr><literal type="number">0x88</literal></expr>:</case>

<case>case <expr><literal type="number">0x89</literal></expr>:</case>

<case>case <expr><literal type="number">0x8a</literal></expr>:</case>

<case>case <expr><literal type="number">0x8b</literal></expr>:</case>

<case>case <expr><literal type="number">0x8c</literal></expr>:</case>

<case>case <expr><literal type="number">0x8d</literal></expr>:</case>

<case>case <expr><literal type="number">0x8f</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x09</literal></expr>:</case>

<case>case <expr><literal type="number">0x19</literal></expr>:</case>

<case>case <expr><literal type="number">0x29</literal></expr>:</case>

<case>case <expr><literal type="number">0x39</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_add_hl</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x86</literal></expr>:</case>

<case>case <expr><literal type="number">0x8e</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xc6</literal></expr>:</case>

<case>case <expr><literal type="number">0xce</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc_imm</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xe8</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_add_sp</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x90</literal></expr>:</case>

<case>case <expr><literal type="number">0x91</literal></expr>:</case>

<case>case <expr><literal type="number">0x92</literal></expr>:</case>

<case>case <expr><literal type="number">0x93</literal></expr>:</case>

<case>case <expr><literal type="number">0x94</literal></expr>:</case>

<case>case <expr><literal type="number">0x95</literal></expr>:</case>

<case>case <expr><literal type="number">0x97</literal></expr>:</case>

<case>case <expr><literal type="number">0x98</literal></expr>:</case>

<case>case <expr><literal type="number">0x99</literal></expr>:</case>

<case>case <expr><literal type="number">0x9a</literal></expr>:</case>

<case>case <expr><literal type="number">0x9b</literal></expr>:</case>

<case>case <expr><literal type="number">0x9c</literal></expr>:</case>

<case>case <expr><literal type="number">0x9d</literal></expr>:</case>

<case>case <expr><literal type="number">0x9f</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x96</literal></expr>:</case>

<case>case <expr><literal type="number">0x9e</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xd6</literal></expr>:</case>

<case>case <expr><literal type="number">0xde</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc_imm</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xa0</literal></expr>:</case>

<case>case <expr><literal type="number">0xa1</literal></expr>:</case>

<case>case <expr><literal type="number">0xa2</literal></expr>:</case>

<case>case <expr><literal type="number">0xa3</literal></expr>:</case>

<case>case <expr><literal type="number">0xa4</literal></expr>:</case>

<case>case <expr><literal type="number">0xa5</literal></expr>:</case>

<case>case <expr><literal type="number">0xa7</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xe6</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc_imm</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xa6</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x07</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_cb_rlc</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x17</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_cb_rl</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0f</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_cb_rrc</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1f</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_cb_rr</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x2f</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_xor_cpl</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x3f</literal></expr>:</case> 

<expr_stmt><expr><call><name>gb_anal_xor_ccf</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xa8</literal></expr>:</case>

<case>case <expr><literal type="number">0xa9</literal></expr>:</case>

<case>case <expr><literal type="number">0xaa</literal></expr>:</case>

<case>case <expr><literal type="number">0xab</literal></expr>:</case>

<case>case <expr><literal type="number">0xac</literal></expr>:</case>

<case>case <expr><literal type="number">0xad</literal></expr>:</case>

<case>case <expr><literal type="number">0xaf</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xee</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc_imm</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xae</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xb0</literal></expr>:</case>

<case>case <expr><literal type="number">0xb1</literal></expr>:</case>

<case>case <expr><literal type="number">0xb2</literal></expr>:</case>

<case>case <expr><literal type="number">0xb3</literal></expr>:</case>

<case>case <expr><literal type="number">0xb4</literal></expr>:</case>

<case>case <expr><literal type="number">0xb5</literal></expr>:</case>

<case>case <expr><literal type="number">0xb7</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xf6</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc_imm</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xb6</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xb8</literal></expr>:</case>

<case>case <expr><literal type="number">0xb9</literal></expr>:</case>

<case>case <expr><literal type="number">0xba</literal></expr>:</case>

<case>case <expr><literal type="number">0xbb</literal></expr>:</case>

<case>case <expr><literal type="number">0xbc</literal></expr>:</case>

<case>case <expr><literal type="number">0xbd</literal></expr>:</case>

<case>case <expr><literal type="number">0xbf</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xfe</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc_imm</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xbe</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_xoaasc</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xc0</literal></expr>:</case>

<case>case <expr><literal type="number">0xc8</literal></expr>:</case>

<case>case <expr><literal type="number">0xd0</literal></expr>:</case>

<case>case <expr><literal type="number">0xd8</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_cond</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_esil_cret</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>failcycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CRET</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xd9</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_mov_ime</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type2</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">0xc9</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_esil_ret</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0b</literal></expr>:</case>

<case>case <expr><literal type="number">0x1b</literal></expr>:</case>

<case>case <expr><literal type="number">0x2b</literal></expr>:</case>

<case>case <expr><literal type="number">0x3b</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_id</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x05</literal></expr>:</case>

<case>case <expr><literal type="number">0x0d</literal></expr>:</case>

<case>case <expr><literal type="number">0x15</literal></expr>:</case>

<case>case <expr><literal type="number">0x1d</literal></expr>:</case>

<case>case <expr><literal type="number">0x25</literal></expr>:</case>

<case>case <expr><literal type="number">0x2d</literal></expr>:</case>

<case>case <expr><literal type="number">0x3d</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>gb_anal_id</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x35</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_id</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xc5</literal></expr>:</case>

<case>case <expr><literal type="number">0xd5</literal></expr>:</case>

<case>case <expr><literal type="number">0xe5</literal></expr>:</case>

<case>case <expr><literal type="number">0xf5</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_pp</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RPUSH</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xc1</literal></expr>:</case>

<case>case <expr><literal type="number">0xd1</literal></expr>:</case>

<case>case <expr><literal type="number">0xe1</literal></expr>:</case>

<case>case <expr><literal type="number">0xf1</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_pp</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xc3</literal></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><name>gb_op_calljump</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_esil_jmp</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><name>ilen</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x18</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name> <operator>+</operator> <operator>(</operator><name>st8</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_esil_jmp</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x20</literal></expr>:</case>

<case>case <expr><literal type="number">0x28</literal></expr>:</case>

<case>case <expr><literal type="number">0x30</literal></expr>:</case>

<case>case <expr><literal type="number">0x38</literal></expr>:</case> 

<expr_stmt><expr><call><name>gb_anal_cond</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name> <operator>+</operator> <operator>(</operator><name>st8</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_esil_cjmp</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>failcycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xc2</literal></expr>:</case>

<case>case <expr><literal type="number">0xca</literal></expr>:</case>

<case>case <expr><literal type="number">0xd2</literal></expr>:</case>

<case>case <expr><literal type="number">0xda</literal></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><name>gb_op_calljump</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCJMP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_cond</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_esil_cjmp</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>failcycles</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><name>ilen</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xe9</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_jmp_hl</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x76</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <call><name>gbOpLength</name> <argument_list>(<argument><expr><name><name>gb_op</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xcd</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>gb_op_calljump</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCALL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_esil_call</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xc4</literal></expr>:</case>

<case>case <expr><literal type="number">0xcc</literal></expr>:</case>

<case>case <expr><literal type="number">0xd4</literal></expr>:</case>

<case>case <expr><literal type="number">0xdc</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_cond</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gb_op_calljump</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CCALL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCCALL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_esil_ccall</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>failcycles</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xc7</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_esil_call</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xcf</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0x08</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_esil_call</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xd7</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_esil_call</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xdf</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0x18</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_esil_call</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xe7</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_esil_call</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xef</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0x28</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_esil_call</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xf7</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0x30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_esil_call</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xff</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0x38</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_esil_call</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xf3</literal></expr>:</case> 

<case>case <expr><literal type="number">0xfb</literal></expr>:</case> 

<expr_stmt><expr><call><name>gb_anal_mov_ime</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x37</literal></expr>:</case>

<expr_stmt><expr><call><name>gb_anal_mov_scf</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x27</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"a,daa,a,=,$z,Z,:=,3,$c,H,:=,7,$c,C,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x10</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"TODO,stop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xcb</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>nopcode</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_cb_rlc</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_cb_rrc</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_cb_rl</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_cb_rr</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_cb_sla</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_cb_swap</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_cb_sra</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_cb_srl</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<case>case <expr><literal type="number">9</literal></expr>:</case>

<case>case <expr><literal type="number">10</literal></expr>:</case>

<case>case <expr><literal type="number">11</literal></expr>:</case>

<case>case <expr><literal type="number">12</literal></expr>:</case>

<case>case <expr><literal type="number">13</literal></expr>:</case>

<case>case <expr><literal type="number">14</literal></expr>:</case>

<case>case <expr><literal type="number">15</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ACMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gb_anal_and_bit</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break> 

<case>case <expr><literal type="number">16</literal></expr>:</case>

<case>case <expr><literal type="number">17</literal></expr>:</case>

<case>case <expr><literal type="number">18</literal></expr>:</case>

<case>case <expr><literal type="number">19</literal></expr>:</case>

<case>case <expr><literal type="number">20</literal></expr>:</case>

<case>case <expr><literal type="number">21</literal></expr>:</case>

<case>case <expr><literal type="number">22</literal></expr>:</case>

<case>case <expr><literal type="number">23</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gb_anal_and_res</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break> 

<case>case <expr><literal type="number">24</literal></expr>:</case>

<case>case <expr><literal type="number">25</literal></expr>:</case>

<case>case <expr><literal type="number">26</literal></expr>:</case>

<case>case <expr><literal type="number">27</literal></expr>:</case>

<case>case <expr><literal type="number">28</literal></expr>:</case>

<case>case <expr><literal type="number">29</literal></expr>:</case>

<case>case <expr><literal type="number">30</literal></expr>:</case>

<case>case <expr><literal type="number">31</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gb_anal_or_set</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></switch>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>=

<expr><literal type="string">"=PC mpc\n"</literal>

<literal type="string">"=SP sp\n"</literal>

<literal type="string">"=A0 af\n"</literal>

<literal type="string">"=A1 bc\n"</literal>

<literal type="string">"=A2 de\n"</literal>

<literal type="string">"=A3 hl\n"</literal>

<literal type="string">"gpr mpc .32 0 0\n"</literal>

<literal type="string">"gpr pc .16 0 0\n"</literal>

<literal type="string">"gpr m .16 2 0\n"</literal>

<literal type="string">"gpr sp .16 4 0\n"</literal>

<literal type="string">"gpr af .16 6 0\n"</literal>

<literal type="string">"gpr f .8 6 0\n"</literal>

<literal type="string">"gpr a .8 7 0\n"</literal>

<literal type="string">"gpr Z .1 .55 0\n"</literal>

<literal type="string">"gpr N .1 .54 0\n"</literal>

<literal type="string">"gpr H .1 .53 0\n"</literal>

<literal type="string">"gpr C .1 .52 0\n"</literal>

<literal type="string">"gpr bc .16 8 0\n"</literal>

<literal type="string">"gpr c .8 8 0\n"</literal>

<literal type="string">"gpr b .8 9 0\n"</literal>

<literal type="string">"gpr de .16 10 0\n"</literal>

<literal type="string">"gpr e .8 10 0\n"</literal>

<literal type="string">"gpr d .8 11 0\n"</literal>

<literal type="string">"gpr hl .16 12 0\n"</literal>

<literal type="string">"gpr l .8 12 0\n"</literal>

<literal type="string">"gpr h .8 13 0\n"</literal>

<literal type="string">"gpr mbcrom .16 14 0\n"</literal>

<literal type="string">"gpr mbcram .16 16 0\n"</literal>

<literal type="string">"gpr ime .1 18 0\n"</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>esil_gb_init</name> <parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>GBUser</name> <modifier>*</modifier></type><name>user</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>GBUser</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"daa"</literal></expr></argument>, <argument><expr><name>gb_custom_daa</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name> <operator>|</operator> <name>R_ANAL_ESIL_OP_TYPE_CUSTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>user</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><literal type="number">0x147</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>user</name><operator>-&gt;</operator><name>mbc_id</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><literal type="number">0x148</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>user</name><operator>-&gt;</operator><name>romsz_id</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><literal type="number">0x149</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>user</name><operator>-&gt;</operator><name>ramsz_id</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"mpc"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"sp"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xfffe</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"af"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x01b0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"bc"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x0013</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"de"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x00d8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"hl"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x014d</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"ime"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>esil_gb_fini</name> <parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_gb</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"gb"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Gameboy CPU code analysis plugin"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"z80"</literal></expr>,

<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">16</literal></expr>,

<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>gb_anop</name></expr>,

<expr><operator>.</operator><name>set_reg_profile</name> <operator>=</operator> <operator>&amp;</operator><name>set_reg_profile</name></expr>,

<expr><operator>.</operator><name>esil_init</name> <operator>=</operator> <name>esil_gb_init</name></expr>,

<expr><operator>.</operator><name>esil_fini</name> <operator>=</operator> <name>esil_gb_fini</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_gb</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
