<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\p\anal_ppc_gnu.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ppc_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>opcode</name> <init>= <expr><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>baddr</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xfc</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aa</name> <init>= <expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lk</name> <init>= <expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">11</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x4e</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>aa</name><operator>)</operator></expr>?</condition><then><expr><operator>(</operator><name>baddr</name><operator>)</operator></expr></then><else>:<expr><operator>(</operator><name>addr</name><operator>+</operator><name>baddr</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>aa</name><operator>)</operator></expr>?</condition><then><expr><operator>(</operator><name>baddr</name><operator>)</operator></expr></then><else>:<expr><operator>(</operator><name>addr</name><operator>+</operator><name>baddr</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

case 7: 

op-&gt;type = R_ANAL_OP_TYPE_SWI;

break;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

case 15: 

op-&gt;type = R_ANAL_OP_TYPE_CJMP;

op-&gt;jump = (aa)?(baddr):(addr+baddr);

op-&gt;fail = addr+4;

op-&gt;eob = 1;

break;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="number">8</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>aa</name><operator>)</operator></expr>?</condition><then><expr><operator>(</operator><name>baddr</name><operator>)</operator></expr></then><else>:<expr><operator>(</operator><name>addr</name><operator>+</operator><name>baddr</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">19</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>lk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>=

<expr><literal type="string">"=PC srr0\n"</literal>

<literal type="string">"=SR srr1\n"</literal> 

<literal type="string">"=A0 r0\n"</literal>

<literal type="string">"=A1 r1\n"</literal>

<literal type="string">"=A2 r2\n"</literal>

<literal type="string">"=A3 r3\n"</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

"=a4 r4\n"

"=a5 r5\n"

"=a6 r6\n"

"=a7 r7\n"

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"gpr srr0 .32 0 0\n"</literal>

<literal type="string">"gpr srr1 .32 4 0\n"</literal>

<literal type="string">"gpr r0 .32 8 0\n"</literal>

<literal type="string">"gpr r1 .32 12 0\n"</literal>

<literal type="string">"gpr r2 .32 16 0\n"</literal>

<literal type="string">"gpr r3 .32 20 0\n"</literal>

<literal type="string">"gpr r4 .32 24 0\n"</literal>

<literal type="string">"gpr r5 .32 28 0\n"</literal>

<literal type="string">"gpr r6 .32 32 0\n"</literal>

<literal type="string">"gpr r7 .32 36 0\n"</literal>

<literal type="string">"gpr r8 .32 40 0\n"</literal>

<literal type="string">"gpr r9 .32 44 0\n"</literal>

<literal type="string">"gpr r10 .32 48 0\n"</literal>

<literal type="string">"gpr r11 .32 52 0\n"</literal>

<literal type="string">"gpr r12 .32 56 0\n"</literal>

<literal type="string">"gpr r13 .32 60 0\n"</literal>

<literal type="string">"gpr r14 .32 64 0\n"</literal>

<literal type="string">"gpr r15 .32 68 0\n"</literal>

<literal type="string">"gpr r16 .32 72 0\n"</literal>

<literal type="string">"gpr r17 .32 76 0\n"</literal>

<literal type="string">"gpr r18 .32 80 0\n"</literal>

<literal type="string">"gpr r19 .32 84 0\n"</literal>

<literal type="string">"gpr r20 .32 88 0\n"</literal>

<literal type="string">"gpr r21 .32 92 0\n"</literal>

<literal type="string">"gpr r22 .32 96 0\n"</literal>

<literal type="string">"gpr r23 .32 100 0\n"</literal>

<literal type="string">"gpr r24 .32 104 0\n"</literal>

<literal type="string">"gpr r25 .32 108 0\n"</literal>

<literal type="string">"gpr r26 .32 112 0\n"</literal>

<literal type="string">"gpr r27 .32 116 0\n"</literal>

<literal type="string">"gpr r28 .32 120 0\n"</literal>

<literal type="string">"gpr r29 .32 124 0\n"</literal>

<literal type="string">"gpr r30 .32 128 0\n"</literal>

<literal type="string">"gpr r31 .32 132 0\n"</literal>

<literal type="string">"gpr cr .32 136 0\n"</literal>

<literal type="string">"gpr xer .32 140 0\n"</literal>

<literal type="string">"gpr lr .32 144 0\n"</literal>

<literal type="string">"gpr ctr .32 148 0\n"</literal>

<literal type="string">"gpr mq .32 152 0\n"</literal>

<literal type="string">"gpr vrsave .32 156 0\n"</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>archinfo</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><literal type="number">4</literal></expr>;</return> 

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_ppc_gnu</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ppc.gnu"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"PowerPC analysis plugin"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"ppc"</literal></expr>,

<expr><operator>.</operator><name>archinfo</name> <operator>=</operator> <name>archinfo</name></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal><operator>|</operator><literal type="number">64</literal></expr>,

<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>ppc_op</name></expr>,

<expr><operator>.</operator><name>set_reg_profile</name> <operator>=</operator> <operator>&amp;</operator><name>set_reg_profile</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_ppc_gnu</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

NOTES:

======

10000

AA = absolute address

LK = link bit

BD = bits 16-19

address

if (AA) {

address = (int32) BD &lt;&lt; 2

} else {

address += (int32) BD &lt;&lt; 2

}

AA LK

30 31

0 0 bc

1 0 bca

0 1 bcl

1 1 bcla

10011

BCCTR

LK = 31

bclr or bcr (Branch Conditional Link Register) Instruction

10011

6-29 -&gt; LL (addr) ?

B 10010 -&gt; branch

30 31

0 0 b

1 0 ba

0 1 bl

1 1 bla

SC SYSCALL 5 first bytes 10001

SVC SUPERVISORCALL

30 31

0 0 svc

0 1 svcl

1 0 svca

1 1 svcla

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
