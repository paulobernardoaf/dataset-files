<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\p\anal_java.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../shlr/java/ops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../shlr/java/code.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../shlr/java/class.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFDBG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dprintf</name></cpp:macro> <cpp:value>eprintf</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_THE_DBG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFDBG</name></cpp:macro> <cpp:value>if(DO_THE_DBG)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFINT</name></cpp:macro> <cpp:value>if(0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>ut64</name></type> <name>METHOD_START</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>java_update_anal_types</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>java_cmd_ext</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>java_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RBinJavaObj</name> <modifier>*</modifier></type> <name>get_java_bin_obj</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>RBinJavaObj</name> <modifier>*</modifier></type> <name>get_java_bin_obj</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBin</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>anal</name><operator>-&gt;</operator><name>binb</name><operator>.</operator><name>bin</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinPlugin</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name></name></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>plugin</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>is_java</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>plugin</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"java"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>is_java</name></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>java_get_method_start</name> <parameter_list>()</parameter_list> <block>{<block_content>

<return>return <expr><name>METHOD_START</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>java_switch_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>op_byte</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><name>addr</name> <operator>-</operator> <call><name>java_get_method_start</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>pos</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>offset</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name>offset</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>op_byte</name> <operator>==</operator> <literal type="number">0xaa</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>min_val</name> <init>= <expr><operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><call><name>UINT</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_val</name> <init>= <expr><operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><call><name>UINT</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>default_loc</name> <init>= <expr><operator>(</operator><name>ut32</name><operator>)</operator> <operator>(</operator><call><name>UINT</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>cur_case</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>switch_op</name></name> <operator>=</operator> <call><name>r_anal_switch_op_new</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>min_val</name></expr></argument>, <argument><expr><name>max_val</name></expr></argument>, <argument><expr><name>default_loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max_val</name> <operator>&gt;</operator> <name>min_val</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>max_val</name> <operator>-</operator> <name>min_val</name><operator>)</operator><operator>&lt;</operator><operator>(</operator><name>UT16_MAX</name><operator>/</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>cur_case</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cur_case</name> <operator>&lt;=</operator> <name>max_val</name> <operator>-</operator> <name>min_val</name></expr>;</condition> <incr><expr><name>pos</name> <operator>+=</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name>cur_case</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><call><name>R_BIN_JAVA_UINT</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_switch_op_add_case</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>switch_op</name></name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>cur_case</name> <operator>+</operator> <name>min_val</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid switch boundaries at 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>extract_bin_op</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>ranal2_op_type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>bin_op_val</name> <init>= <expr><name>ranal2_op_type</name> <operator>&amp;</operator> <operator>(</operator><name>R_ANAL_JAVA_BIN_OP</name> <operator>|</operator> <literal type="number">0x80000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>bin_op_val</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_JAVA_BINOP_XCHG</name></expr>:</case><return>return <expr><name>R_ANAL_OP_TYPE_XCHG</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_CMP</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_ADD</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_SUB</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_MUL</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_DIV</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_DIV</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_SHR</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_SHL</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_SHL</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_SAL</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_SAL</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_SAR</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_SAR</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_OR</name></expr> :</case> <return>return <expr><name>R_ANAL_OP_TYPE_OR</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_AND</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_AND</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_XOR</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_XOR</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_NOT</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_NOT</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_MOD</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_MOD</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_ROR</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_ROR</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_ROL</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_ROL</name></expr>;</return>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>R_ANAL_OP_TYPE_UNK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ut64</name></type> <name>extract_unknown_op</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>ranal2_op_type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ranal2_op_type</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_CODEOP_JMP</name><operator>)</operator> <operator>==</operator> <name>R_ANAL_JAVA_CODEOP_JMP</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_ANAL_OP_TYPE_UJMP</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ranal2_op_type</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_CODEOP_CALL</name><operator>)</operator> <operator>==</operator> <name>R_ANAL_JAVA_CODEOP_CALL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_ANAL_OP_TYPE_UCALL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ranal2_op_type</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_LDST_OP_PUSH</name><operator>)</operator> <operator>==</operator> <name>R_ANAL_JAVA_LDST_OP_PUSH</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_ANAL_OP_TYPE_UPUSH</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>R_ANAL_OP_TYPE_UNK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>extract_code_op</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>ranal2_op_type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>conditional</name> <init>= <expr><ternary><condition><expr><name>R_ANAL_JAVA_COND_OP</name> <operator>&amp;</operator> <name>ranal2_op_type</name></expr> ?</condition><then> <expr><name>R_ANAL_OP_TYPE_COND</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>code_op_val</name> <init>= <expr><name>ranal2_op_type</name> <operator>&amp;</operator> <operator>(</operator><name>R_ANAL_JAVA_CODE_OP</name> <operator>|</operator> <literal type="number">0x1FF</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>code_op_val</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_JAVA_CODEOP_CALL</name></expr>:</case> <return>return <expr><name>conditional</name> <operator>|</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_CODEOP_JMP</name></expr>:</case> <return>return <expr><name>conditional</name> <operator>|</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_CODEOP_RET</name></expr>:</case> <return>return <expr><name>conditional</name> <operator>|</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_CODEOP_LEAVE</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_LEAVE</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_CODEOP_SWI</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_SWI</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_CODEOP_TRAP</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_TRAP</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_CODEOP_SWITCH</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_SWITCH</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>R_ANAL_OP_TYPE_UNK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ut64</name></type> <name>extract_load_store_op</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>ranal2_op_type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>ranal2_op_type</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_LDST_OP_PUSH</name><operator>)</operator> <operator>==</operator> <name>R_ANAL_JAVA_LDST_OP_PUSH</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_ANAL_OP_TYPE_PUSH</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>ranal2_op_type</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_LDST_OP_POP</name><operator>)</operator> <operator>==</operator> <name>R_ANAL_JAVA_LDST_OP_POP</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_ANAL_OP_TYPE_POP</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>ranal2_op_type</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_LDST_OP_MOV</name><operator>)</operator> <operator>==</operator> <name>R_ANAL_JAVA_LDST_OP_MOV</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>ranal2_op_type</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_LDST_OP_EFF_ADDR</name><operator>)</operator> <operator>==</operator> <name>R_ANAL_JAVA_LDST_OP_EFF_ADDR</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_ANAL_OP_TYPE_LEA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>R_ANAL_OP_TYPE_UNK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>map_java_op_to_anal_op_type</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>t2</name> <init>= <expr><call><name>extract_bin_op</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t2</name> <operator>!=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>t2</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_JAVA_NULL_OP</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_NULL</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_NOP</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_NOP</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_ADD</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_AND</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_AND</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_MUL</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_XOR</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_XOR</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_BINOP_XCHG</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_OBJOP_NEW</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_UCALL</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_OBJOP_SIZE</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_UCALL</name></expr>;</return>

<case>case <expr><name>R_ANAL_JAVA_ILL_OP</name></expr>:</case> <return>return <expr><name>R_ANAL_OP_TYPE_ILL</name></expr>;</return>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_UNK_OP</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>extract_unknown_op</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_CODE_OP</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>extract_code_op</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_REP_OP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>ret</name> <init>= <expr><call><name>map_java_op_to_anal_op_type</name> <argument_list>(<argument><expr><name>t</name> <operator>&amp;</operator> <operator>~</operator><name>R_ANAL_JAVA_REP_OP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>R_ANAL_OP_TYPE_REP</name> <operator>|</operator> <name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;</operator> <operator>(</operator><name>R_ANAL_JAVA_LOAD_OP</name> <operator>|</operator> <name>R_ANAL_JAVA_STORE_OP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>extract_load_store_op</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_BIN_OP</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>extract_bin_op</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>R_ANAL_JAVA_OBJOP_CAST</name> <operator>&amp;</operator> <name>t</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>R_ANAL_OP_TYPE_UNK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_anal_java_is_op_type_eop</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>result</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_CODE_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<return>return <expr><name>result</name> <operator>&amp;&amp;</operator>

<operator>(</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_CODEOP_LEAVE</name><operator>)</operator> <operator>==</operator> <name>R_ANAL_JAVA_CODEOP_LEAVE</name> <operator>||</operator>

<operator>(</operator><name>x</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_CODEOP_RET</name><operator>)</operator> <operator>==</operator> <name>R_ANAL_JAVA_CODEOP_RET</name> <operator>||</operator>

<operator>(</operator><name>x</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_CODEOP_JMP</name><operator>)</operator> <operator>==</operator> <name>R_ANAL_JAVA_CODEOP_JMP</name> <operator>||</operator>

<operator>(</operator><name>x</name> <operator>&amp;</operator> <name>R_ANAL_JAVA_CODEOP_SWITCH</name><operator>)</operator> <operator>==</operator> <name>R_ANAL_JAVA_CODEOP_SWITCH</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>java_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>op_byte</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><name><name>JAVA_OPS</name><index>[<expr><name>op_byte</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<return>return <expr><name>sz</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>IFDBG</name></macro> <block>{<block_content>

</block_content>}</block>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type2</name></name> <operator>=</operator> <name><name>JAVA_OPS</name><index>[<expr><name>op_byte</name></expr>]</index></name><operator>.</operator><name>op_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>map_java_op_to_anal_op_type</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>type2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op_byte</name> <operator>==</operator> <literal type="number">0xaa</literal> <operator>||</operator> <name>op_byte</name> <operator>==</operator> <literal type="number">0xab</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>java_switch_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <call><name>r_anal_java_is_op_type_eop</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>type2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>IFDBG</name></macro> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ot_str</name> <init>= <expr><call><name>r_anal_optype_to_string</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"op_type2: %s @ 0x%04"</literal><name>PFMT64x</name><literal type="string">" 0x%08"</literal><name>PFMT64x</name><literal type="string">" op_type: (0x%02"</literal><name>PFMT64x</name><literal type="string">") %s.\n"</literal></expr></argument>,

<argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>op_byte</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>type2</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>ot_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>R_ANAL_OP_DIR_EXEC</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><call><name>USHORT</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>sz</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s jmpto 0x%04"</literal><name>PFMT64x</name><literal type="string">" failto 0x%04"</literal><name>PFMT64x</name><literal type="string">".\n"</literal></expr></argument>,

<argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>op_byte</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><call><name>USHORT</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s jmpto 0x%04"</literal><name>PFMT64x</name><literal type="string">".\n"</literal></expr></argument>, <argument><expr><name><name>JAVA_OPS</name><index>[<expr><name>op_byte</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_TYPE_CALL</name><operator>)</operator> <operator>==</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><call><name>USHORT</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>sz</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>java_update_anal_types</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>D</name> <init>= <expr><name><name>anal</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>D</name> <operator>&amp;&amp;</operator> <name>bin_obj</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type> <name>the_list</name> <init>= <expr><call><name>r_bin_java_extract_all_bin_type_values</name> <argument_list>(<argument><expr><name>bin_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>the_list</name></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>the_list</argument>, <argument>iter</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Adding type: %s to known types.\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>java_cmd_ext</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator><name>RBinJavaObj</name> <operator>*</operator><operator>)</operator> <call><name>get_java_bin_obj</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Execute \"af\" to set the current bin, and this will bind the current bin\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>input</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_java_new_method</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name>input</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <block>{<block_content><expr_stmt><expr><call><name>java_update_anal_types</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>true</name></expr>;</return></block_content>}</block>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name>input</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Command not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_java</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"java"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Java bytecode analysis plugin"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"Apache"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"java"</literal></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,

<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>java_op</name></expr>,

<expr><operator>.</operator><name>cmd_ext</name> <operator>=</operator> <name>java_cmd_ext</name></expr>,

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_java</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
