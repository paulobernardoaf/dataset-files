<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\p\anal_6502.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../asm/arch/snes/snes_op_table.h"</cpp:file></cpp:include>

<enum>enum <block>{

<decl><name>_6502_FLAGS_C</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,

<decl><name>_6502_FLAGS_B</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,

<decl><name>_6502_FLAGS_Z</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,

<decl><name>_6502_FLAGS_N</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,

<decl><name>_6502_FLAGS_NZ</name> <init>= <expr><operator>(</operator><name>_6502_FLAGS_Z</name> <operator>|</operator> <name>_6502_FLAGS_N</name><operator>)</operator></expr></init></decl>,

<decl><name>_6502_FLAGS_CNZ</name> <init>= <expr><operator>(</operator><name>_6502_FLAGS_C</name> <operator>|</operator> <name>_6502_FLAGS_Z</name> <operator>|</operator> <name>_6502_FLAGS_N</name><operator>)</operator></expr></init></decl>,

<decl><name>_6502_FLAGS_BNZ</name> <init>= <expr><operator>(</operator><name>_6502_FLAGS_B</name> <operator>|</operator> <name>_6502_FLAGS_Z</name> <operator>|</operator> <name>_6502_FLAGS_N</name><operator>)</operator></expr></init></decl>,

}</block>;</enum>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_6502_anal_update_flags</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>_6502_FLAGS_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",9,$b,C,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>_6502_FLAGS_C</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",7,$c,C,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>_6502_FLAGS_Z</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",$z,Z,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>_6502_FLAGS_N</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",7,$s,N,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_6502_anal_esil_get_addr_pattern1</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>addrbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addrsize</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0x09</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>,<argument><expr><literal type="string">"0x%02x"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x05</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>,<argument><expr><literal type="string">"0x%02x"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x15</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>,<argument><expr><literal type="string">"x,0x%02x,+"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0d</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>,<argument><expr><literal type="string">"0x%04x"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1d</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>,<argument><expr><literal type="string">"x,0x%04x,+"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x19</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>,<argument><expr><literal type="string">"y,0x%04x,+"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x01</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>,<argument><expr><literal type="string">"x,0x%02x,+,[2]"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x11</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>,<argument><expr><literal type="string">"y,0x%02x,[2],+"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_6502_anal_esil_get_addr_pattern2</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>addrbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addrsize</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0x02</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>, <argument><expr><literal type="string">"0x%02x"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name><operator>&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0a</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x06</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>, <argument><expr><literal type="string">"0x%02x"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name><operator>&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x16</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>, <argument><expr><literal type="string">"%c,0x%02x,+"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0e</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>, <argument><expr><literal type="string">"0x%04x"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name><operator>&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1e</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>, <argument><expr><literal type="string">"%c,0x%04x,+"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name><operator>&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_6502_anal_esil_get_addr_pattern3</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>addrbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addrsize</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0x00</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>, <argument><expr><literal type="string">"0x%02x"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x08</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x04</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>, <argument><expr><literal type="string">"0x%02x"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x14</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>, <argument><expr><literal type="string">"%c,0x%02x,+"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name><operator>&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0c</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>, <argument><expr><literal type="string">"0x%04x"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name><operator>&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1c</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>, <argument><expr><literal type="string">"%c,0x%04x,+"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name><operator>&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_6502_anal_esil_ccall</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>data0</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flag</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>data0</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x10</literal></expr>:</case> 

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"N,!"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x30</literal></expr>:</case> 

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"N"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x50</literal></expr>:</case> 

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"V,!"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x70</literal></expr>:</case> 

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"V"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x90</literal></expr>:</case> 

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"C,!"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xb0</literal></expr>:</case> 

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"C"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xd0</literal></expr>:</case> 

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"Z,!"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xf0</literal></expr>:</case> 

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"Z"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="string">"unk"</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,?{,0x%04x,pc,=,}"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_6502_anal_esil_inc_reg</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>data0</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>sign</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>reg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>data0</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0xe8</literal></expr>:</case> 

<case>case <expr><literal type="number">0xca</literal></expr>:</case> 

<expr_stmt><expr><name>reg</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xc8</literal></expr>:</case> 

<case>case <expr><literal type="number">0x88</literal></expr>:</case> 

<expr_stmt><expr><name>reg</name> <operator>=</operator> <literal type="string">"y"</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s%s="</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_NZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_6502_anal_esil_mov</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>data0</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src</name><init>=<expr><literal type="string">"unk"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dst</name><init>=<expr><literal type="string">"unk"</literal></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>data0</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0xaa</literal></expr>:</case> 

<expr_stmt><expr><name>src</name><operator>=</operator><literal type="string">"a"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name><operator>=</operator><literal type="string">"x"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x8a</literal></expr>:</case> 

<expr_stmt><expr><name>src</name><operator>=</operator><literal type="string">"x"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name><operator>=</operator><literal type="string">"a"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xa8</literal></expr>:</case> 

<expr_stmt><expr><name>src</name><operator>=</operator><literal type="string">"a"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name><operator>=</operator><literal type="string">"y"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x98</literal></expr>:</case> 

<expr_stmt><expr><name>src</name><operator>=</operator><literal type="string">"y"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name><operator>=</operator><literal type="string">"a"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x9a</literal></expr>:</case> 

<expr_stmt><expr><name>src</name><operator>=</operator><literal type="string">"x"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name><operator>=</operator><literal type="string">"sp"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xba</literal></expr>:</case> 

<expr_stmt><expr><name>src</name><operator>=</operator><literal type="string">"sp"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name><operator>=</operator><literal type="string">"x"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,="</literal></expr></argument>,<argument><expr><name>src</name></expr></argument>,<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data0</name> <operator>!=</operator> <literal type="number">0x9a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_NZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_6502_anal_esil_push</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>data0</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>data0</name><operator>==</operator><literal type="number">0x08</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"flags"</literal></expr> </then><else>: <expr><literal type="string">"a"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,sp,0x100,+,=[1],sp,--="</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_6502_anal_esil_pop</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>data0</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>data0</name><operator>==</operator><literal type="number">0x28</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"flags"</literal></expr> </then><else>: <expr><literal type="string">"a"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"sp,++=,sp,0x100,+,[1],%s,="</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data0</name> <operator>==</operator> <literal type="number">0x68</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_NZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_6502_anal_esil_flags</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>data0</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>enabled</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>flag</name> <init>=<expr><literal type="char">'u'</literal></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>data0</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x78</literal></expr>:</case> 

<expr_stmt><expr><name>enabled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="char">'I'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x58</literal></expr>:</case> 

<expr_stmt><expr><name>enabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="char">'I'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x38</literal></expr>:</case> 

<expr_stmt><expr><name>enabled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="char">'C'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x18</literal></expr>:</case> 

<expr_stmt><expr><name>enabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="char">'C'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xf8</literal></expr>:</case> 

<expr_stmt><expr><name>enabled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="char">'D'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xd8</literal></expr>:</case> 

<expr_stmt><expr><name>enabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="char">'D'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xb8</literal></expr>:</case> 

<expr_stmt><expr><name>enabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt>

<break>break;</break>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%c,="</literal></expr></argument>, <argument><expr><name>enabled</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_6502_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>buffsize</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>snes_op_get_size</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>snes_op</name><index>[<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x02</literal></expr>:</case>

<case>case <expr><literal type="number">0x03</literal></expr>:</case>

<case>case <expr><literal type="number">0x04</literal></expr>:</case>

<case>case <expr><literal type="number">0x07</literal></expr>:</case>

<case>case <expr><literal type="number">0x0b</literal></expr>:</case>

<case>case <expr><literal type="number">0x0c</literal></expr>:</case>

<case>case <expr><literal type="number">0x0f</literal></expr>:</case>

<case>case <expr><literal type="number">0x12</literal></expr>:</case>

<case>case <expr><literal type="number">0x13</literal></expr>:</case>

<case>case <expr><literal type="number">0x14</literal></expr>:</case>

<case>case <expr><literal type="number">0x17</literal></expr>:</case>

<case>case <expr><literal type="number">0x1a</literal></expr>:</case>

<case>case <expr><literal type="number">0x1b</literal></expr>:</case>

<case>case <expr><literal type="number">0x1c</literal></expr>:</case>

<case>case <expr><literal type="number">0x1f</literal></expr>:</case>

<case>case <expr><literal type="number">0x22</literal></expr>:</case>

<case>case <expr><literal type="number">0x23</literal></expr>:</case>

<case>case <expr><literal type="number">0x27</literal></expr>:</case>

<case>case <expr><literal type="number">0x2b</literal></expr>:</case>

<case>case <expr><literal type="number">0x2f</literal></expr>:</case>

<case>case <expr><literal type="number">0x32</literal></expr>:</case>

<case>case <expr><literal type="number">0x33</literal></expr>:</case>

<case>case <expr><literal type="number">0x34</literal></expr>:</case>

<case>case <expr><literal type="number">0x37</literal></expr>:</case>

<case>case <expr><literal type="number">0x3a</literal></expr>:</case>

<case>case <expr><literal type="number">0x3b</literal></expr>:</case>

<case>case <expr><literal type="number">0x3c</literal></expr>:</case>

<case>case <expr><literal type="number">0x3f</literal></expr>:</case>

<case>case <expr><literal type="number">0x42</literal></expr>:</case>

<case>case <expr><literal type="number">0x43</literal></expr>:</case>

<case>case <expr><literal type="number">0x44</literal></expr>:</case>

<case>case <expr><literal type="number">0x47</literal></expr>:</case>

<case>case <expr><literal type="number">0x4b</literal></expr>:</case>

<case>case <expr><literal type="number">0x4f</literal></expr>:</case>

<case>case <expr><literal type="number">0x52</literal></expr>:</case>

<case>case <expr><literal type="number">0x53</literal></expr>:</case>

<case>case <expr><literal type="number">0x54</literal></expr>:</case>

<case>case <expr><literal type="number">0x57</literal></expr>:</case>

<case>case <expr><literal type="number">0x5a</literal></expr>:</case>

<case>case <expr><literal type="number">0x5b</literal></expr>:</case>

<case>case <expr><literal type="number">0x5c</literal></expr>:</case>

<case>case <expr><literal type="number">0x5f</literal></expr>:</case>

<case>case <expr><literal type="number">0x62</literal></expr>:</case>

<case>case <expr><literal type="number">0x63</literal></expr>:</case>

<case>case <expr><literal type="number">0x64</literal></expr>:</case>

<case>case <expr><literal type="number">0x67</literal></expr>:</case>

<case>case <expr><literal type="number">0x6b</literal></expr>:</case>

<case>case <expr><literal type="number">0x6f</literal></expr>:</case>

<case>case <expr><literal type="number">0x72</literal></expr>:</case>

<case>case <expr><literal type="number">0x73</literal></expr>:</case>

<case>case <expr><literal type="number">0x74</literal></expr>:</case>

<case>case <expr><literal type="number">0x77</literal></expr>:</case>

<case>case <expr><literal type="number">0x7a</literal></expr>:</case>

<case>case <expr><literal type="number">0x7b</literal></expr>:</case>

<case>case <expr><literal type="number">0x7c</literal></expr>:</case>

<case>case <expr><literal type="number">0x7f</literal></expr>:</case>

<case>case <expr><literal type="number">0x80</literal></expr>:</case>

<case>case <expr><literal type="number">0x82</literal></expr>:</case>

<case>case <expr><literal type="number">0x83</literal></expr>:</case>

<case>case <expr><literal type="number">0x87</literal></expr>:</case>

<case>case <expr><literal type="number">0x89</literal></expr>:</case>

<case>case <expr><literal type="number">0x8b</literal></expr>:</case>

<case>case <expr><literal type="number">0x8f</literal></expr>:</case>

<case>case <expr><literal type="number">0x92</literal></expr>:</case>

<case>case <expr><literal type="number">0x93</literal></expr>:</case>

<case>case <expr><literal type="number">0x97</literal></expr>:</case>

<case>case <expr><literal type="number">0x9b</literal></expr>:</case>

<case>case <expr><literal type="number">0x9c</literal></expr>:</case>

<case>case <expr><literal type="number">0x9e</literal></expr>:</case>

<case>case <expr><literal type="number">0x9f</literal></expr>:</case>

<case>case <expr><literal type="number">0xa3</literal></expr>:</case>

<case>case <expr><literal type="number">0xa7</literal></expr>:</case>

<case>case <expr><literal type="number">0xab</literal></expr>:</case>

<case>case <expr><literal type="number">0xaf</literal></expr>:</case>

<case>case <expr><literal type="number">0xb2</literal></expr>:</case>

<case>case <expr><literal type="number">0xb3</literal></expr>:</case>

<case>case <expr><literal type="number">0xb7</literal></expr>:</case>

<case>case <expr><literal type="number">0xbb</literal></expr>:</case>

<case>case <expr><literal type="number">0xbf</literal></expr>:</case>

<case>case <expr><literal type="number">0xc2</literal></expr>:</case>

<case>case <expr><literal type="number">0xc3</literal></expr>:</case>

<case>case <expr><literal type="number">0xc7</literal></expr>:</case>

<case>case <expr><literal type="number">0xcb</literal></expr>:</case>

<case>case <expr><literal type="number">0xcf</literal></expr>:</case>

<case>case <expr><literal type="number">0xd2</literal></expr>:</case>

<case>case <expr><literal type="number">0xd3</literal></expr>:</case>

<case>case <expr><literal type="number">0xd4</literal></expr>:</case>

<case>case <expr><literal type="number">0xd7</literal></expr>:</case>

<case>case <expr><literal type="number">0xda</literal></expr>:</case>

<case>case <expr><literal type="number">0xdb</literal></expr>:</case>

<case>case <expr><literal type="number">0xdc</literal></expr>:</case>

<case>case <expr><literal type="number">0xdf</literal></expr>:</case>

<case>case <expr><literal type="number">0xe2</literal></expr>:</case>

<case>case <expr><literal type="number">0xe3</literal></expr>:</case>

<case>case <expr><literal type="number">0xe7</literal></expr>:</case>

<case>case <expr><literal type="number">0xeb</literal></expr>:</case>

<case>case <expr><literal type="number">0xef</literal></expr>:</case>

<case>case <expr><literal type="number">0xf2</literal></expr>:</case>

<case>case <expr><literal type="number">0xf3</literal></expr>:</case>

<case>case <expr><literal type="number">0xf4</literal></expr>:</case>

<case>case <expr><literal type="number">0xf7</literal></expr>:</case>

<case>case <expr><literal type="number">0xfa</literal></expr>:</case>

<case>case <expr><literal type="number">0xfb</literal></expr>:</case>

<case>case <expr><literal type="number">0xfc</literal></expr>:</case>

<case>case <expr><literal type="number">0xff</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x00</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SWI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",1,I,=,0,D,=,flags,0x10,|,0x100,sp,+,=[1],pc,1,+,0xfe,sp,+,=[2],3,sp,-=,0xfffe,[2],pc,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x78</literal></expr>:</case> 

<case>case <expr><literal type="number">0x58</literal></expr>:</case> 

<case>case <expr><literal type="number">0x38</literal></expr>:</case> 

<case>case <expr><literal type="number">0x18</literal></expr>:</case> 

<case>case <expr><literal type="number">0xf8</literal></expr>:</case> 

<case>case <expr><literal type="number">0xd8</literal></expr>:</case> 

<case>case <expr><literal type="number">0xb8</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x24</literal></expr>:</case> 

<case>case <expr><literal type="number">0x2c</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern3</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],0x80,&amp;,!,!,N,=,%s,[1],0x40,&amp;,!,!,V,=,a,%s,[1],&amp;,0xff,&amp;,!,Z,="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x69</literal></expr>:</case> 

<case>case <expr><literal type="number">0x65</literal></expr>:</case> 

<case>case <expr><literal type="number">0x75</literal></expr>:</case> 

<case>case <expr><literal type="number">0x6d</literal></expr>:</case> 

<case>case <expr><literal type="number">0x7d</literal></expr>:</case> 

<case>case <expr><literal type="number">0x79</literal></expr>:</case> 

<case>case <expr><literal type="number">0x61</literal></expr>:</case> 

<case>case <expr><literal type="number">0x71</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern1</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x69</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,a,+=,7,$c,C,a,+=,7,$c,|,C,:="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],a,+=,7,$c,C,a,+=,7,$c,|,C,:="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_NZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",a,a,=,$z,Z,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xe9</literal></expr>:</case> 

<case>case <expr><literal type="number">0xe5</literal></expr>:</case> 

<case>case <expr><literal type="number">0xf5</literal></expr>:</case> 

<case>case <expr><literal type="number">0xed</literal></expr>:</case> 

<case>case <expr><literal type="number">0xfd</literal></expr>:</case> 

<case>case <expr><literal type="number">0xf9</literal></expr>:</case> 

<case>case <expr><literal type="number">0xe1</literal></expr>:</case> 

<case>case <expr><literal type="number">0xf1</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern1</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe9</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"C,!,%s,+,a,-="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"C,!,%s,[1],+,a,-="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_BNZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",a,a,=,$z,Z,:=,C,!="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x09</literal></expr>:</case> 

<case>case <expr><literal type="number">0x05</literal></expr>:</case> 

<case>case <expr><literal type="number">0x15</literal></expr>:</case> 

<case>case <expr><literal type="number">0x0d</literal></expr>:</case> 

<case>case <expr><literal type="number">0x1d</literal></expr>:</case> 

<case>case <expr><literal type="number">0x19</literal></expr>:</case> 

<case>case <expr><literal type="number">0x01</literal></expr>:</case> 

<case>case <expr><literal type="number">0x11</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern1</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x09</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,a,|="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],a,|="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_NZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x29</literal></expr>:</case> 

<case>case <expr><literal type="number">0x25</literal></expr>:</case> 

<case>case <expr><literal type="number">0x35</literal></expr>:</case> 

<case>case <expr><literal type="number">0x2d</literal></expr>:</case> 

<case>case <expr><literal type="number">0x3d</literal></expr>:</case> 

<case>case <expr><literal type="number">0x39</literal></expr>:</case> 

<case>case <expr><literal type="number">0x21</literal></expr>:</case> 

<case>case <expr><literal type="number">0x31</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern1</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x29</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,a,&amp;="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],a,&amp;="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_NZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x49</literal></expr>:</case> 

<case>case <expr><literal type="number">0x45</literal></expr>:</case> 

<case>case <expr><literal type="number">0x55</literal></expr>:</case> 

<case>case <expr><literal type="number">0x4d</literal></expr>:</case> 

<case>case <expr><literal type="number">0x5d</literal></expr>:</case> 

<case>case <expr><literal type="number">0x59</literal></expr>:</case> 

<case>case <expr><literal type="number">0x41</literal></expr>:</case> 

<case>case <expr><literal type="number">0x51</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern1</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x49</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,a,^="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],a,^="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_NZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0a</literal></expr>:</case> 

<case>case <expr><literal type="number">0x06</literal></expr>:</case> 

<case>case <expr><literal type="number">0x16</literal></expr>:</case> 

<case>case <expr><literal type="number">0x0e</literal></expr>:</case> 

<case>case <expr><literal type="number">0x1e</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,a,&lt;&lt;=,7,$c,C,:=,a,a,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern2</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,[1],&lt;&lt;,%s,=[1],7,$c,C,:="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_NZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x4a</literal></expr>:</case> 

<case>case <expr><literal type="number">0x46</literal></expr>:</case> 

<case>case <expr><literal type="number">0x56</literal></expr>:</case> 

<case>case <expr><literal type="number">0x4e</literal></expr>:</case> 

<case>case <expr><literal type="number">0x5e</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x4a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,a,&amp;,C,=,1,a,&gt;&gt;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern2</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,[1],&amp;,C,=,1,%s,[1],&gt;&gt;,%s,=[1]"</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_NZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x2a</literal></expr>:</case> 

<case>case <expr><literal type="number">0x26</literal></expr>:</case> 

<case>case <expr><literal type="number">0x36</literal></expr>:</case> 

<case>case <expr><literal type="number">0x2e</literal></expr>:</case> 

<case>case <expr><literal type="number">0x3e</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x2a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,a,&lt;&lt;,C,|,a,=,7,$c,C,:=,a,a,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern2</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,[1],&lt;&lt;,C,|,%s,=[1],7,$c,C,:="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_NZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x6a</literal></expr>:</case> 

<case>case <expr><literal type="number">0x66</literal></expr>:</case> 

<case>case <expr><literal type="number">0x76</literal></expr>:</case> 

<case>case <expr><literal type="number">0x6e</literal></expr>:</case> 

<case>case <expr><literal type="number">0x7e</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x6a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"C,N,=,1,a,&amp;,C,=,1,a,&gt;&gt;,7,N,&lt;&lt;,|,a,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern2</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"C,N,=,1,%s,[1],&amp;,C,=,1,%s,[1],&gt;&gt;,7,N,&lt;&lt;,|,%s,=[1]"</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_NZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xe6</literal></expr>:</case> 

<case>case <expr><literal type="number">0xf6</literal></expr>:</case> 

<case>case <expr><literal type="number">0xee</literal></expr>:</case> 

<case>case <expr><literal type="number">0xfe</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern2</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,++=[1]"</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_NZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xc6</literal></expr>:</case> 

<case>case <expr><literal type="number">0xd6</literal></expr>:</case> 

<case>case <expr><literal type="number">0xce</literal></expr>:</case> 

<case>case <expr><literal type="number">0xde</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern2</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,--=[1]"</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_NZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xe8</literal></expr>:</case> 

<case>case <expr><literal type="number">0xc8</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_inc_reg</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xca</literal></expr>:</case> 

<case>case <expr><literal type="number">0x88</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_inc_reg</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xc9</literal></expr>:</case> 

<case>case <expr><literal type="number">0xc5</literal></expr>:</case> 

<case>case <expr><literal type="number">0xd5</literal></expr>:</case> 

<case>case <expr><literal type="number">0xcd</literal></expr>:</case> 

<case>case <expr><literal type="number">0xdd</literal></expr>:</case> 

<case>case <expr><literal type="number">0xd9</literal></expr>:</case> 

<case>case <expr><literal type="number">0xc1</literal></expr>:</case> 

<case>case <expr><literal type="number">0xd1</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern1</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xc9</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,a,=="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],a,=="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_BNZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",C,!,C,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xe0</literal></expr>:</case> 

<case>case <expr><literal type="number">0xe4</literal></expr>:</case> 

<case>case <expr><literal type="number">0xec</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern3</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,x,=="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],x,=="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_BNZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",C,!,C,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xc0</literal></expr>:</case> 

<case>case <expr><literal type="number">0xc4</literal></expr>:</case> 

<case>case <expr><literal type="number">0xcc</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern3</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xc0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,y,=="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],y,=="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_BNZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",C,!,C,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x10</literal></expr>:</case> 

<case>case <expr><literal type="number">0x30</literal></expr>:</case> 

<case>case <expr><literal type="number">0x50</literal></expr>:</case> 

<case>case <expr><literal type="number">0x70</literal></expr>:</case> 

<case>case <expr><literal type="number">0x90</literal></expr>:</case> 

<case>case <expr><literal type="number">0xb0</literal></expr>:</case> 

<case>case <expr><literal type="number">0xd0</literal></expr>:</case> 

<case>case <expr><literal type="number">0xf0</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>failcycles</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>-</operator> <operator>(</operator><literal type="number">256</literal> <operator>-</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_ccall</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x20</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,pc,-,0xff,sp,+,=[2],0x%04x,pc,=,2,sp,-="</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x4c</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%04x,pc,="</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x6c</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%04x,[2],pc,="</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x60</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x101,sp,+,[2],pc,=,pc,++=,2,sp,+="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x40</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x101,sp,+,[1],flags,=,0x102,sp,+,[2],pc,=,3,sp,+="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xea</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xa9</literal></expr>:</case> 

<case>case <expr><literal type="number">0xa5</literal></expr>:</case> 

<case>case <expr><literal type="number">0xb5</literal></expr>:</case> 

<case>case <expr><literal type="number">0xad</literal></expr>:</case> 

<case>case <expr><literal type="number">0xbd</literal></expr>:</case> 

<case>case <expr><literal type="number">0xb9</literal></expr>:</case> 

<case>case <expr><literal type="number">0xa1</literal></expr>:</case> 

<case>case <expr><literal type="number">0xb1</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern1</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xa9</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,a,="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],a,="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_NZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xa2</literal></expr>:</case> 

<case>case <expr><literal type="number">0xa6</literal></expr>:</case> 

<case>case <expr><literal type="number">0xb6</literal></expr>:</case> 

<case>case <expr><literal type="number">0xae</literal></expr>:</case> 

<case>case <expr><literal type="number">0xbe</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern2</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>, <argument><expr><literal type="char">'y'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xa2</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,x,="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],x,="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_NZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xa0</literal></expr>:</case> 

<case>case <expr><literal type="number">0xa4</literal></expr>:</case> 

<case>case <expr><literal type="number">0xb4</literal></expr>:</case> 

<case>case <expr><literal type="number">0xac</literal></expr>:</case> 

<case>case <expr><literal type="number">0xbc</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern3</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xa0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,y,="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],y,="</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_6502_anal_update_flags</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>_6502_FLAGS_NZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x85</literal></expr>:</case> 

<case>case <expr><literal type="number">0x95</literal></expr>:</case> 

<case>case <expr><literal type="number">0x8d</literal></expr>:</case> 

<case>case <expr><literal type="number">0x9d</literal></expr>:</case> 

<case>case <expr><literal type="number">0x99</literal></expr>:</case> 

<case>case <expr><literal type="number">0x81</literal></expr>:</case> 

<case>case <expr><literal type="number">0x91</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern1</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"a,%s,=[1]"</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x86</literal></expr>:</case> 

<case>case <expr><literal type="number">0x96</literal></expr>:</case> 

<case>case <expr><literal type="number">0x8e</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern2</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>, <argument><expr><literal type="char">'y'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"x,%s,=[1]"</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x84</literal></expr>:</case> 

<case>case <expr><literal type="number">0x94</literal></expr>:</case> 

<case>case <expr><literal type="number">0x8c</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_get_addr_pattern3</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"y,%s,=[1]"</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x08</literal></expr>:</case> 

<case>case <expr><literal type="number">0x48</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_push</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x28</literal></expr>:</case> 

<case>case <expr><literal type="number">0x68</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_pop</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xaa</literal></expr>:</case> 

<case>case <expr><literal type="number">0x8a</literal></expr>:</case> 

<case>case <expr><literal type="number">0xa8</literal></expr>:</case> 

<case>case <expr><literal type="number">0x98</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_mov</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x9a</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_SET</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_mov</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xba</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_GET</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_6502_anal_esil_mov</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>=

<expr><literal type="string">"=PC pc\n"</literal>

<literal type="string">"=SP sp\n"</literal>

<literal type="string">"gpr a .8 0 0\n"</literal>

<literal type="string">"gpr x .8 1 0\n"</literal>

<literal type="string">"gpr y .8 2 0\n"</literal>

<literal type="string">"gpr flags .8 3 0\n"</literal>

<literal type="string">"gpr C .1 .24 0\n"</literal>

<literal type="string">"gpr Z .1 .25 0\n"</literal>

<literal type="string">"gpr I .1 .26 0\n"</literal>

<literal type="string">"gpr D .1 .27 0\n"</literal>

<literal type="string">"gpr V .1 .30 0\n"</literal>

<literal type="string">"gpr N .1 .31 0\n"</literal>

<literal type="string">"gpr sp .8 4 0\n"</literal>

<literal type="string">"gpr pc .16 5 0\n"</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>esil_6502_init</name> <parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name></name> <operator>&amp;&amp;</operator> <name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"pc"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"sp"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>esil_6502_fini</name> <parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_6502</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"6502"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"6502/NES analysis plugin"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"6502"</literal></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">8</literal></expr>,

<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>_6502_op</name></expr>,

<expr><operator>.</operator><name>set_reg_profile</name> <operator>=</operator> <operator>&amp;</operator><name>set_reg_profile</name></expr>,

<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>esil_init</name> <operator>=</operator> <name>esil_6502_init</name></expr>,

<expr><operator>.</operator><name>esil_fini</name> <operator>=</operator> <name>esil_6502_fini</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_6502</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
