<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\p\anal_h8300.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;h8300_disas.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>emit</name><parameter_list>(<parameter><type><name>frag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_strbuf_appendf(&amp;op-&gt;esil, frag)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>emitf</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_strbuf_appendf(&amp;op-&gt;esil, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setZ</name></cpp:macro> <cpp:value>r_strbuf_appendf(&amp;op-&gt;esil, ",$z,Z,:=")</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setN</name></cpp:macro> <cpp:value>r_strbuf_appendf(&amp;op-&gt;esil, ",15,$s,N,=")</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setV</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_strbuf_appendf(&amp;op-&gt;esil, ",%s,V,=", val)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setC_B</name></cpp:macro> <cpp:value>r_strbuf_appendf(&amp;op-&gt;esil, ",7,$c,C,:=")</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setC_W</name></cpp:macro> <cpp:value>r_strbuf_appendf(&amp;op-&gt;esil, ",15,$c,C,:=")</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setCb_B</name></cpp:macro> <cpp:value>r_strbuf_appendf(&amp;op-&gt;esil, ",7,$b,C,:=")</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setCb_W</name></cpp:macro> <cpp:value>r_strbuf_appendf(&amp;op-&gt;esil, ",15,$b,C,:=")</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setH_B</name></cpp:macro> <cpp:value>r_strbuf_appendf(&amp;op-&gt;esil, ",3,$c,H,:=")</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setH_W</name></cpp:macro> <cpp:value>r_strbuf_appendf(&amp;op-&gt;esil, ",11,$c,H,:=")</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setHb_B</name></cpp:macro> <cpp:value>r_strbuf_appendf(&amp;op-&gt;esil, ",3,$b,H,:=")</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setHb_W</name></cpp:macro> <cpp:value>r_strbuf_appendf(&amp;op-&gt;esil, ",11,$b,H,:=")</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rs</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(buf[1]&amp;0x70)&gt;&gt;4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rsB</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(buf[1]&amp;0x70)&gt;&gt;4,buf[1]&amp;0x80?'l':'h'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rd</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>buf[1]&amp;0x07</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rdB</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>buf[a]&amp;0x07,buf[a]&amp;0x8?'l':'h'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mask</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>r_strbuf_appendf(&amp;op-&gt;esil, ",0xffff,r%u,&amp;=",rd());</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maskB</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_strbuf_appendf(&amp;op-&gt;esil, ",0xff,r%u%c,&amp;=",rdB(a));</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>imm</name></cpp:macro> <cpp:value>buf[1]</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h8300_anal_jmp</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>ad</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>H8300_JMP_1</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_JMP_2</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_mem_swapendian</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ad</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>ad</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_JMP_3</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h8300_anal_jsr</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>ad</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>H8300_JSR_1</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCALL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_JSR_2</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_mem_swapendian</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ad</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>ad</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_JSR_3</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>analop_esil</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>opcode</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><name>H8300_CMP_4BIT</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,r%u%c,-"</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"%o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>setHb_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name>setCb_B</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_OR_4BIT</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,r%u%c,|="</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_XOR_4BIT</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,r%u%c,^="</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_AND_4BIT</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,r%u%c,&amp;="</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_ADD_4BIT</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,r%u%c,+="</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"%o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>setH_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name>setC_B</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_ADDX_4BIT</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,C,+,r%u%c,+= "</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>,

<argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"%o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>setH_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name>setC_B</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_SUBX_4BIT</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,r%u%c,-=,C,r%u%c,-="</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"%o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>setHb_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name>setCb_B</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_MOV_4BIT_2</name></expr>:</case> 

<case>case <expr><name>H8300_MOV_4BIT_3</name></expr>:</case> 

<case>case <expr><name>H8300_MOV_4BIT</name></expr>:</case> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>H8300_NOP</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_SLEEP</name></expr>:</case> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_STC</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"ccr,r%u%c,="</literal></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_LDC</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u%c,ccr,="</literal></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_ORC</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,ccr,|="</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_XORC</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,ccr,^="</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_ANDC</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,ccr,&amp;="</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_LDC_2</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,ccr,="</literal></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_ADDB_DIRECT</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u%c,r%u%c,+="</literal></expr></argument>, <argument><expr><call><name>rsB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setH_B</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"%o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setC_B</name></expr> ;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_ADDW_DIRECT</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,+="</literal></expr></argument>, <argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rd</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setH_W</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"%o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setC_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mask</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_INC</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,r%u%c,+="</literal></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"%o"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_ADDS</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,r%u,+="</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>rd</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_MOV_1</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u%c,r%u%c,="</literal></expr></argument>, <argument><expr><call><name>rsB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_MOV_2</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,="</literal></expr></argument>, <argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rd</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mask</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_ADDX</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u%c,C,+,r%u%c,+="</literal></expr></argument>,

<argument><expr><call><name>rsB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"%o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>setH_B</name></expr> ;</expr_stmt>

<expr_stmt><expr><name>setC_B</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_DAA</name></expr>:</case> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_SHL</name></expr>:</case> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_SHR</name></expr>:</case> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_ROTL</name></expr>:</case> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_ROTR</name></expr>:</case> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_OR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u%c,r%u%c,|="</literal></expr></argument>, <argument><expr><call><name>rsB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_XOR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u%c,r%u%c,^="</literal></expr></argument>, <argument><expr><call><name>rsB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_AND</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u%c,r%u%c,&amp;="</literal></expr></argument>, <argument><expr><call><name>rsB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_NOT_NEG</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u%c,0,-,r%u%c,="</literal></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setHb_B</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"%o"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<expr_stmt><expr><name>setCb_B</name></expr> ;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u%c,!="</literal></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_SUB_1</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u%c,r%u%c,-="</literal></expr></argument>, <argument><expr><call><name>rsB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setHb_B</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"%o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setCb_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_SUBW</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,-="</literal></expr></argument>, <argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rd</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setHb_W</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name> <argument_list>(<argument><expr><literal type="string">"%o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setCb_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mask</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_DEC</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,r%u%c,-="</literal></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"%o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_SUBS</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,r%u,-="</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>rd</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_CMP_1</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u%c,r%u%c,-"</literal></expr></argument>, <argument><expr><call><name>rsB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setHb_B</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"%o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setCb_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_CMP_2</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u,r%u,-"</literal></expr></argument>, <argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rd</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setHb_W</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"%o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setCb_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mask</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_SUBX</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u%c,r%u%c,-=,C,r%u%c,-="</literal></expr></argument>,

<argument><expr><call><name>rsB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setHb_B</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setV</name><argument_list>(<argument><expr><literal type="string">"%o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setCb_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name>setN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maskB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>setZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_DAS</name></expr>:</case> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BRA</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%02x,pc,+="</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BRN</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BHI</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"C,Z,|,!,?{0x%02x,pc,+=}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BLS</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"C,Z,|,?{0x%02x,pc,+=}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BCC</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"C,!,?{0x%02x,pc,+=}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BCS</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"C,?{0x%02x,pc,+=}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BNE</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"Z,!,?{0x%02x,pc,+=}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BEQ</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"Z,?{0x%02x,pc,+=}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BVC</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"V,!,?{0x%02x,pc,+=}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BVS</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"V,?{0x%02x,pc,+=}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BPL</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"N,!,?{0x%02x,pc,+=}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BMI</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"N,?{0x%02x,pc,+=}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BGE</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"N,V,^,!,?{0x%02x,pc,+=}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BLT</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"N,V,^,?{0x%02x,pc,+=}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BGT</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"Z,N,V,^,|,!,?{0x%02x,pc,+=}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BLE</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"Z,N,V,^,|,?{0x%02x,pc,+=}"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_MULXU</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%u%c,r%ul,*,r%u,="</literal></expr></argument>,

<argument><expr><call><name>rsB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rd</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rd</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_DIVXU</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_RTS</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BSR</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_RTE</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_JMP_1</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_JMP_2</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_JMP_3</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_JSR_1</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_JSR_2</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_JSR_3</name></expr>:</case> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BSET_1</name></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x7,r%u%c,&amp;,1,&lt;&lt;,r%u%c,|="</literal></expr></argument>, <argument><expr><call><name>rsB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BNOT_1</name></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,<argument><expr><literal type="string">"0x07,r%u%c,&amp;,1,&lt;&lt;,r%u%c,^="</literal></expr></argument>, <argument><expr><call><name>rsB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BCLR_R2R8</name></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x7,r%u%c,&amp;,1,&lt;&lt;,!,r%u%c,&amp;="</literal></expr></argument>, <argument><expr><call><name>rsB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BTST_R2R8</name></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x7,r%u%c,&amp;,0x7,r%u%c,&amp;,1,&lt;&lt;,r%u%c,&amp;,&gt;&gt;,!,Z,="</literal></expr></argument>,

<argument><expr><call><name>rsB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rsB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BST_BIST</name></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,<argument><expr><literal type="string">"%d,C,&lt;&lt;,r%u%c,|="</literal></expr></argument>,<argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,C,!,&lt;&lt;,r%u%c,|="</literal></expr></argument>, <argument><expr><call><name>rs</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_MOV_R82IND16</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_MOV_IND162R16</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_MOV_R82ABS16</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_MOV_ABS162R16</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_MOV_R82RDEC16</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_MOV_INDINC162R16</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_MOV_R82DISPR16</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_MOV_DISP162R16</name></expr>:</case> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BSET_2</name></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,1,&lt;&lt;,r%u%c,|="</literal></expr></argument>, <argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BNOT_2</name></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,<argument><expr><literal type="string">"%d,1,&lt;&lt;,r%u%c,^="</literal></expr></argument>,<argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BCLR_IMM2R8</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,1,&lt;&lt;,!,r%u%c,&amp;="</literal></expr></argument>, <argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BTST</name></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%d,1,&lt;&lt;,r%u%c,&amp;,&gt;&gt;,!,Z,="</literal></expr></argument>,

<argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BOR_BIOR</name></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%d,1,&lt;&lt;,r%u%c,&amp;,&gt;&gt;,C,|="</literal></expr></argument>,

<argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%d,1,&lt;&lt;,r%u%c,&amp;,&gt;&gt;,!,C,|="</literal></expr></argument>,

<argument><expr><call><name>rs</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rs</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BXOR_BIXOR</name></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%d,1,&lt;&lt;,r%u%c,&amp;,&gt;&gt;,C,^="</literal></expr></argument>,

<argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%d,1,&lt;&lt;,r%u%c,&amp;,&gt;&gt;,!,C,^="</literal></expr></argument>,

<argument><expr><call><name>rs</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rs</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BAND_BIAND</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%d,1,&lt;&lt;,r%u%c,&amp;,&gt;&gt;,C,&amp;="</literal></expr></argument>,

<argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%d,1,&lt;&lt;,r%u%c,&amp;,&gt;&gt;,!,C,&amp;="</literal></expr></argument>,

<argument><expr><call><name>rs</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rs</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BILD_IMM2R8</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%d,1,&lt;&lt;,r%u%c,&amp;,&gt;&gt;,C,="</literal></expr></argument>,

<argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%d,1,&lt;&lt;,r%u%c,&amp;,&gt;&gt;,!,C,="</literal></expr></argument>,

<argument><expr><call><name>rs</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rs</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rdB</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_MOV_IMM162R16</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_EEPMOV</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BIAND_IMM2IND16</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BCLR_R2IND16</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BIAND_IMM2ABS8</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>H8300_BCLR_R2ABS8</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h8300_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>h8300_cmd</name></name></type> <name>cmd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>h8300_decode_command</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>opcode</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><name>H8300_MOV_4BIT_2</name></expr>:</case>

<case>case <expr><name>H8300_MOV_4BIT_3</name></expr>:</case>

<case>case <expr><name>H8300_MOV_4BIT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_CMP_4BIT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_XOR_4BIT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_AND_4BIT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_ADD_4BIT</name></expr>:</case>

<case>case <expr><name>H8300_ADDX_4BIT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_SUBX_4BIT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>analop_esil</name><argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>H8300_MOV_R82IND16</name></expr>:</case>

<case>case <expr><name>H8300_MOV_IND162R16</name></expr>:</case>

<case>case <expr><name>H8300_MOV_R82ABS16</name></expr>:</case>

<case>case <expr><name>H8300_MOV_ABS162R16</name></expr>:</case>

<case>case <expr><name>H8300_MOV_R82RDEC16</name></expr>:</case>

<case>case <expr><name>H8300_MOV_INDINC162R16</name></expr>:</case>

<case>case <expr><name>H8300_MOV_R82DISPR16</name></expr>:</case>

<case>case <expr><name>H8300_MOV_DISP162R16</name></expr>:</case>

<case>case <expr><name>H8300_MOV_IMM162R16</name></expr>:</case>

<case>case <expr><name>H8300_MOV_1</name></expr>:</case>

<case>case <expr><name>H8300_MOV_2</name></expr>:</case>

<case>case <expr><name>H8300_EEPMOV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_RTS</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_CMP_1</name></expr>:</case>

<case>case <expr><name>H8300_CMP_2</name></expr>:</case>

<case>case <expr><name>H8300_BTST_R2R8</name></expr>:</case>

<case>case <expr><name>H8300_BTST</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_SHL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_SHR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_XOR</name></expr>:</case>

<case>case <expr><name>H8300_XORC</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_MULXU</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_ANDC</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_ADDB_DIRECT</name></expr>:</case>

<case>case <expr><name>H8300_ADDW_DIRECT</name></expr>:</case>

<case>case <expr><name>H8300_ADDS</name></expr>:</case>

<case>case <expr><name>H8300_ADDX</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_SUB_1</name></expr>:</case>

<case>case <expr><name>H8300_SUBW</name></expr>:</case>

<case>case <expr><name>H8300_SUBS</name></expr>:</case>

<case>case <expr><name>H8300_SUBX</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_NOP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_JSR_1</name></expr>:</case>

<case>case <expr><name>H8300_JSR_2</name></expr>:</case>

<case>case <expr><name>H8300_JSR_3</name></expr>:</case>

<expr_stmt><expr><call><name>h8300_anal_jsr</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_JMP_1</name></expr>:</case>

<case>case <expr><name>H8300_JMP_2</name></expr>:</case>

<case>case <expr><name>H8300_JMP_3</name></expr>:</case>

<expr_stmt><expr><call><name>h8300_anal_jmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H8300_BRA</name></expr>:</case>

<case>case <expr><name>H8300_BRN</name></expr>:</case>

<case>case <expr><name>H8300_BHI</name></expr>:</case>

<case>case <expr><name>H8300_BLS</name></expr>:</case>

<case>case <expr><name>H8300_BCC</name></expr>:</case>

<case>case <expr><name>H8300_BCS</name></expr>:</case>

<case>case <expr><name>H8300_BNE</name></expr>:</case>

<case>case <expr><name>H8300_BEQ</name></expr>:</case>

<case>case <expr><name>H8300_BVC</name></expr>:</case>

<case>case <expr><name>H8300_BVS</name></expr>:</case>

<case>case <expr><name>H8300_BPL</name></expr>:</case>

<case>case <expr><name>H8300_BMI</name></expr>:</case>

<case>case <expr><name>H8300_BGE</name></expr>:</case>

<case>case <expr><name>H8300_BLT</name></expr>:</case>

<case>case <expr><name>H8300_BGT</name></expr>:</case>

<case>case <expr><name>H8300_BLE</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>st8</name><operator>)</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_ESIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>analop_esil</name><argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>=

<expr><literal type="string">"=PC pc\n"</literal>

<literal type="string">"=SP r7\n"</literal>

<literal type="string">"gpr r0 .16 0 0\n"</literal>

<literal type="string">"gpr r0h .8 0 0\n"</literal>

<literal type="string">"gpr r0l .8 1 0\n"</literal>

<literal type="string">"gpr r1 .16 2 0\n"</literal>

<literal type="string">"gpr r1h .8 2 0\n"</literal>

<literal type="string">"gpr r1l .8 3 0\n"</literal>

<literal type="string">"gpr r2 .16 4 0\n"</literal>

<literal type="string">"gpr r2h .8 4 0\n"</literal>

<literal type="string">"gpr r2l .8 5 0\n"</literal>

<literal type="string">"gpr r3 .16 6 0\n"</literal>

<literal type="string">"gpr r3h .8 6 0\n"</literal>

<literal type="string">"gpr r3l .8 7 0\n"</literal>

<literal type="string">"gpr r4 .16 8 0\n"</literal>

<literal type="string">"gpr r4h .8 8 0\n"</literal>

<literal type="string">"gpr r4l .8 9 0\n"</literal>

<literal type="string">"gpr r5 .16 10 0\n"</literal>

<literal type="string">"gpr r5h .8 10 0\n"</literal>

<literal type="string">"gpr r5l .8 11 0\n"</literal>

<literal type="string">"gpr r6 .16 12 0\n"</literal>

<literal type="string">"gpr r6h .8 12 0\n"</literal>

<literal type="string">"gpr r6l .8 13 0\n"</literal>

<literal type="string">"gpr r7 .16 14 0\n"</literal>

<literal type="string">"gpr r7h .8 14 0\n"</literal>

<literal type="string">"gpr r7l .8 15 0\n"</literal>

<literal type="string">"gpr pc .16 16 0\n"</literal>

<literal type="string">"gpr ccr .8 18 0\n"</literal>

<literal type="string">"gpr I .1 .151 0\n"</literal>

<literal type="string">"gpr U1 .1 .150 0\n"</literal>

<literal type="string">"gpr H .1 .149 0\n"</literal>

<literal type="string">"gpr U2 .1 .148 0\n"</literal>

<literal type="string">"gpr N .1 .147 0\n"</literal>

<literal type="string">"gpr Z .1 .146 0\n"</literal>

<literal type="string">"gpr V .1 .145 0\n"</literal>

<literal type="string">"gpr C .1 .144 0\n"</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_h8300</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"h8300"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"H8300 code analysis plugin"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"h8300"</literal></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">16</literal></expr>,

<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>h8300_op</name></expr>,

<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>set_reg_profile</name> <operator>=</operator> <name>set_reg_profile</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>r_lib_struct_t</name></name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_h8300</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
