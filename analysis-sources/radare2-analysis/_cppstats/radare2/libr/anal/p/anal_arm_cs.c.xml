<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\p\anal_arm_cs.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;capstone/capstone.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;capstone/arm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./anal_arm_hacks.inc"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>esilprintf</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_strbuf_setf (&amp;op-&gt;esil, fmt, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMM64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ut64)(insn-&gt;detail-&gt;arm64.operands[x].imm)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSOP64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;arm64.operands[x]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_str_get (cs_reg_name (*handle, insn-&gt;detail-&gt;arm.operands[x].reg))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_str_get (cs_reg_name (*handle, insn-&gt;detail-&gt;arm64.operands[x].reg))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGID64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;arm64.operands[x].reg</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;arm.operands[x].reg</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ut32)(insn-&gt;detail-&gt;arm.operands[x].imm)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSOP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;arm.operands[x]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMBASE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_str_get (cs_reg_name (*handle, insn-&gt;detail-&gt;arm.operands[x].mem.base))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMBASE64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_str_get (cs_reg_name (*handle, insn-&gt;detail-&gt;arm64.operands[x].mem.base))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGBASE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;arm.operands[x].mem.base</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGBASE64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;arm64.operands[x].mem.base</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMINDEX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_str_get (cs_reg_name (*handle, insn-&gt;detail-&gt;arm.operands[x].mem.index))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASMEMINDEX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(insn-&gt;detail-&gt;arm.operands[x].mem.index != ARM_REG_INVALID)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMINDEX64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_str_get (cs_reg_name (*handle, insn-&gt;detail-&gt;arm64.operands[x].mem.index))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASMEMINDEX64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(insn-&gt;detail-&gt;arm64.operands[x].mem.index != ARM64_REG_INVALID)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMDISP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;arm.operands[x].mem.disp</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMDISP64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ut64)insn-&gt;detail-&gt;arm64.operands[x].mem.disp</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISIMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(insn-&gt;detail-&gt;arm.operands[x].type == ARM_OP_IMM)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISIMM64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(insn-&gt;detail-&gt;arm64.operands[x].type == ARM64_OP_IMM)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISREG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(insn-&gt;detail-&gt;arm.operands[x].type == ARM_OP_REG)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISREG64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(insn-&gt;detail-&gt;arm64.operands[x].type == ARM64_OP_REG)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISMEM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(insn-&gt;detail-&gt;arm.operands[x].type == ARM_OP_MEM)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISMEM64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(insn-&gt;detail-&gt;arm64.operands[x].type == ARM64_OP_MEM)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;</operator> <literal type="number">3</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSHIFT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;arm.operands[x].mem.lshift</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSHIFT2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;arm.operands[x].shift.value</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSHIFT2_64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;arm64.operands[x].shift.value</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSHIFT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSHIFT2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSHIFT2_64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPCOUNT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;arm.op_count</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPCOUNT64</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;arm64.op_count</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSHIFTED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(insn-&gt;detail-&gt;arm.operands[x].shift.type != ARM_SFT_INVALID &amp;&amp; insn-&gt;detail-&gt;arm.operands[x].shift.value != 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFTTYPE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;arm.operands[x].shift.type</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFTVALUE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;arm.operands[x].shift.value</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISWRITEBACK64</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(insn-&gt;detail-&gt;arm64.writeback == true)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISPREINDEX32</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>((OPCOUNT64() == 2) &amp;&amp; (ISMEM64(1)) &amp;&amp; (ISWRITEBACK64()))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISPOSTINDEX32</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>((OPCOUNT64() == 3) &amp;&amp; (ISIMM64(2)) &amp;&amp; (ISWRITEBACK64()))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISPREINDEX64</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>((OPCOUNT64() == 3) &amp;&amp; (ISMEM64(2)) &amp;&amp; (ISWRITEBACK64()))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISPOSTINDEX64</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>((OPCOUNT64() == 4) &amp;&amp; (ISIMM64(3)) &amp;&amp; (ISWRITEBACK64()))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>RRegItem</name></type> <name><name>base_regs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RRegItem</name></type> <name><name>regdelta_regs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name><name>bitmask_by_width</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0xf</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x1ff</literal></expr>, <expr><literal type="number">0x3ff</literal></expr>, <expr><literal type="number">0x7ff</literal></expr>,

<expr><literal type="number">0xfff</literal></expr>, <expr><literal type="number">0x1fff</literal></expr>, <expr><literal type="number">0x3fff</literal></expr>, <expr><literal type="number">0x7fff</literal></expr>, <expr><literal type="number">0xffff</literal></expr>, <expr><literal type="number">0x1ffff</literal></expr>, <expr><literal type="number">0x3ffff</literal></expr>, <expr><literal type="number">0x7ffff</literal></expr>,

<expr><literal type="number">0xfffff</literal></expr>, <expr><literal type="number">0x1fffff</literal></expr>, <expr><literal type="number">0x3fffff</literal></expr>, <expr><literal type="number">0x7fffff</literal></expr>, <expr><literal type="number">0xffffff</literal></expr>, <expr><literal type="number">0x1ffffffLL</literal></expr>, <expr><literal type="number">0x3ffffffLL</literal></expr>,

<expr><literal type="number">0x7ffffffLL</literal></expr>, <expr><literal type="number">0xfffffffLL</literal></expr>, <expr><literal type="number">0x1fffffffLL</literal></expr>, <expr><literal type="number">0x3fffffffLL</literal></expr>, <expr><literal type="number">0x7fffffffLL</literal></expr>, <expr><literal type="number">0xffffffffLL</literal></expr>,

<expr><literal type="number">0x1ffffffffLL</literal></expr>, <expr><literal type="number">0x3ffffffffLL</literal></expr>, <expr><literal type="number">0x7ffffffffLL</literal></expr>, <expr><literal type="number">0xfffffffffLL</literal></expr>, <expr><literal type="number">0x1fffffffffLL</literal></expr>,

<expr><literal type="number">0x3fffffffffLL</literal></expr>, <expr><literal type="number">0x7fffffffffLL</literal></expr>, <expr><literal type="number">0xffffffffffLL</literal></expr>, <expr><literal type="number">0x1ffffffffffLL</literal></expr>, <expr><literal type="number">0x3ffffffffffLL</literal></expr>,

<expr><literal type="number">0x7ffffffffffLL</literal></expr>, <expr><literal type="number">0xfffffffffffLL</literal></expr>, <expr><literal type="number">0x1fffffffffffLL</literal></expr>, <expr><literal type="number">0x3fffffffffffLL</literal></expr>, <expr><literal type="number">0x7fffffffffffLL</literal></expr>,

<expr><literal type="number">0xffffffffffffLL</literal></expr>, <expr><literal type="number">0x1ffffffffffffLL</literal></expr>, <expr><literal type="number">0x3ffffffffffffLL</literal></expr>, <expr><literal type="number">0x7ffffffffffffLL</literal></expr>,

<expr><literal type="number">0xfffffffffffffLL</literal></expr>, <expr><literal type="number">0x1fffffffffffffLL</literal></expr>, <expr><literal type="number">0x3fffffffffffffLL</literal></expr>, <expr><literal type="number">0x7fffffffffffffLL</literal></expr>,

<expr><literal type="number">0xffffffffffffffLL</literal></expr>, <expr><literal type="number">0x1ffffffffffffffLL</literal></expr>, <expr><literal type="number">0x3ffffffffffffffLL</literal></expr>, <expr><literal type="number">0x7ffffffffffffffLL</literal></expr>,

<expr><literal type="number">0xfffffffffffffffLL</literal></expr>, <expr><literal type="number">0x1fffffffffffffffLL</literal></expr>, <expr><literal type="number">0x3fffffffffffffffLL</literal></expr>, <expr><literal type="number">0x7fffffffffffffffLL</literal></expr>, <expr><literal type="number">0xffffffffffffffffLL</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shift_type_name</name><parameter_list>(<parameter><decl><type><name>arm_shifter</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_SFT_ASR</name></expr>:</case>

<return>return <expr><literal type="string">"asr"</literal></expr>;</return>

<case>case <expr><name>ARM_SFT_LSL</name></expr>:</case>

<return>return <expr><literal type="string">"lsl"</literal></expr>;</return>

<case>case <expr><name>ARM_SFT_LSR</name></expr>:</case>

<return>return <expr><literal type="string">"lsr"</literal></expr>;</return>

<case>case <expr><name>ARM_SFT_ROR</name></expr>:</case>

<return>return <expr><literal type="string">"ror"</literal></expr>;</return>

<case>case <expr><name>ARM_SFT_RRX</name></expr>:</case>

<return>return <expr><literal type="string">"rrx"</literal></expr>;</return>

<case>case <expr><name>ARM_SFT_ASR_REG</name></expr>:</case>

<return>return <expr><literal type="string">"asr_reg"</literal></expr>;</return>

<case>case <expr><name>ARM_SFT_LSL_REG</name></expr>:</case>

<return>return <expr><literal type="string">"lsl_reg"</literal></expr>;</return>

<case>case <expr><name>ARM_SFT_LSR_REG</name></expr>:</case>

<return>return <expr><literal type="string">"lsr_reg"</literal></expr>;</return>

<case>case <expr><name>ARM_SFT_ROR_REG</name></expr>:</case>

<return>return <expr><literal type="string">"ror_reg"</literal></expr>;</return>

<case>case <expr><name>ARM_SFT_RRX_REG</name></expr>:</case>

<return>return <expr><literal type="string">"rrx_reg"</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vector_data_type_name</name><parameter_list>(<parameter><decl><type><name>arm_vectordata_type</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_VECTORDATA_I8</name></expr>:</case>

<return>return <expr><literal type="string">"i8"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_I16</name></expr>:</case>

<return>return <expr><literal type="string">"i16"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_I32</name></expr>:</case>

<return>return <expr><literal type="string">"i32"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_I64</name></expr>:</case>

<return>return <expr><literal type="string">"i64"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_S8</name></expr>:</case>

<return>return <expr><literal type="string">"s8"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_S16</name></expr>:</case>

<return>return <expr><literal type="string">"s16"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_S32</name></expr>:</case>

<return>return <expr><literal type="string">"s32"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_S64</name></expr>:</case>

<return>return <expr><literal type="string">"s64"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_U8</name></expr>:</case>

<return>return <expr><literal type="string">"u8"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_U16</name></expr>:</case>

<return>return <expr><literal type="string">"u16"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_U32</name></expr>:</case>

<return>return <expr><literal type="string">"u32"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_U64</name></expr>:</case>

<return>return <expr><literal type="string">"u64"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_P8</name></expr>:</case>

<return>return <expr><literal type="string">"p8"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_F32</name></expr>:</case>

<return>return <expr><literal type="string">"f32"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_F64</name></expr>:</case>

<return>return <expr><literal type="string">"f64"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_F16F64</name></expr>:</case>

<return>return <expr><literal type="string">"f16.f64"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_F64F16</name></expr>:</case>

<return>return <expr><literal type="string">"f64.f16"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_F32F16</name></expr>:</case>

<return>return <expr><literal type="string">"f32.f16"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_F16F32</name></expr>:</case>

<return>return <expr><literal type="string">"f16.f32"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_F64F32</name></expr>:</case>

<return>return <expr><literal type="string">"f64.f32"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_F32F64</name></expr>:</case>

<return>return <expr><literal type="string">"f32.f64"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_S32F32</name></expr>:</case>

<return>return <expr><literal type="string">"s32.f32"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_U32F32</name></expr>:</case>

<return>return <expr><literal type="string">"u32.f32"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_F32S32</name></expr>:</case>

<return>return <expr><literal type="string">"f32.s32"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_F32U32</name></expr>:</case>

<return>return <expr><literal type="string">"f32.u32"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_F64S16</name></expr>:</case>

<return>return <expr><literal type="string">"f64.s16"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_F32S16</name></expr>:</case>

<return>return <expr><literal type="string">"f32.s16"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_F64S32</name></expr>:</case>

<return>return <expr><literal type="string">"f64.s32"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_S16F64</name></expr>:</case>

<return>return <expr><literal type="string">"s16.f64"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_S16F32</name></expr>:</case>

<return>return <expr><literal type="string">"s16.f64"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_S32F64</name></expr>:</case>

<return>return <expr><literal type="string">"s32.f64"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_U16F64</name></expr>:</case>

<return>return <expr><literal type="string">"u16.f64"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_U16F32</name></expr>:</case>

<return>return <expr><literal type="string">"u16.f32"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_U32F64</name></expr>:</case>

<return>return <expr><literal type="string">"u32.f64"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_F64U16</name></expr>:</case>

<return>return <expr><literal type="string">"f64.u16"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_F32U16</name></expr>:</case>

<return>return <expr><literal type="string">"f32.u16"</literal></expr>;</return>

<case>case <expr><name>ARM_VECTORDATA_F64U32</name></expr>:</case>

<return>return <expr><literal type="string">"f64.u32"</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cc_name</name><parameter_list>(<parameter><decl><type><name>arm_cc</name></type> <name>cc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>cc</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_CC_EQ</name></expr>:</case> 

<return>return <expr><literal type="string">"eq"</literal></expr>;</return>

<case>case <expr><name>ARM_CC_NE</name></expr>:</case> 

<return>return <expr><literal type="string">"ne"</literal></expr>;</return>

<case>case <expr><name>ARM_CC_HS</name></expr>:</case> 

<return>return <expr><literal type="string">"hs"</literal></expr>;</return>

<case>case <expr><name>ARM_CC_LO</name></expr>:</case> 

<return>return <expr><literal type="string">"lo"</literal></expr>;</return>

<case>case <expr><name>ARM_CC_MI</name></expr>:</case> 

<return>return <expr><literal type="string">"mi"</literal></expr>;</return>

<case>case <expr><name>ARM_CC_PL</name></expr>:</case> 

<return>return <expr><literal type="string">"pl"</literal></expr>;</return>

<case>case <expr><name>ARM_CC_VS</name></expr>:</case> 

<return>return <expr><literal type="string">"vs"</literal></expr>;</return>

<case>case <expr><name>ARM_CC_VC</name></expr>:</case> 

<return>return <expr><literal type="string">"vc"</literal></expr>;</return>

<case>case <expr><name>ARM_CC_HI</name></expr>:</case> 

<return>return <expr><literal type="string">"hi"</literal></expr>;</return>

<case>case <expr><name>ARM_CC_LS</name></expr>:</case> 

<return>return <expr><literal type="string">"ls"</literal></expr>;</return>

<case>case <expr><name>ARM_CC_GE</name></expr>:</case> 

<return>return <expr><literal type="string">"ge"</literal></expr>;</return>

<case>case <expr><name>ARM_CC_LT</name></expr>:</case> 

<return>return <expr><literal type="string">"lt"</literal></expr>;</return>

<case>case <expr><name>ARM_CC_GT</name></expr>:</case> 

<return>return <expr><literal type="string">"gt"</literal></expr>;</return>

<case>case <expr><name>ARM_CC_LE</name></expr>:</case> 

<return>return <expr><literal type="string">"le"</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opex</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>csh</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>cs_arm</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>&amp;</operator><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"operands\":["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>op_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>cs_arm_op</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_OP_REG</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"reg\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_OP_IMM</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"imm\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>st32</name><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_OP_MEM</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"mem\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>base</name></name> <operator>!=</operator> <name>ARM_REG_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"base\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>index</name></name> <operator>!=</operator> <name>ARM_REG_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"index\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"scale\":%d"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"disp\":%d"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>disp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_OP_FP</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"fp\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":%lf"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_OP_CIMM</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"cimm\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>st32</name><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_OP_PIMM</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"pimm\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>st32</name><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_OP_SETEND</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"setend\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>setend</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_SETEND_BE</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":\"be\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_SETEND_LE</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":\"le\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":\"invalid\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>ARM_OP_SYSREG</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"sysreg\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"type\":\"invalid\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>shift</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>ARM_SFT_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"shift\":{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>shift</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_SFT_ASR</name></expr>:</case>

<case>case <expr><name>ARM_SFT_LSL</name></expr>:</case>

<case>case <expr><name>ARM_SFT_LSR</name></expr>:</case>

<case>case <expr><name>ARM_SFT_ROR</name></expr>:</case>

<case>case <expr><name>ARM_SFT_RRX</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>shift_type_name</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>shift</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":\"%u\""</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>shift</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_SFT_ASR_REG</name></expr>:</case>

<case>case <expr><name>ARM_SFT_LSL_REG</name></expr>:</case>

<case>case <expr><name>ARM_SFT_LSR_REG</name></expr>:</case>

<case>case <expr><name>ARM_SFT_ROR_REG</name></expr>:</case>

<case>case <expr><name>ARM_SFT_RRX_REG</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>shift_type_name</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>shift</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":\"%d\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>shift</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>vector_index</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"vector_index\":\"%d\""</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>vector_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>subtracted</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"subtracted\":true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>usermode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"usermode\":true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>update_flags</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"update_flags\":true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>writeback</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"writeback\":true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>vector_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"vector_size\":%d"</literal></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>vector_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>vector_data</name></name> <operator>!=</operator> <name>ARM_VECTORDATA_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"vector_data\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>vector_data_type_name</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>vector_data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>cps_mode</name></name> <operator>!=</operator> <name>ARM_CPSMODE_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"cps_mode\":%d"</literal></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>cps_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>cps_flag</name></name> <operator>!=</operator> <name>ARM_CPSFLAG_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"cps_flag\":%d"</literal></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>cps_flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>cc</name></name> <operator>!=</operator> <name>ARM_CC_INVALID</name> <operator>&amp;&amp;</operator> <name><name>x</name><operator>-&gt;</operator><name>cc</name></name> <operator>!=</operator> <name>ARM_CC_AL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"cc\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cc_name</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>mem_barrier</name></name> <operator>!=</operator> <name>ARM_MB_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"mem_barrier\":%d"</literal></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>mem_barrier</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>arm64_reg_width</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>reg</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM64_REG_W0</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W1</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W2</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W3</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W4</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W5</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W6</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W7</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W8</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W9</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W10</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W11</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W12</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W13</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W14</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W15</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W16</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W17</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W18</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W19</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W20</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W21</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W22</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W23</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W24</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W25</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W26</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W27</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W28</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W29</name></expr>:</case>

<case>case <expr><name>ARM64_REG_W30</name></expr>:</case>

<return>return <expr><literal type="number">32</literal></expr>;</return>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">64</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cc_name64</name><parameter_list>(<parameter><decl><type><name>arm64_cc</name></type> <name>cc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>cc</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM64_CC_EQ</name></expr>:</case> 

<return>return <expr><literal type="string">"eq"</literal></expr>;</return>

<case>case <expr><name>ARM64_CC_NE</name></expr>:</case> 

<return>return <expr><literal type="string">"ne"</literal></expr>;</return>

<case>case <expr><name>ARM64_CC_HS</name></expr>:</case> 

<return>return <expr><literal type="string">"hs"</literal></expr>;</return>

<case>case <expr><name>ARM64_CC_LO</name></expr>:</case> 

<return>return <expr><literal type="string">"lo"</literal></expr>;</return>

<case>case <expr><name>ARM64_CC_MI</name></expr>:</case> 

<return>return <expr><literal type="string">"mi"</literal></expr>;</return>

<case>case <expr><name>ARM64_CC_PL</name></expr>:</case> 

<return>return <expr><literal type="string">"pl"</literal></expr>;</return>

<case>case <expr><name>ARM64_CC_VS</name></expr>:</case> 

<return>return <expr><literal type="string">"vs"</literal></expr>;</return>

<case>case <expr><name>ARM64_CC_VC</name></expr>:</case> 

<return>return <expr><literal type="string">"vc"</literal></expr>;</return>

<case>case <expr><name>ARM64_CC_HI</name></expr>:</case> 

<return>return <expr><literal type="string">"hi"</literal></expr>;</return>

<case>case <expr><name>ARM64_CC_LS</name></expr>:</case> 

<return>return <expr><literal type="string">"ls"</literal></expr>;</return>

<case>case <expr><name>ARM64_CC_GE</name></expr>:</case> 

<return>return <expr><literal type="string">"ge"</literal></expr>;</return>

<case>case <expr><name>ARM64_CC_LT</name></expr>:</case> 

<return>return <expr><literal type="string">"lt"</literal></expr>;</return>

<case>case <expr><name>ARM64_CC_GT</name></expr>:</case> 

<return>return <expr><literal type="string">"gt"</literal></expr>;</return>

<case>case <expr><name>ARM64_CC_LE</name></expr>:</case> 

<return>return <expr><literal type="string">"le"</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extender_name</name><parameter_list>(<parameter><decl><type><name>arm64_extender</name></type> <name>extender</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>extender</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM64_EXT_UXTB</name></expr>:</case>

<return>return <expr><literal type="string">"uxtb"</literal></expr>;</return>

<case>case <expr><name>ARM64_EXT_UXTH</name></expr>:</case>

<return>return <expr><literal type="string">"uxth"</literal></expr>;</return>

<case>case <expr><name>ARM64_EXT_UXTW</name></expr>:</case>

<return>return <expr><literal type="string">"uxtw"</literal></expr>;</return>

<case>case <expr><name>ARM64_EXT_UXTX</name></expr>:</case>

<return>return <expr><literal type="string">"uxtx"</literal></expr>;</return>

<case>case <expr><name>ARM64_EXT_SXTB</name></expr>:</case>

<return>return <expr><literal type="string">"sxtb"</literal></expr>;</return>

<case>case <expr><name>ARM64_EXT_SXTH</name></expr>:</case>

<return>return <expr><literal type="string">"sxth"</literal></expr>;</return>

<case>case <expr><name>ARM64_EXT_SXTW</name></expr>:</case>

<return>return <expr><literal type="string">"sxtw"</literal></expr>;</return>

<case>case <expr><name>ARM64_EXT_SXTX</name></expr>:</case>

<return>return <expr><literal type="string">"sxtx"</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vas_name</name><parameter_list>(<parameter><decl><type><name>arm64_vas</name></type> <name>vas</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>vas</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM64_VAS_8B</name></expr>:</case>

<return>return <expr><literal type="string">"8b"</literal></expr>;</return>

<case>case <expr><name>ARM64_VAS_16B</name></expr>:</case>

<return>return <expr><literal type="string">"16b"</literal></expr>;</return>

<case>case <expr><name>ARM64_VAS_4H</name></expr>:</case>

<return>return <expr><literal type="string">"4h"</literal></expr>;</return>

<case>case <expr><name>ARM64_VAS_8H</name></expr>:</case>

<return>return <expr><literal type="string">"8h"</literal></expr>;</return>

<case>case <expr><name>ARM64_VAS_2S</name></expr>:</case>

<return>return <expr><literal type="string">"2s"</literal></expr>;</return>

<case>case <expr><name>ARM64_VAS_4S</name></expr>:</case>

<return>return <expr><literal type="string">"4s"</literal></expr>;</return>

<case>case <expr><name>ARM64_VAS_2D</name></expr>:</case>

<return>return <expr><literal type="string">"2d"</literal></expr>;</return>

<case>case <expr><name>ARM64_VAS_1D</name></expr>:</case>

<return>return <expr><literal type="string">"1d"</literal></expr>;</return>

<case>case <expr><name>ARM64_VAS_1Q</name></expr>:</case>

<return>return <expr><literal type="string">"1q"</literal></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;</operator> <literal type="number">4</literal></expr></cpp:if>

<case>case <expr><name>ARM64_VAS_1B</name></expr>:</case>

<return>return <expr><literal type="string">"8b"</literal></expr>;</return>

<case>case <expr><name>ARM64_VAS_4B</name></expr>:</case>

<return>return <expr><literal type="string">"8b"</literal></expr>;</return>

<case>case <expr><name>ARM64_VAS_2H</name></expr>:</case>

<return>return <expr><literal type="string">"2h"</literal></expr>;</return>

<case>case <expr><name>ARM64_VAS_1H</name></expr>:</case>

<return>return <expr><literal type="string">"1h"</literal></expr>;</return>

<case>case <expr><name>ARM64_VAS_1S</name></expr>:</case>

<return>return <expr><literal type="string">"1s"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vess_name</name><parameter_list>(<parameter><decl><type><name>arm64_vess</name></type> <name>vess</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>vess</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM64_VESS_B</name></expr>:</case>

<return>return <expr><literal type="string">"b"</literal></expr>;</return>

<case>case <expr><name>ARM64_VESS_H</name></expr>:</case>

<return>return <expr><literal type="string">"h"</literal></expr>;</return>

<case>case <expr><name>ARM64_VESS_S</name></expr>:</case>

<return>return <expr><literal type="string">"s"</literal></expr>;</return>

<case>case <expr><name>ARM64_VESS_D</name></expr>:</case>

<return>return <expr><literal type="string">"d"</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opex64</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>csh</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>cs_arm64</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>&amp;</operator><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm64</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"operands\":["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>op_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>cs_arm64_op</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM64_OP_REG</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"reg\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_OP_REG_MRS</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"reg_mrs\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_OP_REG_MSR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"reg_msr\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_OP_IMM</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"imm\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_OP_MEM</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"mem\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>base</name></name> <operator>!=</operator> <name>ARM64_REG_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"base\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>index</name></name> <operator>!=</operator> <name>ARM64_REG_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"index\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"disp\":%d"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>disp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_OP_FP</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"fp\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":%lf"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_OP_CIMM</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"cimm\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_OP_PSTATE</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"pstate\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>pstate</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM64_PSTATE_SPSEL</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":\"spsel\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_PSTATE_DAIFSET</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":\"daifset\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_PSTATE_DAIFCLR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":\"daifclr\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":%d"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>pstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>ARM64_OP_SYS</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"sys\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":%u"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_OP_PREFETCH</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"prefetch\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":%d"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>prefetch</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_OP_BARRIER</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"prefetch\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":%d"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>barrier</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"type\":\"invalid\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>shift</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>ARM64_SFT_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"shift\":{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>shift</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM64_SFT_LSL</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"lsl\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_SFT_MSL</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"msl\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_SFT_LSR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"lsr\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_SFT_ASR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"asr\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_SFT_ROR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"ror\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":\"%u\""</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>shift</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ext</name></name> <operator>!=</operator> <name>ARM64_EXT_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"ext\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>extender_name</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>vector_index</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"vector_index\":\"%d\""</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>vector_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>vas</name></name> <operator>!=</operator> <name>ARM64_VAS_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"vas\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>vas_name</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>vas</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>vess</name></name> <operator>!=</operator> <name>ARM64_VESS_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"vess\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>vess_name</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>vess</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>update_flags</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"update_flags\":true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>writeback</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"writeback\":true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>cc</name></name> <operator>!=</operator> <name>ARM64_CC_INVALID</name> <operator>&amp;&amp;</operator> <name><name>x</name><operator>-&gt;</operator><name>cc</name></name> <operator>!=</operator> <name>ARM64_CC_AL</name> <operator>&amp;&amp;</operator> <name><name>x</name><operator>-&gt;</operator><name>cc</name></name> <operator>!=</operator> <name>ARM64_CC_NV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"cc\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cc_name64</name> <argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>decode_shift</name><parameter_list>(<parameter><decl><type><name>arm_shifter</name></type> <name>shift</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>E_OP_SR</name> <init>= <expr><literal type="string">"&gt;&gt;"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>E_OP_SL</name> <init>= <expr><literal type="string">"&lt;&lt;"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>E_OP_RR</name> <init>= <expr><literal type="string">"&gt;&gt;&gt;"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>E_OP_ASR</name> <init>= <expr><literal type="string">"&gt;&gt;&gt;&gt;"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>E_OP_VOID</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>shift</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_SFT_ASR</name></expr>:</case>

<case>case <expr><name>ARM_SFT_ASR_REG</name></expr>:</case>

<return>return <expr><name>E_OP_ASR</name></expr>;</return>

<case>case <expr><name>ARM_SFT_LSR</name></expr>:</case>

<case>case <expr><name>ARM_SFT_LSR_REG</name></expr>:</case>

<return>return <expr><name>E_OP_SR</name></expr>;</return>

<case>case <expr><name>ARM_SFT_LSL</name></expr>:</case>

<case>case <expr><name>ARM_SFT_LSL_REG</name></expr>:</case>

<return>return <expr><name>E_OP_SL</name></expr>;</return>

<case>case <expr><name>ARM_SFT_ROR</name></expr>:</case>

<case>case <expr><name>ARM_SFT_RRX</name></expr>:</case>

<case>case <expr><name>ARM_SFT_ROR_REG</name></expr>:</case>

<case>case <expr><name>ARM_SFT_RRX_REG</name></expr>:</case>

<return>return <expr><name>E_OP_RR</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>E_OP_VOID</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>decode_shift_64</name><parameter_list>(<parameter><decl><type><name>arm64_shifter</name></type> <name>shift</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>E_OP_SR</name> <init>= <expr><literal type="string">"&gt;&gt;"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>E_OP_SL</name> <init>= <expr><literal type="string">"&lt;&lt;"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>E_OP_RR</name> <init>= <expr><literal type="string">"&gt;&gt;&gt;"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>E_OP_VOID</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>shift</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM64_SFT_ASR</name></expr>:</case>

<case>case <expr><name>ARM64_SFT_LSR</name></expr>:</case>

<return>return <expr><name>E_OP_SR</name></expr>;</return>

<case>case <expr><name>ARM64_SFT_LSL</name></expr>:</case>

<case>case <expr><name>ARM64_SFT_MSL</name></expr>:</case>

<return>return <expr><name>E_OP_SL</name></expr>;</return>

<case>case <expr><name>ARM64_SFT_ROR</name></expr>:</case>

<return>return <expr><name>E_OP_RR</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>E_OP_VOID</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE_SHIFT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>decode_shift(insn-&gt;detail-&gt;arm.operands[x].shift.type)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE_SHIFT64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>decode_shift_64(insn-&gt;detail-&gt;arm64.operands[x].shift.type)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>regsize64</name><parameter_list>(<parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>reg</name> <init>= <expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm64</name><operator>.</operator><name>operands</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>reg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>reg</name> <operator>&gt;=</operator> <name>ARM64_REG_S0</name> <operator>&amp;&amp;</operator> <name>reg</name> <operator>&lt;=</operator> <name>ARM64_REG_S31</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>reg</name> <operator>&gt;=</operator> <name>ARM64_REG_W0</name> <operator>&amp;&amp;</operator> <name>reg</name> <operator>&lt;=</operator> <name>ARM64_REG_W30</name><operator>)</operator> <operator>||</operator>

<name>reg</name> <operator>==</operator> <name>ARM64_REG_WZR</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&gt;=</operator> <name>ARM64_REG_B0</name> <operator>&amp;&amp;</operator> <name>reg</name> <operator>&lt;=</operator> <name>ARM64_REG_B31</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&gt;=</operator> <name>ARM64_REG_H0</name> <operator>&amp;&amp;</operator> <name>reg</name> <operator>&lt;=</operator> <name>ARM64_REG_H31</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&gt;=</operator> <name>ARM64_REG_Q0</name> <operator>&amp;&amp;</operator> <name>reg</name> <operator>&lt;=</operator> <name>ARM64_REG_Q31</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">16</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">8</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGSIZE64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>regsize64 (insn, x)</cpp:value></cpp:define>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>arm_prefix_cond</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cond_type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>close_cond</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>close_cond</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"\0"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>close_cond</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">",}\0"</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>close_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>cond_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_CC_EQ</name></expr>:</case>

<expr_stmt><expr><name>close_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"zf,?{,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_CC_NE</name></expr>:</case>

<expr_stmt><expr><name>close_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"zf,!,?{,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_CC_HS</name></expr>:</case>

<expr_stmt><expr><name>close_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"cf,?{,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_CC_LO</name></expr>:</case>

<expr_stmt><expr><name>close_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"cf,!,?{,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_CC_MI</name></expr>:</case>

<expr_stmt><expr><name>close_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"nf,?{,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_CC_PL</name></expr>:</case>

<expr_stmt><expr><name>close_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"nf,!,?{,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_CC_VS</name></expr>:</case>

<expr_stmt><expr><name>close_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"vf,?{,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_CC_VC</name></expr>:</case>

<expr_stmt><expr><name>close_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"vf,!,?{,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_CC_HI</name></expr>:</case>

<expr_stmt><expr><name>close_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"cf,zf,!,&amp;,?{,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_CC_LS</name></expr>:</case>

<expr_stmt><expr><name>close_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"cf,!,zf,!,|,?{,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_CC_GE</name></expr>:</case>

<expr_stmt><expr><name>close_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"nf,vf,^,!,?{,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_CC_LT</name></expr>:</case>

<expr_stmt><expr><name>close_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"nf,vf,^,?{,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_CC_GT</name></expr>:</case>

<expr_stmt><expr><name>close_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"zf,!,nf,vf,^,!,&amp;,?{,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_CC_LE</name></expr>:</case>

<expr_stmt><expr><name>close_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"zf,nf,vf,^,|,?{,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_CC_AL</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name><name>close_cond</name><index>[<expr><name>close_type</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>csh</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>operands</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_OP_REG</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>ISSHIFTED</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%u,%s,%s"</literal></expr></argument>,

<argument><expr><call><name>LSHIFT2</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>r_str_get</name> <argument_list>(<argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>,

<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>operands</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>DECODE_SHIFT</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><call><name>r_str_get</name> <argument_list>(<argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>,

<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>operands</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_OP_IMM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator>

<name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>operands</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>ut32</name><operator>)</operator>

<name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>operands</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_OP_MEM</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>ARM_OP_FP</name></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>operands</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>arg(a, handle, insn, str[x], x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFTED_REG64_APPEND</name><parameter_list>(<parameter><type><name>sb</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>shifted_reg64_append(sb, handle, insn, n)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shifted_reg64_append</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>csh</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm64</name><operator>.</operator><name>operands</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>shift</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>ARM64_SFT_ASR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%d,%s,%s"</literal></expr></argument>, <argument><expr><call><name>LSHIFT2_64</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DECODE_SHIFT64</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>LSHIFT2_64</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>missing_ones</name> <init>= <expr><name><name>bitmask_by_width</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><call><name>REGSIZE64</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <call><name>LSHIFT2_64</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%d,%s,%s,1,%s,&lt;&lt;&lt;,1,&amp;,?{,%"</literal><name>PFMT64u</name><literal type="string">",}{,0,},|"</literal></expr></argument>,

<argument><expr><call><name>LSHIFT2_64</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DECODE_SHIFT64</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>missing_ones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPCALL</name><parameter_list>(<parameter><type><name>opchar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>arm64math(a, op, addr, buf, len, handle, insn, opchar, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPCALL_NEG</name><parameter_list>(<parameter><type><name>opchar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>arm64math(a, op, addr, buf, len, handle, insn, opchar, 1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>arm64math</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>csh</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opchar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>negate</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r0</name> <init>= <expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r1</name> <init>= <expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ISREG64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>LSHIFT2_64</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SHIFTED_REG64_APPEND</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>negate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",-1,^"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>REGID64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>REGID64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%s,%s="</literal></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>opchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%s,%s,%s,="</literal></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>opchar</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r2</name> <init>= <expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>negate</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>REGID64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>REGID64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,-1,^,%s,%s="</literal></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>opchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,-1,^,%s,%s,%s,="</literal></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>opchar</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>REGID64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>REGID64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%s="</literal></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>opchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%s,%s,="</literal></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>opchar</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>i2</name> <init>= <expr><call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>negate</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>REGID64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>REGID64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",-1,^,%s,%s="</literal></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>opchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",-1,^,%s,%s,%s,="</literal></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>opchar</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>REGID64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>REGID64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",%s,%s="</literal></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>opchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",%s,%s,%s,="</literal></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>opchar</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>analop64_esil</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>csh</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>postfix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>postfix</name> <operator>=</operator> <call><name>arm_prefix_cond</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm64</name><operator>.</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM64_INS_REV</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r0</name> <init>= <expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r1</name> <init>= <expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>REGSIZE64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

r_strbuf_setf (&amp;op-&gt;esil,

"0,%s,=," 

"%d," 

"DUP," 

"DUP,1,SWAP,-,8,*," 

"DUP,0xff,&lt;&lt;,%s,&amp;,&gt;&gt;," 

"SWAP,%d,-,8,*," 

"SWAP,&lt;&lt;,%s,|=," 

"4,REPEAT", 

r0, size, r1, size, r0);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"56,0xff,%s,&amp;,&lt;&lt;,%s,=,"</literal>

<literal type="string">"48,0xff,8,%s,&gt;&gt;,&amp;,&lt;&lt;,%s,|=,"</literal>

<literal type="string">"40,0xff,16,%s,&gt;&gt;,&amp;,&lt;&lt;,%s,|=,"</literal>

<literal type="string">"32,0xff,24,%s,&gt;&gt;,&amp;,&lt;&lt;,%s,|=,"</literal>

<literal type="string">"24,0xff,32,%s,&gt;&gt;,&amp;,&lt;&lt;,%s,|=,"</literal>

<literal type="string">"16,0xff,40,%s,&gt;&gt;,&amp;,&lt;&lt;,%s,|=,"</literal>

<literal type="string">"8,0xff,48,%s,&gt;&gt;,&amp;,&lt;&lt;,%s,|=,"</literal>

<literal type="string">"0xff,56,%s,&gt;&gt;,&amp;,%s,|=,"</literal></expr></argument>,

<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>,

<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"24,0xff,%s,&amp;,&lt;&lt;,%s,=,"</literal>

<literal type="string">"16,0xff,8,%s,&gt;&gt;,&amp;,&lt;&lt;,%s,|=,"</literal>

<literal type="string">"8,0xff,16,%s,&gt;&gt;,&amp;,&lt;&lt;,%s,|=,"</literal>

<literal type="string">"0xff,24,%s,&gt;&gt;,&amp;,%s,|=,"</literal></expr></argument>,

<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ARM64_INS_REV32</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r0</name> <init>= <expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r1</name> <init>= <expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"24,0x000000ff000000ff,%s,&amp;,&lt;&lt;,%s,=,"</literal>

<literal type="string">"16,0x000000ff000000ff,8,%s,&gt;&gt;,&amp;,&lt;&lt;,%s,|=,"</literal>

<literal type="string">"8,0x000000ff000000ff,16,%s,&gt;&gt;,&amp;,&lt;&lt;,%s,|=,"</literal>

<literal type="string">"0x000000ff000000ff,24,%s,&gt;&gt;,&amp;,%s,|=,"</literal></expr></argument>,

<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ARM64_INS_REV16</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r0</name> <init>= <expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r1</name> <init>= <expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"8,0xff00ff00ff00ff00,%s,&amp;,&gt;&gt;,%s,=,"</literal>

<literal type="string">"8,0x00ff00ff00ff00ff,%s,&amp;,&lt;&lt;,%s,|=,"</literal></expr></argument>,

<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ARM64_INS_ADR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",%s,="</literal></expr></argument>, <argument><expr><call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_UMADDL</name></expr>:</case>

<case>case <expr><name>ARM64_INS_SMADDL</name></expr>:</case>

<case>case <expr><name>ARM64_INS_FMADD</name></expr>:</case>

<case>case <expr><name>ARM64_INS_MADD</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,*,%s,+,%s,="</literal></expr></argument>,

<argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_MSUB</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,*,%s,-,%s,="</literal></expr></argument>,

<argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_ADD</name></expr>:</case>

<case>case <expr><name>ARM64_INS_ADC</name></expr>:</case> 

<expr_stmt><expr><call><name>OPCALL</name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_SUB</name></expr>:</case>

<expr_stmt><expr><call><name>OPCALL</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_SMULL</name></expr>:</case>

<case>case <expr><name>ARM64_INS_MUL</name></expr>:</case>

<expr_stmt><expr><call><name>OPCALL</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_AND</name></expr>:</case>

<expr_stmt><expr><call><name>OPCALL</name><argument_list>(<argument><expr><literal type="string">"&amp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_ORR</name></expr>:</case>

<expr_stmt><expr><call><name>OPCALL</name><argument_list>(<argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_EOR</name></expr>:</case>

<expr_stmt><expr><call><name>OPCALL</name><argument_list>(<argument><expr><literal type="string">"^"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_ORN</name></expr>:</case>

<expr_stmt><expr><call><name>OPCALL_NEG</name><argument_list>(<argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_EON</name></expr>:</case>

<expr_stmt><expr><call><name>OPCALL_NEG</name><argument_list>(<argument><expr><literal type="string">"^"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_LSR</name></expr>:</case>

<expr_stmt><expr><call><name>OPCALL</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_LSL</name></expr>:</case>

<expr_stmt><expr><call><name>OPCALL</name><argument_list>(<argument><expr><literal type="string">"&lt;&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_ROR</name></expr>:</case>

<expr_stmt><expr><call><name>OPCALL</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_STURB</name></expr>:</case> 

<break>break;</break>

<case>case <expr><name>ARM64_INS_NOP</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_FDIV</name></expr>:</case>

<case>case <expr><name>ARM64_INS_SDIV</name></expr>:</case>

<case>case <expr><name>ARM64_INS_UDIV</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,/="</literal></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_BR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,pc,="</literal></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_B</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",pc,="</literal></expr></argument>, <argument><expr><call><name>IMM64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_BL</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"pc,lr,=,%"</literal><name>PFMT64d</name><literal type="string">",pc,="</literal></expr></argument>, <argument><expr><call><name>IMM64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_BLR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"pc,lr,=,%s,pc,="</literal></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_LDRH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDUR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRSB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRSW</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDURSW</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>REGSIZE64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM64_INS_LDRSB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRB</name></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_LDRH</name></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_LDRSW</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDURSW</name></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>ISMEM64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>HASMEMINDEX64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>LSHIFT2_64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%d,%s,%s,+,[%d],%s,="</literal></expr></argument>,

<argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LSHIFT2_64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMINDEX64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DECODE_SHIFT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,[%d],%s,="</literal></expr></argument>,

<argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMINDEX64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>LSHIFT2_64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%d,%"</literal><name>PFMT64d</name><literal type="string">",%s,+,[%d],%s,="</literal></expr></argument>,

<argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LSHIFT2_64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMDISP64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DECODE_SHIFT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><call><name>MEMDISP64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",%s,-,DUP,tmp,=,[%d],%s,=,"</literal></expr></argument>,

<argument><expr><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>MEMDISP64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",%s,+,DUP,tmp,=,[%d],%s,=,"</literal></expr></argument>,

<argument><expr><call><name>MEMDISP64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISREG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>OPCOUNT64</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[%d],%s,="</literal></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>OPCOUNT64</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISREG64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,[%d],%s,="</literal></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",[%d],%s,="</literal></expr></argument>,

<argument><expr><call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ARM64_INS_FCMP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_CCMP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_CCMN</name></expr>:</case>

<case>case <expr><name>ARM64_INS_TST</name></expr>:</case> 

<case>case <expr><name>ARM64_INS_CMP</name></expr>:</case> 

<case>case <expr><name>ARM64_INS_CMN</name></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><call><name>arm64_reg_width</name><argument_list>(<argument><expr><call><name>REGID64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ISIMM64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",%s,==,$z,zf,:=,%d,$s,nf,:=,%d,$b,!,cf,:=,%d,$o,vf,:="</literal></expr></argument>, <argument><expr><call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bits</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>bits</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,==,$z,zf,:=,%d,$s,nf,:=,%d,$b,!,cf,:=,%d,$o,vf,:="</literal></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bits</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>bits</name> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ARM64_INS_FCSEL</name></expr>:</case>

<case>case <expr><name>ARM64_INS_CSEL</name></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,}{,%s,},%s,="</literal></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>postfix</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_CSET</name></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,}{,0,},%s,="</literal></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>postfix</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_CINC</name></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,%s,+,}{,%s,},%s,="</literal></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>postfix</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_CSINC</name></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,}{,1,%s,+,},%s,="</literal></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>postfix</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_STXRB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STXRH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STXR</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>REGSIZE64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>ARM64_INS_STXRB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>ARM64_INS_STXRH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%"</literal><name>PFMT64d</name><literal type="string">",+,=[%d]"</literal></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMDISP64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ARM64_INS_STRB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STRH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STUR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STR</name></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>REGSIZE64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>disp</name> <init>= <expr><call><name>MEMDISP64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><name>disp</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="char">'+'</literal></expr></then><else>:<expr><literal type="char">'-'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>abs</name> <init>= <expr><ternary><condition><expr><name>disp</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then> <expr><call><name>MEMDISP64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></then><else>: <expr><operator>-</operator><call><name>MEMDISP64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>ARM64_INS_STRB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>ARM64_INS_STRH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ISPREINDEX32</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",%s,%c=,%s,0x%"</literal><name>PFMT64x</name><literal type="string">",%s,%c,=[%d]"</literal></expr></argument>,

<argument><expr><name>abs</name></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sign</name></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ISPOSTINDEX32</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name>val</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="char">'+'</literal></expr></then><else>:<expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>abs</name> <operator>=</operator> <ternary><condition><expr><name>val</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then> <expr><name>val</name></expr></then><else>: <expr><operator>-</operator><name>val</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,=[%d],%"</literal><name>PFMT64d</name><literal type="string">",%s,%c="</literal></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>,

<argument><expr><name>abs</name></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0x%"</literal><name>PFMT64x</name><literal type="string">",%s,%c,=[%d]"</literal></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ARM64_INS_BIC</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>OPCOUNT64</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>REGSIZE64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0xffffffff,^,%s,&amp;="</literal></expr></argument>,<argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0xffffffffffffffff,^,%s,&amp;="</literal></expr></argument>,<argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>REGSIZE64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0xffffffff,^,%s,&amp;,%s,="</literal></expr></argument>,<argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0xffffffffffffffff,^,%s,&amp;,%s,="</literal></expr></argument>,<argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_CBZ</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,!,?{,%"</literal><name>PFMT64d</name><literal type="string">",pc,=,}"</literal></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_CBNZ</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,?{,%"</literal><name>PFMT64d</name><literal type="string">",pc,=,}"</literal></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_TBZ</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,1,&lt;&lt;,%s,&amp;,!,?{,%"</literal><name>PFMT64d</name><literal type="string">",pc,=,}"</literal></expr></argument>,

<argument><expr><call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_TBNZ</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,1,&lt;&lt;,%s,&amp;,?{,%"</literal><name>PFMT64d</name><literal type="string">",pc,=,}"</literal></expr></argument>,

<argument><expr><call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_STP</name></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>disp</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>MEMDISP64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><name>disp</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="char">'+'</literal></expr></then><else>:<expr><literal type="char">'-'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>abs</name> <init>= <expr><ternary><condition><expr><name>disp</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then> <expr><call><name>MEMDISP64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></then><else>: <expr><operator>-</operator><call><name>MEMDISP64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>REGSIZE64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ISPREINDEX64</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",%s,%c=,%s,%s,=[%d],%s,%s,%d,+,=[%d]"</literal></expr></argument>,

<argument><expr><name>abs</name></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sign</name></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ISPOSTINDEX64</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name>val</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="char">'+'</literal></expr></then><else>:<expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>abs</name> <operator>=</operator> <ternary><condition><expr><name>val</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then> <expr><name>val</name></expr></then><else>: <expr><operator>-</operator><name>val</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"%s,%s,=[%d],%s,%s,%d,+,=[%d],%d,%s,%c="</literal></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,

<argument><expr><name>abs</name></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"%s,%s,%"</literal><name>PFMT64d</name><literal type="string">",%c,=[%d],"</literal>

<literal type="string">"%s,%s,%"</literal><name>PFMT64d</name><literal type="string">",%c,%d,+,=[%d]"</literal></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>ARM64_INS_LDP</name></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>disp</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>MEMDISP64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><name>disp</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="char">'+'</literal></expr></then><else>:<expr><literal type="char">'-'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>abs</name> <init>= <expr><ternary><condition><expr><name>disp</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then> <expr><call><name>MEMDISP64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></then><else>: <expr><operator>-</operator><call><name>MEMDISP64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>REGSIZE64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ISPREINDEX64</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",%s,%c=,"</literal>

<literal type="string">"%s,[%d],%s,=,"</literal>

<literal type="string">"%s,%d,+,[%d],%s,="</literal></expr></argument>,

<argument><expr><name>abs</name></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sign</name></expr></argument>,

<argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ISPOSTINDEX64</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name>val</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="char">'+'</literal></expr></then><else>:<expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>abs</name> <operator>=</operator> <ternary><condition><expr><name>val</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then> <expr><name>val</name></expr></then><else>: <expr><operator>-</operator><name>val</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"%s,[%d],%s,=,"</literal>

<literal type="string">"%s,%d,+,[%d],%s,=,"</literal>

<literal type="string">"%d,%s,%c="</literal></expr></argument>,

<argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>abs</name></expr></argument>, <argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"%s,%"</literal><name>PFMT64d</name><literal type="string">",%c,[%d],%s,=,"</literal>

<literal type="string">"%s,%"</literal><name>PFMT64d</name><literal type="string">",%c,%d,%c,[%d],%s,="</literal></expr></argument>,

<argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>MEMBASE64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>ARM64_INS_ADRP</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",%s,="</literal></expr></argument>,

<argument><expr><call><name>IMM64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_MOV</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>ISREG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,="</literal></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",%s,="</literal></expr></argument>, <argument><expr><call><name>IMM64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_MOVN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>ISREG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,-1,^,%s,="</literal></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",-1,^,%s,="</literal></expr></argument>, <argument><expr><call><name>IMM64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_MOVK</name></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>shift</name> <init>= <expr><call><name>LSHIFT2_64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>shift</name> <operator>&gt;</operator> <literal type="number">48</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>shifted_imm</name> <init>= <expr><call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>shift</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>mask</name> <init>= <expr><operator>~</operator><operator>(</operator><literal type="number">0xffffLL</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64u</name><literal type="string">",%s,&amp;,%"</literal><name>PFMT64u</name><literal type="string">",|,%s,="</literal></expr></argument>,

<argument><expr><name>mask</name></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>shifted_imm</name></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ARM64_INS_MOVZ</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64u</name><literal type="string">",%s,="</literal></expr></argument>,

<argument><expr><call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>LSHIFT2_64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_ASR</name></expr>:</case>

<expr_stmt><expr><call><name>OPCALL</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_SXTB</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>arm64_reg_width</name><argument_list>(<argument><expr><call><name>REGID64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,=,8,%s,&gt;&gt;,%s,%s,=,%s,%s,&amp;=,31,$c,?{,0xffffff00,%s,|=}"</literal></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"0xff"</literal></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,=,8,%s,&gt;&gt;,%s,%s,=,%s,%s,&amp;=,63,$c,?{,0xffffffffffffff00,%s,|=}"</literal></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"0xff"</literal></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_SXTH</name></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><name>arm64_reg_width</name><argument_list>(<argument><expr><call><name>REGID64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,=,16,%s,&gt;&gt;,%s,%s,=,%s,%s,&amp;=,31,$c,?{,0xffff0000,%s,|=}"</literal></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"0xffff"</literal></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,=,16,%s,&gt;&gt;,%s,%s,=,%s,%s,&amp;=,63,$c,?{,0xffffffffffffff00,%s,|=}"</literal></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"0xffff"</literal></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_SXTW</name></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,=,32,%s,&gt;&gt;,%s,%s,=,%s,%s,&amp;=,63,$c,?{,0xffffffffffffff00,%s,|=}"</literal></expr></argument>,

<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"0xffffffff"</literal></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_UXTB</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0xff,&amp;,%s,="</literal></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_UXTH</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0xffff,&amp;,%s,="</literal></expr></argument>, <argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>REG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_RET</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"lr,pc,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_ERET</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"lr,pc,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_BFI</name></expr>:</case> 

<case>case <expr><name>ARM64_INS_BFXIL</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>OPCOUNT64</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>ISIMM64</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IMM64</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>mask</name> <init>= <expr><name><name>bitmask_by_width</name><index>[<expr><call><name>IMM64</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>shift</name> <init>= <expr><call><name>IMM64</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>notmask</name> <init>= <expr><operator>~</operator><operator>(</operator><name>mask</name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64u</name><literal type="string">",%s,&amp;,%"</literal><name>PFMT64u</name><literal type="string">",%"</literal><name>PFMT64u</name><literal type="string">",%s,&amp;,&lt;&lt;,|,%s,="</literal></expr></argument>,

<argument><expr><name>notmask</name></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ARM64_INS_UBFX</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>IMM64</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>IMM64</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">64</literal> <operator>-</operator> <call><name>IMM64</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%s,%d,%"</literal><name>PFMT64u</name><literal type="string">",&lt;&lt;,&amp;,&gt;&gt;,%s,="</literal></expr></argument>,

<argument><expr><call><name>IMM64</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>IMM64</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>bitmask_by_width</name><index>[<expr><call><name>IMM64</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_NEG</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;</operator> <literal type="number">3</literal></expr></cpp:if>

<case>case <expr><name>ARM64_INS_NEGS</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>LSHIFT2_64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SHIFTED_REG64_APPEND</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",0,-,%s,="</literal></expr></argument>, <argument><expr><call><name>REG64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_SVC</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%u,$"</literal></expr></argument>, <argument><expr><call><name>IMM64</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name>postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATH32</name><parameter_list>(<parameter><type><name>opchar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>arm32math(a, op, addr, buf, len, handle, insn, pcdelta, str, opchar, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATH32_NEG</name><parameter_list>(<parameter><type><name>opchar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>arm32math(a, op, addr, buf, len, handle, insn, pcdelta, str, opchar, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATH32AS</name><parameter_list>(<parameter><type><name>opchar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>arm32mathaddsub(a, op, addr, buf, len, handle, insn, pcdelta, str, opchar)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>arm32math</name><argument_list>(<argument><expr><name>RAnal</name> <operator>*</operator><name>a</name></expr></argument>, <argument><expr><name>RAnalOp</name> <operator>*</operator><name>op</name></expr></argument>, <argument><expr><name>ut64</name> <name>addr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ut8</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>int</name> <name>len</name></expr></argument>, <argument><expr><name>csh</name> <operator>*</operator><name>handle</name></expr></argument>, <argument><expr><name>cs_insn</name> <operator>*</operator><name>insn</name></expr></argument>, <argument><expr><name>int</name> <name>pcdelta</name></expr></argument>, <argument><expr><call><name>char</name> <argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>opchar</name></expr></argument>, <argument><expr><name>int</name> <name>negate</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>rotate_imm</name> <init>= <expr><call><name>OPCOUNT</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OPCOUNT</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op2</name> <operator>=</operator> <call><name>ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>

<expr_stmt><expr><name>op2</name> <operator>=</operator> <call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rotate_imm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,"</literal></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>, <argument><expr><literal type="string">"pc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,$$,+"</literal></expr></argument>, <argument><expr><name>pcdelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rotate_imm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",&gt;&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>negate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",-1,^"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>, <argument><expr><literal type="string">"pc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%d,$$,+,%s,0xffffffff,&amp;,%s,="</literal></expr></argument>, <argument><expr><name>pcdelta</name></expr></argument>, <argument><expr><name>opchar</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%s,%s,0xffffffff,&amp;,%s,="</literal></expr></argument>, <argument><expr><name>op1</name></expr></argument>, <argument><expr><name>opchar</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>arm32mathaddsub</name><argument_list>(<argument><expr><name>RAnal</name> <operator>*</operator><name>a</name></expr></argument>, <argument><expr><name>RAnalOp</name> <operator>*</operator><name>op</name></expr></argument>, <argument><expr><name>ut64</name> <name>addr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ut8</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>int</name> <name>len</name></expr></argument>, <argument><expr><name>csh</name> <operator>*</operator><name>handle</name></expr></argument>, <argument><expr><name>cs_insn</name> <operator>*</operator><name>insn</name></expr></argument>, <argument><expr><name>int</name> <name>pcdelta</name></expr></argument>, <argument><expr><call><name>char</name> <argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>opchar</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>noflags</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"pc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>noflags</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OPCOUNT</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0xffffffff,&amp;,%s,=,"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%s,0xffffffff,&amp;,%s,="</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>opchar</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>noflags</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",$z,zf,:=,%s,cf,:=,vf,=,0,nf,="</literal></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>opchar</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"30,$c,31,$c,^,31,$c"</literal></expr> </then><else>: <expr><literal type="string">"30,$c,31,$c,^,32,$b"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>analop_esil</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>csh</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>thumb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>postfix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>msr_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pcdelta</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>thumb</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>mask</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>str_ldr_bytes</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>postfix</name> <operator>=</operator> <call><name>arm_prefix_cond</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_INS_IT</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,pc,+="</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_BKPT</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%d,TRAP"</literal></expr></argument>, <argument><expr><call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_NOP</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_BL</name></expr>:</case>

<case>case <expr><name>ARM_INS_BLX</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"pc,lr,=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>ARM_INS_BX</name></expr>:</case>

<case>case <expr><name>ARM_INS_BXJ</name></expr>:</case>

<case>case <expr><name>ARM_INS_B</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>ISREG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>REGID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM_REG_PC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">",pc,="</literal></expr></argument>, <argument><expr><operator>(</operator><name>addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3LL</literal><operator>)</operator> <operator>+</operator> <name>pcdelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,pc,="</literal></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_UDF</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,TRAP"</literal></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_SADD16</name></expr>:</case>

<case>case <expr><name>ARM_INS_SADD8</name></expr>:</case>

<expr_stmt><expr><call><name>MATH32AS</name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_ADDW</name></expr>:</case>

<case>case <expr><name>ARM_INS_ADD</name></expr>:</case>

<case>case <expr><name>ARM_INS_ADC</name></expr>:</case>

<expr_stmt><expr><call><name>MATH32</name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_SSUB16</name></expr>:</case>

<case>case <expr><name>ARM_INS_SSUB8</name></expr>:</case>

<expr_stmt><expr><call><name>MATH32AS</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_SUBW</name></expr>:</case>

<case>case <expr><name>ARM_INS_SUB</name></expr>:</case>

<expr_stmt><expr><call><name>MATH32</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_MUL</name></expr>:</case>

<expr_stmt><expr><call><name>MATH32</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_AND</name></expr>:</case>

<expr_stmt><expr><call><name>MATH32</name><argument_list>(<argument><expr><literal type="string">"&amp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_ORR</name></expr>:</case>

<expr_stmt><expr><call><name>MATH32</name><argument_list>(<argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_EOR</name></expr>:</case>

<expr_stmt><expr><call><name>MATH32</name><argument_list>(<argument><expr><literal type="string">"^"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_ORN</name></expr>:</case>

<expr_stmt><expr><call><name>MATH32_NEG</name><argument_list>(<argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_LSR</name></expr>:</case>

<expr_stmt><expr><call><name>MATH32</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_LSL</name></expr>:</case>

<expr_stmt><expr><call><name>MATH32</name><argument_list>(<argument><expr><literal type="string">"&lt;&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_SVC</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,$"</literal></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_PUSH</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

PUSH { r4, r5, r6, r7, lr }

4,sp,-=,lr,sp,=[4],

4,sp,-=,r7,sp,=[4],

4,sp,-=,r6,sp,=[4],

4,sp,-=,r5,sp,=[4],

4,sp,-=,r4,sp,=[4]

20,sp,-=,lr,r7,r6,r5,r4,5,sp,=[*]

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,sp,-=,"</literal></expr></argument>,

<argument><expr><literal type="number">4</literal> <operator>*</operator> <name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>op_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>op_count</name></name></expr>;</init> <condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,"</literal></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,sp,=[*]"</literal></expr></argument>,

<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>op_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_STM</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>op_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%d,%c,=[4],"</literal></expr></argument>,

<argument><expr><call><name>REG</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>R_ABS</name><argument_list>(<argument><expr><name>i</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>writeback</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%s,+=,"</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>op_count</name></name> <operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_ASR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>OPCOUNT</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&gt;&gt;&gt;&gt;,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>OPCOUNT</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&gt;&gt;&gt;&gt;,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_POP</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

POP { r4,r5, r6}

r6,r5,r4,3,sp,[*],12,sp,+=

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>op_count</name></name></expr>;</init> <condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,"</literal></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,sp,[*],"</literal></expr></argument>,

<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>op_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,sp,+="</literal></expr></argument>,

<argument><expr><literal type="number">4</literal> <operator>*</operator> <name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>op_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_LDM</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>op_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s,%d,+,[4],%s,="</literal></expr></argument>,

<argument><expr><name>comma</name></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comma</name> <operator>=</operator> <literal type="string">","</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>ARM_INS_CMP</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,==,$z,zf,:=,31,$s,nf,:=,32,$b,!,cf,:=,31,$o,vf,:="</literal></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_CMN</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,^,!,!,zf,="</literal></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_MOVT</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"16,%s,&lt;&lt;,%s,|="</literal></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_ADR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,$$,+,%s,+,0xfffffffc,&amp;,%s,="</literal></expr></argument>,

<argument><expr><name>pcdelta</name></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_MOV</name></expr>:</case>

<case>case <expr><name>ARM_INS_VMOV</name></expr>:</case>

<case>case <expr><name>ARM_INS_MOVW</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_CBZ</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,!,?{,%"</literal><name>PFMT32u</name><literal type="string">",pc,=,}"</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_CBNZ</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,?{,%"</literal><name>PFMT32u</name><literal type="string">",pc,=,}"</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_STRT</name></expr>:</case>

<case>case <expr><name>ARM_INS_STR</name></expr>:</case>

<case>case <expr><name>ARM_INS_STRHT</name></expr>:</case>

<case>case <expr><name>ARM_INS_STRH</name></expr>:</case>

<case>case <expr><name>ARM_INS_STRBT</name></expr>:</case>

<case>case <expr><name>ARM_INS_STRB</name></expr>:</case>

<case>case <expr><name>ARM_INS_STRD</name></expr>:</case>

<switch>switch<condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_INS_STRD</name></expr>:</case>

<expr_stmt><expr><name>str_ldr_bytes</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>ARM_INS_STRHT</name></expr>:</case>

<case>case <expr><name>ARM_INS_STRH</name></expr>:</case>

<expr_stmt><expr><name>str_ldr_bytes</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_STRBT</name></expr>:</case>

<case>case <expr><name>ARM_INS_STRB</name></expr>:</case>

<expr_stmt><expr><name>str_ldr_bytes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>str_ldr_bytes</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>OPCOUNT</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISMEM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HASMEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>disp</name> <init>= <expr><call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><name>disp</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="char">'+'</literal></expr></then><else>:<expr><literal type="char">'-'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <ternary><condition><expr><name>disp</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>disp</name></expr></then><else>:<expr><operator>-</operator><name>disp</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0x%x,%s,%c,0xffffffff,&amp;,=[%d]"</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>disp</name></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>str_ldr_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>writeback</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%d,%s,%c,%s,="</literal></expr></argument>,

<argument><expr><name>disp</name></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HASMEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>ISSHIFTED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<switch>switch <condition>(<expr><call><name>SHIFTTYPE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_SFT_LSL</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%d,%s,&lt;&lt;,+,0xffffffff,&amp;,=[%d]"</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SHIFTVALUE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str_ldr_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>writeback</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%s,%d,%s,&lt;&lt;,+,%s,="</literal></expr></argument>,

<argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SHIFTVALUE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_SFT_LSR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%d,%s,&gt;&gt;,+,0xffffffff,&amp;,=[%d]"</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SHIFTVALUE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str_ldr_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>writeback</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%s,%d,%s,&gt;&gt;,+,%s,="</literal></expr></argument>,

<argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SHIFTVALUE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_SFT_ASR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%d,%s,&gt;&gt;&gt;&gt;,+,0xffffffff,&amp;,=[%d]"</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SHIFTVALUE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str_ldr_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>writeback</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%s,%d,%s,&gt;&gt;&gt;&gt;,+,%s,="</literal></expr></argument>,

<argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SHIFTVALUE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_SFT_ROR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%d,%s,&gt;&gt;&gt;,+,0xffffffff,&amp;,=[%d]"</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SHIFTVALUE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str_ldr_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>writeback</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%s,%d,%s,&gt;&gt;&gt;,+,%s,="</literal></expr></argument>,

<argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SHIFTVALUE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_SFT_RRX</name></expr>:</case> 

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%s,+,0xffffffff,&amp;,=[%d]"</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str_ldr_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>writeback</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%s,%s,+,%s,="</literal></expr></argument>,

<argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OPCOUNT</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>ISIMM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,0xffffffff,&amp;,=[%d],%d,%s,+="</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str_ldr_bytes</name></expr></argument>, <argument><expr><call><name>IMM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ISREG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>ISSHIFTED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<switch>switch <condition>(<expr><call><name>SHIFTTYPE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_SFT_LSL</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,0xffffffff,&amp;,=[%d],%s,%d,%s,&lt;&lt;,+,%s,="</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str_ldr_bytes</name></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SHIFTVALUE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_SFT_LSR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,0xffffffff,&amp;,=[%d],%s,%d,%s,&gt;&gt;,+,%s,="</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str_ldr_bytes</name></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SHIFTVALUE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_SFT_ASR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,0xffffffff,&amp;,=[%d],%s,%d,%s,&gt;&gt;&gt;&gt;,+,%s,="</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str_ldr_bytes</name></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SHIFTVALUE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_SFT_ROR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,0xffffffff,&amp;,=[%d],%s,%d,%s,&gt;&gt;&gt;,+,%s,="</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str_ldr_bytes</name></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SHIFTVALUE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_SFT_RRX</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,0xffffffff,&amp;,=[%d],%s,%s,+="</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str_ldr_bytes</name></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ISREG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>str_ldr_bytes</name><operator>==</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASMEMINDEX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>disp</name> <init>= <expr><call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><name>disp</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="char">'+'</literal></expr></then><else>:<expr><literal type="char">'-'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <ternary><condition><expr><name>disp</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>disp</name></expr></then><else>:<expr><operator>-</operator><name>disp</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%d,%s,%c,0xffffffff,&amp;,=[4],%s,4,%d,+,%s,%c,0xffffffff,&amp;,=[4]"</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>disp</name></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>disp</name></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>writeback</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%d,%s,%c,%s,="</literal></expr></argument>,

<argument><expr><name>disp</name></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISSHIFTED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%s,+,0xffffffff,&amp;,=[4],%s,4,%s,+,%s,+,0xffffffff,&amp;,=[4]"</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>writeback</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%s,%s,+,%s,="</literal></expr></argument>,

<argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OPCOUNT</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>ISIMM</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,0xffffffff,&amp;,=[%d],%s,4,%s,+,0xffffffff,&amp;,=[%d],%d,%s,+=,"</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str_ldr_bytes</name></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str_ldr_bytes</name></expr></argument>, <argument><expr><call><name>IMM</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ISREG</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>ISSHIFTED</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,0xffffffff,&amp;,=[%d],%s,4,%s,+,0xffffffff,&amp;,=[%d],%s,%s,+="</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str_ldr_bytes</name></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str_ldr_bytes</name></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_TST</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,==,$z,zf,:="</literal></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_LDRD</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRB</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%d,+,[1],%s,="</literal></expr></argument>,

<argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>writeback</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%s,%d,+,%s,="</literal></expr></argument>,

<argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_SXTH</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"15,%s,&gt;&gt;,1,&amp;,?{,15,-1,&lt;&lt;,%s,0xffff,&amp;,|,%s,:=,}{,%s,0xffff,%s,:=,}"</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_SXTB</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"7,%s,&gt;&gt;,1,&amp;,?{,7,-1,&lt;&lt;,%s,0xff,&amp;,|,%s,:=,}{,%s,0xff,&amp;,%s,:=,}"</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_LDREX</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDREXB</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDREXD</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDREXH</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_THREAD</name></expr>;</expr_stmt>

<case>case <expr><name>ARM_INS_LDRHT</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRH</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRT</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRBT</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRSB</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRSBT</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRSH</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRSHT</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDR</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_INS_LDRHT</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRH</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRSH</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRSHT</name></expr>:</case>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>UT16_MAX</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>UT32_MAX</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>addr</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">3LL</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><literal type="string">"$$"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>REGBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM_REG_PC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>pcdelta</name> <operator>+</operator> <call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">",2,2,%s,&gt;&gt;,&lt;&lt;,+,0xffffffff,&amp;,[4],0x%x,&amp;,%s,="</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>disp</name> <init>= <expr><call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>disp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">",%s,-,0xffffffff,&amp;,[4],0x%x,&amp;,%s,="</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>-</operator><name>disp</name></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">",%s,+,0xffffffff,&amp;,[4],0x%x,&amp;,%s,="</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>disp</name></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>REGBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM_REG_PC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><literal type="string">"$$"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>pcdelta</name> <operator>+</operator> <call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ISMEM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>LSHIFT2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"2,2,%d,%s,+,&gt;&gt;,&lt;&lt;,%d,%s,&lt;&lt;,+,0xffffffff,&amp;,[4],0x%x,&amp;,%s,="</literal></expr></argument>,

<argument><expr><name>pcdelta</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><call><name>LSHIFT2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISREG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"2,2,%d,%s,+,&gt;&gt;,&lt;&lt;,%s,+,0xffffffff,&amp;,[4],0x%x,&amp;,%s,="</literal></expr></argument>,

<argument><expr><name>pcdelta</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"2,2,%d,%s,+,&gt;&gt;,&lt;&lt;,%d,+,0xffffffff,&amp;,[4],0x%x,&amp;,%s,="</literal></expr></argument>,

<argument><expr><name>pcdelta</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISMEM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>LSHIFT2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%d,%s,&lt;&lt;,+,0xffffffff,&amp;,[4],0x%x,&amp;,%s,="</literal></expr></argument>,

<argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LSHIFT2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISREG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,0xffffffff,&amp;,[4],0x%x,&amp;,%s,="</literal></expr></argument>,

<argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>HASMEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,0xffffffff,&amp;,[4],0x%x,&amp;,%s,="</literal></expr></argument>,

<argument><expr><call><name>MEMINDEX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>disp</name> <init>= <expr><call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>disp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%s,-,0xffffffff,&amp;,[4],0x%x,&amp;,%s,="</literal></expr></argument>,

<argument><expr><operator>-</operator><name>disp</name></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>writeback</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%d,%s,+,%s,="</literal></expr></argument>,

<argument><expr><operator>-</operator><name>disp</name></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%s,+,0xffffffff,&amp;,[4],0x%x,&amp;,%s,="</literal></expr></argument>,

<argument><expr><name>disp</name></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>writeback</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%d,%s,+,%s,="</literal></expr></argument>,

<argument><expr><name>disp</name></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MEMBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_MRS</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>ARM_INS_MSR</name></expr>:</case>

<expr_stmt><expr><name>msr_flags</name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0,"</literal></expr></argument>,<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msr_flags</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFF,|,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msr_flags</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFF00,|,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msr_flags</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFF0000,|,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msr_flags</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFF000000,|,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"DUP,!,SWAP,&amp;,%s,SWAP,cpsr,&amp;,|,cpsr,="</literal></expr></argument>,<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_UBFX</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>&lt;=</operator><literal type="number">32</literal><operator>-</operator><call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%d,%s,%d,%"</literal><name>PFMT64u</name><literal type="string">",&lt;&lt;,&amp;,&gt;&gt;,%s,="</literal></expr></argument>,

<argument><expr><call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>bitmask_by_width</name><index>[<expr><call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_UXTB</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0xff,&amp;,%s,="</literal></expr></argument>,<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_RSB</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>OPCOUNT</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,-="</literal></expr></argument>,<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>OPCOUNT</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,-,%s,="</literal></expr></argument>,<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_BIC</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>OPCOUNT</name> <argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0xffffffff,^,%s,&amp;="</literal></expr></argument>,<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0xffffffff,^,%s,&amp;,%s,="</literal></expr></argument>,<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_SMMLA</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"32,%s,%s,*,&gt;&gt;,%s,+,0xffffffff,&amp;,%s,="</literal></expr></argument>,

<argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_SMMLAR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"32,0x80000000,%s,%s,*,+,&gt;&gt;,%s,+,0xffffffff,&amp;,%s,="</literal></expr></argument>,

<argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_UMULL</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"32,%s,%s,*,DUP,0xffffffff,&amp;,%s,=,&gt;&gt;,%s,="</literal></expr></argument>,

<argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_MLS</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,*,%s,-,0xffffffff,&amp;,%s,="</literal></expr></argument>,

<argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_MLA</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,*,%s,+,0xffffffff,&amp;,%s,="</literal></expr></argument>,

<argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_MVN</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"-1,%s,^,0xffffffff,&amp;,%s,="</literal></expr></argument>,

<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_BFI</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>OPCOUNT</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>ISIMM</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>mask</name> <init>= <expr><name><name>bitmask_by_width</name><index>[<expr><call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>shift</name> <init>= <expr><call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>notmask</name> <init>= <expr><operator>~</operator><operator>(</operator><name>mask</name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64u</name><literal type="string">",%s,&amp;,%"</literal><name>PFMT64u</name><literal type="string">",%"</literal><name>PFMT64u</name><literal type="string">",%s,&amp;,&lt;&lt;,|,0xffffffff,&amp;,%s,="</literal></expr></argument>,

<argument><expr><name>notmask</name></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ARM_INS_BFC</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>OPCOUNT</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>ISIMM</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>mask</name> <init>= <expr><name><name>bitmask_by_width</name><index>[<expr><call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>shift</name> <init>= <expr><call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>notmask</name> <init>= <expr><operator>~</operator><operator>(</operator><name>mask</name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64u</name><literal type="string">",%s,&amp;,0xffffffff,&amp;,%s,="</literal></expr></argument>,

<argument><expr><name>notmask</name></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ARM_INS_REV</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r0</name> <init>= <expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r1</name> <init>= <expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"24,0xff,%s,&amp;,&lt;&lt;,%s,=,"</literal>

<literal type="string">"16,0xff,8,%s,&gt;&gt;,&amp;,&lt;&lt;,%s,|=,"</literal>

<literal type="string">"8,0xff,16,%s,&gt;&gt;,&amp;,&lt;&lt;,%s,|=,"</literal>

<literal type="string">"0xff,24,%s,&gt;&gt;,&amp;,%s,|=,"</literal></expr></argument>,

<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ARM_INS_REV16</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r0</name> <init>= <expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r1</name> <init>= <expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"8,0xff00ff00,%s,&amp;,&gt;&gt;,%s,=,"</literal>

<literal type="string">"8,0x00ff00ff,%s,&amp;,&lt;&lt;,%s,|=,"</literal></expr></argument>,

<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ARM_INS_REVSH</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r0</name> <init>= <expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r1</name> <init>= <expr><call><name>REG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"8,0xff00,%s,&amp;,&gt;&gt;,%s,=,"</literal>

<literal type="string">"8,0x00ff,%s,&amp;,&lt;&lt;,%s,|=,"</literal>

<literal type="string">"0x8000,%s,&amp;,?{,"</literal>

<literal type="string">"0xffff0000,%s,|=,"</literal>

<literal type="string">"}"</literal></expr></argument>,

<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>update_flags</name></name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_INS_CMP</name></expr>:</case>

<case>case <expr><name>ARM_INS_CMN</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",$z,zf,:=,31,$s,nf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name>postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>anop64</name> <parameter_list>(<parameter><decl><type><name>csh</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cs_insn_group</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>ARM64_GRP_CRYPTO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_CRYPTO</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cs_insn_group</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>ARM64_GRP_CRC</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_CRYPTO</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cs_insn_group</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>ARM64_GRP_PRIVILEGE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_PRIV</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cs_insn_group</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>ARM64_GRP_NEON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_MMX</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cs_insn_group</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>ARM64_GRP_FPARMV8</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_CPU</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm64</name><operator>.</operator><name>cc</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM64_CC_GE</name></expr>:</case>

<case>case <expr><name>ARM64_CC_GT</name></expr>:</case>

<case>case <expr><name>ARM64_CC_LE</name></expr>:</case>

<case>case <expr><name>ARM64_CC_LT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;</operator> <literal type="number">4</literal></expr></cpp:if>

<case>case <expr><name>ARM64_INS_PACDA</name></expr>:</case>

<case>case <expr><name>ARM64_INS_PACDB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_PACDZA</name></expr>:</case>

<case>case <expr><name>ARM64_INS_PACDZB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_PACGA</name></expr>:</case>

<case>case <expr><name>ARM64_INS_PACIA</name></expr>:</case>

<case>case <expr><name>ARM64_INS_PACIA1716</name></expr>:</case>

<case>case <expr><name>ARM64_INS_PACIASP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_PACIAZ</name></expr>:</case>

<case>case <expr><name>ARM64_INS_PACIB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_PACIB1716</name></expr>:</case>

<case>case <expr><name>ARM64_INS_PACIBSP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_PACIBZ</name></expr>:</case>

<case>case <expr><name>ARM64_INS_PACIZA</name></expr>:</case>

<case>case <expr><name>ARM64_INS_PACIZB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_AUTDA</name></expr>:</case>

<case>case <expr><name>ARM64_INS_AUTDB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_AUTDZA</name></expr>:</case>

<case>case <expr><name>ARM64_INS_AUTDZB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_AUTIA</name></expr>:</case>

<case>case <expr><name>ARM64_INS_AUTIA1716</name></expr>:</case>

<case>case <expr><name>ARM64_INS_AUTIASP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_AUTIAZ</name></expr>:</case>

<case>case <expr><name>ARM64_INS_AUTIB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_AUTIB1716</name></expr>:</case>

<case>case <expr><name>ARM64_INS_AUTIBSP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_AUTIBZ</name></expr>:</case>

<case>case <expr><name>ARM64_INS_AUTIZA</name></expr>:</case>

<case>case <expr><name>ARM64_INS_AUTIZB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_XPACD</name></expr>:</case>

<case>case <expr><name>ARM64_INS_XPACI</name></expr>:</case>

<case>case <expr><name>ARM64_INS_XPACLRI</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_PAC</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>ARM64_INS_SVC</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SWI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_ADRP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_ADR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LEA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_NOP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_SUB</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>ISREG64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>REGID64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM64_REG_SP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ISIMM64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ISIMM64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ISREG64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>REGID64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM64_REG_SP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_RESET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><name>ARM64_INS_MSUB</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_FDIV</name></expr>:</case>

<case>case <expr><name>ARM64_INS_SDIV</name></expr>:</case>

<case>case <expr><name>ARM64_INS_UDIV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_DIV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_MUL</name></expr>:</case>

<case>case <expr><name>ARM64_INS_SMULL</name></expr>:</case>

<case>case <expr><name>ARM64_INS_FMUL</name></expr>:</case>

<case>case <expr><name>ARM64_INS_UMULL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_ADD</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><name>ARM64_INS_ADC</name></expr>:</case>

<case>case <expr><name>ARM64_INS_UMADDL</name></expr>:</case>

<case>case <expr><name>ARM64_INS_SMADDL</name></expr>:</case>

<case>case <expr><name>ARM64_INS_FMADD</name></expr>:</case>

<case>case <expr><name>ARM64_INS_MADD</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_CSEL</name></expr>:</case>

<case>case <expr><name>ARM64_INS_FCSEL</name></expr>:</case>

<case>case <expr><name>ARM64_INS_CSET</name></expr>:</case>

<case>case <expr><name>ARM64_INS_CINC</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_MOV</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>REGID64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM64_REG_SP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_RESET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><name>ARM64_INS_MOVI</name></expr>:</case>

<case>case <expr><name>ARM64_INS_MOVK</name></expr>:</case>

<case>case <expr><name>ARM64_INS_MOVN</name></expr>:</case>

<case>case <expr><name>ARM64_INS_SMOV</name></expr>:</case>

<case>case <expr><name>ARM64_INS_UMOV</name></expr>:</case>

<case>case <expr><name>ARM64_INS_FMOV</name></expr>:</case>

<case>case <expr><name>ARM64_INS_SBFX</name></expr>:</case>

<case>case <expr><name>ARM64_INS_UBFX</name></expr>:</case>

<case>case <expr><name>ARM64_INS_UBFM</name></expr>:</case>

<case>case <expr><name>ARM64_INS_SBFIZ</name></expr>:</case>

<case>case <expr><name>ARM64_INS_UBFIZ</name></expr>:</case>

<case>case <expr><name>ARM64_INS_BIC</name></expr>:</case>

<case>case <expr><name>ARM64_INS_BFI</name></expr>:</case>

<case>case <expr><name>ARM64_INS_BFXIL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_MOVZ</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptrsize</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_UXTB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_SXTB</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CAST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptrsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_UXTH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_SXTH</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptrsize</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_UXTW</name></expr>:</case>

<case>case <expr><name>ARM64_INS_SXTW</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptrsize</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_BRK</name></expr>:</case>

<case>case <expr><name>ARM64_INS_HLT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_DMB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_DSB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_ISB</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_THREAD</name></expr>;</expr_stmt>

<case>case <expr><name>ARM64_INS_IC</name></expr>:</case> 

<case>case <expr><name>ARM64_INS_DC</name></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SYNC</name></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>ARM64_INS_DUP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_XTN</name></expr>:</case>

<case>case <expr><name>ARM64_INS_XTN2</name></expr>:</case>

<case>case <expr><name>ARM64_INS_REV64</name></expr>:</case>

<case>case <expr><name>ARM64_INS_EXT</name></expr>:</case>

<case>case <expr><name>ARM64_INS_INS</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_LSL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><name>ARM64_INS_SHL</name></expr>:</case>

<case>case <expr><name>ARM64_INS_USHLL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_LSR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_ASR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_NEG</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;</operator> <literal type="number">3</literal></expr></cpp:if>

<case>case <expr><name>ARM64_INS_NEGS</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_FCMP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_CCMP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_CCMN</name></expr>:</case>

<case>case <expr><name>ARM64_INS_CMP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_CMN</name></expr>:</case>

<case>case <expr><name>ARM64_INS_TST</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_ROR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_AND</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_ORR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_ORN</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_EOR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_EON</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_STRB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STURB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STUR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STNP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STXR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STXRH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STLXRH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STXRB</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>REGBASE64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM64_REG_X29</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_SET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>-</operator><call><name>MEMDISP64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_LDUR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDURB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRSW</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRSB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRSH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDURSW</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDNP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDPSW</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRB</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>REGID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM_REG_PC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>cc</name></name> <operator>!=</operator> <name>ARM_CC_AL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCJMP</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM64_INS_LDPSW</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRSW</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRSH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRSB</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>REGBASE64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM64_REG_X29</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_GET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>MEMDISP64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISIMM64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LEA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>MEMDISP64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><operator>-</operator><name>d</name></expr></then><else>: <expr><name>d</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;</operator> <literal type="number">4</literal></expr></cpp:if>

<case>case <expr><name>ARM64_INS_BLRAA</name></expr>:</case>

<case>case <expr><name>ARM64_INS_BLRAAZ</name></expr>:</case>

<case>case <expr><name>ARM64_INS_BLRAB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_BLRABZ</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_PAC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RCALL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_BRAA</name></expr>:</case>

<case>case <expr><name>ARM64_INS_BRAAZ</name></expr>:</case>

<case>case <expr><name>ARM64_INS_BRAB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_BRABZ</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_PAC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RJMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_LDRAA</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRAB</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_PAC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_RETAA</name></expr>:</case>

<case>case <expr><name>ARM64_INS_RETAB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_ERETAA</name></expr>:</case>

<case>case <expr><name>ARM64_INS_ERETAB</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_PAC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>ARM64_INS_ERET</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_PRIV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_RET</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_BL</name></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_BLR</name></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_CBZ</name></expr>:</case>

<case>case <expr><name>ARM64_INS_CBNZ</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_TBZ</name></expr>:</case>

<case>case <expr><name>ARM64_INS_TBNZ</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_BR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_B</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm64</name><operator>.</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>ARM64_REG_LR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm64</name><operator>.</operator><name>cc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>IMM64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cond_cs2r2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cc</name> <operator>==</operator> <name>ARM_CC_AL</name> <operator>||</operator> <name>cc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>R_ANAL_COND_AL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name>cc</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_CC_EQ</name></expr>:</case> <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>R_ANAL_COND_EQ</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ARM_CC_NE</name></expr>:</case> <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>R_ANAL_COND_NE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ARM_CC_HS</name></expr>:</case> <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>R_ANAL_COND_HS</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ARM_CC_LO</name></expr>:</case> <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>R_ANAL_COND_LO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ARM_CC_MI</name></expr>:</case> <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>R_ANAL_COND_MI</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ARM_CC_PL</name></expr>:</case> <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>R_ANAL_COND_PL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ARM_CC_VS</name></expr>:</case> <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>R_ANAL_COND_VS</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ARM_CC_VC</name></expr>:</case> <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>R_ANAL_COND_VC</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ARM_CC_HI</name></expr>:</case> <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>R_ANAL_COND_HI</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ARM_CC_LS</name></expr>:</case> <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>R_ANAL_COND_LS</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ARM_CC_GE</name></expr>:</case> <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>R_ANAL_COND_GE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ARM_CC_LT</name></expr>:</case> <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>R_ANAL_COND_LT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ARM_CC_GT</name></expr>:</case> <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>R_ANAL_COND_GT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ARM_CC_LE</name></expr>:</case> <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>R_ANAL_COND_LE</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>cc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>lookahead</name><parameter_list>(<parameter><decl><type><name>csh</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>distance</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>cs_disasm</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>distance</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>insn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>result</name> <init>= <expr><name><name>insn</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>address</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cs_free</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>anop32</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>csh</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>thumb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pcdelta</name> <init>= <expr><ternary><condition><expr><name>thumb</name></expr>?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>cond_cs2r2</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>==</operator> <name>R_ANAL_COND_NV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cs_insn_group</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>ARM_GRP_CRYPTO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_CRYPTO</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cs_insn_group</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>ARM_GRP_CRC</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_CRYPTO</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cs_insn_group</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>ARM_GRP_PRIVILEGE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_PRIV</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cs_insn_group</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>ARM_GRP_VIRTUALIZATION</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_VIRT</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cs_insn_group</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>ARM_GRP_NEON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_MMX</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cs_insn_group</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>ARM_GRP_FPARMV8</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cs_insn_group</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>ARM_GRP_THUMB2DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_MMX</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_CPU</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

If PC is specified for Rn, the value used is the address of the instruction plus 4.

These instructions cause a PC-relative forward branch using a table of single byte offsets (TBB) or halfword offsets (TBH). Rn provides a pointer to the table, and Rm supplies an index into the table. The branch length is twice the value of the byte (TBB) or the halfword (TBH) returned from the table. The target of the branch table must be in the same execution state.

jmp $$ + 4 + ( [delta] * 2 )

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>ARM_INS_TBH</name></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptrsize</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ireg</name></name> <operator>=</operator> <call><name>r_str_get</name> <argument_list>(<argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_TBB</name></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptrsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ireg</name></name> <operator>=</operator> <call><name>r_str_get</name> <argument_list>(<argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_PLD</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LEA</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>ISMEM</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>regBase</name> <init>= <expr><call><name>REGBASE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>regBase</name> <operator>==</operator> <name>ARM_REG_PC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>delta</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_IT</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>distance</name> <init>= <expr><call><name>r_str_nlen</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <call><name>lookahead</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>distance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ARM_INS_BKPT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_NOP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_POP</name></expr>:</case>

<case>case <expr><name>ARM_INS_FLDMDBX</name></expr>:</case>

<case>case <expr><name>ARM_INS_FLDMIAX</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDMDA</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDMDB</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDMIB</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDM</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>op_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ARM_OP_REG</name> <operator>&amp;&amp;</operator>

<name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>ARM_REG_PC</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>cc</name></name> <operator>==</operator> <name>ARM_CC_AL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CRET</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>ARM_INS_SUB</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>ISREG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>REGID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM_REG_SP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ISIMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name>ISIMM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ISREG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>REGID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM_REG_SP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <call><name>IMM</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><name>ARM_INS_SUBW</name></expr>:</case>

<case>case <expr><name>ARM_INS_SSUB8</name></expr>:</case>

<case>case <expr><name>ARM_INS_SSUB16</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_ADD</name></expr>:</case>

<case>case <expr><name>ARM_INS_ADC</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>REGID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM_REG_PC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>REGID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM_REG_PC</name> <operator>&amp;&amp;</operator> <name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>cc</name></name> <operator>!=</operator> <name>ARM_CC_AL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3LL</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>thumb</name></expr>?</condition><then> <expr><literal type="number">4</literal></expr></then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3LL</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>thumb</name></expr>?</condition><then> <expr><literal type="number">4</literal></expr></then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_str_get</name> <argument_list>(<argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_ADDW</name></expr>:</case>

<case>case <expr><name>ARM_INS_SADD8</name></expr>:</case>

<case>case <expr><name>ARM_INS_SADD16</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_SDIV</name></expr>:</case>

<case>case <expr><name>ARM_INS_UDIV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<case>case <expr><name>ARM_INS_VDIV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_DIV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_MUL</name></expr>:</case>

<case>case <expr><name>ARM_INS_SMULL</name></expr>:</case>

<case>case <expr><name>ARM_INS_UMULL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<case>case <expr><name>ARM_INS_VMUL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_TRAP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_MOV</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>REGID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM_REG_PC</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>REGID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM_REG_LR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ISIMM</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>ARM_INS_MOVT</name></expr>:</case>

<case>case <expr><name>ARM_INS_MOVW</name></expr>:</case>

<case>case <expr><name>ARM_INS_VMOVL</name></expr>:</case>

<case>case <expr><name>ARM_INS_VMOVN</name></expr>:</case>

<case>case <expr><name>ARM_INS_VQMOVUN</name></expr>:</case>

<case>case <expr><name>ARM_INS_VQMOVN</name></expr>:</case>

<case>case <expr><name>ARM_INS_SBFX</name></expr>:</case>

<case>case <expr><name>ARM_INS_UBFX</name></expr>:</case>

<case>case <expr><name>ARM_INS_BIC</name></expr>:</case>

<case>case <expr><name>ARM_INS_BFI</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_VMOV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_UDF</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_SVC</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SWI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_ROR</name></expr>:</case>

<case>case <expr><name>ARM_INS_RRX</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_AND</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_ORR</name></expr>:</case>

<case>case <expr><name>ARM_INS_ORN</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_EOR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_CMP</name></expr>:</case>

<case>case <expr><name>ARM_INS_CMN</name></expr>:</case>

<case>case <expr><name>ARM_INS_TST</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>ISIMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_str_get</name> <argument_list>(<argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>ARM_INS_VCMP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_LSL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_LSR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_ASR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_PUSH</name></expr>:</case>

<case>case <expr><name>ARM_INS_STM</name></expr>:</case>

<case>case <expr><name>ARM_INS_STMDA</name></expr>:</case>

<case>case <expr><name>ARM_INS_STMDB</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>REGBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM_REG_FP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_SET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_STREX</name></expr>:</case>

<case>case <expr><name>ARM_INS_STREXB</name></expr>:</case>

<case>case <expr><name>ARM_INS_STREXD</name></expr>:</case>

<case>case <expr><name>ARM_INS_STREXH</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_THREAD</name></expr>;</expr_stmt>

<case>case <expr><name>ARM_INS_STR</name></expr>:</case>

<case>case <expr><name>ARM_INS_STRB</name></expr>:</case>

<case>case <expr><name>ARM_INS_STRD</name></expr>:</case>

<case>case <expr><name>ARM_INS_STRBT</name></expr>:</case>

<case>case <expr><name>ARM_INS_STRH</name></expr>:</case>

<case>case <expr><name>ARM_INS_STRHT</name></expr>:</case>

<case>case <expr><name>ARM_INS_STRT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>REGBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM_REG_FP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_SET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>-</operator><call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_SXTB</name></expr>:</case>

<case>case <expr><name>ARM_INS_SXTH</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_LDREX</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDREXB</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDREXD</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDREXH</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_THREAD</name></expr>;</expr_stmt>

<case>case <expr><name>ARM_INS_LDR</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRD</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRB</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRBT</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRH</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRHT</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRSB</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRSBT</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRSH</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRSHT</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>REGID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM_REG_PC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>cc</name></name> <operator>!=</operator> <name>ARM_CC_AL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCJMP</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_INS_LDRB</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptrsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_LDRH</name></expr>:</case>

<case>case <expr><name>ARM_INS_LDRHT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptrsize</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>REGBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM_REG_FP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_GET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>-</operator><call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>REGBASE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM_REG_PC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3LL</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>thumb</name></expr>?</condition><then> <expr><literal type="number">4</literal></expr></then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>REGID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ARM_REG_PC</name> <operator>&amp;&amp;</operator> <name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>cc</name></name> <operator>!=</operator> <name>ARM_CC_AL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3LL</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>thumb</name></expr>?</condition><then> <expr><literal type="number">4</literal></expr></then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <call><name>MEMDISP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ireg</name></name> <operator>=</operator> <call><name>r_str_get</name> <argument_list>(<argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_MRS</name></expr>:</case>

<case>case <expr><name>ARM_INS_MSR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_PRIV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_BLX</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ISREG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RCALL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>UT32_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>hint</name><operator>.</operator><name>new_bits</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">32</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_BL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>UT32_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>hint</name><operator>.</operator><name>new_bits</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_CBZ</name></expr>:</case>

<case>case <expr><name>ARM_INS_CBNZ</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>UT32_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>fail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_B</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>cc</name></name> <operator>==</operator> <name>ARM_CC_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>arm</name><operator>.</operator><name>cc</name></name> <operator>==</operator> <name>ARM_CC_AL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>UT32_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>hint</name><operator>.</operator><name>new_bits</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_INS_BX</name></expr>:</case>

<case>case <expr><name>ARM_INS_BXJ</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>REGID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_REG_LR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_REG_IP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_REG_PC</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3LL</literal><operator>)</operator> <operator>+</operator> <name>pcdelta</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>hint</name><operator>.</operator><name>new_bits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>ARM_INS_ADR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LEA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name>addr</name><operator>%</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_valid</name><parameter_list>(<parameter><decl><type><name>arm_reg</name></type> <name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>reg</name> <operator>!=</operator> <name>ARM_REG_INVALID</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_reg_name</name><parameter_list>(<parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>reg_base</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>reg_delta</name></decl></parameter>, <parameter><decl><type><name>csh</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg_num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>cs_arm_op</name></type> <name>armop</name> <init>= <expr><call><name>INSOP</name> <argument_list>(<argument><expr><name>reg_num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>armop</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_OP_REG</name></expr>:</case>

<expr_stmt><expr><name><name>reg_base</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>armop</name><operator>.</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM_OP_MEM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>is_valid</name> <argument_list>(<argument><expr><name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_valid</name> <argument_list>(<argument><expr><name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>reg_base</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg_delta</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_valid</name> <argument_list>(<argument><expr><name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>reg_base</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_valid</name> <argument_list>(<argument><expr><name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>reg_base</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_valid64</name> <parameter_list>(<parameter><decl><type><name>arm64_reg</name></type> <name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>reg</name> <operator>!=</operator> <name>ARM64_REG_INVALID</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_reg64_name</name><parameter_list>(<parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>reg_base</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>reg_delta</name></decl></parameter>, <parameter><decl><type><name>csh</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg_num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>cs_arm64_op</name></type> <name>armop</name> <init>= <expr><call><name>INSOP64</name> <argument_list>(<argument><expr><name>reg_num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>armop</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM64_OP_REG</name></expr>:</case>

<expr_stmt><expr><name><name>reg_base</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>armop</name><operator>.</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_OP_MEM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>is_valid64</name> <argument_list>(<argument><expr><name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_valid64</name> <argument_list>(<argument><expr><name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>reg_base</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg_delta</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_valid64</name> <argument_list>(<argument><expr><name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>reg_base</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_valid64</name> <argument_list>(<argument><expr><name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>reg_base</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_opdir</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_TYPE_MASK</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>R_ANAL_OP_DIR_READ</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>R_ANAL_OP_DIR_WRITE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_LEA</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>R_ANAL_OP_DIR_REF</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_UJMP</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_UCALL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>R_ANAL_OP_DIR_EXEC</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_src_dst</name><parameter_list>(<parameter><decl><type><name>RAnalValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>csh</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>cs_arm_op</name></type> <name>armop</name> <init>= <expr><call><name>INSOP</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cs_arm64_op</name></type> <name>arm64op</name> <init>= <expr><call><name>INSOP64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>parse_reg64_name</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>base_regs</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>regdelta_regs</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>parse_reg_name</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>base_regs</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>regdelta_regs</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>armop</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM_OP_REG</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>ARM_OP_MEM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <name><name>arm64op</name><operator>.</operator><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>mul</name></name> <operator>=</operator> <name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <name><name>armop</name><operator>.</operator><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>regdelta</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>regdelta_regs</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>base_regs</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_src_dst</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name><name>base_regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name><name>base_regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name><name>base_regs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name><name>base_regs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name><name>regdelta_regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name><name>regdelta_regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name><name>regdelta_regs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name><name>regdelta_regs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>op_fillval</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter> , <parameter><decl><type><name>csh</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>create_src_dst</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_TYPE_MASK</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_OP_TYPE_LOAD</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_AND</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_XOR</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_MUL</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_OR</name></expr>:</case>

<expr_stmt><expr><call><name>set_src_dst</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_src_dst</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_src_dst</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_src_dst</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_STORE</name></expr>:</case>

<expr_stmt><expr><call><name>set_src_dst</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_src_dst</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bits</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>HASMEMINDEX64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ireg</name></name> <operator>=</operator> <call><name>r_str_get</name> <argument_list>(<argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP64</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>HASMEMINDEX</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ireg</name></name> <operator>=</operator> <call><name>r_str_get</name> <argument_list>(<argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>analop</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>csh</name></type> <name>handle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>omode</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>obits</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">16</literal><operator>)</operator></expr>?</condition><then> <expr><name>CS_MODE_THUMB</name></expr></then><else>: <expr><name>CS_MODE_ARM</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mode</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>big_endian</name></name><operator>)</operator></expr>?</condition><then> <expr><name>CS_MODE_BIG_ENDIAN</name></expr></then><else>: <expr><name>CS_MODE_LITTLE_ENDIAN</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>, <argument><expr><literal type="string">"cortex"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CS_MODE_MCLASS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>omode</name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <name>obits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cs_close</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>omode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name>obits</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">16</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">2</literal></expr></then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr>?</condition><then>

<expr><call><name>cs_open</name> <argument_list>(<argument><expr><name>CS_ARCH_ARM64</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr></then><else>:

<expr><call><name>cs_open</name> <argument_list>(<argument><expr><name>CS_ARCH_ARM</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cs_option</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CS_OPT_DETAIL</name></expr></argument>, <argument><expr><name>CS_OPT_ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>CS_ERR_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>haa</name> <init>= <expr><call><name>hackyArmAnal</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>haa</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>haa</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>cs_disasm</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_DISASM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_DISASM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>,

<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>insn</name><operator>-&gt;</operator><name>op_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>?</condition><then><expr><literal type="string">" "</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>op_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>thumb</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>anop64</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_OPEX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>opex64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>opex</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_ESIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>analop64_esil</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>anop32</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>thumb</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_OPEX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>opex</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>opex</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_ESIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>analop_esil</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>thumb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>set_opdir</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_VAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>op_fillval</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cs_free</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> \

<literal type="string">"=PC pc\n"</literal>

<literal type="string">"=SP sp\n"</literal>

<literal type="string">"=BP x29\n"</literal>

<literal type="string">"=A0 x0\n"</literal>

<literal type="string">"=A1 x1\n"</literal>

<literal type="string">"=A2 x2\n"</literal>

<literal type="string">"=A3 x3\n"</literal>

<literal type="string">"=ZF zf\n"</literal>

<literal type="string">"=SF nf\n"</literal>

<literal type="string">"=OF vf\n"</literal>

<literal type="string">"=CF cf\n"</literal>

<literal type="string">"=SN x16\n"</literal> 

<literal type="string">"gpr b0 .8 0 0\n"</literal>

<literal type="string">"gpr b1 .8 8 0\n"</literal>

<literal type="string">"gpr b2 .8 16 0\n"</literal>

<literal type="string">"gpr b3 .8 24 0\n"</literal>

<literal type="string">"gpr b4 .8 32 0\n"</literal>

<literal type="string">"gpr b5 .8 40 0\n"</literal>

<literal type="string">"gpr b6 .8 48 0\n"</literal>

<literal type="string">"gpr b7 .8 56 0\n"</literal>

<literal type="string">"gpr b8 .8 64 0\n"</literal>

<literal type="string">"gpr b9 .8 72 0\n"</literal>

<literal type="string">"gpr b10 .8 80 0\n"</literal>

<literal type="string">"gpr b11 .8 88 0\n"</literal>

<literal type="string">"gpr b12 .8 96 0\n"</literal>

<literal type="string">"gpr b13 .8 104 0\n"</literal>

<literal type="string">"gpr b14 .8 112 0\n"</literal>

<literal type="string">"gpr b15 .8 120 0\n"</literal>

<literal type="string">"gpr b16 .8 128 0\n"</literal>

<literal type="string">"gpr b17 .8 136 0\n"</literal>

<literal type="string">"gpr b18 .8 144 0\n"</literal>

<literal type="string">"gpr b19 .8 152 0\n"</literal>

<literal type="string">"gpr b20 .8 160 0\n"</literal>

<literal type="string">"gpr b21 .8 168 0\n"</literal>

<literal type="string">"gpr b22 .8 176 0\n"</literal>

<literal type="string">"gpr b23 .8 184 0\n"</literal>

<literal type="string">"gpr b24 .8 192 0\n"</literal>

<literal type="string">"gpr b25 .8 200 0\n"</literal>

<literal type="string">"gpr b26 .8 208 0\n"</literal>

<literal type="string">"gpr b27 .8 216 0\n"</literal>

<literal type="string">"gpr b28 .8 224 0\n"</literal>

<literal type="string">"gpr b29 .8 232 0\n"</literal>

<literal type="string">"gpr b30 .8 240 0\n"</literal>

<literal type="string">"gpr bsp .8 248 0\n"</literal>

<literal type="string">"gpr h0 .16 0 0\n"</literal>

<literal type="string">"gpr h1 .16 8 0\n"</literal>

<literal type="string">"gpr h2 .16 16 0\n"</literal>

<literal type="string">"gpr h3 .16 24 0\n"</literal>

<literal type="string">"gpr h4 .16 32 0\n"</literal>

<literal type="string">"gpr h5 .16 40 0\n"</literal>

<literal type="string">"gpr h6 .16 48 0\n"</literal>

<literal type="string">"gpr h7 .16 56 0\n"</literal>

<literal type="string">"gpr h8 .16 64 0\n"</literal>

<literal type="string">"gpr h9 .16 72 0\n"</literal>

<literal type="string">"gpr h10 .16 80 0\n"</literal>

<literal type="string">"gpr h11 .16 88 0\n"</literal>

<literal type="string">"gpr h12 .16 96 0\n"</literal>

<literal type="string">"gpr h13 .16 104 0\n"</literal>

<literal type="string">"gpr h14 .16 112 0\n"</literal>

<literal type="string">"gpr h15 .16 120 0\n"</literal>

<literal type="string">"gpr h16 .16 128 0\n"</literal>

<literal type="string">"gpr h17 .16 136 0\n"</literal>

<literal type="string">"gpr h18 .16 144 0\n"</literal>

<literal type="string">"gpr h19 .16 152 0\n"</literal>

<literal type="string">"gpr h20 .16 160 0\n"</literal>

<literal type="string">"gpr h21 .16 168 0\n"</literal>

<literal type="string">"gpr h22 .16 176 0\n"</literal>

<literal type="string">"gpr h23 .16 184 0\n"</literal>

<literal type="string">"gpr h24 .16 192 0\n"</literal>

<literal type="string">"gpr h25 .16 200 0\n"</literal>

<literal type="string">"gpr h26 .16 208 0\n"</literal>

<literal type="string">"gpr h27 .16 216 0\n"</literal>

<literal type="string">"gpr h28 .16 224 0\n"</literal>

<literal type="string">"gpr h29 .16 232 0\n"</literal>

<literal type="string">"gpr h30 .16 240 0\n"</literal>

<literal type="string">"gpr w0 .32 0 0\n"</literal>

<literal type="string">"gpr w1 .32 8 0\n"</literal>

<literal type="string">"gpr w2 .32 16 0\n"</literal>

<literal type="string">"gpr w3 .32 24 0\n"</literal>

<literal type="string">"gpr w4 .32 32 0\n"</literal>

<literal type="string">"gpr w5 .32 40 0\n"</literal>

<literal type="string">"gpr w6 .32 48 0\n"</literal>

<literal type="string">"gpr w7 .32 56 0\n"</literal>

<literal type="string">"gpr w8 .32 64 0\n"</literal>

<literal type="string">"gpr w9 .32 72 0\n"</literal>

<literal type="string">"gpr w10 .32 80 0\n"</literal>

<literal type="string">"gpr w11 .32 88 0\n"</literal>

<literal type="string">"gpr w12 .32 96 0\n"</literal>

<literal type="string">"gpr w13 .32 104 0\n"</literal>

<literal type="string">"gpr w14 .32 112 0\n"</literal>

<literal type="string">"gpr w15 .32 120 0\n"</literal>

<literal type="string">"gpr w16 .32 128 0\n"</literal>

<literal type="string">"gpr w17 .32 136 0\n"</literal>

<literal type="string">"gpr w18 .32 144 0\n"</literal>

<literal type="string">"gpr w19 .32 152 0\n"</literal>

<literal type="string">"gpr w20 .32 160 0\n"</literal>

<literal type="string">"gpr w21 .32 168 0\n"</literal>

<literal type="string">"gpr w22 .32 176 0\n"</literal>

<literal type="string">"gpr w23 .32 184 0\n"</literal>

<literal type="string">"gpr w24 .32 192 0\n"</literal>

<literal type="string">"gpr w25 .32 200 0\n"</literal>

<literal type="string">"gpr w26 .32 208 0\n"</literal>

<literal type="string">"gpr w27 .32 216 0\n"</literal>

<literal type="string">"gpr w28 .32 224 0\n"</literal>

<literal type="string">"gpr w29 .32 232 0\n"</literal>

<literal type="string">"gpr w30 .32 240 0\n"</literal>

<literal type="string">"gpr wsp .32 248 0\n"</literal>

<literal type="string">"gpr wzr .32 ? 0\n"</literal>

<literal type="string">"gpr s0 .32 0 0\n"</literal>

<literal type="string">"gpr s1 .32 8 0\n"</literal>

<literal type="string">"gpr s2 .32 16 0\n"</literal>

<literal type="string">"gpr s3 .32 24 0\n"</literal>

<literal type="string">"gpr s4 .32 32 0\n"</literal>

<literal type="string">"gpr s5 .32 40 0\n"</literal>

<literal type="string">"gpr s6 .32 48 0\n"</literal>

<literal type="string">"gpr s7 .32 56 0\n"</literal>

<literal type="string">"gpr s8 .32 64 0\n"</literal>

<literal type="string">"gpr s9 .32 72 0\n"</literal>

<literal type="string">"gpr s10 .32 80 0\n"</literal>

<literal type="string">"gpr s11 .32 88 0\n"</literal>

<literal type="string">"gpr s12 .32 96 0\n"</literal>

<literal type="string">"gpr s13 .32 104 0\n"</literal>

<literal type="string">"gpr s14 .32 112 0\n"</literal>

<literal type="string">"gpr s15 .32 120 0\n"</literal>

<literal type="string">"gpr s16 .32 128 0\n"</literal>

<literal type="string">"gpr s17 .32 136 0\n"</literal>

<literal type="string">"gpr s18 .32 144 0\n"</literal>

<literal type="string">"gpr s19 .32 152 0\n"</literal>

<literal type="string">"gpr s20 .32 160 0\n"</literal>

<literal type="string">"gpr s21 .32 168 0\n"</literal>

<literal type="string">"gpr s22 .32 176 0\n"</literal>

<literal type="string">"gpr s23 .32 184 0\n"</literal>

<literal type="string">"gpr s24 .32 192 0\n"</literal>

<literal type="string">"gpr s25 .32 200 0\n"</literal>

<literal type="string">"gpr s26 .32 208 0\n"</literal>

<literal type="string">"gpr s27 .32 216 0\n"</literal>

<literal type="string">"gpr s28 .32 224 0\n"</literal>

<literal type="string">"gpr s29 .32 232 0\n"</literal>

<literal type="string">"gpr s30 .32 240 0\n"</literal>

<literal type="string">"gpr x0 .64 0 0\n"</literal> 

<literal type="string">"gpr x1 .64 8 0\n"</literal> 

<literal type="string">"gpr x2 .64 16 0\n"</literal> 

<literal type="string">"gpr x3 .64 24 0\n"</literal> 

<literal type="string">"gpr x4 .64 32 0\n"</literal> 

<literal type="string">"gpr x5 .64 40 0\n"</literal> 

<literal type="string">"gpr x6 .64 48 0\n"</literal> 

<literal type="string">"gpr x7 .64 56 0\n"</literal> 

<literal type="string">"gpr x8 .64 64 0\n"</literal> 

<literal type="string">"gpr x9 .64 72 0\n"</literal> 

<literal type="string">"gpr x10 .64 80 0\n"</literal> 

<literal type="string">"gpr x11 .64 88 0\n"</literal> 

<literal type="string">"gpr x12 .64 96 0\n"</literal> 

<literal type="string">"gpr x13 .64 104 0\n"</literal> 

<literal type="string">"gpr x14 .64 112 0\n"</literal> 

<literal type="string">"gpr x15 .64 120 0\n"</literal> 

<literal type="string">"gpr x16 .64 128 0\n"</literal> 

<literal type="string">"gpr x17 .64 136 0\n"</literal> 

<literal type="string">"gpr x18 .64 144 0\n"</literal> 

<literal type="string">"gpr x19 .64 152 0\n"</literal> 

<literal type="string">"gpr x20 .64 160 0\n"</literal> 

<literal type="string">"gpr x21 .64 168 0\n"</literal> 

<literal type="string">"gpr x22 .64 176 0\n"</literal> 

<literal type="string">"gpr x23 .64 184 0\n"</literal> 

<literal type="string">"gpr x24 .64 192 0\n"</literal> 

<literal type="string">"gpr x25 .64 200 0\n"</literal> 

<literal type="string">"gpr x26 .64 208 0\n"</literal> 

<literal type="string">"gpr x27 .64 216 0\n"</literal>

<literal type="string">"gpr x28 .64 224 0\n"</literal>

<literal type="string">"gpr x29 .64 232 0\n"</literal>

<literal type="string">"gpr x30 .64 240 0\n"</literal>

<literal type="string">"gpr tmp .64 288 0\n"</literal>

<literal type="string">"gpr d0 .64 0 0\n"</literal> 

<literal type="string">"gpr d1 .64 8 0\n"</literal> 

<literal type="string">"gpr d2 .64 16 0\n"</literal> 

<literal type="string">"gpr d3 .64 24 0\n"</literal> 

<literal type="string">"gpr d4 .64 32 0\n"</literal> 

<literal type="string">"gpr d5 .64 40 0\n"</literal> 

<literal type="string">"gpr d6 .64 48 0\n"</literal> 

<literal type="string">"gpr d7 .64 56 0\n"</literal> 

<literal type="string">"gpr d8 .64 64 0\n"</literal> 

<literal type="string">"gpr d9 .64 72 0\n"</literal> 

<literal type="string">"gpr d10 .64 80 0\n"</literal> 

<literal type="string">"gpr d11 .64 88 0\n"</literal> 

<literal type="string">"gpr d12 .64 96 0\n"</literal> 

<literal type="string">"gpr d13 .64 104 0\n"</literal> 

<literal type="string">"gpr d14 .64 112 0\n"</literal> 

<literal type="string">"gpr d15 .64 120 0\n"</literal> 

<literal type="string">"gpr d16 .64 128 0\n"</literal> 

<literal type="string">"gpr d17 .64 136 0\n"</literal> 

<literal type="string">"gpr d18 .64 144 0\n"</literal> 

<literal type="string">"gpr d19 .64 152 0\n"</literal> 

<literal type="string">"gpr d20 .64 160 0\n"</literal> 

<literal type="string">"gpr d21 .64 168 0\n"</literal> 

<literal type="string">"gpr d22 .64 176 0\n"</literal> 

<literal type="string">"gpr d23 .64 184 0\n"</literal> 

<literal type="string">"gpr d24 .64 192 0\n"</literal> 

<literal type="string">"gpr d25 .64 200 0\n"</literal> 

<literal type="string">"gpr d26 .64 208 0\n"</literal> 

<literal type="string">"gpr d27 .64 216 0\n"</literal>

<literal type="string">"gpr d28 .64 224 0\n"</literal>

<literal type="string">"gpr d29 .64 232 0\n"</literal>

<literal type="string">"gpr d30 .64 240 0\n"</literal>

<literal type="string">"gpr dsp .64 248 0\n"</literal>

<literal type="string">"gpr fp .64 232 0\n"</literal> 

<literal type="string">"gpr lr .64 240 0\n"</literal> 

<literal type="string">"gpr sp .64 248 0\n"</literal>

<literal type="string">"gpr pc .64 256 0\n"</literal>

<literal type="string">"gpr zr .64 ? 0\n"</literal>

<literal type="string">"gpr xzr .64 ? 0\n"</literal>

<literal type="string">"flg pstate .64 280 0 _____tfiae_____________j__qvczn\n"</literal> 

<literal type="string">"flg vf .1 280.28 0 overflow\n"</literal> 

<literal type="string">"flg cf .1 280.29 0 carry\n"</literal> 

<literal type="string">"flg zf .1 280.30 0 zero\n"</literal> 

<literal type="string">"flg nf .1 280.31 0 sign\n"</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> \

<literal type="string">"=PC r15\n"</literal>

<literal type="string">"=LR r14\n"</literal>

<literal type="string">"=SP sp\n"</literal>

<literal type="string">"=BP fp\n"</literal>

<literal type="string">"=A0 r0\n"</literal>

<literal type="string">"=A1 r1\n"</literal>

<literal type="string">"=A2 r2\n"</literal>

<literal type="string">"=A3 r3\n"</literal>

<literal type="string">"=ZF zf\n"</literal>

<literal type="string">"=SF nf\n"</literal>

<literal type="string">"=OF vf\n"</literal>

<literal type="string">"=CF cf\n"</literal>

<literal type="string">"=SN r7\n"</literal>

<literal type="string">"gpr sb .32 36 0\n"</literal> 

<literal type="string">"gpr sl .32 40 0\n"</literal> 

<literal type="string">"gpr fp .32 44 0\n"</literal> 

<literal type="string">"gpr ip .32 48 0\n"</literal> 

<literal type="string">"gpr sp .32 52 0\n"</literal> 

<literal type="string">"gpr lr .32 56 0\n"</literal> 

<literal type="string">"gpr pc .32 60 0\n"</literal> 

<literal type="string">"gpr r0 .32 0 0\n"</literal>

<literal type="string">"gpr r1 .32 4 0\n"</literal>

<literal type="string">"gpr r2 .32 8 0\n"</literal>

<literal type="string">"gpr r3 .32 12 0\n"</literal>

<literal type="string">"gpr r4 .32 16 0\n"</literal>

<literal type="string">"gpr r5 .32 20 0\n"</literal>

<literal type="string">"gpr r6 .32 24 0\n"</literal>

<literal type="string">"gpr r7 .32 28 0\n"</literal>

<literal type="string">"gpr r8 .32 32 0\n"</literal>

<literal type="string">"gpr r9 .32 36 0\n"</literal>

<literal type="string">"gpr r10 .32 40 0\n"</literal>

<literal type="string">"gpr r11 .32 44 0\n"</literal>

<literal type="string">"gpr r12 .32 48 0\n"</literal>

<literal type="string">"gpr r13 .32 52 0\n"</literal>

<literal type="string">"gpr r14 .32 56 0\n"</literal>

<literal type="string">"gpr r15 .32 60 0\n"</literal>

<literal type="string">"flg cpsr .32 64 0\n"</literal>

<literal type="string">"gpr blank .32 68 0\n"</literal> 

<literal type="string">"flg tf .1 .517 0 thumb\n"</literal> 

<literal type="string">"flg ef .1 .521 0 endian\n"</literal> 

<literal type="string">"flg itc .4 .522 0 if_then_count\n"</literal> 

<literal type="string">"flg gef .4 .528 0 great_or_equal\n"</literal> 

<literal type="string">"flg jf .1 .536 0 java\n"</literal> 

<literal type="string">"flg qf .1 .539 0 sticky_overflow\n"</literal> 

<literal type="string">"flg vf .1 .540 0 overflow\n"</literal> 

<literal type="string">"flg cf .1 .541 0 carry\n"</literal> 

<literal type="string">"flg zf .1 .542 0 zero\n"</literal> 

<literal type="string">"flg nf .1 .543 0 negative\n"</literal></expr> 

;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>archinfo</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>R_ANAL_ARCHINFO_DATA_ALIGN</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>R_ANAL_ARCHINFO_ALIGN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>anal</name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>R_ANAL_ARCHINFO_MAX_OP_SIZE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>R_ANAL_ARCHINFO_MIN_OP_SIZE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>anal</name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name> <modifier>*</modifier></type><name>anal_mask</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>oplen</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>obits</name> <init>= <expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalHint</name> <modifier>*</modifier></type><name>hint</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>r_anal_op_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hint</name> <operator>=</operator> <call><name>r_anal_hint_get</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>at</name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hint</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hint</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name><name>hint</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oplen</name> <operator>=</operator> <call><name>analop</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>at</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>idx</name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_BASIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>UT64_MAX</name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>opcode</name> <init>= <expr><call><name>r_read_ble</name> <argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>, <argument><expr><name>oplen</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>oplen</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="string">"\xf0\x00"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARM64_INS_LDP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDXP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDXR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDXRB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDXRH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDPSW</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDNP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDTR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDTRB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDTRH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDTRSB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDTRSH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDTRSW</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDUR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDURB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDURH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDURSB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDURSH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDURSW</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STNP</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STXR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STXRB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STXRH</name></expr>:</case>

<expr_stmt><expr><call><name>r_write_ble</name> <argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_STRB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STURB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STURH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STUR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STTR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STTRB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STRH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_STTRH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRH</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRSB</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRSW</name></expr>:</case>

<case>case <expr><name>ARM64_INS_LDRSH</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>is_literal</name> <init>= <expr><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x38000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x18000000</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_literal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_ble</name> <argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="number">0xff000000</literal></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_write_ble</name> <argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ARM64_INS_B</name></expr>:</case>

<case>case <expr><name>ARM64_INS_BL</name></expr>:</case>

<case>case <expr><name>ARM64_INS_CBZ</name></expr>:</case>

<case>case <expr><name>ARM64_INS_CBNZ</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_write_ble</name> <argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="number">0xff00001f</literal></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_write_ble</name> <argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="number">0xfc000000</literal></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_TBZ</name></expr>:</case>

<case>case <expr><name>ARM64_INS_TBNZ</name></expr>:</case>

<expr_stmt><expr><call><name>r_write_ble</name> <argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="number">0xfff8001f</literal></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARM64_INS_ADR</name></expr>:</case>

<case>case <expr><name>ARM64_INS_ADRP</name></expr>:</case>

<expr_stmt><expr><call><name>r_write_ble</name> <argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="number">0xff00001f</literal></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_write_ble</name> <argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="number">0xfff00000</literal></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_write_ble</name> <argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="number">0xfff00000</literal></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>oplen</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>obits</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_op_free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>anal_preludes</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KW</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>ds</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>ms</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_list_append (l, r_search_keyword_new((const ut8*)d,ds,(const ut8*)m, ms, NULL))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_search_keyword_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<expr_stmt><expr><call><name>KW</name> <argument_list>(<argument><expr><literal type="string">"\x00\xb5"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"\x0f\xff"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>KW</name> <argument_list>(<argument><expr><literal type="string">"\x08\xb5"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"\x0f\xff"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<expr_stmt><expr><call><name>KW</name><argument_list>(<argument><expr><literal type="string">"\x00\x00\x2d\xe9"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"\x0f\x0f\xff\xff"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">64</literal></expr>:</case>

<expr_stmt><expr><call><name>KW</name> <argument_list>(<argument><expr><literal type="string">"\xf0\x00\x00\xd1"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"\xf0\x00\x00\xff"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>KW</name> <argument_list>(<argument><expr><literal type="string">"\xf0\x00\x00\xa9"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"\xf0\x00\x00\xff"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>KW</name> <argument_list>(<argument><expr><literal type="string">"\x7f\x23\x03\xd5\xff"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_arm_cs</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"arm"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Capstone ARM analyzer"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"BSD"</literal></expr>,

<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"arm"</literal></expr>,

<expr><operator>.</operator><name>archinfo</name> <operator>=</operator> <name>archinfo</name></expr>,

<expr><operator>.</operator><name>get_reg_profile</name> <operator>=</operator> <name>get_reg_profile</name></expr>,

<expr><operator>.</operator><name>anal_mask</name> <operator>=</operator> <name>anal_mask</name></expr>,

<expr><operator>.</operator><name>preludes</name> <operator>=</operator> <name>anal_preludes</name></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">16</literal> <operator>|</operator> <literal type="number">32</literal> <operator>|</operator> <literal type="number">64</literal></expr>,

<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>analop</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_arm_cs</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
