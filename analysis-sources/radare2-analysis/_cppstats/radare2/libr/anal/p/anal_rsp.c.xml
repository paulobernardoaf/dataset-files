<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\p\anal_rsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rsp_idec.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rsp_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>RAnalValue</name><modifier>*</modifier></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>esil</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>ParsedOperands</name>;</typedef>

<decl_stmt><decl><type><name>ParsedOperands</name></type> <name><name>parsed_operands</name><index>[<expr><name>RSP_MAX_OPNDS</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>parsed_operands</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ParsedOperands</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>RSP_MAX_OPNDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>iw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rsp_instruction</name></type> <name>r_instr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"TODO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iw</name> <operator>=</operator> <call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r_instr</name> <operator>=</operator> <call><name>rsp_instruction_decode</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>iw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r_instr</name><operator>.</operator><name>noperands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>esil</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RSP_OPND_GP_REG</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>rsp_gp_reg_soft_names</name><index>[<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>rsp_gp_reg_soft_names</name><index>[<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OPND_ZIMM</name></expr>:</case>

<case>case <expr><name>RSP_OPND_SHIFT_AMOUNT</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OPND_SIMM</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OPND_BASE_OFFSET</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%"</literal><name>PFMT64d</name><literal type="string">",%s,+"</literal></expr></argument>, <argument><expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name><name>rsp_gp_reg_soft_names</name><index>[<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>rsp_gp_reg_soft_names</name><index>[<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OPND_OFFSET</name></expr>:</case>

<case>case <expr><name>RSP_OPND_TARGET</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <call><name>rsp_mem_addr</name> <argument_list>(<argument><expr><name>addr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>RSP_IMEM_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OPND_C0_REG</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>rsp_c0_reg_names</name><index>[<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parsed_operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>rsp_c0_reg_names</name><index>[<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OPND_C2_CREG</name></expr>:</case>

<case>case <expr><name>RSP_OPND_C2_ACCU</name></expr>:</case>

<case>case <expr><name>RSP_OPND_C2_VREG</name></expr>:</case>

<case>case <expr><name>RSP_OPND_C2_VREG_BYTE</name></expr>:</case>

<case>case <expr><name>RSP_OPND_C2_VREG_SCALAR</name></expr>:</case>

<case>case <expr><name>RSP_OPND_C2_VREG_ELEMENT</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<switch>switch <condition>(<expr><name><name>r_instr</name><operator>.</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RSP_OP_INVALID</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_NOP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_BREAK</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_LUI</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_ADD</name></expr>:</case>

<case>case <expr><name>RSP_OP_ADDU</name></expr>:</case>

<case>case <expr><name>RSP_OP_ADDI</name></expr>:</case>

<case>case <expr><name>RSP_OP_ADDIU</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,%s,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SUB</name></expr>:</case>

<case>case <expr><name>RSP_OP_SUBU</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,-,%s,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_AND</name></expr>:</case>

<case>case <expr><name>RSP_OP_ANDI</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&amp;,%s,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_OR</name></expr>:</case>

<case>case <expr><name>RSP_OP_ORI</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,|,%s,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_XOR</name></expr>:</case>

<case>case <expr><name>RSP_OP_XORI</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,^,%s,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_NOR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SLL</name></expr>:</case>

<case>case <expr><name>RSP_OP_SLLV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&lt;&lt;,%s,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SRL</name></expr>:</case>

<case>case <expr><name>RSP_OP_SRLV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&gt;&gt;,%s,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SRA</name></expr>:</case>

<case>case <expr><name>RSP_OP_SRAV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SLT</name></expr>:</case>

<case>case <expr><name>RSP_OP_SLTU</name></expr>:</case>

<case>case <expr><name>RSP_OP_SLTI</name></expr>:</case>

<case>case <expr><name>RSP_OP_SLTIU</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_LT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&lt;,$z,?{,1,%s,=,}{,0,%s,=,}"</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_J</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"PC"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,PC,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_JAL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"PC"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,PC,=,0x%08x,RA,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_JR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u</name> <operator>==</operator> <literal type="number">29</literal><operator>)</operator></expr>

?</condition><then> <expr><name>R_ANAL_OP_TYPE_RET</name></expr>

</then><else>: <expr><name>R_ANAL_OP_TYPE_UJMP</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <call><name>rsp_mem_addr</name> <argument_list>(<argument><expr><name>addr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>RSP_IMEM_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"PC"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,PC,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_BEQ</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_EQ</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"PC"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,==,$z,?{,%s,PC,=,}"</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_BNE</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_NE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"PC"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,==,$z,!,?{,%s,PC,=,}"</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_BLEZ</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_LE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"PC"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,!,%s,0x80000000,&amp;,!,!,|,?{,%s,PC,=,}"</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_BGTZ</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_GT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"PC"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0x80000000,&amp;,!,%s,!,!,&amp;,?{,%s,PC,=,}"</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_BLTZ</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_LT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"PC"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0x80000000,&amp;,!,!,?{,%s,PC,=,}"</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_BGEZ</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_GE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"PC"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,0x80000000,&amp;,!,?{,%s,PC,=,}"</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_BLTZAL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CCALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_LT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"PC"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_BGEZAL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CCALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_GE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><literal type="string">"PC"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_LB</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>memref</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],%s,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_LH</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>memref</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[2],%s,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_LW</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>memref</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[4],%s,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_LBU</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>memref</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],%s,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_LHU</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>memref</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[2],%s,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SB</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,=[1]"</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SH</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,=[2]"</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SW</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,=[4]"</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_MFC0</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_MTC0</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,%s,="</literal></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>, <argument><expr><name><name>parsed_operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_MFC2</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_MTC2</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parsed_operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_CFC2</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_CTC2</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VMULF</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VMULU</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VMUDL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VMUDM</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VMUDN</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VMUDH</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VMACF</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VMACU</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VMADL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VMADM</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VMADN</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VMADH</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VADD</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VSUB</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VABS</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ABS</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VADDC</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VSUBC</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VSAR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VLT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_LT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VEQ</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_EQ</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VNE</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_NE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VGE</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_GE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VCL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VCH</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VCR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VMRG</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VAND</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VNAND</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VOR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VNOR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VXOR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VNXOR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VRCP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VRCPL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VRCPH</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VMOV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VRSQ</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VRSQL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VRSQH</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_VNOP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_LBV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_LSV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_LLV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_LDV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_LQV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_LRV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_LPV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_LUV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_LHV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_LFV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_LTV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SBV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SSV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SLV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SDV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SQV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SRV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SPV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SUV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SHV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SFV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_SWV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OP_STV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>=

<expr><literal type="string">"=PC pc\n"</literal>

<literal type="string">"=SP sp\n"</literal>

<literal type="string">"=A0 a0\n"</literal>

<literal type="string">"=A1 a1\n"</literal>

<literal type="string">"=A2 a2\n"</literal>

<literal type="string">"=A3 a3\n"</literal>

<literal type="string">"=R0 v0\n"</literal>

<literal type="string">"=R1 v1\n"</literal>

<literal type="string">"gpr zero .32 0 0\n"</literal>

<literal type="string">"gpr at .32 4 0\n"</literal>

<literal type="string">"gpr v0 .32 8 0\n"</literal>

<literal type="string">"gpr v1 .32 12 0\n"</literal>

<literal type="string">"gpr a0 .32 16 0\n"</literal>

<literal type="string">"gpr a1 .32 20 0\n"</literal>

<literal type="string">"gpr a2 .32 24 0\n"</literal>

<literal type="string">"gpr a3 .32 28 0\n"</literal>

<literal type="string">"gpr t0 .32 32 0\n"</literal>

<literal type="string">"gpr t1 .32 36 0\n"</literal>

<literal type="string">"gpr t2 .32 40 0\n"</literal>

<literal type="string">"gpr t3 .32 44 0\n"</literal>

<literal type="string">"gpr t4 .32 48 0\n"</literal>

<literal type="string">"gpr t5 .32 52 0\n"</literal>

<literal type="string">"gpr t6 .32 56 0\n"</literal>

<literal type="string">"gpr t7 .32 60 0\n"</literal>

<literal type="string">"gpr s0 .32 64 0\n"</literal>

<literal type="string">"gpr s1 .32 68 0\n"</literal>

<literal type="string">"gpr s2 .32 72 0\n"</literal>

<literal type="string">"gpr s3 .32 76 0\n"</literal>

<literal type="string">"gpr s4 .32 80 0\n"</literal>

<literal type="string">"gpr s5 .32 84 0\n"</literal>

<literal type="string">"gpr s6 .32 88 0\n"</literal>

<literal type="string">"gpr s7 .32 92 0\n"</literal>

<literal type="string">"gpr t8 .32 96 0\n"</literal>

<literal type="string">"gpr t9 .32 100 0\n"</literal>

<literal type="string">"gpr k0 .32 104 0\n"</literal>

<literal type="string">"gpr k1 .32 108 0\n"</literal>

<literal type="string">"gpr gp .32 112 0\n"</literal>

<literal type="string">"gpr sp .32 116 0\n"</literal>

<literal type="string">"gpr s8 .32 120 0\n"</literal>

<literal type="string">"gpr ra .32 124 0\n"</literal>

<literal type="string">"gpr pc .32 128 0\n"</literal>

<literal type="string">"gpr $c0 .32 132 0\n"</literal>

<literal type="string">"gpr $c1 .32 136 0\n"</literal>

<literal type="string">"gpr $c2 .32 140 0\n"</literal>

<literal type="string">"gpr $c3 .32 144 0\n"</literal>

<literal type="string">"gpr $c4 .32 148 0\n"</literal>

<literal type="string">"gpr $c5 .32 152 0\n"</literal>

<literal type="string">"gpr $c6 .32 156 0\n"</literal>

<literal type="string">"gpr $c7 .32 160 0\n"</literal>

<literal type="string">"gpr $c8 .32 164 0\n"</literal>

<literal type="string">"gpr $c9 .32 168 0\n"</literal>

<literal type="string">"gpr $c10 .32 172 0\n"</literal>

<literal type="string">"gpr $c11 .32 176 0\n"</literal>

<literal type="string">"gpr $c12 .32 180 0\n"</literal>

<literal type="string">"gpr $c13 .32 184 0\n"</literal>

<literal type="string">"gpr $c14 .32 188 0\n"</literal>

<literal type="string">"gpr $c15 .32 192 0\n"</literal>

<literal type="string">"gpr $v0 .128 196 0\n"</literal>

<literal type="string">"gpr $v1 .128 212 0\n"</literal>

<literal type="string">"gpr $v2 .128 228 0\n"</literal>

<literal type="string">"gpr $v3 .128 244 0\n"</literal>

<literal type="string">"gpr $v4 .128 260 0\n"</literal>

<literal type="string">"gpr $v5 .128 276 0\n"</literal>

<literal type="string">"gpr $v6 .128 292 0\n"</literal>

<literal type="string">"gpr $v7 .128 308 0\n"</literal>

<literal type="string">"gpr $v8 .128 324 0\n"</literal>

<literal type="string">"gpr $v9 .128 340 0\n"</literal>

<literal type="string">"gpr $v10 .128 356 0\n"</literal>

<literal type="string">"gpr $v11 .128 372 0\n"</literal>

<literal type="string">"gpr $v12 .128 388 0\n"</literal>

<literal type="string">"gpr $v13 .128 404 0\n"</literal>

<literal type="string">"gpr $v14 .128 420 0\n"</literal>

<literal type="string">"gpr $v15 .128 436 0\n"</literal>

<literal type="string">"gpr $v16 .128 452 0\n"</literal>

<literal type="string">"gpr $v17 .128 468 0\n"</literal>

<literal type="string">"gpr $v18 .128 484 0\n"</literal>

<literal type="string">"gpr $v19 .128 500 0\n"</literal>

<literal type="string">"gpr $v20 .128 516 0\n"</literal>

<literal type="string">"gpr $v21 .128 532 0\n"</literal>

<literal type="string">"gpr $v22 .128 548 0\n"</literal>

<literal type="string">"gpr $v23 .128 564 0\n"</literal>

<literal type="string">"gpr $v24 .128 580 0\n"</literal>

<literal type="string">"gpr $v25 .128 596 0\n"</literal>

<literal type="string">"gpr $v26 .128 612 0\n"</literal>

<literal type="string">"gpr $v27 .128 628 0\n"</literal>

<literal type="string">"gpr $v28 .128 644 0\n"</literal>

<literal type="string">"gpr $v29 .128 660 0\n"</literal>

<literal type="string">"gpr $v30 .128 676 0\n"</literal>

<literal type="string">"gpr $v31 .128 692 0\n"</literal>

<literal type="string">"gpr $vco .128 708 0\n"</literal>

<literal type="string">"gpr $vcc .128 724 0\n"</literal>

<literal type="string">"gpr $vce .128 740 0\n"</literal></expr></init></decl>

;</decl_stmt>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>archinfo</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_rsp</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rsp"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"RSP code analysis plugin"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"rsp"</literal></expr>,

<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,

<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>rsp_op</name></expr>,

<expr><operator>.</operator><name>archinfo</name> <operator>=</operator> <operator>&amp;</operator><name>archinfo</name></expr>,

<expr><operator>.</operator><name>get_reg_profile</name> <operator>=</operator> <operator>&amp;</operator><name>get_reg_profile</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_rsp</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
