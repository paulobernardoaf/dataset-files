<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\p\anal_x86_cs.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;capstone/capstone.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;capstone/x86.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

CYCLES:

======

register access = 1

memory access = 2

jump = 3

call = 4

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CYCLE_REG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CYCLE_MEM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CYCLE_JMP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_NEXT_VERSION</name><operator>&gt;</operator><literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_CSGRP_PRIVILEGE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_CSGRP_PRIVILEGE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_ITER_API</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> Old Capstone not supported</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>esilprintf</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_strbuf_setf (&amp;op-&gt;esil, fmt, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opexprintf</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_strbuf_setf (&amp;op-&gt;opex, fmt, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSOP</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;x86.operands[n]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSOPS</name></cpp:macro> <cpp:value>insn-&gt;detail-&gt;x86.op_count</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISIMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;x86.operands[x].type == X86_OP_IMM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISMEM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;x86.operands[x].type == X86_OP_MEM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SZ</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_DIM</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC_AR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DST_AR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DST_R_AR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DST_W_AR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC2_AR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DST2_AR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSTADD_AR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG0_AR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG1_AR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG2_AR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>RRegItem</name></type> <name><name>base_regs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RRegItem</name></type> <name><name>regdelta_regs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>Getarg</name> <block>{

<decl_stmt><decl><type><name>csh</name></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>csh</name></type> <name>handle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hidden_op</name><parameter_list>(<parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>cs_x86</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name> <init>= <expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>regsz</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CS_MODE_64</name></expr>:</case>

<expr_stmt><expr><name>regsz</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CS_MODE_16</name></expr>:</case>

<expr_stmt><expr><name>regsz</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>regsz</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_INS_PUSHF</name></expr>:</case>

<case>case <expr><name>X86_INS_POPF</name></expr>:</case>

<case>case <expr><name>X86_INS_PUSHFD</name></expr>:</case>

<case>case <expr><name>X86_INS_POPFD</name></expr>:</case>

<case>case <expr><name>X86_INS_PUSHFQ</name></expr>:</case>

<case>case <expr><name>X86_INS_POPFQ</name></expr>:</case>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>op_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>cs_x86_op</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>X86_OP_REG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <name>X86_REG_EFLAGS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>regsz</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;=</operator><literal type="number">4</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>X86_INS_PUSHF</name> <operator>||</operator> <name>id</name> <operator>==</operator> <name>X86_INS_PUSHFD</name> <operator>||</operator> <name>id</name> <operator>==</operator> <name>X86_INS_PUSHFQ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>access</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>access</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>X86_INS_PUSHAW</name></expr>:</case>

<case>case <expr><name>X86_INS_PUSHAL</name></expr>:</case>

<case>case <expr><name>X86_INS_POPAW</name></expr>:</case>

<case>case <expr><name>X86_INS_POPAL</name></expr>:</case>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opex</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>cs_x86</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>&amp;</operator><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>x86</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>op_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hidden_op</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"operands\":["</literal></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>op_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>op_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>cs_x86_op</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\"size\":%d"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"rw\":%d"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>access</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_OP_REG</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"type\":\"reg\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_OP_IMM</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"type\":\"imm\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":%"</literal><name>PFMT64u</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_OP_MEM</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"type\":\"mem\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>segment</name></name> <operator>!=</operator> <name>X86_REG_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"segment\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>segment</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>base</name></name> <operator>!=</operator> <name>X86_REG_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"base\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>index</name></name> <operator>!=</operator> <name>X86_REG_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"index\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"scale\":%d"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"disp\":%"</literal><name>PFMT64u</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>disp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"type\":\"invalid\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>rex</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"rex\":true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>modrm</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"modrm\":true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>sib</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"sib\":%d"</literal></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>sib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>disp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"disp\":%d"</literal></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>disp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>sib_index</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"sib_index\":\"%s\""</literal></expr></argument>,

<argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>sib_index</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>sib_scale</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"sib_scale\":%d"</literal></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>sib_scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>sib_base</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"sib_base\":\"%s\""</literal></expr></argument>,

<argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>sib_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_xmm_reg</name><parameter_list>(<parameter><decl><type><name>cs_x86_op</name></type> <name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>op</name><operator>.</operator><name>reg</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_REG_XMM0</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM1</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM2</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM3</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM4</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM5</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM6</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM7</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM8</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM9</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM10</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM11</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM12</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM13</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM14</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM15</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM16</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM17</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM18</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM19</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM20</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM21</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM22</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM23</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM24</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM25</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM26</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM27</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM28</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM29</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM30</name></expr>:</case>

<case>case <expr><name>X86_REG_XMM31</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>

<default>default:</default> <return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>getarg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Getarg</name></name><modifier>*</modifier></type> <name>gop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>setop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sel</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>bitsize</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><name>AR_DIM</name></expr>]</index><index>[<expr><name>BUF_SZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>buf</name><index>[<expr><name>sel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>setarg</name> <init>= <expr><ternary><condition><expr><name>setop</name></expr> ?</condition><then> <expr><name>setop</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name> <init>= <expr><name><name>gop</name><operator>-&gt;</operator><name>insn</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>csh</name></type> <name>handle</name> <init>= <expr><name><name>gop</name><operator>-&gt;</operator><name>handle</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cs_x86_op</name></type> <name>op</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>insn</name><operator>-&gt;</operator><name>detail</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&gt;=</operator> <name>INSOPS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>INSOP</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bitsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bitsize</name> <operator>=</operator> <name><name>op</name><operator>.</operator><name>size</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_OP_INVALID</name></expr>:</case>

<return>return <expr><literal type="string">"invalid"</literal></expr>;</return>

<case>case <expr><name>X86_OP_REG</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>set</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>, <argument><expr><literal type="string">"%s,%s="</literal></expr></argument>,

<argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>X86_OP_IMM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>set</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64u</name><literal type="string">",%s=[%d]"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>op</name><operator>.</operator><name>imm</name></name></expr></argument>, <argument><expr><name>setarg</name></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64u</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>op</name><operator>.</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

<case>case <expr><name>X86_OP_MEM</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf_</name><index>[<expr><name>BUF_SZ</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>component_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><name><name>op</name><operator>.</operator><name>mem</name><operator>.</operator><name>scale</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>disp</name> <init>= <expr><name><name>op</name><operator>.</operator><name>mem</name><operator>.</operator><name>disp</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>disp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">","</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>disp</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>disp</name></expr> </then><else>: <expr><name>disp</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>component_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf_</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>, <argument><expr><literal type="string">"%s%s,%d,*,"</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf_</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>, <argument><expr><literal type="string">"%s%s,"</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf_</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>component_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf_</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>, <argument><expr><literal type="string">"%s%s,"</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf_</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>component_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>component_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>component_count</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf_</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>, <argument><expr><literal type="string">"%s+,"</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf_</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>disp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf_</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>, <argument><expr><literal type="string">"%s-"</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf_</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>, <argument><expr><literal type="string">"%s+"</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf_</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>out</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>out_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><ternary><condition><expr><name>out_len</name><operator>&gt;</operator> <literal type="number">0</literal></expr>?</condition><then> <expr><name>out_len</name> <operator>-</operator> <literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>set</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf_</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>, <argument><expr><literal type="string">"%s,%s=[%d]"</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>setarg</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>op</name><operator>.</operator><name>size</name></name><operator>==</operator><literal type="number">10</literal></expr>?</condition><then><expr><literal type="number">8</literal></expr></then><else>:<expr><name><name>op</name><operator>.</operator><name>size</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf_</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>set</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf_</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>, <argument><expr><literal type="string">"%s,[%d]"</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>op</name><operator>.</operator><name>size</name></name><operator>==</operator><literal type="number">10</literal></expr>?</condition><then> <expr><literal type="number">8</literal></expr></then><else>: <expr><name><name>op</name><operator>.</operator><name>size</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf_</name></expr></argument>, <argument><expr><name>BUF_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>BUF_SZ</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cond_x862r2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_INS_JE</name></expr>:</case>

<return>return <expr><name>R_ANAL_COND_EQ</name></expr>;</return>

<case>case <expr><name>X86_INS_JNE</name></expr>:</case>

<return>return <expr><name>R_ANAL_COND_NE</name></expr>;</return>

<case>case <expr><name>X86_INS_JB</name></expr>:</case>

<case>case <expr><name>X86_INS_JL</name></expr>:</case>

<return>return <expr><name>R_ANAL_COND_LT</name></expr>;</return>

<case>case <expr><name>X86_INS_JBE</name></expr>:</case>

<case>case <expr><name>X86_INS_JLE</name></expr>:</case>

<return>return <expr><name>R_ANAL_COND_LE</name></expr>;</return>

<case>case <expr><name>X86_INS_JG</name></expr>:</case>

<case>case <expr><name>X86_INS_JA</name></expr>:</case>

<return>return <expr><name>R_ANAL_COND_GT</name></expr>;</return>

<case>case <expr><name>X86_INS_JAE</name></expr>:</case>

<return>return <expr><name>R_ANAL_COND_GE</name></expr>;</return>

<case>case <expr><name>X86_INS_JS</name></expr>:</case>

<case>case <expr><name>X86_INS_JNS</name></expr>:</case>

<case>case <expr><name>X86_INS_JO</name></expr>:</case>

<case>case <expr><name>X86_INS_JNO</name></expr>:</case>

<case>case <expr><name>X86_INS_JGE</name></expr>:</case>

<case>case <expr><name>X86_INS_JP</name></expr>:</case>

<case>case <expr><name>X86_INS_JNP</name></expr>:</case>

<case>case <expr><name>X86_INS_JCXZ</name></expr>:</case>

<case>case <expr><name>X86_INS_JECXZ</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reg32_to_name</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>names</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"eax"</literal></expr>, <expr><literal type="string">"ecx"</literal></expr>, <expr><literal type="string">"edx"</literal></expr>, <expr><literal type="string">"ebx"</literal></expr>, <expr><literal type="string">"esp"</literal></expr>, <expr><literal type="string">"ebp"</literal></expr>, <expr><literal type="string">"esi"</literal></expr>, <expr><literal type="string">"edi"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>reg</name> <operator>&lt;</operator> <call><name>R_ARRAY_SIZE</name> <argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>names</name><index>[<expr><name>reg</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"unk"</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>anop_esil</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>csh</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rs</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>/</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">16</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ip"</literal></expr></then><else>:

<expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">32</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"eip"</literal></expr></then><else>:<expr><literal type="string">"rip"</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">16</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"sp"</literal></expr></then><else>:

<expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">32</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"esp"</literal></expr></then><else>:<expr><literal type="string">"rsp"</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">16</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"bp"</literal></expr></then><else>:

<expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">32</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ebp"</literal></expr></then><else>:<expr><literal type="string">"rbp"</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">16</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"si"</literal></expr></then><else>:

<expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">32</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"esi"</literal></expr></then><else>:<expr><literal type="string">"rsi"</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Getarg</name></name></type> <name>gop</name> <init>= <expr><block>{

<expr><operator>.</operator><name>handle</name> <operator>=</operator> <operator>*</operator><name>handle</name></expr>,

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <name>insn</name></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dstAdd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>counter</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">16</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"cx"</literal></expr></then><else>:

<expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">32</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ecx"</literal></expr></then><else>:<expr><literal type="string">"rcx"</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_PREFIX_REP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,!,?{,BREAK,},"</literal></expr></argument>, <argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_INS_FNOP</name></expr>:</case>

<case>case <expr><name>X86_INS_NOP</name></expr>:</case>

<case>case <expr><name>X86_INS_PAUSE</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_HLT</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_INS_FBLD</name></expr>:</case>

<case>case <expr><name>X86_INS_FBSTP</name></expr>:</case>

<case>case <expr><name>X86_INS_FCOMPP</name></expr>:</case>

<case>case <expr><name>X86_INS_FDECSTP</name></expr>:</case>

<case>case <expr><name>X86_INS_FEMMS</name></expr>:</case>

<case>case <expr><name>X86_INS_FFREE</name></expr>:</case>

<case>case <expr><name>X86_INS_FICOM</name></expr>:</case>

<case>case <expr><name>X86_INS_FICOMP</name></expr>:</case>

<case>case <expr><name>X86_INS_FINCSTP</name></expr>:</case>

<case>case <expr><name>X86_INS_FNCLEX</name></expr>:</case>

<case>case <expr><name>X86_INS_FNINIT</name></expr>:</case>

<case>case <expr><name>X86_INS_FNSTCW</name></expr>:</case>

<case>case <expr><name>X86_INS_FNSTSW</name></expr>:</case>

<case>case <expr><name>X86_INS_FPATAN</name></expr>:</case>

<case>case <expr><name>X86_INS_FPREM</name></expr>:</case>

<case>case <expr><name>X86_INS_FPREM1</name></expr>:</case>

<case>case <expr><name>X86_INS_FPTAN</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;=</operator><literal type="number">4</literal></expr></cpp:if>

<case>case <expr><name>X86_INS_FFREEP</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>X86_INS_FRNDINT</name></expr>:</case>

<case>case <expr><name>X86_INS_FRSTOR</name></expr>:</case>

<case>case <expr><name>X86_INS_FNSAVE</name></expr>:</case>

<case>case <expr><name>X86_INS_FSCALE</name></expr>:</case>

<case>case <expr><name>X86_INS_FSETPM</name></expr>:</case>

<case>case <expr><name>X86_INS_FSINCOS</name></expr>:</case>

<case>case <expr><name>X86_INS_FNSTENV</name></expr>:</case>

<case>case <expr><name>X86_INS_FXAM</name></expr>:</case>

<case>case <expr><name>X86_INS_FXSAVE</name></expr>:</case>

<case>case <expr><name>X86_INS_FXSAVE64</name></expr>:</case>

<case>case <expr><name>X86_INS_FXTRACT</name></expr>:</case>

<case>case <expr><name>X86_INS_FYL2X</name></expr>:</case>

<case>case <expr><name>X86_INS_FYL2XP1</name></expr>:</case>

<case>case <expr><name>X86_INS_FISTTP</name></expr>:</case>

<case>case <expr><name>X86_INS_FSQRT</name></expr>:</case>

<case>case <expr><name>X86_INS_FXCH</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_INS_FTST</name></expr>:</case>

<case>case <expr><name>X86_INS_FUCOMI</name></expr>:</case>

<case>case <expr><name>X86_INS_FUCOMPP</name></expr>:</case>

<case>case <expr><name>X86_INS_FUCOMP</name></expr>:</case>

<case>case <expr><name>X86_INS_FUCOM</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_INS_FABS</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_INS_FLDCW</name></expr>:</case>

<case>case <expr><name>X86_INS_FLDENV</name></expr>:</case>

<case>case <expr><name>X86_INS_FLDL2E</name></expr>:</case>

<case>case <expr><name>X86_INS_FLDL2T</name></expr>:</case>

<case>case <expr><name>X86_INS_FLDLG2</name></expr>:</case>

<case>case <expr><name>X86_INS_FLDLN2</name></expr>:</case>

<case>case <expr><name>X86_INS_FLDPI</name></expr>:</case>

<case>case <expr><name>X86_INS_FLDZ</name></expr>:</case>

<case>case <expr><name>X86_INS_FLD1</name></expr>:</case>

<case>case <expr><name>X86_INS_FLD</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_INS_FIST</name></expr>:</case>

<case>case <expr><name>X86_INS_FISTP</name></expr>:</case>

<case>case <expr><name>X86_INS_FST</name></expr>:</case>

<case>case <expr><name>X86_INS_FSTP</name></expr>:</case>

<case>case <expr><name>X86_INS_FSTPNCE</name></expr>:</case>

<case>case <expr><name>X86_INS_FXRSTOR</name></expr>:</case>

<case>case <expr><name>X86_INS_FXRSTOR64</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_INS_FIDIV</name></expr>:</case>

<case>case <expr><name>X86_INS_FIDIVR</name></expr>:</case>

<case>case <expr><name>X86_INS_FDIV</name></expr>:</case>

<case>case <expr><name>X86_INS_FDIVP</name></expr>:</case>

<case>case <expr><name>X86_INS_FDIVR</name></expr>:</case>

<case>case <expr><name>X86_INS_FDIVRP</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_INS_FSUBR</name></expr>:</case>

<case>case <expr><name>X86_INS_FISUBR</name></expr>:</case>

<case>case <expr><name>X86_INS_FSUBRP</name></expr>:</case>

<case>case <expr><name>X86_INS_FSUB</name></expr>:</case>

<case>case <expr><name>X86_INS_FISUB</name></expr>:</case>

<case>case <expr><name>X86_INS_FSUBP</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_INS_FMUL</name></expr>:</case>

<case>case <expr><name>X86_INS_FIMUL</name></expr>:</case>

<case>case <expr><name>X86_INS_FMULP</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_INS_CLI</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0,if,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_STI</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"1,if,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CLC</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0,cf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_STC</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"1,cf,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CLAC</name></expr>:</case>

<case>case <expr><name>X86_INS_CLGI</name></expr>:</case>

<case>case <expr><name>X86_INS_CLTS</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>

<case>case <expr><name>X86_INS_CLWB</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>X86_INS_STAC</name></expr>:</case>

<case>case <expr><name>X86_INS_STGI</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_INS_SETNE</name></expr>:</case>

<case>case <expr><name>X86_INS_SETNO</name></expr>:</case>

<case>case <expr><name>X86_INS_SETNP</name></expr>:</case>

<case>case <expr><name>X86_INS_SETNS</name></expr>:</case>

<case>case <expr><name>X86_INS_SETO</name></expr>:</case>

<case>case <expr><name>X86_INS_SETP</name></expr>:</case>

<case>case <expr><name>X86_INS_SETS</name></expr>:</case>

<case>case <expr><name>X86_INS_SETL</name></expr>:</case>

<case>case <expr><name>X86_INS_SETLE</name></expr>:</case>

<case>case <expr><name>X86_INS_SETB</name></expr>:</case>

<case>case <expr><name>X86_INS_SETG</name></expr>:</case>

<case>case <expr><name>X86_INS_SETAE</name></expr>:</case>

<case>case <expr><name>X86_INS_SETA</name></expr>:</case>

<case>case <expr><name>X86_INS_SETBE</name></expr>:</case>

<case>case <expr><name>X86_INS_SETE</name></expr>:</case>

<case>case <expr><name>X86_INS_SETGE</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_INS_SETE</name></expr>:</case> <expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"zf,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>X86_INS_SETNE</name></expr>:</case> <expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"zf,!,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>X86_INS_SETO</name></expr>:</case> <expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"of,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>X86_INS_SETNO</name></expr>:</case> <expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"of,!,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>X86_INS_SETP</name></expr>:</case> <expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"pf,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>X86_INS_SETNP</name></expr>:</case> <expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"pf,!,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>X86_INS_SETS</name></expr>:</case> <expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"sf,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>X86_INS_SETNS</name></expr>:</case> <expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"sf,!,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>X86_INS_SETB</name></expr>:</case> <expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"cf,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>X86_INS_SETAE</name></expr>:</case> <expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"cf,!,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>X86_INS_SETL</name></expr>:</case> <expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"sf,of,^,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>X86_INS_SETLE</name></expr>:</case> <expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"zf,sf,of,^,|,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>X86_INS_SETG</name></expr>:</case> <expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"zf,!,sf,of,^,!,&amp;,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>X86_INS_SETGE</name></expr>:</case> <expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"sf,of,^,!,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>X86_INS_SETA</name></expr>:</case> <expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"cf,zf,|,!,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>X86_INS_SETBE</name></expr>:</case> <expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"cf,zf,|,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_FCMOVBE</name></expr>:</case>

<case>case <expr><name>X86_INS_FCMOVB</name></expr>:</case>

<case>case <expr><name>X86_INS_FCMOVNBE</name></expr>:</case>

<case>case <expr><name>X86_INS_FCMOVNB</name></expr>:</case>

<case>case <expr><name>X86_INS_FCMOVE</name></expr>:</case>

<case>case <expr><name>X86_INS_FCMOVNE</name></expr>:</case>

<case>case <expr><name>X86_INS_FCMOVNU</name></expr>:</case>

<case>case <expr><name>X86_INS_FCMOVU</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_INS_CMOVA</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVAE</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVB</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVBE</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVE</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVG</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVGE</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVL</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVLE</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVNE</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVNO</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVNP</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVNS</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVO</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVP</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVS</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conditional</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_INS_CMOVA</name></expr>:</case>

<expr_stmt><expr><name>conditional</name> <operator>=</operator> <literal type="string">"cf,zf,|,!"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMOVAE</name></expr>:</case>

<expr_stmt><expr><name>conditional</name> <operator>=</operator> <literal type="string">"cf,!"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMOVB</name></expr>:</case>

<expr_stmt><expr><name>conditional</name> <operator>=</operator> <literal type="string">"cf"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMOVBE</name></expr>:</case>

<expr_stmt><expr><name>conditional</name> <operator>=</operator> <literal type="string">"cf,zf,|"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMOVE</name></expr>:</case>

<expr_stmt><expr><name>conditional</name> <operator>=</operator> <literal type="string">"zf"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMOVG</name></expr>:</case>

<expr_stmt><expr><name>conditional</name> <operator>=</operator> <literal type="string">"zf,!,sf,of,^,!,&amp;"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMOVGE</name></expr>:</case>

<expr_stmt><expr><name>conditional</name> <operator>=</operator> <literal type="string">"sf,of,^,!"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMOVL</name></expr>:</case>

<expr_stmt><expr><name>conditional</name> <operator>=</operator> <literal type="string">"sf,of,^"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMOVLE</name></expr>:</case>

<expr_stmt><expr><name>conditional</name> <operator>=</operator> <literal type="string">"zf,sf,of,^,|"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMOVNE</name></expr>:</case>

<expr_stmt><expr><name>conditional</name> <operator>=</operator> <literal type="string">"zf,!"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMOVNO</name></expr>:</case>

<expr_stmt><expr><name>conditional</name> <operator>=</operator> <literal type="string">"of,!"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMOVNP</name></expr>:</case>

<expr_stmt><expr><name>conditional</name> <operator>=</operator> <literal type="string">"pf,!"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMOVNS</name></expr>:</case>

<expr_stmt><expr><name>conditional</name> <operator>=</operator> <literal type="string">"sf,!"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMOVO</name></expr>:</case>

<expr_stmt><expr><name>conditional</name> <operator>=</operator> <literal type="string">"of"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMOVP</name></expr>:</case>

<expr_stmt><expr><name>conditional</name> <operator>=</operator> <literal type="string">"pf"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMOVS</name></expr>:</case>

<expr_stmt><expr><name>conditional</name> <operator>=</operator> <literal type="string">"sf"</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;&amp;</operator> <name>dst</name> <operator>&amp;&amp;</operator> <name>conditional</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,?{,%s,%s,}"</literal></expr></argument>, <argument><expr><name>conditional</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_STOSB</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>&lt;</operator><literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"al,di,=[1],df,?{,1,di,-=,},df,!,?{,1,di,+=,}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"al,edi,=[1],df,?{,1,edi,-=,},df,!,?{,1,edi,+=,}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_STOSW</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>&lt;</operator><literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"ax,di,=[2],df,?{,2,di,-=,},df,!,?{,2,di,+=,}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"ax,edi,=[2],df,?{,2,edi,-=,},df,!,?{,2,edi,+=,}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_STOSD</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"eax,edi,=[4],df,?{,4,edi,-=,},df,!,?{,4,edi,+=,}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_STOSQ</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"rax,rdi,=[8],df,?{,8,edi,-=,},df,!,?{,8,edi,+=,}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_LODSB</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[1],al,=,df,?{,1,%s,-=,},df,!,?{,1,%s,+=,}"</literal></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_LODSW</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"%s,[2],ax,=,df,?{,2,%s,-=,},df,!,?{,2,%s,+=,}"</literal></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_LODSD</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"esi,[4],eax,=,df,?{,4,esi,-=,},df,!,?{,4,esi,+=,}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_LODSQ</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"rsi,[8],rax,=,df,?{,8,rsi,-=,},df,!,?{,8,rsi,+=,}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_PEXTRB</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"TODO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_MOVSD</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>is_xmm_reg</name> <argument_list>(<argument><expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_xmm_reg</name> <argument_list>(<argument><expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;&amp;</operator> <name>dst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>X86_INS_MOVSB</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVSQ</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVSW</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_PREFIX_REP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name><argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name><argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"%s,[%d],%s,=[%d],"</literal>\

<literal type="string">"df,?{,%d,%s,-=,%d,%s,-=,},"</literal>\

<literal type="string">"df,!,?{,%d,%s,+=,%d,%s,+=,}"</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>width</name></expr></argument>,

<argument><expr><name>width</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>,

<argument><expr><name>width</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name><argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name><argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,[%d],%s,=[%d],df,?{,%d,%s,-=,%d,%s,-=,},"</literal>\

<literal type="string">"df,!,?{,%d,%s,+=,%d,%s,+=,}"</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>,

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_MOVSS</name></expr>:</case>

<case>case <expr><name>X86_INS_MOV</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVAPS</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVAPD</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVZX</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVUPS</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVABS</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVHPD</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVHPS</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVLPD</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVLPS</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVBE</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVSX</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVSXD</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVD</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVQ</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVDQU</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVDQA</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVDQ2Q</name></expr>:</case>

<block>{<block_content>

<switch>switch <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_OP_MEM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_PREFIX_REP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name><argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name><argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>counter</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">16</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"cx"</literal></expr></then><else>:

<expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">32</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ecx"</literal></expr></then><else>:<expr><literal type="string">"rcx"</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,!,?{,BREAK,},%s,NUM,%s,NUM,"</literal>\

<literal type="string">"%s,[%d],%s,=[%d],df,?{,%d,%s,-=,%d,%s,-=,},"</literal>\

<literal type="string">"df,!,?{,%d,%s,+=,%d,%s,+=,},%s,--=,%s,"</literal> \

<literal type="string">"?{,8,GOTO,}"</literal></expr></argument>,

<argument><expr><name>counter</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>,

<argument><expr><name>width</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>src</name></expr></argument>,

<argument><expr><name>width</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>counter</name></expr></argument>, <argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>X86_OP_REG</name></expr>:</case>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>X86_OP_MEM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>X86_OP_MEM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ireg</name></name> <operator>=</operator> <call><name>cs_reg_name</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>disp</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst64</name> <init>= <expr><call><name>r_reg_32_to_64</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>dst64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,="</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,="</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_ROL</name></expr>:</case>

<case>case <expr><name>X86_INS_RCL</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&lt;&lt;&lt;,%s,="</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_ROR</name></expr>:</case>

<case>case <expr><name>X86_INS_RCR</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&gt;&gt;&gt;,%s,="</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_CPUID</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0xa,eax,=,0x756E6547,ebx,=,0x6C65746E,ecx,=,0x49656E69,edx,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_SHLD</name></expr>:</case>

<case>case <expr><name>X86_INS_SHLX</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>bitsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;"</literal></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,$z,zf,:=,$p,pf,:=,%d,$s,sf,:="</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_SAR</name></expr>:</case>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

ut64 val = 0;

switch (gop.insn-&gt;detail-&gt;x86.operands[0].size) {

case 1:

val = 0x80;

break;

case 2:

val = 0x8000;

break;

case 4:

val = 0x80000000;

break;

case 8:

val = 0x8000000000000000;

break;

default:

val = 0x80;

}

src = getarg (&amp;gop, 1, 0, NULL, SRC_AR);

dst = getarg (&amp;gop, 0, 0, NULL, DST_AR);

esilprintf (op, "%s,1,%s,&gt;&gt;,0x%"PFMT64x",%s,&amp;,|,%s,=,1,%s,&amp;,cf,=,1,REPEAT", src, dst, val, dst, dst, dst);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ut32</name></type> <name>bitsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_R_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_w</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_W_AR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0,cf,:=,1,%s,-,1,&lt;&lt;,%s,&amp;,?{,1,cf,:=,},%s,%s,&gt;&gt;&gt;&gt;,%s,$z,zf,:=,$p,pf,:=,%d,$s,sf,:="</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>dst_w</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_SARX</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src2</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&gt;&gt;&gt;&gt;,%s,="</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_SHL</name></expr>:</case>

<case>case <expr><name>X86_INS_SAL</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>gop</name><operator>.</operator><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>x86</name><operator>.</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x8000000000000000</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: unknown operand size: %d\n"</literal></expr></argument>, <argument><expr><name><name>gop</name><operator>.</operator><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>x86</name><operator>.</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>ut32</name></type> <name>bitsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;"</literal></expr></argument>, <argument><expr><name>DST2_AR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0,%s,!,!,?{,1,%s,-,%s,&lt;&lt;,0x%llx,&amp;,!,!,^,},%s,%s,$z,zf,:=,$p,pf,:=,%d,$s,sf,:=,cf,="</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_SALC</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"$z,DUP,zf,=,al,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_SHR</name></expr>:</case>

<case>case <expr><name>X86_INS_SHRD</name></expr>:</case>

<case>case <expr><name>X86_INS_SHRX</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>bitsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_R_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_w</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_W_AR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0,cf,:=,1,%s,-,1,&lt;&lt;,%s,&amp;,?{,1,cf,:=,},%s,%s,&gt;&gt;,%s,$z,zf,:=,$p,pf,:=,%d,$s,sf,:="</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>dst_w</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_CBW</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"al,ax,=,7,ax,&gt;&gt;,?{,0xff00,ax,|=,}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CWDE</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"ax,eax,=,15,eax,&gt;&gt;,?{,0xffff0000,eax,|=,}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CDQ</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0,edx,=,31,eax,&gt;&gt;,?{,0xffffffff,edx,=,}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CDQE</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"eax,rax,=,31,rax,&gt;&gt;,?{,0xffffffff00000000,rax,|=,}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_AAA</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0,cf,:=,0,af,:=,9,al,&gt;,?{,10,al,-=,1,ah,+=,1,cf,:=,1,af,:=,}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>X86_INS_AAD</name></expr>:</case>

<expr_stmt><expr><name>arg0</name> <operator>=</operator> <literal type="string">"0,zf,:=,0,sf,:=,0,pf,:=,10,ah,*,al,+,ax,="</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>arg1</name> <operator>=</operator> <literal type="string">"0,al,==,?{,1,zf,:=,},2,al,%,0,==,?{,1,pf,:=,},7,al,&gt;&gt;,?{,1,sf,:=,}"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s"</literal></expr></argument>, <argument><expr><name>arg0</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_AAM</name></expr>:</case>

<expr_stmt><expr><name>arg0</name> <operator>=</operator> <literal type="string">"0,zf,:=,0,sf,:=,0,pf,:=,10,al,/,ah,=,10,al,%,al,="</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>arg1</name> <operator>=</operator> <literal type="string">"0,al,==,?{,1,zf,:=,},2,al,%,0,==,?{,1,pf,:=,},7,al,&gt;&gt;,?{,1,sf,:=,}"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s"</literal></expr></argument>, <argument><expr><name>arg0</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMP</name></expr>:</case>

<case>case <expr><name>X86_INS_CMPPD</name></expr>:</case>

<case>case <expr><name>X86_INS_CMPPS</name></expr>:</case>

<case>case <expr><name>X86_INS_CMPSW</name></expr>:</case>

<case>case <expr><name>X86_INS_CMPSD</name></expr>:</case>

<case>case <expr><name>X86_INS_CMPSQ</name></expr>:</case>

<case>case <expr><name>X86_INS_CMPSB</name></expr>:</case>

<case>case <expr><name>X86_INS_CMPSS</name></expr>:</case>

<case>case <expr><name>X86_INS_TEST</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>bitsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>X86_INS_TEST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0,%s,%s,&amp;,==,$z,zf,:=,$p,pf,:=,%d,$s,sf,:=,0,cf,:=,0,of,:="</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, 

<argument><expr><literal type="string">"%s,%s,==,$z,zf,:=,%d,$b,cf,:=,$p,pf,:=,%d,$s,sf,:=,%d,$o,of,:="</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>bitsize</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_LEA</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_PUSHAW</name></expr>:</case>

<case>case <expr><name>X86_INS_PUSHAL</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,

<argument><expr><literal type="string">"0,%s,+,"</literal>

<literal type="string">"%d,%s,-=,%s,%s,=[%d],"</literal>

<literal type="string">"%d,%s,-=,%s,%s,=[%d],"</literal>

<literal type="string">"%d,%s,-=,%s,%s,=[%d],"</literal>

<literal type="string">"%d,%s,-=,%s,%s,=[%d],"</literal>

<literal type="string">"%d,%s,-=,%s,=[%d],"</literal>

<literal type="string">"%d,%s,-=,%s,%s,=[%d],"</literal>

<literal type="string">"%d,%s,-=,%s,%s,=[%d],"</literal>

<literal type="string">"%d,%s,-=,%s,%s,=[%d]"</literal></expr></argument>,

<argument><expr><name>sp</name></expr></argument>,

<argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"eax"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>,

<argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"ecx"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>,

<argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"edx"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>,

<argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"ebx"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>,

<argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"esp"</literal></expr></argument>, <argument><expr><name>rs</name></expr></argument>,

<argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"ebp"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>,

<argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"esi"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>,

<argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"edi"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_ENTER</name></expr>:</case>

<case>case <expr><name>X86_INS_PUSH</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%d,%s,-,=[%d],%d,%s,-="</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>dst</name></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><literal type="string">"eax"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_PUSHF</name></expr>:</case>

<case>case <expr><name>X86_INS_PUSHFD</name></expr>:</case>

<case>case <expr><name>X86_INS_PUSHFQ</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%d,%s,-=,eflags,%s,=[%d]"</literal></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_LEAVE</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,=,%s,[%d],%s,=,%d,%s,+="</literal></expr></argument>,

<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_POPAW</name></expr>:</case>

<case>case <expr><name>X86_INS_POPAL</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,

<argument><expr><literal type="string">"%s,[%d],%d,%s,+=,%s,=,"</literal>

<literal type="string">"%s,[%d],%d,%s,+=,%s,=,"</literal>

<literal type="string">"%s,[%d],%d,%s,+=,%s,=,"</literal>

<literal type="string">"%s,[%d],%d,%s,+=,"</literal>

<literal type="string">"%s,[%d],%d,%s,+=,%s,=,"</literal>

<literal type="string">"%s,[%d],%d,%s,+=,%s,=,"</literal>

<literal type="string">"%s,[%d],%d,%s,+=,%s,=,"</literal>

<literal type="string">"%s,[%d],%d,%s,+=,%s,=,"</literal>

<literal type="string">"%s,="</literal></expr></argument>,

<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"edi"</literal></expr></argument>,

<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"esi"</literal></expr></argument>,

<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"ebp"</literal></expr></argument>,

<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>,

<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"ebx"</literal></expr></argument>,

<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"edx"</literal></expr></argument>,

<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"ecx"</literal></expr></argument>,

<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"eax"</literal></expr></argument>,

<argument><expr><name>sp</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_POP</name></expr>:</case>

<block>{<block_content>

<switch>switch <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_OP_MEM</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,

<argument><expr><literal type="string">"%s,[%d],%s,%d,%s,+="</literal></expr></argument>,

<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>X86_OP_REG</name></expr>:</case>

<default>default:</default>

<block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,

<argument><expr><literal type="string">"%s,[%d],%s,=,%d,%s,+="</literal></expr></argument>,

<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_POPF</name></expr>:</case>

<case>case <expr><name>X86_INS_POPFD</name></expr>:</case>

<case>case <expr><name>X86_INS_POPFQ</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,[%d],eflags,="</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_RET</name></expr>:</case>

<case>case <expr><name>X86_INS_RETF</name></expr>:</case>

<case>case <expr><name>X86_INS_RETFQ</name></expr>:</case>

<case>case <expr><name>X86_INS_IRET</name></expr>:</case>

<case>case <expr><name>X86_INS_IRETD</name></expr>:</case>

<case>case <expr><name>X86_INS_IRETQ</name></expr>:</case>

<case>case <expr><name>X86_INS_SYSRET</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cleanup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>INSOPS</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cleanup</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,[%d],%s,=,%d,%s,+="</literal></expr></argument>,

<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>rs</name> <operator>+</operator> <name>cleanup</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_INT3</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"3,$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_INT1</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"1,$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_INT</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%d,$"</literal></expr></argument>,

<argument><expr><call><name>R_ABS</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_SYSCALL</name></expr>:</case>

<case>case <expr><name>X86_INS_SYSENTER</name></expr>:</case>

<case>case <expr><name>X86_INS_SYSEXIT</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_INS_INTO</name></expr>:</case>

<case>case <expr><name>X86_INS_VMCALL</name></expr>:</case>

<case>case <expr><name>X86_INS_VMMCALL</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%d,$"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JL</name></expr>:</case>

<case>case <expr><name>X86_INS_JLE</name></expr>:</case>

<case>case <expr><name>X86_INS_JA</name></expr>:</case>

<case>case <expr><name>X86_INS_JAE</name></expr>:</case>

<case>case <expr><name>X86_INS_JB</name></expr>:</case>

<case>case <expr><name>X86_INS_JBE</name></expr>:</case>

<case>case <expr><name>X86_INS_JCXZ</name></expr>:</case>

<case>case <expr><name>X86_INS_JECXZ</name></expr>:</case>

<case>case <expr><name>X86_INS_JRCXZ</name></expr>:</case>

<case>case <expr><name>X86_INS_JO</name></expr>:</case>

<case>case <expr><name>X86_INS_JNO</name></expr>:</case>

<case>case <expr><name>X86_INS_JS</name></expr>:</case>

<case>case <expr><name>X86_INS_JNS</name></expr>:</case>

<case>case <expr><name>X86_INS_JP</name></expr>:</case>

<case>case <expr><name>X86_INS_JNP</name></expr>:</case>

<case>case <expr><name>X86_INS_JE</name></expr>:</case>

<case>case <expr><name>X86_INS_JNE</name></expr>:</case>

<case>case <expr><name>X86_INS_JG</name></expr>:</case>

<case>case <expr><name>X86_INS_JGE</name></expr>:</case>

<case>case <expr><name>X86_INS_LOOP</name></expr>:</case>

<case>case <expr><name>X86_INS_LOOPE</name></expr>:</case>

<case>case <expr><name>X86_INS_LOOPNE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cnt</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">16</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"cx"</literal></expr></then><else>:<expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">32</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ecx"</literal></expr></then><else>:<expr><literal type="string">"rcx"</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_INS_JL</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"of,sf,^,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JLE</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"of,sf,^,zf,|,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JA</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"cf,zf,|,!,?{,%s,%s,=,}"</literal></expr></argument>,<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JAE</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"cf,!,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JB</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"cf,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JO</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"of,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JNO</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"of,!,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JE</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"zf,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JGE</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"of,!,sf,^,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JNE</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"zf,!,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JG</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"sf,of,!,^,zf,!,&amp;,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JS</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"sf,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JNS</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"sf,!,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JP</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"pf,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JNP</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"pf,!,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JBE</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"zf,cf,|,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JCXZ</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"cx,!,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JECXZ</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"ecx,!,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JRCXZ</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"rcx,!,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_LOOP</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"1,%s,-=,%s,?{,%s,%s,=,}"</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_LOOPE</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"1,%s,-=,%s,?{,zf,?{,%s,%s,=,},}"</literal></expr></argument>,

<argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_LOOPNE</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"1,%s,-=,%s,?{,zf,!,?{,%s,%s,=,},}"</literal></expr></argument>,

<argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_CALL</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>read_at</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>thunk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>a</name><operator>-&gt;</operator><name>read_at</name></name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>thunk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>thunk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x8b</literal> <operator>&amp;&amp;</operator> <name><name>thunk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xc3</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>thunk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc7</literal><operator>)</operator> <operator>==</operator> <literal type="number">4</literal> 

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>thunk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x24</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>ut8</name></type> <name>reg</name> <init>= <expr><operator>(</operator><name><name>thunk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x38</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">",%s,="</literal></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><call><name>reg32_to_name</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg0</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ARG0_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,

<argument><expr><literal type="string">"%s,%s,"</literal>

<literal type="string">"%d,%s,-=,%s,"</literal>

<literal type="string">"=[],"</literal>

<literal type="string">"%s,="</literal></expr></argument>,

<argument><expr><name>arg0</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_LCALL</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>arg0</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ARG0_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg1</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ARG1_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,

<argument><expr><literal type="string">"2,%s,-=,cs,%s,=[2],"</literal> 

<literal type="string">"%d,%s,-=,%s,%s,=[],"</literal> 

<literal type="string">"%s,cs,=,"</literal> 

<literal type="string">"%s,%s,="</literal></expr></argument>, 

<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,

<argument><expr><literal type="string">"%d,%s,-=,%d,%s,=[],"</literal> 

<literal type="string">"%s,%s,="</literal></expr></argument>, 

<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_JMP</name></expr>:</case>

<case>case <expr><name>X86_INS_LJMP</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,="</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<switch>switch <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_OP_IMM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>X86_OP_IMM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>seg</name> <init>= <expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(

<argument><expr><name>op</name></expr></argument>,

<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">",cs,=,"</literal>

<literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">",%s,="</literal></expr></argument>,

<argument><expr><name>seg</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>dst</name> <init>= <expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">",%s,="</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>X86_OP_MEM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_RIP</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>cs_x86_op</name></type> <name>in</name> <init>= <expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>.</operator><name>mem</name><operator>.</operator><name>index</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>in</name><operator>.</operator><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>in</name><operator>.</operator><name>mem</name><operator>.</operator><name>scale</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>.</operator><name>mem</name><operator>.</operator><name>segment</name></name> <operator>!=</operator> <name>X86_REG_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(

<argument><expr><name>op</name></expr></argument>,

<argument><expr><literal type="string">"4,%s,&lt;&lt;,0x%"</literal><name>PFMT64x</name><literal type="string">",+,[],%s,="</literal></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>segment</name></name> <operator>==</operator> <name>X86_REG_ES</name></expr> ?</condition><then> <expr><literal type="string">"es"</literal></expr>

</then><else>: <expr><ternary><condition><expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>segment</name></name> <operator>==</operator> <name>X86_REG_CS</name></expr> ?</condition><then> <expr><literal type="string">"cs"</literal></expr>

</then><else>: <expr><ternary><condition><expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>segment</name></name> <operator>==</operator> <name>X86_REG_DS</name></expr> ?</condition><then> <expr><literal type="string">"ds"</literal></expr>

</then><else>: <expr><ternary><condition><expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>segment</name></name> <operator>==</operator> <name>X86_REG_FS</name></expr> ?</condition><then> <expr><literal type="string">"fs"</literal></expr>

</then><else>: <expr><ternary><condition><expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>segment</name></name> <operator>==</operator> <name>X86_REG_GS</name></expr> ?</condition><then> <expr><literal type="string">"gs"</literal></expr>

</then><else>: <expr><ternary><condition><expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>segment</name></name> <operator>==</operator> <name>X86_REG_SS</name></expr> ?</condition><then> <expr><literal type="string">"ss"</literal></expr>

</then><else>: <expr><literal type="string">"unknown_segment_register"</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></argument>,

<argument><expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr></argument>,

<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(

<argument><expr><name>op</name></expr></argument>,

<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">",[],%s,="</literal></expr></argument>,

<argument><expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>X86_OP_REG</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reg</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<default>default:</default> 

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>X86_INS_IN</name></expr>:</case>

<case>case <expr><name>X86_INS_INSW</name></expr>:</case>

<case>case <expr><name>X86_INS_INSD</name></expr>:</case>

<case>case <expr><name>X86_INS_INSB</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>ISIMM</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_OUT</name></expr>:</case>

<case>case <expr><name>X86_INS_OUTSB</name></expr>:</case>

<case>case <expr><name>X86_INS_OUTSD</name></expr>:</case>

<case>case <expr><name>X86_INS_OUTSW</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>ISIMM</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_VXORPD</name></expr>:</case>

<case>case <expr><name>X86_INS_VXORPS</name></expr>:</case>

<case>case <expr><name>X86_INS_VPXORD</name></expr>:</case>

<case>case <expr><name>X86_INS_VPXORQ</name></expr>:</case>

<case>case <expr><name>X86_INS_VPXOR</name></expr>:</case>

<case>case <expr><name>X86_INS_XORPS</name></expr>:</case>

<case>case <expr><name>X86_INS_KXORW</name></expr>:</case>

<case>case <expr><name>X86_INS_PXOR</name></expr>:</case>

<case>case <expr><name>X86_INS_XOR</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>bitsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST2_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst_reg64</name> <init>= <expr><call><name>r_reg_32_to_64</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>dst_reg64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,^,0xffffffff,&amp;,%s,=,$z,zf,:=,$p,pf,:=,%d,$s,sf,:=,0,cf,:=,0,of,:="</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst_reg64</name></expr></argument>, <argument><expr><name>dst_reg64</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,$z,zf,:=,$p,pf,:=,%d,$s,sf,:=,0,cf,:=,0,of,:="</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_BSF</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>size</name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,!,?{,1,zf,=,BREAK,},0,zf,=,"</literal>

<literal type="string">"%d,DUP,%d,-,1,&lt;&lt;,%s,&amp;,?{,%d,-,%s,=,BREAK,},12,REPEAT"</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_BSR</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>size</name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,!,?{,1,zf,=,BREAK,},0,zf,=,"</literal>

<literal type="string">"%d,DUP,1,&lt;&lt;,%s,&amp;,?{,%s,=,BREAK,},12,REPEAT"</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_BSWAP</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0xff000000,24,%s,NUM,&lt;&lt;,&amp;,24,%s,NUM,&gt;&gt;,|,"</literal>

<literal type="string">"8,0x00ff0000,%s,NUM,&amp;,&gt;&gt;,|,"</literal>

<literal type="string">"8,0x0000ff00,%s,NUM,&amp;,&lt;&lt;,|,"</literal>

<literal type="string">"%s,="</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0xff00000000000000,56,%s,NUM,&lt;&lt;,&amp;,"</literal>

<literal type="string">"56,%s,NUM,&gt;&gt;,|,40,0xff000000000000,%s,NUM,&amp;,&gt;&gt;,|,"</literal>

<literal type="string">"40,0xff00,%s,NUM,&amp;,&lt;&lt;,|,24,0xff0000000000,%s,NUM,&amp;,&gt;&gt;,|,"</literal>

<literal type="string">"24,0xff0000,%s,NUM,&amp;,&lt;&lt;,|,8,0xff00000000,%s,NUM,&amp;,&gt;&gt;,|,"</literal>

<literal type="string">"8,0xff000000,%s,NUM,&amp;,&lt;&lt;,|,"</literal>

<literal type="string">"%s,="</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_OR</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>bitsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%d,$s,sf,:=,$z,zf,:=,$p,pf,:=,0,of,:=,0,cf,:="</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_INC</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>bitsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"++"</literal></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%d,$o,of,:=,%d,$s,sf,:=,$z,zf,:=,$p,pf,:="</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_DEC</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>bitsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%d,$o,of,:=,%d,$s,sf,:=,$z,zf,:=,$p,pf,:="</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_PSUBB</name></expr>:</case>

<case>case <expr><name>X86_INS_PSUBW</name></expr>:</case>

<case>case <expr><name>X86_INS_PSUBD</name></expr>:</case>

<case>case <expr><name>X86_INS_PSUBQ</name></expr>:</case>

<case>case <expr><name>X86_INS_PSUBSB</name></expr>:</case>

<case>case <expr><name>X86_INS_PSUBSW</name></expr>:</case>

<case>case <expr><name>X86_INS_PSUBUSB</name></expr>:</case>

<case>case <expr><name>X86_INS_PSUBUSW</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_SUB</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>bitsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%d,$o,of,:=,%d,$s,sf,:=,$z,zf,:=,$p,pf,:=,%d,$b,cf,:="</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_SBB</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>bitsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"cf,%s,+,%s,-=,%d,$o,of,:=,%d,$s,sf,:=,$z,zf,:=,$p,pf,:=,%d,$b,cf,:="</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_LIDT</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_INS_SIDT</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_INS_RDRAND</name></expr>:</case>

<case>case <expr><name>X86_INS_RDSEED</name></expr>:</case>

<case>case <expr><name>X86_INS_RDMSR</name></expr>:</case>

<case>case <expr><name>X86_INS_RDPMC</name></expr>:</case>

<case>case <expr><name>X86_INS_RDTSC</name></expr>:</case>

<case>case <expr><name>X86_INS_RDTSCP</name></expr>:</case>

<case>case <expr><name>X86_INS_CRC32</name></expr>:</case>

<case>case <expr><name>X86_INS_SHA1MSG1</name></expr>:</case>

<case>case <expr><name>X86_INS_SHA1MSG2</name></expr>:</case>

<case>case <expr><name>X86_INS_SHA1NEXTE</name></expr>:</case>

<case>case <expr><name>X86_INS_SHA1RNDS4</name></expr>:</case>

<case>case <expr><name>X86_INS_SHA256MSG1</name></expr>:</case>

<case>case <expr><name>X86_INS_SHA256MSG2</name></expr>:</case>

<case>case <expr><name>X86_INS_SHA256RNDS2</name></expr>:</case>

<case>case <expr><name>X86_INS_AESDECLAST</name></expr>:</case>

<case>case <expr><name>X86_INS_AESDEC</name></expr>:</case>

<case>case <expr><name>X86_INS_AESENCLAST</name></expr>:</case>

<case>case <expr><name>X86_INS_AESENC</name></expr>:</case>

<case>case <expr><name>X86_INS_AESIMC</name></expr>:</case>

<case>case <expr><name>X86_INS_AESKEYGENASSIST</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_INS_AND</name></expr>:</case>

<case>case <expr><name>X86_INS_ANDN</name></expr>:</case>

<case>case <expr><name>X86_INS_ANDPD</name></expr>:</case>

<case>case <expr><name>X86_INS_ANDPS</name></expr>:</case>

<case>case <expr><name>X86_INS_ANDNPD</name></expr>:</case>

<case>case <expr><name>X86_INS_ANDNPS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>bitsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST2_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst_reg64</name> <init>= <expr><call><name>r_reg_32_to_64</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>dst_reg64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&amp;,0xffffffff,&amp;,%s,=,$z,zf,:=,$p,pf,:=,%d,$s,sf,:=,0,cf,:=,0,of,:="</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst_reg64</name></expr></argument>, <argument><expr><name>dst_reg64</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,$z,zf,:=,$p,pf,:=,%d,$s,sf,:=,0,cf,:=,0,of,:="</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_IDIV</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>arg0</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ARG0_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg1</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ARG1_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg2</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ARG2_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg2</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>arg1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>arg0</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_quot</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"al"</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ax"</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">4</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"eax"</literal></expr></then><else>:<expr><literal type="string">"rax"</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_rema</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ah"</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"dx"</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">4</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"edx"</literal></expr></then><else>:<expr><literal type="string">"rdx"</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_nume</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ax"</literal></expr></then><else>: <expr><name>r_quot</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>width</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0xffffff00,eflags,&amp;=,%s,%s,%%,eflags,|=,%s,%s,/,%s,=,0xff,eflags,&amp;,%s,=,0xffffff00,eflags,&amp;=,2,eflags,|="</literal></expr></argument>,

<argument><expr><name>arg0</name></expr></argument>, <argument><expr><name>r_nume</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>, <argument><expr><name>r_nume</name></expr></argument>, <argument><expr><name>r_quot</name></expr></argument>, <argument><expr><name>r_rema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%%,%s,=,%s,%s,/,%s,="</literal></expr></argument>,

<argument><expr><name>arg0</name></expr></argument>, <argument><expr><name>r_nume</name></expr></argument>, <argument><expr><name>r_rema</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>, <argument><expr><name>r_nume</name></expr></argument>, <argument><expr><name>r_quot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,/,%s,="</literal></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_DIV</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_quot</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"al"</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ax"</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">4</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"eax"</literal></expr></then><else>:<expr><literal type="string">"rax"</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_rema</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ah"</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"dx"</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">4</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"edx"</literal></expr></then><else>:<expr><literal type="string">"rdx"</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_nume</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ax"</literal></expr></then><else>: <expr><name>r_quot</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>width</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0xffffff00,eflags,&amp;=,%s,%s,%%,eflags,|=,%s,%s,/,%s,=,0xff,eflags,&amp;,%s,=,0xffffff00,eflags,&amp;=,2,eflags,|="</literal></expr></argument>,

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>r_nume</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>r_nume</name></expr></argument>, <argument><expr><name>r_quot</name></expr></argument>, <argument><expr><name>r_rema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%%,%s,=,%s,%s,/,%s,="</literal></expr></argument>,

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>r_nume</name></expr></argument>, <argument><expr><name>r_rema</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>r_nume</name></expr></argument>, <argument><expr><name>r_quot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_IMUL</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>arg0</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ARG0_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg1</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ARG1_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg2</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ARG2_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,*,%s,="</literal></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>arg1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,*="</literal></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>arg0</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_quot</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"al"</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ax"</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">4</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"eax"</literal></expr></then><else>:<expr><literal type="string">"rax"</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_rema</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ah"</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"dx"</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">4</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"edx"</literal></expr></then><else>:<expr><literal type="string">"rdx"</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_nume</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ax"</literal></expr></then><else>: <expr><name>r_quot</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>width</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0xffffff00,eflags,&amp;=,%s,%s,%%,eflags,|=,%s,%s,*,%s,=,0xff,eflags,&amp;,%s,=,0xffffff00,eflags,&amp;=,2,eflags,|="</literal></expr></argument>,

<argument><expr><name>arg0</name></expr></argument>, <argument><expr><name>r_nume</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>, <argument><expr><name>r_nume</name></expr></argument>, <argument><expr><name>r_quot</name></expr></argument>, <argument><expr><name>r_rema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%d,%s,%s,*,&gt;&gt;,%s,=,%s,%s,*="</literal></expr></argument>,

<argument><expr><name>width</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>arg0</name></expr></argument>, <argument><expr><name>r_nume</name></expr></argument>, <argument><expr><name>r_rema</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>, <argument><expr><name>r_nume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_MUL</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_quot</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"al"</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ax"</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">4</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"eax"</literal></expr></then><else>:<expr><literal type="string">"rax"</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_rema</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ah"</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"dx"</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">4</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"edx"</literal></expr></then><else>:<expr><literal type="string">"rdx"</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_nume</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>width</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ax"</literal></expr></then><else>: <expr><name>r_quot</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>width</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0xffffff00,eflags,&amp;=,%s,%s,%%,eflags,|=,%s,%s,*,%s,=,0xff,eflags,&amp;,%s,=,0xffffff00,eflags,&amp;=,2,eflags,|="</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>r_nume</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>r_nume</name></expr></argument>, <argument><expr><name>r_quot</name></expr></argument>, <argument><expr><name>r_rema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%d,%s,%s,*,&gt;&gt;,%s,=,%s,%s,*="</literal></expr></argument>,

<argument><expr><name>width</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>r_nume</name></expr></argument>, <argument><expr><name>r_rema</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>r_nume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_MULX</name></expr>:</case>

<case>case <expr><name>X86_INS_MULPD</name></expr>:</case>

<case>case <expr><name>X86_INS_MULPS</name></expr>:</case>

<case>case <expr><name>X86_INS_MULSD</name></expr>:</case>

<case>case <expr><name>X86_INS_MULSS</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name> <operator>&amp;&amp;</operator> <name>dst</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<expr_stmt><expr><name>src</name> <operator>=</operator> <literal type="string">"rax"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<expr_stmt><expr><name>src</name> <operator>=</operator> <literal type="string">"eax"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>src</name> <operator>=</operator> <literal type="string">"al"</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_NEG</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>bitsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>xor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>bitsize</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name>xor</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<expr_stmt><expr><name>xor</name> <operator>=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<expr_stmt><expr><name>xor</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">64</literal></expr>:</case>

<expr_stmt><expr><name>xor</name> <operator>=</operator> <literal type="number">0xffffffffffffffff</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Neg: Unhandled bitsize %d\n"</literal></expr></argument>, <argument><expr><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,!,!,cf,:=,%s,0x%"</literal><name>PFMT64x</name><literal type="string">",^,1,+,%s,$z,zf,:=,0,of,:=,%d,$s,sf,:=,%d,$o,pf,:="</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>xor</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_NOT</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"-1,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_PACKSSDW</name></expr>:</case>

<case>case <expr><name>X86_INS_PACKSSWB</name></expr>:</case>

<case>case <expr><name>X86_INS_PACKUSWB</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_INS_PADDB</name></expr>:</case>

<case>case <expr><name>X86_INS_PADDD</name></expr>:</case>

<case>case <expr><name>X86_INS_PADDW</name></expr>:</case>

<case>case <expr><name>X86_INS_PADDSB</name></expr>:</case>

<case>case <expr><name>X86_INS_PADDSW</name></expr>:</case>

<case>case <expr><name>X86_INS_PADDUSB</name></expr>:</case>

<case>case <expr><name>X86_INS_PADDUSW</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_INS_XCHG</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>X86_OP_MEM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST2_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,

<argument><expr><literal type="string">"%s,%s,^,%s,=,"</literal>

<literal type="string">"%s,%s,^,%s,"</literal>

<literal type="string">"%s,%s,^,%s,="</literal></expr></argument>,

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, 

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, 

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,

<argument><expr><literal type="string">"%s,%s,^,%s,=,"</literal>

<literal type="string">"%s,%s,^,%s,=,"</literal>

<literal type="string">"%s,%s,^,%s,="</literal></expr></argument>,

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, 

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, 

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_XADD</name></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dstAdd</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>DSTADD_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>X86_OP_MEM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST2_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,

<argument><expr><literal type="string">"%s,%s,^,%s,=,"</literal>

<literal type="string">"%s,%s,^,%s,"</literal>

<literal type="string">"%s,%s,^,%s,=,"</literal>

<literal type="string">"%s,%s"</literal></expr></argument>,

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, 

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, 

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, 

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dstAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>,

<argument><expr><literal type="string">"%s,%s,^,%s,=,"</literal>

<literal type="string">"%s,%s,^,%s,=,"</literal>

<literal type="string">"%s,%s,^,%s,=,"</literal>

<literal type="string">"%s,%s"</literal></expr></argument>,

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, 

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, 

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, 

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dstAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_FADD</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;</operator> <literal type="number">4</literal></expr></cpp:if>

<case>case <expr><name>X86_INS_PFADD</name></expr>:</case>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<case>case <expr><name>X86_INS_FADDP</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>X86_INS_ADDPS</name></expr>:</case>

<case>case <expr><name>X86_INS_ADDSD</name></expr>:</case>

<case>case <expr><name>X86_INS_ADDSS</name></expr>:</case>

<case>case <expr><name>X86_INS_ADDSUBPD</name></expr>:</case>

<case>case <expr><name>X86_INS_ADDSUBPS</name></expr>:</case>

<case>case <expr><name>X86_INS_ADDPD</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>X86_OP_MEM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src2</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC2_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,%s"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_ADD</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>bitsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%d,$o,of,:=,%d,$s,sf,:=,$z,zf,:=,%d,$c,cf,:=,$p,pf,:="</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_ADC</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>bitsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>DST_AR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"cf,%s,+,%s,%d,$o,of,:=,%d,$s,sf,:=,$z,zf,:=,%d,$c,cf,:=,$p,pf,:="</literal></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bitsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_CLD</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0,df,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_STD</name></expr>:</case>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"1,df,:="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_SUBSD</name></expr>:</case> 

<case>case <expr><name>X86_INS_CVTSS2SD</name></expr>:</case> 

<break>break;</break>

<case>case <expr><name>X86_INS_BT</name></expr>:</case>

<case>case <expr><name>X86_INS_BTC</name></expr>:</case>

<case>case <expr><name>X86_INS_BTR</name></expr>:</case>

<case>case <expr><name>X86_INS_BTS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>X86_OP_MEM</name> <operator>&amp;&amp;</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>X86_OP_REG</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_R_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0,cf,:=,%d,%s,%%,1,&lt;&lt;,%d,%s,/,%s,+,[%d],&amp;,?{,1,cf,:=,}"</literal></expr></argument>,

<argument><expr><name>width</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_INS_BTS</name></expr>:</case>

<case>case <expr><name>X86_INS_BTC</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%d,%s,%%,1,&lt;&lt;,%d,%s,/,%s,+,%c=[%d]"</literal></expr></argument>,

<argument><expr><name>width</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>insn</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>X86_INS_BTS</name><operator>)</operator></expr>?</condition><then><expr><literal type="char">'|'</literal></expr></then><else>:<expr><literal type="char">'^'</literal></expr></else></ternary></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_BTR</name></expr>:</case>

<expr_stmt><expr><name>dst_w</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>, <argument><expr><name>DST_R_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%d,%s,%%,1,&lt;&lt;,-1,^,%d,%s,/,%s,+,&amp;=[%d]"</literal></expr></argument>,

<argument><expr><name>width</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SRC_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DST_R_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0,cf,:=,%d,%s,%%,1,&lt;&lt;,%s,&amp;,?{,1,cf,:=,}"</literal></expr></argument>,

<argument><expr><name>width</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_INS_BTS</name></expr>:</case>

<case>case <expr><name>X86_INS_BTC</name></expr>:</case>

<expr_stmt><expr><name>dst_w</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>insn</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>X86_INS_BTS</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">"|"</literal></expr></then><else>:<expr><literal type="string">"^"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>DST_R_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%d,%s,%%,1,&lt;&lt;,%s"</literal></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_BTR</name></expr>:</case>

<expr_stmt><expr><name>dst_w</name> <operator>=</operator> <call><name>getarg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>, <argument><expr><name>DST_R_AR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%d,%s,%%,1,&lt;&lt;,-1,^,%s"</literal></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_PREFIX_REP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">",%s,--=,%s,?{,5,GOTO,}"</literal></expr></argument>, <argument><expr><name>counter</name></expr></argument>, <argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_valid</name><parameter_list>(<parameter><decl><type><name>x86_reg</name></type> <name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>reg</name> <operator>!=</operator> <name>X86_REG_INVALID</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_reg_name</name><parameter_list>(<parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>reg_base</name></decl></parameter>, <parameter><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>reg_delta</name></decl></parameter>, <parameter><decl><type><name>csh</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg_num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>cs_x86_op</name></type> <name>x86op</name> <init>= <expr><call><name>INSOP</name> <argument_list>(<argument><expr><name>reg_num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>x86op</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_OP_REG</name></expr>:</case>

<expr_stmt><expr><name><name>reg_base</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><name><name>x86op</name><operator>.</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_OP_MEM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>is_valid</name> <argument_list>(<argument><expr><name><name>x86op</name><operator>.</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_valid</name> <argument_list>(<argument><expr><name><name>x86op</name><operator>.</operator><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>reg_base</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><name><name>x86op</name><operator>.</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg_delta</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><name><name>x86op</name><operator>.</operator><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_valid</name> <argument_list>(<argument><expr><name><name>x86op</name><operator>.</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>reg_base</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><name><name>x86op</name><operator>.</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_valid</name> <argument_list>(<argument><expr><name><name>x86op</name><operator>.</operator><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>reg_base</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cs_reg_name</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><name><name>x86op</name><operator>.</operator><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_SRC_DST</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(op)-&gt;src[0] = r_anal_value_new ();(op)-&gt;src[1] = r_anal_value_new ();(op)-&gt;src[2] = r_anal_value_new ();(op)-&gt;dst = r_anal_value_new ();ZERO_FILL (base_regs[0]);ZERO_FILL (base_regs[1]);ZERO_FILL (base_regs[2]);ZERO_FILL (base_regs[3]);ZERO_FILL (regdelta_regs[0]);ZERO_FILL (regdelta_regs[1]);ZERO_FILL (regdelta_regs[2]);ZERO_FILL (regdelta_regs[3]);</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_src_dst</name><parameter_list>(<parameter><decl><type><name>RAnalValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>csh</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>parse_reg_name</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>base_regs</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>regdelta_regs</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>INSOP</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_OP_MEM</name></expr>:</case>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>mul</name></name> <operator>=</operator> <call><name>INSOP</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <call><name>INSOP</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>sel</name></name> <operator>=</operator> <call><name>INSOP</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>segment</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <call><name>INSOP</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>regdelta</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>regdelta_regs</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_OP_REG</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>X86_OP_IMM</name></expr>:</case>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <call><name>INSOP</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>base_regs</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>op_fillval</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>csh</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_TYPE_MASK</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_CMP</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_LEA</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_CMOV</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_SHL</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_SHR</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_SAL</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_SAR</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_ROL</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_ROR</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_ADD</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_AND</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_OR</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_XOR</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_SUB</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_XCHG</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_POP</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_NOT</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_ACMP</name></expr>:</case>

<expr_stmt><expr><call><name>CREATE_SRC_DST</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_src_dst</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_src_dst</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_src_dst</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_src_dst</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_UPUSH</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_TYPE_REG</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CREATE_SRC_DST</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_src_dst</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>op0_memimmhandle</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>regsz</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_OP_MEM</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <name>CYCLE_MEM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>disp</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>disp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>disp</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_RIP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>disp</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_RBP</name> <operator>||</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_EBP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>R_ANAL_OP_TYPE_REG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_SET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <name>regsz</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>segment</name></name> <operator>==</operator> <name>X86_REG_INVALID</name> <operator>&amp;&amp;</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_INVALID</name>

<operator>&amp;&amp;</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>index</name></name> <operator>==</operator> <name>X86_REG_INVALID</name> <operator>&amp;&amp;</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>scale</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>disp</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>&lt;</operator> <literal type="number">0x1000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>X86_OP_IMM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>X86_OP_REG</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>X86_OP_IMM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>op1_memimmhandle</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>regsz</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_OP_MEM</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>disp</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_RIP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>disp</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_RBP</name> <operator>||</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_EBP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_GET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <name>regsz</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>segment</name></name> <operator>==</operator> <name>X86_REG_INVALID</name> <operator>&amp;&amp;</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_INVALID</name>

<operator>&amp;&amp;</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>index</name></name> <operator>==</operator> <name>X86_REG_INVALID</name> <operator>&amp;&amp;</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>scale</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>disp</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>X86_OP_IMM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name> <operator>&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>reg</name> <operator>!=</operator> <name>X86_REG_RSP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>reg</name> <operator>!=</operator> <name>X86_REG_ESP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>op_stackidx</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>minus</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>X86_OP_REG</name> <operator>&amp;&amp;</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>X86_OP_IMM</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86_REG_RSP</name> <operator>||</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86_REG_ESP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>minus</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <operator>-</operator><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_opdir</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_TYPE_MASK</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_OP_TYPE_MOV</name></expr>:</case>

<switch>switch <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_OP_MEM</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>R_ANAL_OP_DIR_WRITE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_OP_REG</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>X86_OP_MEM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>R_ANAL_OP_DIR_READ</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_LEA</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>R_ANAL_OP_DIR_REF</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_UJMP</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_UCALL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>R_ANAL_OP_DIR_EXEC</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>anop</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>csh</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Getarg</name></name></type> <name>gop</name> <init>= <expr><block>{

<expr><operator>.</operator><name>handle</name> <operator>=</operator> <operator>*</operator><name>handle</name></expr>,

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <name>insn</name></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>regsz</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">64</literal></expr>:</case> <expr_stmt><expr><name>regsz</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>regsz</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>regsz</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <break>break;</break> 

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_INS_FNOP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>

<case>case <expr><name>X86_INS_NOP</name></expr>:</case>

<case>case <expr><name>X86_INS_PAUSE</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_HLT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_FBLD</name></expr>:</case>

<case>case <expr><name>X86_INS_FBSTP</name></expr>:</case>

<case>case <expr><name>X86_INS_FCOMPP</name></expr>:</case>

<case>case <expr><name>X86_INS_FDECSTP</name></expr>:</case>

<case>case <expr><name>X86_INS_FEMMS</name></expr>:</case>

<case>case <expr><name>X86_INS_FFREE</name></expr>:</case>

<case>case <expr><name>X86_INS_FICOM</name></expr>:</case>

<case>case <expr><name>X86_INS_FICOMP</name></expr>:</case>

<case>case <expr><name>X86_INS_FINCSTP</name></expr>:</case>

<case>case <expr><name>X86_INS_FNCLEX</name></expr>:</case>

<case>case <expr><name>X86_INS_FNINIT</name></expr>:</case>

<case>case <expr><name>X86_INS_FNSTCW</name></expr>:</case>

<case>case <expr><name>X86_INS_FNSTSW</name></expr>:</case>

<case>case <expr><name>X86_INS_FPATAN</name></expr>:</case>

<case>case <expr><name>X86_INS_FPREM</name></expr>:</case>

<case>case <expr><name>X86_INS_FPREM1</name></expr>:</case>

<case>case <expr><name>X86_INS_FPTAN</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>

<case>case <expr><name>X86_INS_FFREEP</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>X86_INS_FRNDINT</name></expr>:</case>

<case>case <expr><name>X86_INS_FRSTOR</name></expr>:</case>

<case>case <expr><name>X86_INS_FNSAVE</name></expr>:</case>

<case>case <expr><name>X86_INS_FSCALE</name></expr>:</case>

<case>case <expr><name>X86_INS_FSETPM</name></expr>:</case>

<case>case <expr><name>X86_INS_FSINCOS</name></expr>:</case>

<case>case <expr><name>X86_INS_FNSTENV</name></expr>:</case>

<case>case <expr><name>X86_INS_FXAM</name></expr>:</case>

<case>case <expr><name>X86_INS_FXSAVE</name></expr>:</case>

<case>case <expr><name>X86_INS_FXSAVE64</name></expr>:</case>

<case>case <expr><name>X86_INS_FXTRACT</name></expr>:</case>

<case>case <expr><name>X86_INS_FYL2X</name></expr>:</case>

<case>case <expr><name>X86_INS_FYL2XP1</name></expr>:</case>

<case>case <expr><name>X86_INS_FISTTP</name></expr>:</case>

<case>case <expr><name>X86_INS_FSQRT</name></expr>:</case>

<case>case <expr><name>X86_INS_FXCH</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_FTST</name></expr>:</case>

<case>case <expr><name>X86_INS_FUCOMI</name></expr>:</case>

<case>case <expr><name>X86_INS_FUCOMPP</name></expr>:</case>

<case>case <expr><name>X86_INS_FUCOMP</name></expr>:</case>

<case>case <expr><name>X86_INS_FUCOM</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_BT</name></expr>:</case>

<case>case <expr><name>X86_INS_BTC</name></expr>:</case>

<case>case <expr><name>X86_INS_BTR</name></expr>:</case>

<case>case <expr><name>X86_INS_BTS</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_FABS</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ABS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_FLDCW</name></expr>:</case>

<case>case <expr><name>X86_INS_FLDENV</name></expr>:</case>

<case>case <expr><name>X86_INS_FLDL2E</name></expr>:</case>

<case>case <expr><name>X86_INS_FLDL2T</name></expr>:</case>

<case>case <expr><name>X86_INS_FLDLG2</name></expr>:</case>

<case>case <expr><name>X86_INS_FLDLN2</name></expr>:</case>

<case>case <expr><name>X86_INS_FLDPI</name></expr>:</case>

<case>case <expr><name>X86_INS_FLDZ</name></expr>:</case>

<case>case <expr><name>X86_INS_FLD1</name></expr>:</case>

<case>case <expr><name>X86_INS_FLD</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_FIST</name></expr>:</case>

<case>case <expr><name>X86_INS_FISTP</name></expr>:</case>

<case>case <expr><name>X86_INS_FST</name></expr>:</case>

<case>case <expr><name>X86_INS_FSTP</name></expr>:</case>

<case>case <expr><name>X86_INS_FSTPNCE</name></expr>:</case>

<case>case <expr><name>X86_INS_FXRSTOR</name></expr>:</case>

<case>case <expr><name>X86_INS_FXRSTOR64</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_FDIV</name></expr>:</case>

<case>case <expr><name>X86_INS_FIDIV</name></expr>:</case>

<case>case <expr><name>X86_INS_FDIVP</name></expr>:</case>

<case>case <expr><name>X86_INS_FDIVR</name></expr>:</case>

<case>case <expr><name>X86_INS_FIDIVR</name></expr>:</case>

<case>case <expr><name>X86_INS_FDIVRP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_DIV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_FSUBR</name></expr>:</case>

<case>case <expr><name>X86_INS_FISUBR</name></expr>:</case>

<case>case <expr><name>X86_INS_FSUBRP</name></expr>:</case>

<case>case <expr><name>X86_INS_FSUB</name></expr>:</case>

<case>case <expr><name>X86_INS_FISUB</name></expr>:</case>

<case>case <expr><name>X86_INS_FSUBP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_FMUL</name></expr>:</case>

<case>case <expr><name>X86_INS_FIMUL</name></expr>:</case>

<case>case <expr><name>X86_INS_FMULP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CLI</name></expr>:</case>

<case>case <expr><name>X86_INS_STI</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_PRIV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CLC</name></expr>:</case>

<case>case <expr><name>X86_INS_STC</name></expr>:</case>

<case>case <expr><name>X86_INS_CLAC</name></expr>:</case>

<case>case <expr><name>X86_INS_CLGI</name></expr>:</case>

<case>case <expr><name>X86_INS_CLTS</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>

<case>case <expr><name>X86_INS_CLWB</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>X86_INS_STAC</name></expr>:</case>

<case>case <expr><name>X86_INS_STGI</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_SETNE</name></expr>:</case>

<case>case <expr><name>X86_INS_SETNO</name></expr>:</case>

<case>case <expr><name>X86_INS_SETNP</name></expr>:</case>

<case>case <expr><name>X86_INS_SETNS</name></expr>:</case>

<case>case <expr><name>X86_INS_SETO</name></expr>:</case>

<case>case <expr><name>X86_INS_SETP</name></expr>:</case>

<case>case <expr><name>X86_INS_SETS</name></expr>:</case>

<case>case <expr><name>X86_INS_SETL</name></expr>:</case>

<case>case <expr><name>X86_INS_SETLE</name></expr>:</case>

<case>case <expr><name>X86_INS_SETB</name></expr>:</case>

<case>case <expr><name>X86_INS_SETG</name></expr>:</case>

<case>case <expr><name>X86_INS_SETAE</name></expr>:</case>

<case>case <expr><name>X86_INS_SETA</name></expr>:</case>

<case>case <expr><name>X86_INS_SETBE</name></expr>:</case>

<case>case <expr><name>X86_INS_SETE</name></expr>:</case>

<case>case <expr><name>X86_INS_SETGE</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_FCMOVBE</name></expr>:</case>

<case>case <expr><name>X86_INS_FCMOVB</name></expr>:</case>

<case>case <expr><name>X86_INS_FCMOVNBE</name></expr>:</case>

<case>case <expr><name>X86_INS_FCMOVNB</name></expr>:</case>

<case>case <expr><name>X86_INS_FCMOVE</name></expr>:</case>

<case>case <expr><name>X86_INS_FCMOVNE</name></expr>:</case>

<case>case <expr><name>X86_INS_FCMOVNU</name></expr>:</case>

<case>case <expr><name>X86_INS_FCMOVU</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMOVA</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVAE</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVB</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVBE</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVE</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVG</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVGE</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVL</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVLE</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVNE</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVNO</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVNP</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVNS</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVO</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVP</name></expr>:</case>

<case>case <expr><name>X86_INS_CMOVS</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_STOSB</name></expr>:</case>

<case>case <expr><name>X86_INS_STOSD</name></expr>:</case>

<case>case <expr><name>X86_INS_STOSQ</name></expr>:</case>

<case>case <expr><name>X86_INS_STOSW</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_LODSB</name></expr>:</case>

<case>case <expr><name>X86_INS_LODSD</name></expr>:</case>

<case>case <expr><name>X86_INS_LODSQ</name></expr>:</case>

<case>case <expr><name>X86_INS_LODSW</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_PALIGNR</name></expr>:</case>

<case>case <expr><name>X86_INS_VALIGND</name></expr>:</case>

<case>case <expr><name>X86_INS_VALIGNQ</name></expr>:</case>

<case>case <expr><name>X86_INS_VPALIGNR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_CPU</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CPUID</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_CPU</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_SFENCE</name></expr>:</case>

<case>case <expr><name>X86_INS_LFENCE</name></expr>:</case>

<case>case <expr><name>X86_INS_MFENCE</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_THREAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_MOVNTQ</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVNTDQA</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVNTDQ</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVNTI</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVNTPD</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVNTPS</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVNTSD</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVNTSS</name></expr>:</case>

<case>case <expr><name>X86_INS_VMOVNTDQA</name></expr>:</case>

<case>case <expr><name>X86_INS_VMOVNTDQ</name></expr>:</case>

<case>case <expr><name>X86_INS_VMOVNTPD</name></expr>:</case>

<case>case <expr><name>X86_INS_VMOVNTPS</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_SSE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_PCMPEQB</name></expr>:</case>

<case>case <expr><name>X86_INS_PCMPEQD</name></expr>:</case>

<case>case <expr><name>X86_INS_PCMPEQW</name></expr>:</case>

<case>case <expr><name>X86_INS_PCMPGTB</name></expr>:</case>

<case>case <expr><name>X86_INS_PCMPGTD</name></expr>:</case>

<case>case <expr><name>X86_INS_PCMPGTW</name></expr>:</case>

<case>case <expr><name>X86_INS_PCMPEQQ</name></expr>:</case>

<case>case <expr><name>X86_INS_PCMPESTRI</name></expr>:</case>

<case>case <expr><name>X86_INS_PCMPESTRM</name></expr>:</case>

<case>case <expr><name>X86_INS_PCMPGTQ</name></expr>:</case>

<case>case <expr><name>X86_INS_PCMPISTRI</name></expr>:</case>

<case>case <expr><name>X86_INS_PCMPISTRM</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>

<case>case <expr><name>X86_INS_VPCMPB</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>X86_INS_VPCMPD</name></expr>:</case>

<case>case <expr><name>X86_INS_VPCMPEQB</name></expr>:</case>

<case>case <expr><name>X86_INS_VPCMPEQD</name></expr>:</case>

<case>case <expr><name>X86_INS_VPCMPEQQ</name></expr>:</case>

<case>case <expr><name>X86_INS_VPCMPEQW</name></expr>:</case>

<case>case <expr><name>X86_INS_VPCMPESTRI</name></expr>:</case>

<case>case <expr><name>X86_INS_VPCMPESTRM</name></expr>:</case>

<case>case <expr><name>X86_INS_VPCMPGTB</name></expr>:</case>

<case>case <expr><name>X86_INS_VPCMPGTD</name></expr>:</case>

<case>case <expr><name>X86_INS_VPCMPGTQ</name></expr>:</case>

<case>case <expr><name>X86_INS_VPCMPGTW</name></expr>:</case>

<case>case <expr><name>X86_INS_VPCMPISTRI</name></expr>:</case>

<case>case <expr><name>X86_INS_VPCMPISTRM</name></expr>:</case>

<case>case <expr><name>X86_INS_VPCMPQ</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>

<case>case <expr><name>X86_INS_VPCMPUB</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>X86_INS_VPCMPUD</name></expr>:</case>

<case>case <expr><name>X86_INS_VPCMPUQ</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>

<case>case <expr><name>X86_INS_VPCMPUW</name></expr>:</case>

<case>case <expr><name>X86_INS_VPCMPW</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_SSE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_MOVSS</name></expr>:</case>

<case>case <expr><name>X86_INS_MOV</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVAPS</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVAPD</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVZX</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVUPS</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVABS</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVHPD</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVHPS</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVLPD</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVLPS</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVBE</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVSB</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVSD</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVSQ</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVSX</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVSXD</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVSW</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVD</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVQ</name></expr>:</case>

<case>case <expr><name>X86_INS_MOVDQ2Q</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op0_memimmhandle</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>regsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op1_memimmhandle</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>regsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>X86_INS_ROL</name></expr>:</case>

<case>case <expr><name>X86_INS_RCL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_ROR</name></expr>:</case>

<case>case <expr><name>X86_INS_RCR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_SHL</name></expr>:</case>

<case>case <expr><name>X86_INS_SHLD</name></expr>:</case>

<case>case <expr><name>X86_INS_SHLX</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_SAR</name></expr>:</case>

<case>case <expr><name>X86_INS_SARX</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_SAL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_SALC</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_SHR</name></expr>:</case>

<case>case <expr><name>X86_INS_SHRD</name></expr>:</case>

<case>case <expr><name>X86_INS_SHRX</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CMP</name></expr>:</case>

<case>case <expr><name>X86_INS_CMPPD</name></expr>:</case>

<case>case <expr><name>X86_INS_CMPPS</name></expr>:</case>

<case>case <expr><name>X86_INS_CMPSW</name></expr>:</case>

<case>case <expr><name>X86_INS_CMPSD</name></expr>:</case>

<case>case <expr><name>X86_INS_CMPSQ</name></expr>:</case>

<case>case <expr><name>X86_INS_CMPSB</name></expr>:</case>

<case>case <expr><name>X86_INS_CMPSS</name></expr>:</case>

<case>case <expr><name>X86_INS_TEST</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>X86_INS_TEST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ACMP</name></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_OP_MEM</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>disp</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_RIP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>disp</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_RBP</name> <operator>||</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_EBP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_SET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <name>regsz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>R_ANAL_OP_TYPE_REG</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>segment</name></name> <operator>==</operator> <name>X86_REG_INVALID</name> <operator>&amp;&amp;</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_INVALID</name>

<operator>&amp;&amp;</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>index</name></name> <operator>==</operator> <name>X86_REG_INVALID</name> <operator>&amp;&amp;</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>scale</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>disp</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>X86_OP_IMM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<switch>switch <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_OP_MEM</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>disp</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_RIP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>disp</name></name></expr>;</expr_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_RBP</name> <operator>||</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_EBP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>R_ANAL_OP_TYPE_REG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_SET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <name>regsz</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>segment</name></name> <operator>==</operator> <name>X86_REG_INVALID</name>

<operator>&amp;&amp;</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_INVALID</name>

<operator>&amp;&amp;</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>index</name></name> <operator>==</operator> <name>X86_REG_INVALID</name>

<operator>&amp;&amp;</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>scale</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>disp</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>X86_OP_IMM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>X86_OP_IMM</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>X86_INS_LEA</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LEA</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_OP_MEM</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>disp</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_REG_RIP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>disp</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_REG_RBP</name></expr>:</case>

<case>case <expr><name>X86_REG_EBP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_GET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <name>regsz</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>X86_OP_IMM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>X86_INS_PUSHAW</name></expr>:</case>

<case>case <expr><name>X86_INS_PUSHAL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UPUSH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <name>regsz</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_ENTER</name></expr>:</case>

<case>case <expr><name>X86_INS_PUSH</name></expr>:</case>

<case>case <expr><name>X86_INS_PUSHF</name></expr>:</case>

<case>case <expr><name>X86_INS_PUSHFD</name></expr>:</case>

<case>case <expr><name>X86_INS_PUSHFQ</name></expr>:</case>

<switch>switch <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_OP_MEM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>index</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UPUSH</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <name>CYCLE_REG</name> <operator>+</operator> <name>CYCLE_MEM</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_OP_IMM</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <name>CYCLE_REG</name> <operator>+</operator> <name>CYCLE_MEM</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_OP_REG</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RPUSH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <name>CYCLE_REG</name> <operator>+</operator> <name>CYCLE_MEM</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UPUSH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <name>CYCLE_MEM</name> <operator>+</operator> <name>CYCLE_MEM</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <name>regsz</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_LEAVE</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <operator>-</operator><name>regsz</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_POP</name></expr>:</case>

<case>case <expr><name>X86_INS_POPF</name></expr>:</case>

<case>case <expr><name>X86_INS_POPFD</name></expr>:</case>

<case>case <expr><name>X86_INS_POPFQ</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <operator>-</operator><name>regsz</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_POPAW</name></expr>:</case>

<case>case <expr><name>X86_INS_POPAL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <operator>-</operator><name>regsz</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_IRET</name></expr>:</case>

<case>case <expr><name>X86_INS_IRETD</name></expr>:</case>

<case>case <expr><name>X86_INS_IRETQ</name></expr>:</case>

<case>case <expr><name>X86_INS_SYSRET</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_PRIV</name></expr>;</expr_stmt>

<case>case <expr><name>X86_INS_RET</name></expr>:</case>

<case>case <expr><name>X86_INS_RETF</name></expr>:</case>

<case>case <expr><name>X86_INS_RETFQ</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <operator>-</operator><name>regsz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <name>CYCLE_MEM</name> <operator>+</operator> <name>CYCLE_JMP</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>

<case>case <expr><name>X86_INS_UD0</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>X86_INS_UD2</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>

<case>case <expr><name>X86_INS_UD2B</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>X86_INS_INT3</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>X86_INS_INT1</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SWI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_INT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SWI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_SYSCALL</name></expr>:</case>

<case>case <expr><name>X86_INS_SYSENTER</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SWI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <name>CYCLE_JMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_SYSEXIT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SWI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_PRIV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_INTO</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SWI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>R_ANAL_OP_TYPE_COND</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_VMCALL</name></expr>:</case>

<case>case <expr><name>X86_INS_VMMCALL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_JL</name></expr>:</case>

<case>case <expr><name>X86_INS_JLE</name></expr>:</case>

<case>case <expr><name>X86_INS_JA</name></expr>:</case>

<case>case <expr><name>X86_INS_JAE</name></expr>:</case>

<case>case <expr><name>X86_INS_JB</name></expr>:</case>

<case>case <expr><name>X86_INS_JBE</name></expr>:</case>

<case>case <expr><name>X86_INS_JCXZ</name></expr>:</case>

<case>case <expr><name>X86_INS_JECXZ</name></expr>:</case>

<case>case <expr><name>X86_INS_JRCXZ</name></expr>:</case>

<case>case <expr><name>X86_INS_JO</name></expr>:</case>

<case>case <expr><name>X86_INS_JNO</name></expr>:</case>

<case>case <expr><name>X86_INS_JS</name></expr>:</case>

<case>case <expr><name>X86_INS_JNS</name></expr>:</case>

<case>case <expr><name>X86_INS_JP</name></expr>:</case>

<case>case <expr><name>X86_INS_JNP</name></expr>:</case>

<case>case <expr><name>X86_INS_JE</name></expr>:</case>

<case>case <expr><name>X86_INS_JNE</name></expr>:</case>

<case>case <expr><name>X86_INS_JG</name></expr>:</case>

<case>case <expr><name>X86_INS_JGE</name></expr>:</case>

<case>case <expr><name>X86_INS_LOOP</name></expr>:</case>

<case>case <expr><name>X86_INS_LOOPE</name></expr>:</case>

<case>case <expr><name>X86_INS_LOOPNE</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <name>CYCLE_JMP</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_INS_JL</name></expr>:</case>

<case>case <expr><name>X86_INS_JLE</name></expr>:</case>

<case>case <expr><name>X86_INS_JS</name></expr>:</case>

<case>case <expr><name>X86_INS_JG</name></expr>:</case>

<case>case <expr><name>X86_INS_JGE</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>X86_INS_CALL</name></expr>:</case>

<case>case <expr><name>X86_INS_LCALL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <name>CYCLE_JMP</name> <operator>+</operator> <name>CYCLE_MEM</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_OP_IMM</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>X86_OP_IMM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>seg</name> <init>= <expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <operator>(</operator><name>seg</name> <operator>&lt;&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>seggrn</name></name><operator>)</operator> <operator>+</operator> <name>off</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_OP_MEM</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>disp</name></name> <operator>=</operator> <call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ireg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>+=</operator> <name>CYCLE_MEM</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>index</name></name> <operator>==</operator> <name>X86_REG_INVALID</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>!=</operator> <name>X86_REG_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>cs_reg_name</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_IRCALL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ireg</name></name> <operator>=</operator> <call><name>cs_reg_name</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_RIP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+=</operator> <name>addr</name> <operator>+</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>X86_OP_REG</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>cs_reg_name</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RCALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>+=</operator> <name>CYCLE_REG</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>X86_INS_JMP</name></expr>:</case>

<case>case <expr><name>X86_INS_LJMP</name></expr>:</case>

<switch>switch <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_OP_IMM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>X86_OP_IMM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>seg</name> <init>= <expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <operator>(</operator><name>seg</name> <operator>&lt;&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>seggrn</name></name><operator>)</operator> <operator>+</operator> <name>off</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <name>CYCLE_JMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_OP_MEM</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>disp</name></name> <operator>=</operator> <call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>disp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ireg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <name>CYCLE_JMP</name> <operator>+</operator> <name>CYCLE_MEM</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>!=</operator> <name>X86_REG_INVALID</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>!=</operator> <name>X86_REG_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>cs_reg_name</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_IRJMP</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>index</name></name> <operator>==</operator> <name>X86_REG_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ireg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ireg</name></name> <operator>=</operator> <call><name>cs_reg_name</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <call><name>INSOP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>mem</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>X86_REG_RIP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+=</operator> <name>addr</name> <operator>+</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>X86_OP_REG</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <name>CYCLE_JMP</name> <operator>+</operator> <name>CYCLE_REG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>cs_reg_name</name> <argument_list>(<argument><expr><name><name>gop</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>X86_INS_IN</name></expr>:</case>

<case>case <expr><name>X86_INS_INSW</name></expr>:</case>

<case>case <expr><name>X86_INS_INSD</name></expr>:</case>

<case>case <expr><name>X86_INS_INSB</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_IO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_OUT</name></expr>:</case>

<case>case <expr><name>X86_INS_OUTSB</name></expr>:</case>

<case>case <expr><name>X86_INS_OUTSD</name></expr>:</case>

<case>case <expr><name>X86_INS_OUTSW</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_IO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type2</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_VXORPD</name></expr>:</case>

<case>case <expr><name>X86_INS_VXORPS</name></expr>:</case>

<case>case <expr><name>X86_INS_VPXORD</name></expr>:</case>

<case>case <expr><name>X86_INS_VPXORQ</name></expr>:</case>

<case>case <expr><name>X86_INS_VPXOR</name></expr>:</case>

<case>case <expr><name>X86_INS_XORPS</name></expr>:</case>

<case>case <expr><name>X86_INS_KXORW</name></expr>:</case>

<case>case <expr><name>X86_INS_PXOR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_XOR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op0_memimmhandle</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>regsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op1_memimmhandle</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>regsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_OR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op0_memimmhandle</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>regsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op1_memimmhandle</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>regsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_INC</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_DEC</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_NEG</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_CPU</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_NOT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_CPU</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_PSUBB</name></expr>:</case>

<case>case <expr><name>X86_INS_PSUBW</name></expr>:</case>

<case>case <expr><name>X86_INS_PSUBD</name></expr>:</case>

<case>case <expr><name>X86_INS_PSUBQ</name></expr>:</case>

<case>case <expr><name>X86_INS_PSUBSB</name></expr>:</case>

<case>case <expr><name>X86_INS_PSUBSW</name></expr>:</case>

<case>case <expr><name>X86_INS_PSUBUSB</name></expr>:</case>

<case>case <expr><name>X86_INS_PSUBUSW</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_SUB</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op_stackidx</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op0_memimmhandle</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>regsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op1_memimmhandle</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>regsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_SBB</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_LIDT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_PRIV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_SIDT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_PRIV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_RDRAND</name></expr>:</case>

<case>case <expr><name>X86_INS_RDSEED</name></expr>:</case>

<case>case <expr><name>X86_INS_RDMSR</name></expr>:</case>

<case>case <expr><name>X86_INS_RDPMC</name></expr>:</case>

<case>case <expr><name>X86_INS_RDTSC</name></expr>:</case>

<case>case <expr><name>X86_INS_RDTSCP</name></expr>:</case>

<case>case <expr><name>X86_INS_CRC32</name></expr>:</case>

<case>case <expr><name>X86_INS_SHA1MSG1</name></expr>:</case>

<case>case <expr><name>X86_INS_SHA1MSG2</name></expr>:</case>

<case>case <expr><name>X86_INS_SHA1NEXTE</name></expr>:</case>

<case>case <expr><name>X86_INS_SHA1RNDS4</name></expr>:</case>

<case>case <expr><name>X86_INS_SHA256MSG1</name></expr>:</case>

<case>case <expr><name>X86_INS_SHA256MSG2</name></expr>:</case>

<case>case <expr><name>X86_INS_SHA256RNDS2</name></expr>:</case>

<case>case <expr><name>X86_INS_AESDECLAST</name></expr>:</case>

<case>case <expr><name>X86_INS_AESDEC</name></expr>:</case>

<case>case <expr><name>X86_INS_AESENCLAST</name></expr>:</case>

<case>case <expr><name>X86_INS_AESENC</name></expr>:</case>

<case>case <expr><name>X86_INS_AESIMC</name></expr>:</case>

<case>case <expr><name>X86_INS_AESKEYGENASSIST</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_CRYPTO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>X86_INS_ANDN</name></expr>:</case>

<case>case <expr><name>X86_INS_ANDPD</name></expr>:</case>

<case>case <expr><name>X86_INS_ANDPS</name></expr>:</case>

<case>case <expr><name>X86_INS_ANDNPD</name></expr>:</case>

<case>case <expr><name>X86_INS_ANDNPS</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_AND</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op0_memimmhandle</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>regsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op1_memimmhandle</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>regsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_IDIV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_DIV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_DIV</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_DIV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_IMUL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_AAM</name></expr>:</case>

<case>case <expr><name>X86_INS_MUL</name></expr>:</case>

<case>case <expr><name>X86_INS_MULX</name></expr>:</case>

<case>case <expr><name>X86_INS_MULPD</name></expr>:</case>

<case>case <expr><name>X86_INS_MULPS</name></expr>:</case>

<case>case <expr><name>X86_INS_MULSD</name></expr>:</case>

<case>case <expr><name>X86_INS_MULSS</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_PACKSSDW</name></expr>:</case>

<case>case <expr><name>X86_INS_PACKSSWB</name></expr>:</case>

<case>case <expr><name>X86_INS_PACKUSWB</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_MMX</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_PADDB</name></expr>:</case>

<case>case <expr><name>X86_INS_PADDD</name></expr>:</case>

<case>case <expr><name>X86_INS_PADDW</name></expr>:</case>

<case>case <expr><name>X86_INS_PADDSB</name></expr>:</case>

<case>case <expr><name>X86_INS_PADDSW</name></expr>:</case>

<case>case <expr><name>X86_INS_PADDUSB</name></expr>:</case>

<case>case <expr><name>X86_INS_PADDUSW</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_MMX</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_XCHG</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_CPU</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_XADD</name></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_CPU</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_FADD</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>

<case>case <expr><name>X86_INS_FADDP</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_ADDPS</name></expr>:</case>

<case>case <expr><name>X86_INS_ADDSD</name></expr>:</case>

<case>case <expr><name>X86_INS_ADDSS</name></expr>:</case>

<case>case <expr><name>X86_INS_ADDSUBPD</name></expr>:</case>

<case>case <expr><name>X86_INS_ADDSUBPS</name></expr>:</case>

<case>case <expr><name>X86_INS_ADDPD</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op_stackidx</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_ADD</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op_stackidx</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op0_memimmhandle</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>regsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op1_memimmhandle</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>regsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_ADC</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_CLD</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_STD</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_INS_SUBSD</name></expr>:</case> 

<case>case <expr><name>X86_INS_CVTSS2SD</name></expr>:</case> 

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>cs_insn_group</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>X86_GRP_MMX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_MMX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cs_insn_group</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>X86_GRP_SSE1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_SSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cs_insn_group</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>X86_GRP_SSE2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_SSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cs_insn_group</name> <argument_list>(<argument><expr><operator>*</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>X86_GRP_SSE3</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_SSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cs_len_prefix_opcode</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>analop</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>omode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_ITER_API</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>cs_insn</name> <modifier>*</modifier></type><name>insn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">64</literal><operator>)</operator></expr>?</condition><then> <expr><name>CS_MODE_64</name></expr></then><else>:

<expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">32</literal><operator>)</operator></expr>?</condition><then> <expr><name>CS_MODE_32</name></expr></then><else>:

<expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bits</name></name><operator>==</operator><literal type="number">16</literal><operator>)</operator></expr>?</condition><then> <expr><name>CS_MODE_16</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <name>omode</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cs_close</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>omode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cs_open</name> <argument_list>(<argument><expr><name>CS_ARCH_X86</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>CS_ERR_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cs_option</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CS_OPT_DETAIL</name></expr></argument>, <argument><expr><name>CS_OPT_ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_ITER_API</name></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>naddr</name> <init>= <expr><name>addr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>insn</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>insn</name> <operator>=</operator> <call><name>cs_malloc</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>cs_disasm_iter</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>naddr</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>cs_disasm</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_DISASM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_DISASM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>,

<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>insn</name><operator>-&gt;</operator><name>op_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>?</condition><then><expr><literal type="string">" "</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>op_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>nopcode</name></name> <operator>=</operator> <call><name>cs_len_prefix_opcode</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>x86</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>cs_len_prefix_opcode</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>x86</name><operator>.</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_CPU</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>cond_x862r2</name> <argument_list>(<argument><expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>x86</name><operator>.</operator><name>prefix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X86_PREFIX_REPNE</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>prefix</name></name> <operator>|=</operator> <name>R_ANAL_OP_PREFIX_REPNE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_PREFIX_REP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>prefix</name></name> <operator>|=</operator> <name>R_ANAL_OP_PREFIX_REP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X86_PREFIX_LOCK</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>prefix</name></name> <operator>|=</operator> <name>R_ANAL_OP_PREFIX_LOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_THREAD</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>anop</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_opdir</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_ESIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>anop_esil</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_OPEX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>opex</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>opex</name></name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_VAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>op_fillval</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>insn</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CSGRP_PRIVILEGE</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>cs_insn_group</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name>X86_GRP_PRIVILEGE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_PRIV</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_ITER_API</name></expr></cpp:if>

<expr_stmt><expr><call><name>cs_free</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static int x86_int_0x80(RAnalEsil *esil, int interrupt) {

int syscall;

ut64 eax, ebx, ecx, edx;

if (!esil || (interrupt != 0x80))

return false;

r_anal_esil_reg_read (esil, "eax", &amp;eax, NULL);

r_anal_esil_reg_read (esil, "ebx", &amp;ebx, NULL);

r_anal_esil_reg_read (esil, "ecx", &amp;ecx, NULL);

r_anal_esil_reg_read (esil, "edx", &amp;edx, NULL);

syscall = (int) eax;

switch (syscall) {

case 3:

{

char *dst = calloc (1, (size_t)edx);

(void)read ((ut32)ebx, dst, (size_t)edx);

r_anal_esil_mem_write (esil, ecx, (ut8 *)dst, (int)edx);

free (dst);

return true;

}

case 4:

{

char *src = malloc ((size_t)edx);

r_anal_esil_mem_read (esil, ecx, (ut8 *)src, (int)edx);

write ((ut32)ebx, src, (size_t)edx);

free (src);

return true;

}

}

eprintf ("syscall %d not implemented yet\n", syscall);

return false;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static int esil_x86_cs_intr(RAnalEsil *esil, int intr) {

if (!esil) return false;

eprintf ("INTERRUPT 0x%02x HAPPENS\n", intr);

return true;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>esil_x86_cs_init</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>esil</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fini</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>esil_x86_cs_fini</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator>

<literal type="string">"=PC ip\n"</literal>

<literal type="string">"=SP sp\n"</literal>

<literal type="string">"=BP bp\n"</literal>

<literal type="string">"=A0 ax\n"</literal>

<literal type="string">"=A1 bx\n"</literal>

<literal type="string">"=A2 cx\n"</literal>

<literal type="string">"=A3 dx\n"</literal>

<literal type="string">"=A4 si\n"</literal>

<literal type="string">"=A5 di\n"</literal>

<literal type="string">"=SN ah\n"</literal>

<literal type="string">"gpr ip .16 48 0\n"</literal>

<literal type="string">"gpr ax .16 24 0\n"</literal>

<literal type="string">"gpr ah .8 25 0\n"</literal>

<literal type="string">"gpr al .8 24 0\n"</literal>

<literal type="string">"gpr bx .16 0 0\n"</literal>

<literal type="string">"gpr bh .8 1 0\n"</literal>

<literal type="string">"gpr bl .8 0 0\n"</literal>

<literal type="string">"gpr cx .16 4 0\n"</literal>

<literal type="string">"gpr ch .8 5 0\n"</literal>

<literal type="string">"gpr cl .8 4 0\n"</literal>

<literal type="string">"gpr dx .16 8 0\n"</literal>

<literal type="string">"gpr dh .8 9 0\n"</literal>

<literal type="string">"gpr dl .8 8 0\n"</literal>

<literal type="string">"gpr sp .16 60 0\n"</literal>

<literal type="string">"gpr bp .16 20 0\n"</literal>

<literal type="string">"gpr si .16 12 0\n"</literal>

<literal type="string">"gpr di .16 16 0\n"</literal>

<literal type="string">"seg cs .16 52 0\n"</literal>

<literal type="string">"seg ss .16 54 0\n"</literal>

<literal type="string">"seg ds .16 56 0\n"</literal>

<literal type="string">"seg es .16 58 0\n"</literal>

<literal type="string">"gpr flags .16 56 0\n"</literal>

<literal type="string">"flg cf .1 .448 0\n"</literal>

<literal type="string">"flg pf .1 .449 0\n"</literal>

<literal type="string">"flg af .1 .450 0\n"</literal>

<literal type="string">"flg zf .1 .451 0\n"</literal>

<literal type="string">"flg sf .1 .452 0\n"</literal>

<literal type="string">"flg tf .1 .453 0\n"</literal>

<literal type="string">"flg if .1 .454 0\n"</literal>

<literal type="string">"flg df .1 .455 0\n"</literal>

<literal type="string">"flg of .1 .456 0\n"</literal>

<literal type="string">"flg rf .1 .457 0\n"</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

"drx dr0 .32 0 0\n"

"drx dr1 .32 4 0\n"

"drx dr2 .32 8 0\n"

"drx dr3 .32 12 0\n"

"drx dr6 .32 24 0\n"

"drx dr7 .32 28 0\n"

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator>

<literal type="string">"=PC eip\n"</literal>

<literal type="string">"=SP esp\n"</literal>

<literal type="string">"=BP ebp\n"</literal>

<literal type="string">"=A0 eax\n"</literal>

<literal type="string">"=A1 ebx\n"</literal>

<literal type="string">"=A2 ecx\n"</literal>

<literal type="string">"=A3 edx\n"</literal>

<literal type="string">"=A4 esi\n"</literal>

<literal type="string">"=A5 edi\n"</literal>

<literal type="string">"=SN eax\n"</literal>

<literal type="string">"gpr oeax .32 44 0\n"</literal>

<literal type="string">"gpr eax .32 24 0\n"</literal>

<literal type="string">"gpr ax .16 24 0\n"</literal>

<literal type="string">"gpr ah .8 25 0\n"</literal>

<literal type="string">"gpr al .8 24 0\n"</literal>

<literal type="string">"gpr ebx .32 0 0\n"</literal>

<literal type="string">"gpr bx .16 0 0\n"</literal>

<literal type="string">"gpr bh .8 1 0\n"</literal>

<literal type="string">"gpr bl .8 0 0\n"</literal>

<literal type="string">"gpr ecx .32 4 0\n"</literal>

<literal type="string">"gpr cx .16 4 0\n"</literal>

<literal type="string">"gpr ch .8 5 0\n"</literal>

<literal type="string">"gpr cl .8 4 0\n"</literal>

<literal type="string">"gpr edx .32 8 0\n"</literal>

<literal type="string">"gpr dx .16 8 0\n"</literal>

<literal type="string">"gpr dh .8 9 0\n"</literal>

<literal type="string">"gpr dl .8 8 0\n"</literal>

<literal type="string">"gpr esi .32 12 0\n"</literal>

<literal type="string">"gpr si .16 12 0\n"</literal>

<literal type="string">"gpr edi .32 16 0\n"</literal>

<literal type="string">"gpr di .16 16 0\n"</literal>

<literal type="string">"gpr esp .32 60 0\n"</literal>

<literal type="string">"gpr sp .16 60 0\n"</literal>

<literal type="string">"gpr ebp .32 20 0\n"</literal>

<literal type="string">"gpr bp .16 20 0\n"</literal>

<literal type="string">"gpr eip .32 48 0\n"</literal>

<literal type="string">"gpr ip .16 48 0\n"</literal>

<literal type="string">"seg xfs .32 36 0\n"</literal>

<literal type="string">"seg xgs .32 40 0\n"</literal>

<literal type="string">"seg xcs .32 52 0\n"</literal>

<literal type="string">"seg cs .16 52 0\n"</literal>

<literal type="string">"seg xss .32 52 0\n"</literal>

<literal type="string">"flg eflags .32 .448 0 c1p.a.zstido.n.rv\n"</literal>

<literal type="string">"flg flags .16 .448 0\n"</literal>

<literal type="string">"flg cf .1 .448 0\n"</literal>

<literal type="string">"flg pf .1 .450 0\n"</literal>

<literal type="string">"flg af .1 .452 0\n"</literal>

<literal type="string">"flg zf .1 .454 0\n"</literal>

<literal type="string">"flg sf .1 .455 0\n"</literal>

<literal type="string">"flg tf .1 .456 0\n"</literal>

<literal type="string">"flg if .1 .457 0\n"</literal>

<literal type="string">"flg df .1 .458 0\n"</literal>

<literal type="string">"flg of .1 .459 0\n"</literal>

<literal type="string">"flg nt .1 .462 0\n"</literal>

<literal type="string">"flg rf .1 .464 0\n"</literal>

<literal type="string">"flg vm .1 .465 0\n"</literal>

<literal type="string">"drx dr0 .32 0 0\n"</literal>

<literal type="string">"drx dr1 .32 4 0\n"</literal>

<literal type="string">"drx dr2 .32 8 0\n"</literal>

<literal type="string">"drx dr3 .32 12 0\n"</literal>

<literal type="string">"drx dr6 .32 24 0\n"</literal>

<literal type="string">"drx dr7 .32 28 0\n"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">64</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><call><name>r_anal_cc_default</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args_prof</name> <init>= <expr><ternary><condition><expr><name>cc</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="string">"ms"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> 

<expr><literal type="string">"#RAX return value\n"</literal>

<literal type="string">"#RCX argument 1\n"</literal>

<literal type="string">"#RDX argument 2\n"</literal>

<literal type="string">"#R8 argument 3\n"</literal>

<literal type="string">"#R9 argument 4\n"</literal>

<literal type="string">"#R10-R11 syscall/sysret\n"</literal>

<literal type="string">"#R12-R15 GP preserved\n"</literal>

<literal type="string">"#RSI preserved source\n"</literal>

<literal type="string">"#RDI preserved destination\n"</literal>

<literal type="string">"#RSP stack pointer\n"</literal>

<literal type="string">"=PC rip\n"</literal>

<literal type="string">"=SP rsp\n"</literal>

<literal type="string">"=BP rbp\n"</literal>

<literal type="string">"=A0 rcx\n"</literal>

<literal type="string">"=A1 rdx\n"</literal>

<literal type="string">"=A2 r8\n"</literal>

<literal type="string">"=A3 r9\n"</literal>

<literal type="string">"=SN rax\n"</literal></expr>

</then><else>: 

<expr><literal type="string">"=PC rip\n"</literal>

<literal type="string">"=SP rsp\n"</literal>

<literal type="string">"=BP rbp\n"</literal>

<literal type="string">"=A0 rdi\n"</literal>

<literal type="string">"=A1 rsi\n"</literal>

<literal type="string">"=A2 rdx\n"</literal>

<literal type="string">"=A3 rcx\n"</literal>

<literal type="string">"=A4 r8\n"</literal>

<literal type="string">"=A5 r9\n"</literal>

<literal type="string">"=A6 r10\n"</literal>

<literal type="string">"=A7 r11\n"</literal>

<literal type="string">"=SN rax\n"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prof</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>args_prof</name></expr></argument>,

<argument><expr><literal type="string">"gpr rax .64 80 0\n"</literal>

<literal type="string">"gpr eax .32 80 0\n"</literal>

<literal type="string">"gpr ax .16 80 0\n"</literal>

<literal type="string">"gpr al .8 80 0\n"</literal>

<literal type="string">"gpr ah .8 81 0\n"</literal>

<literal type="string">"gpr rbx .64 40 0\n"</literal>

<literal type="string">"gpr ebx .32 40 0\n"</literal>

<literal type="string">"gpr bx .16 40 0\n"</literal>

<literal type="string">"gpr bl .8 40 0\n"</literal>

<literal type="string">"gpr bh .8 41 0\n"</literal>

<literal type="string">"gpr rcx .64 88 0\n"</literal>

<literal type="string">"gpr ecx .32 88 0\n"</literal>

<literal type="string">"gpr cx .16 88 0\n"</literal>

<literal type="string">"gpr cl .8 88 0\n"</literal>

<literal type="string">"gpr ch .8 89 0\n"</literal>

<literal type="string">"gpr rdx .64 96 0\n"</literal>

<literal type="string">"gpr edx .32 96 0\n"</literal>

<literal type="string">"gpr dx .16 96 0\n"</literal>

<literal type="string">"gpr dl .8 96 0\n"</literal>

<literal type="string">"gpr dh .8 97 0\n"</literal>

<literal type="string">"gpr rsi .64 104 0\n"</literal>

<literal type="string">"gpr esi .32 104 0\n"</literal>

<literal type="string">"gpr si .16 104 0\n"</literal>

<literal type="string">"gpr sil .8 104 0\n"</literal>

<literal type="string">"gpr rdi .64 112 0\n"</literal>

<literal type="string">"gpr edi .32 112 0\n"</literal>

<literal type="string">"gpr di .16 112 0\n"</literal>

<literal type="string">"gpr dil .8 112 0\n"</literal>

<literal type="string">"gpr r8 .64 72 0\n"</literal>

<literal type="string">"gpr r8d .32 72 0\n"</literal>

<literal type="string">"gpr r8w .16 72 0\n"</literal>

<literal type="string">"gpr r8b .8 72 0\n"</literal>

<literal type="string">"gpr r9 .64 64 0\n"</literal>

<literal type="string">"gpr r9d .32 64 0\n"</literal>

<literal type="string">"gpr r9w .16 64 0\n"</literal>

<literal type="string">"gpr r9b .8 64 0\n"</literal>

<literal type="string">"gpr r10 .64 56 0\n"</literal>

<literal type="string">"gpr r10d .32 56 0\n"</literal>

<literal type="string">"gpr r10w .16 56 0\n"</literal>

<literal type="string">"gpr r10b .8 56 0\n"</literal>

<literal type="string">"gpr r11 .64 48 0\n"</literal>

<literal type="string">"gpr r11d .32 48 0\n"</literal>

<literal type="string">"gpr r11w .16 48 0\n"</literal>

<literal type="string">"gpr r11b .8 48 0\n"</literal>

<literal type="string">"gpr r12 .64 24 0\n"</literal>

<literal type="string">"gpr r12d .32 24 0\n"</literal>

<literal type="string">"gpr r12w .16 24 0\n"</literal>

<literal type="string">"gpr r12b .8 24 0\n"</literal>

<literal type="string">"gpr r13 .64 16 0\n"</literal>

<literal type="string">"gpr r13d .32 16 0\n"</literal>

<literal type="string">"gpr r13w .16 16 0\n"</literal>

<literal type="string">"gpr r13b .8 16 0\n"</literal>

<literal type="string">"gpr r14 .64 8 0\n"</literal>

<literal type="string">"gpr r14d .32 8 0\n"</literal>

<literal type="string">"gpr r14w .16 8 0\n"</literal>

<literal type="string">"gpr r14b .8 8 0\n"</literal>

<literal type="string">"gpr r15 .64 0 0\n"</literal>

<literal type="string">"gpr r15d .32 0 0\n"</literal>

<literal type="string">"gpr r15w .16 0 0\n"</literal>

<literal type="string">"gpr r15b .8 0 0\n"</literal>

<literal type="string">"gpr rip .64 128 0\n"</literal>

<literal type="string">"gpr rbp .64 32 0\n"</literal>

<literal type="string">"gpr ebp .32 32 0\n"</literal>

<literal type="string">"gpr bp .16 32 0\n"</literal>

<literal type="string">"gpr bpl .8 32 0\n"</literal>

<literal type="string">"seg cs .64 136 0\n"</literal>

<literal type="string">"flg rflags .64 144 0 c1p.a.zstido.n.rv\n"</literal>

<literal type="string">"flg eflags .32 144 0 c1p.a.zstido.n.rv\n"</literal>

<literal type="string">"flg cf .1 144.0 0 carry\n"</literal>

<literal type="string">"flg pf .1 144.2 0 parity\n"</literal>

<literal type="string">"flg af .1 144.4 0 adjust\n"</literal>

<literal type="string">"flg zf .1 144.6 0 zero\n"</literal>

<literal type="string">"flg sf .1 144.7 0 sign\n"</literal>

<literal type="string">"flg tf .1 .1160 0 trap\n"</literal>

<literal type="string">"flg if .1 .1161 0 interrupt\n"</literal>

<literal type="string">"flg df .1 .1162 0 direction\n"</literal>

<literal type="string">"flg of .1 .1163 0 overflow\n"</literal>

<literal type="string">"gpr rsp .64 152 0\n"</literal>

<literal type="string">"gpr esp .32 152 0\n"</literal>

<literal type="string">"gpr sp .16 152 0\n"</literal>

<literal type="string">"gpr spl .8 152 0\n"</literal>

<literal type="string">"seg ss .64 160 0\n"</literal>

<literal type="string">"seg fs_base .64 168 0\n"</literal>

<literal type="string">"seg gs_base .64 176 0\n"</literal>

<literal type="string">"seg ds .64 184 0\n"</literal>

<literal type="string">"seg es .64 192 0\n"</literal>

<literal type="string">"seg fs .64 200 0\n"</literal>

<literal type="string">"seg gs .64 208 0\n"</literal>

<literal type="string">"drx dr0 .64 0 0\n"</literal>

<literal type="string">"drx dr1 .64 8 0\n"</literal>

<literal type="string">"drx dr2 .64 16 0\n"</literal>

<literal type="string">"drx dr3 .64 24 0\n"</literal>

<literal type="string">"drx dr6 .64 48 0\n"</literal>

<literal type="string">"drx dr7 .64 56 0\n"</literal>

<literal type="string">"fpu cwd .16 0 0\n"</literal>

<literal type="string">"fpu swd .16 2 0\n"</literal>

<literal type="string">"fpu ftw .16 4 0\n"</literal>

<literal type="string">"fpu fop .16 6 0\n"</literal>

<literal type="string">"fpu frip .64 8 0\n"</literal>

<literal type="string">"fpu frdp .64 16 0\n"</literal>

<literal type="string">"fpu mxcsr .32 24 0\n"</literal>

<literal type="string">"fpu mxcr_mask .32 28 0\n"</literal>

<literal type="string">"fpu st0 .64 32 0\n"</literal>

<literal type="string">"fpu st1 .64 48 0\n"</literal>

<literal type="string">"fpu st2 .64 64 0\n"</literal>

<literal type="string">"fpu st3 .64 80 0\n"</literal>

<literal type="string">"fpu st4 .64 96 0\n"</literal>

<literal type="string">"fpu st5 .64 112 0\n"</literal>

<literal type="string">"fpu st6 .64 128 0\n"</literal>

<literal type="string">"fpu st7 .64 144 0\n"</literal>

<literal type="string">"xmm@fpu xmm0 .128 160 4\n"</literal>

<literal type="string">"fpu xmm0h .64 160 0\n"</literal>

<literal type="string">"fpu xmm0l .64 168 0\n"</literal>

<literal type="string">"xmm@fpu xmm1 .128 176 4\n"</literal>

<literal type="string">"fpu xmm1h .64 176 0\n"</literal>

<literal type="string">"fpu xmm1l .64 184 0\n"</literal>

<literal type="string">"xmm@fpu xmm2 .128 192 4\n"</literal>

<literal type="string">"fpu xmm2h .64 192 0\n"</literal>

<literal type="string">"fpu xmm2l .64 200 0\n"</literal>

<literal type="string">"xmm@fpu xmm3 .128 208 4\n"</literal>

<literal type="string">"fpu xmm3h .64 208 0\n"</literal>

<literal type="string">"fpu xmm3l .64 216 0\n"</literal>

<literal type="string">"xmm@fpu xmm4 .128 224 4\n"</literal>

<literal type="string">"fpu xmm4h .64 224 0\n"</literal>

<literal type="string">"fpu xmm4l .64 232 0\n"</literal>

<literal type="string">"xmm@fpu xmm5 .128 240 4\n"</literal>

<literal type="string">"fpu xmm5h .64 240 0\n"</literal>

<literal type="string">"fpu xmm5l .64 248 0\n"</literal>

<literal type="string">"xmm@fpu xmm6 .128 256 4\n"</literal>

<literal type="string">"fpu xmm6h .64 256 0\n"</literal>

<literal type="string">"fpu xmm6l .64 264 0\n"</literal>

<literal type="string">"xmm@fpu xmm7 .128 272 4\n"</literal>

<literal type="string">"fpu xmm7h .64 272 0\n"</literal>

<literal type="string">"fpu xmm7l .64 280 0\n"</literal>

<literal type="string">"fpu x64 .64 288 0\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>prof</name></expr>;</return>

</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

default: p= 

"=PC rip\n"

"=SP rsp\n"

"=BP rbp\n"

"=A0 rax\n"

"=A1 rbx\n"

"=A2 rcx\n"

"=A3 rdx\n"

"#no profile defined for x86-64\n"

"gpr r15 .64 0 0\n"

"gpr r14 .64 8 0\n"

"gpr r13 .64 16 0\n"

"gpr r12 .64 24 0\n"

"gpr rbp .64 32 0\n"

"gpr ebp .32 32 0\n"

"gpr rbx .64 40 0\n"

"gpr ebx .32 40 0\n"

"gpr bx .16 40 0\n"

"gpr bh .8 41 0\n"

"gpr bl .8 40 0\n"

"gpr r11 .64 48 0\n"

"gpr r10 .64 56 0\n"

"gpr r9 .64 64 0\n"

"gpr r8 .64 72 0\n"

"gpr rax .64 80 0\n"

"gpr eax .32 80 0\n"

"gpr rcx .64 88 0\n"

"gpr ecx .32 88 0\n"

"gpr rdx .64 96 0\n"

"gpr edx .32 96 0\n"

"gpr rsi .64 104 0\n"

"gpr esi .32 104 0\n"

"gpr rdi .64 112 0\n"

"gpr edi .32 112 0\n"

"gpr oeax .64 120 0\n"

"gpr rip .64 128 0\n"

"seg cs .64 136 0\n"

"gpr eflags .32 144 0 c1p.a.zstido.n.rv\n"

"flg cf .1 .1152 0\n"

"flg pf .1 .1153 0\n"

"flg af .1 .1154 0\n"

"flg zf .1 .1155 0\n"

"flg sf .1 .1156 0\n"

"flg tf .1 .1157 0\n"

"flg if .1 .1158 0\n"

"flg df .1 .1159 0\n"

"flg of .1 .1160 0\n"

"flg rf .1 .1161 0\n"

"gpr rsp .64 152 0\n"

"seg ss .64 160 0\n"

"seg fs_base .64 168 0\n"

"seg gs_base .64 176 0\n"

"seg ds .64 184 0\n"

"seg es .64 192 0\n"

"seg fs .64 200 0\n"

"seg gs .64 208 0\n"

"drx dr0 .32 0 0\n"

"drx dr1 .32 4 0\n"

"drx dr2 .32 8 0\n"

"drx dr3 .32 12 0\n"

"drx dr6 .32 24 0\n"

"drx dr7 .32 28 0\n";

break;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name><operator>)</operator></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>archinfo</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_ARCHINFO_ALIGN</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>R_ANAL_ARCHINFO_MAX_OP_SIZE</name></expr>:</case>

<return>return <expr><literal type="number">16</literal></expr>;</return>

<case>case <expr><name>R_ANAL_ARCHINFO_MIN_OP_SIZE</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>anal_preludes</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KW</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>ds</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>ms</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_list_append (l, r_search_keyword_new((const ut8*)d,ds,(const ut8*)m, ms, NULL))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_search_keyword_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<expr_stmt><expr><call><name>KW</name> <argument_list>(<argument><expr><literal type="string">"\x8b\xff\x55\x8b\xec"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>KW</name> <argument_list>(<argument><expr><literal type="string">"\x55\x89\xe5"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>KW</name> <argument_list>(<argument><expr><literal type="string">"\x55\x8b\xec"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">64</literal></expr>:</case>

<expr_stmt><expr><call><name>KW</name> <argument_list>(<argument><expr><literal type="string">"\x55\x48\x89\xe5"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>KW</name> <argument_list>(<argument><expr><literal type="string">"\x55\x48\x8b\xec"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_x86_cs</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"x86"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Capstone X86 analysis"</literal></expr>,

<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"BSD"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"x86"</literal></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">16</literal><operator>|</operator><literal type="number">32</literal><operator>|</operator><literal type="number">64</literal></expr>,

<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>analop</name></expr>,

<expr><operator>.</operator><name>preludes</name> <operator>=</operator> <name>anal_preludes</name></expr>,

<expr><operator>.</operator><name>archinfo</name> <operator>=</operator> <name>archinfo</name></expr>,

<expr><operator>.</operator><name>get_reg_profile</name> <operator>=</operator> <operator>&amp;</operator><name>get_reg_profile</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,

<expr><operator>.</operator><name>fini</name> <operator>=</operator> <name>fini</name></expr>,

<expr><operator>.</operator><name>esil_init</name> <operator>=</operator> <name>esil_x86_cs_init</name></expr>,

<expr><operator>.</operator><name>esil_fini</name> <operator>=</operator> <name>esil_x86_cs_fini</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_x86_cs</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
