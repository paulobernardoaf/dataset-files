<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\p\anal_riscv.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../asm/arch/riscv/riscv-opc.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../asm/arch/riscv/riscv.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_SIZE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(a) / sizeof(*a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCVARGSMAX</name></cpp:macro> <cpp:value>(8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCVARGSIZE</name></cpp:macro> <cpp:value>(64)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCVARGN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;arg[(x)-&gt;num++])</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>init</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>riscv_gpr_names</name> <init>= <expr><name>riscv_gpr_names_abi</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>riscv_fpr_names</name> <init>= <expr><name>riscv_fpr_names_abi</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>riscv_args</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>arg</name><index>[<expr><name>RISCVARGSMAX</name></expr>]</index><index>[<expr><name>RISCVARGSIZE</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>riscv_args_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_any</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_is_any(o-&gt;name, __VA_ARGS__, NULL)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_is_any</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>va_arg</name> <argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>arg_p2</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><ternary><condition><expr><name>val</name> <operator>&gt;=</operator> <name>size</name> <operator>||</operator> <name><name>array</name><index>[<expr><name>val</name></expr>]</index></name></expr> ?</condition><then> <expr><name><name>array</name><index>[<expr><name>val</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>riscv_opcode</name></name> <modifier>*</modifier></type><name>get_opcode</name><parameter_list>(<parameter><decl><type><name>insn_t</name></type> <name>word</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>riscv_opcode</name></name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>riscv_opcode</name></name> <modifier>*</modifier></type><name><name>riscv_hash</name><index>[<expr><name>OP_MASK_OP</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_HASH_IDX</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) &amp; (riscv_insn_length (i) == 2 ? 3 : OP_MASK_OP))</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>OP_MASK_OP</name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>riscv_hash</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>op</name><operator>=</operator><name>riscv_opcodes</name></expr>;</init> <condition><expr><name>op</name> <operator>&lt;=</operator> <operator>&amp;</operator><name><name>riscv_opcodes</name><index>[<expr><name>NUMOPCODES</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>op</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>riscv_hash</name><index>[<expr><call><name>OP_HASH_IDX</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>match</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>riscv_hash</name><index>[<expr><call><name>OP_HASH_IDX</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>match</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator>struct <name>riscv_opcode</name> <operator>*</operator><operator>)</operator><name><name>riscv_hash</name><index>[<expr><call><name>OP_HASH_IDX</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_insn_args</name><parameter_list>(<parameter><decl><type><name>riscv_args_t</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>insn_t</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rs1</name> <init>= <expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <name>OP_SH_RS1</name><operator>)</operator> <operator>&amp;</operator> <name>OP_MASK_RS1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rd</name> <init>= <expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <name>OP_SH_RD</name><operator>)</operator> <operator>&amp;</operator> <name>OP_MASK_RD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>target</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>d</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>num</name></name> <operator>&lt;</operator> <name>RISCVARGSMAX</name></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>d</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>

<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>d</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>RS2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>CUSTOM_IMM</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case> 

<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>d</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> 

<case>case <expr><literal type="char">'w'</literal></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>riscv_gpr_names</name><index>[<expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>CRS1S</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> 

<case>case <expr><literal type="char">'x'</literal></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>riscv_gpr_names</name><index>[<expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>CRS2S</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'U'</literal></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_gpr_names</name><index>[<expr><name>rd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_gpr_names</name><index>[<expr><name>X_SP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>riscv_gpr_names</name><index>[<expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>CRS2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_SIMM3</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_LW_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_LD_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_LWSP_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_LDSP_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'K'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_ADDI4SPN_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_ADDI16SP_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_SWSP_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'N'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_SDSP_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>EXTRACT_RVC_B_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>EXTRACT_RVC_J_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"0x%x"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>EXTRACT_RVC_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>RISCV_BIGIMM_REACH</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>EXTRACT_RVC_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>EXTRACT_RVC_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>riscv_fpr_names</name><index>[<expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>CRS2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>riscv_fpr_names</name><index>[<expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>CRS2S</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">','</literal></expr>:</case>

<case>case <expr><literal type="char">'('</literal></expr>:</case>

<case>case <expr><literal type="char">')'</literal></expr>:</case>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<case>case <expr><literal type="char">']'</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_gpr_names</name><index>[<expr><name>rs1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>riscv_gpr_names</name><index>[<expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>RS2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"0x%x"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>EXTRACT_UTYPE_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>RISCV_IMM_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<expr_stmt><expr><call><name>arg_p2</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>RM</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>riscv_rm</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name> <argument_list>(<argument><expr><name>riscv_rm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>

<expr_stmt><expr><call><name>arg_p2</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>PRED</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>riscv_pred_succ</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name> <argument_list>(<argument><expr><name>riscv_pred_succ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case>

<expr_stmt><expr><call><name>arg_p2</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>SUCC</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>riscv_pred_succ</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name> <argument_list>(<argument><expr><name>riscv_pred_succ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>EXTRACT_ITYPE_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>EXTRACT_STYPE_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>EXTRACT_UJTYPE_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>EXTRACT_SBTYPE_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_gpr_names</name><index>[<expr><name>rd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_gpr_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>SHAMT</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>SHAMTW</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_fpr_names</name><index>[<expr><name>rs1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_fpr_names</name><index>[<expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>RS2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_fpr_names</name><index>[<expr><name>rd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_fpr_names</name><index>[<expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>RS3</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>csr_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>csr</name> <init>= <expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>CSR</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>csr</name></expr>)</condition>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_CSR</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case num: csr_name = #name; break;</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../asm/arch/riscv/riscv-opc.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DECLARE_CSR</name></cpp:undef>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>csr_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>csr_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><name>csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><call><name>RISCVARGN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RISCVARGSIZE</name></expr></argument> , <argument><expr><literal type="string">"#internal error, undefined modifier (%c)"</literal></expr></argument>,

<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>arg_n</name><parameter_list>(<parameter><decl><type><name>riscv_args_t</name><modifier>*</modifier></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name><name>args</name><operator>-&gt;</operator><name>num</name></name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>arg</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"zero"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="string">"0"</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>args</name><operator>-&gt;</operator><name>arg</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>riscv_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>no_alias</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>riscv_args_t</name></type> <name>args</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>word</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xlen</name> <init>= <expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>word</name> <operator>=</operator> <call><name>r_read_ble64</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>word</name> <operator>=</operator> <call><name>r_read_ble16</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>riscv_opcode</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>get_opcode</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>word</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_DISASM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>o</name> <operator>&lt;=</operator> <operator>&amp;</operator><name><name>riscv_opcodes</name><index>[<expr><name>NUMOPCODES</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>no_alias</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>pinfo</name></name> <operator>&amp;</operator> <name>INSN_ALIAS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>subset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>subset</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>xlen</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>match_func</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>match_func</name></name><operator>)</operator><operator>(</operator><name>o</name><operator>,</operator> <name>word</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&gt;</operator> <operator>&amp;</operator><name><name>riscv_opcodes</name><index>[<expr><name>NUMOPCODES</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>args</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(arg_n (&amp;args, (x)))</cpp:value></cpp:define>

<expr_stmt><expr><call><name>get_insn_args</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"addi16sp"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,sp,+,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>riscv_gpr_names</name><index>[<expr><name>X_SP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"addw"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0xffffffff,%s,&amp;,"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xffffffff,%s,&amp;,"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"+,%s,=,"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"31,%s,&gt;&gt;,?{,0xffffffff00000000,%s,|=,}"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>riscv_gpr_names</name><index>[<expr><name>X_SP</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>riscv_gpr_names</name><index>[<expr><name>X_SP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>signed</name><operator>)</operator><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"subw"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0xffffffff,%s,&amp;,"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xffffffff,%s,&amp;,"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"-,%s,=,"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"31,%s,&gt;&gt;,?{,0xffffffff00000000,%s,|=,}"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sub"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,-,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>riscv_gpr_names</name><index>[<expr><name>X_SP</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>riscv_gpr_names</name><index>[<expr><name>X_SP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackop</name></name> <operator>=</operator> <name>R_ANAL_STACK_INC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stackptr</name></name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"mulw"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"0xffffffff,%s,&amp;,"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xffffffff,%s,&amp;,"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"*,%s,=,"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"31,%s,&gt;&gt;,?{,0xffffffff00000000,%s,|=,}"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"mul"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,*,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"div"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,/,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"rem"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%%,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"xor"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,^,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"or"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,|,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"and"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&amp;,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"auipc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,pc,+,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sll"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&lt;&lt;,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"srl"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&gt;&gt;,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sra"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&gt;&gt;,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"mv"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"li"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"lui"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s0000,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"csrrw"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,0,+,%s,%s,=,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"csrrs"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,0,+,%s,%s,|=,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"csrrc"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,0,+,%s,1,+,0,-,%s,&amp;=,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sd"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sdsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%s,+,=[8]"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sw"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"swsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%s,+,=[4]"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sh"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"shsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%s,+,=[2]"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sb"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sbsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%s,+,=[1]"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"fsq"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"fsqsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,[16],%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"fsd"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"fsdsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%s,+,=[8]"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"fsw"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"fswsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%s,+,=[4]"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"fsh"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"fshsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%s,+,=[2]"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"fsb"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"fsbsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,%s,+,=[1]"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ld"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ldsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,[8],%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"lw"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"lwu"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"lwsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,[4],%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"lh"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"lhu"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"lhsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,[2],%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"lb"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"lbu"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"lbsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,[1],%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"flq"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"flqsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,[16],%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"fld"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"fldsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,[8],%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"flw"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"flwsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,[4],%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"flh"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"flhsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,[2],%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"flb"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"flbsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,+,[1],%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"jalr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%d,pc,+,%s,=,%s,%s,+,pc,="</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"jal"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%d,pc,+,%s,=,%s,pc,+,pc,="</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"jr"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"j"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,pc,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ecall"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ebreak"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"TRAP"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"beq"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,==,?{,%s,pc,=,},"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"bne"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,!=,?{,%s,pc,=,},"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ble"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"bleu"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&lt;=,?{,%s,pc,=,},"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"blt"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"bltu"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&lt;,?{,%s,pc,=,},"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"bge"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"bgeu"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&gt;=,?{,%s,pc,=,},"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"bgt"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"bgtu"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&gt;,?{,%s,pc,=,},"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"beqz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,0,==,?{,%s,pc,=,},"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"bnez"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,0,!=,?{,%s,pc,=,},"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"blez"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,0,&lt;=,?{,%s,pc,=,},"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"bltz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,0,&lt;,?{,%s,pc,=,},"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"bgez"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,0,&gt;=,?{,%s,pc,=,},"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"bgtz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,0,&gt;,?{,%s,pc,=,},"</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"seq"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,==,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sne"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,!=,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sle"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&lt;=,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"slt"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&lt;,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sge"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&gt;=,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sgt"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>esilprintf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"%s,%s,&gt;,%s,="</literal></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARG</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ARG</name></cpp:undef>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_any</name> <argument_list>(<argument><expr><literal type="string">"jal"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rd</name> <init>= <expr><operator>(</operator><name>word</name> <operator>&gt;&gt;</operator> <name>OP_SH_RD</name><operator>)</operator> <operator>&amp;</operator> <name>OP_MASK_RD</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>rd</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>R_ANAL_OP_TYPE_RET</name></expr></then><else>: <expr><name>R_ANAL_OP_TYPE_CALL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>EXTRACT_UJTYPE_IMM</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_any</name> <argument_list>(<argument><expr><literal type="string">"jr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_any</name> <argument_list>(<argument><expr><literal type="string">"j"</literal></expr></argument>, <argument><expr><literal type="string">"jump"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_any</name> <argument_list>(<argument><expr><literal type="string">"jalr"</literal></expr></argument>, <argument><expr><literal type="string">"ret"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCALL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_any</name> <argument_list>(<argument><expr><literal type="string">"ret"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_any</name> <argument_list>(<argument><expr><literal type="string">"beqz"</literal></expr></argument>, <argument><expr><literal type="string">"beq"</literal></expr></argument>, <argument><expr><literal type="string">"blez"</literal></expr></argument>, <argument><expr><literal type="string">"bgez"</literal></expr></argument>, <argument><expr><literal type="string">"ble"</literal></expr></argument>,

<argument><expr><literal type="string">"bleu"</literal></expr></argument>, <argument><expr><literal type="string">"bge"</literal></expr></argument>, <argument><expr><literal type="string">"bgeu"</literal></expr></argument>, <argument><expr><literal type="string">"bltz"</literal></expr></argument>, <argument><expr><literal type="string">"bgtz"</literal></expr></argument>, <argument><expr><literal type="string">"blt"</literal></expr></argument>, <argument><expr><literal type="string">"bltu"</literal></expr></argument>,

<argument><expr><literal type="string">"bgt"</literal></expr></argument>, <argument><expr><literal type="string">"bgtu"</literal></expr></argument>, <argument><expr><literal type="string">"bnez"</literal></expr></argument>, <argument><expr><literal type="string">"bne"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>EXTRACT_SBTYPE_IMM</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_any</name> <argument_list>(<argument><expr><literal type="string">"addi"</literal></expr></argument>, <argument><expr><literal type="string">"addw"</literal></expr></argument>, <argument><expr><literal type="string">"addiw"</literal></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><literal type="string">"auipc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_any</name> <argument_list>(<argument><expr><literal type="string">"subi"</literal></expr></argument>, <argument><expr><literal type="string">"subw"</literal></expr></argument>, <argument><expr><literal type="string">"sub"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_any</name> <argument_list>(<argument><expr><literal type="string">"xori"</literal></expr></argument>, <argument><expr><literal type="string">"xor"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_any</name> <argument_list>(<argument><expr><literal type="string">"andi"</literal></expr></argument>, <argument><expr><literal type="string">"and"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_any</name> <argument_list>(<argument><expr><literal type="string">"ori"</literal></expr></argument>, <argument><expr><literal type="string">"or"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_any</name> <argument_list>(<argument><expr><literal type="string">"not"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOT</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_any</name> <argument_list>(<argument><expr><literal type="string">"mul"</literal></expr></argument>, <argument><expr><literal type="string">"mulh"</literal></expr></argument>, <argument><expr><literal type="string">"mulhu"</literal></expr></argument>, <argument><expr><literal type="string">"mulhsu"</literal></expr></argument>, <argument><expr><literal type="string">"mulw"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_any</name> <argument_list>(<argument><expr><literal type="string">"div"</literal></expr></argument>, <argument><expr><literal type="string">"divu"</literal></expr></argument>, <argument><expr><literal type="string">"divw"</literal></expr></argument>, <argument><expr><literal type="string">"divuw"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_DIV</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_any</name> <argument_list>(<argument><expr><literal type="string">"sd"</literal></expr></argument>, <argument><expr><literal type="string">"sb"</literal></expr></argument>, <argument><expr><literal type="string">"sh"</literal></expr></argument>, <argument><expr><literal type="string">"sw"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_any</name> <argument_list>(<argument><expr><literal type="string">"ld"</literal></expr></argument>, <argument><expr><literal type="string">"lw"</literal></expr></argument>, <argument><expr><literal type="string">"lwu"</literal></expr></argument>, <argument><expr><literal type="string">"lui"</literal></expr></argument>, <argument><expr><literal type="string">"li"</literal></expr></argument>,

<argument><expr><literal type="string">"lb"</literal></expr></argument>, <argument><expr><literal type="string">"lbu"</literal></expr></argument>, <argument><expr><literal type="string">"lh"</literal></expr></argument>, <argument><expr><literal type="string">"lhu"</literal></expr></argument>, <argument><expr><literal type="string">"la"</literal></expr></argument>, <argument><expr><literal type="string">"lla"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator>

<literal type="string">"=PC pc\n"</literal>

<literal type="string">"=SP sp\n"</literal> 

<literal type="string">"=LR ra\n"</literal> 

<literal type="string">"=BP s0\n"</literal> 

<literal type="string">"gpr pc .32 0 0\n"</literal>

<literal type="string">"gpr ra .32 4 0\n"</literal> 

<literal type="string">"gpr sp .32 8 0\n"</literal> 

<literal type="string">"gpr gp .32 12 0\n"</literal> 

<literal type="string">"gpr tp .32 16 0\n"</literal> 

<literal type="string">"gpr t0 .32 20 0\n"</literal> 

<literal type="string">"gpr t1 .32 24 0\n"</literal> 

<literal type="string">"gpr t2 .32 28 0\n"</literal> 

<literal type="string">"gpr s0 .32 32 0\n"</literal> 

<literal type="string">"gpr s1 .32 36 0\n"</literal> 

<literal type="string">"gpr a0 .32 40 0\n"</literal> 

<literal type="string">"gpr a1 .32 44 0\n"</literal> 

<literal type="string">"gpr a2 .32 48 0\n"</literal> 

<literal type="string">"gpr a3 .32 52 0\n"</literal> 

<literal type="string">"gpr a4 .32 56 0\n"</literal> 

<literal type="string">"gpr a5 .32 60 0\n"</literal> 

<literal type="string">"gpr a6 .32 64 0\n"</literal> 

<literal type="string">"gpr a7 .32 68 0\n"</literal> 

<literal type="string">"gpr s2 .32 72 0\n"</literal> 

<literal type="string">"gpr s3 .32 76 0\n"</literal> 

<literal type="string">"gpr s4 .32 80 0\n"</literal> 

<literal type="string">"gpr s5 .32 84 0\n"</literal> 

<literal type="string">"gpr s6 .32 88 0\n"</literal> 

<literal type="string">"gpr s7 .32 92 0\n"</literal> 

<literal type="string">"gpr s8 .32 96 0\n"</literal> 

<literal type="string">"gpr s9 .32 100 0\n"</literal> 

<literal type="string">"gpr s10 .32 104 0\n"</literal> 

<literal type="string">"gpr s11 .32 108 0\n"</literal> 

<literal type="string">"gpr t3 .32 112 0\n"</literal> 

<literal type="string">"gpr t4 .32 116 0\n"</literal> 

<literal type="string">"gpr t5 .32 120 0\n"</literal> 

<literal type="string">"gpr t6 .32 124 0\n"</literal> 

<literal type="string">"gpr ft0 .64 128 0\n"</literal> 

<literal type="string">"gpr ft1 .64 136 0\n"</literal> 

<literal type="string">"gpr ft2 .64 144 0\n"</literal> 

<literal type="string">"gpr ft3 .64 152 0\n"</literal> 

<literal type="string">"gpr ft4 .64 160 0\n"</literal> 

<literal type="string">"gpr ft5 .64 168 0\n"</literal> 

<literal type="string">"gpr ft6 .64 176 0\n"</literal> 

<literal type="string">"gpr ft7 .64 184 0\n"</literal> 

<literal type="string">"gpr fs0 .64 192 0\n"</literal> 

<literal type="string">"gpr fs1 .64 200 0\n"</literal> 

<literal type="string">"gpr fa0 .64 208 0\n"</literal> 

<literal type="string">"gpr fa1 .64 216 0\n"</literal> 

<literal type="string">"gpr fa2 .64 224 0\n"</literal> 

<literal type="string">"gpr fa3 .64 232 0\n"</literal> 

<literal type="string">"gpr fa4 .64 240 0\n"</literal> 

<literal type="string">"gpr fa5 .64 248 0\n"</literal> 

<literal type="string">"gpr fa6 .64 256 0\n"</literal> 

<literal type="string">"gpr fa7 .64 264 0\n"</literal> 

<literal type="string">"gpr fs2 .64 272 0\n"</literal> 

<literal type="string">"gpr fs3 .64 280 0\n"</literal> 

<literal type="string">"gpr fs4 .64 288 0\n"</literal> 

<literal type="string">"gpr fs5 .64 296 0\n"</literal> 

<literal type="string">"gpr fs6 .64 304 0\n"</literal> 

<literal type="string">"gpr fs7 .64 312 0\n"</literal> 

<literal type="string">"gpr fs8 .64 320 0\n"</literal> 

<literal type="string">"gpr fs9 .64 328 0\n"</literal> 

<literal type="string">"gpr fs10 .64 336 0\n"</literal> 

<literal type="string">"gpr fs11 .64 344 0\n"</literal> 

<literal type="string">"gpr ft8 .64 352 0\n"</literal> 

<literal type="string">"gpr ft9 .64 360 0\n"</literal> 

<literal type="string">"gpr ft10 .64 368 0\n"</literal> 

<literal type="string">"gpr ft11 .64 376 0\n"</literal> 

<literal type="string">"gpr fcsr .32 384 0\n"</literal>

<literal type="string">"flg nx .1 3072 0\n"</literal>

<literal type="string">"flg uf .1 3073 0\n"</literal>

<literal type="string">"flg of .1 3074 0\n"</literal>

<literal type="string">"flg dz .1 3075 0\n"</literal>

<literal type="string">"flg nv .1 3076 0\n"</literal>

<literal type="string">"flg frm .3 3077 0\n"</literal></expr>

;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">64</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator>

<literal type="string">"=PC pc\n"</literal>

<literal type="string">"=SP sp\n"</literal> 

<literal type="string">"=LR ra\n"</literal> 

<literal type="string">"=BP s0\n"</literal> 

<literal type="string">"gpr pc .64 0 0\n"</literal>

<literal type="string">"gpr ra .64 8 0\n"</literal> 

<literal type="string">"gpr sp .64 16 0\n"</literal> 

<literal type="string">"gpr gp .64 24 0\n"</literal> 

<literal type="string">"gpr tp .64 32 0\n"</literal> 

<literal type="string">"gpr t0 .64 40 0\n"</literal> 

<literal type="string">"gpr t1 .64 48 0\n"</literal> 

<literal type="string">"gpr t2 .64 56 0\n"</literal> 

<literal type="string">"gpr s0 .64 64 0\n"</literal> 

<literal type="string">"gpr s1 .64 72 0\n"</literal> 

<literal type="string">"gpr a0 .64 80 0\n"</literal> 

<literal type="string">"gpr a1 .64 88 0\n"</literal> 

<literal type="string">"gpr a2 .64 96 0\n"</literal> 

<literal type="string">"gpr a3 .64 104 0\n"</literal> 

<literal type="string">"gpr a4 .64 112 0\n"</literal> 

<literal type="string">"gpr a5 .64 120 0\n"</literal> 

<literal type="string">"gpr a6 .64 128 0\n"</literal> 

<literal type="string">"gpr a7 .64 136 0\n"</literal> 

<literal type="string">"gpr s2 .64 144 0\n"</literal> 

<literal type="string">"gpr s3 .64 152 0\n"</literal> 

<literal type="string">"gpr s4 .64 160 0\n"</literal> 

<literal type="string">"gpr s5 .64 168 0\n"</literal> 

<literal type="string">"gpr s6 .64 176 0\n"</literal> 

<literal type="string">"gpr s7 .64 184 0\n"</literal> 

<literal type="string">"gpr s8 .64 192 0\n"</literal> 

<literal type="string">"gpr s9 .64 200 0\n"</literal> 

<literal type="string">"gpr s10 .64 208 0\n"</literal> 

<literal type="string">"gpr s11 .64 216 0\n"</literal> 

<literal type="string">"gpr t3 .64 224 0\n"</literal> 

<literal type="string">"gpr t4 .64 232 0\n"</literal> 

<literal type="string">"gpr t5 .64 240 0\n"</literal> 

<literal type="string">"gpr t6 .64 248 0\n"</literal> 

<literal type="string">"gpr ft0 .64 256 0\n"</literal> 

<literal type="string">"gpr ft1 .64 264 0\n"</literal> 

<literal type="string">"gpr ft2 .64 272 0\n"</literal> 

<literal type="string">"gpr ft3 .64 280 0\n"</literal> 

<literal type="string">"gpr ft4 .64 288 0\n"</literal> 

<literal type="string">"gpr ft5 .64 296 0\n"</literal> 

<literal type="string">"gpr ft6 .64 304 0\n"</literal> 

<literal type="string">"gpr ft7 .64 312 0\n"</literal> 

<literal type="string">"gpr fs0 .64 320 0\n"</literal> 

<literal type="string">"gpr fs1 .64 328 0\n"</literal> 

<literal type="string">"gpr fa0 .64 336 0\n"</literal> 

<literal type="string">"gpr fa1 .64 344 0\n"</literal> 

<literal type="string">"gpr fa2 .64 352 0\n"</literal> 

<literal type="string">"gpr fa3 .64 360 0\n"</literal> 

<literal type="string">"gpr fa4 .64 368 0\n"</literal> 

<literal type="string">"gpr fa5 .64 376 0\n"</literal> 

<literal type="string">"gpr fa6 .64 384 0\n"</literal> 

<literal type="string">"gpr fa7 .64 392 0\n"</literal> 

<literal type="string">"gpr fs2 .64 400 0\n"</literal> 

<literal type="string">"gpr fs3 .64 408 0\n"</literal> 

<literal type="string">"gpr fs4 .64 416 0\n"</literal> 

<literal type="string">"gpr fs5 .64 424 0\n"</literal> 

<literal type="string">"gpr fs6 .64 432 0\n"</literal> 

<literal type="string">"gpr fs7 .64 440 0\n"</literal> 

<literal type="string">"gpr fs8 .64 448 0\n"</literal> 

<literal type="string">"gpr fs9 .64 456 0\n"</literal> 

<literal type="string">"gpr fs10 .64 464 0\n"</literal> 

<literal type="string">"gpr fs11 .64 472 0\n"</literal> 

<literal type="string">"gpr ft8 .64 480 0\n"</literal> 

<literal type="string">"gpr ft9 .64 488 0\n"</literal> 

<literal type="string">"gpr ft10 .64 496 0\n"</literal> 

<literal type="string">"gpr ft11 .64 504 0\n"</literal> 

<literal type="string">"gpr fcsr .32 512 0\n"</literal>

<literal type="string">"flg nx .1 4096 0\n"</literal>

<literal type="string">"flg uf .1 4097 0\n"</literal>

<literal type="string">"flg of .1 4098 0\n"</literal>

<literal type="string">"flg dz .1 4099 0\n"</literal>

<literal type="string">"flg nv .1 4100 0\n"</literal>

<literal type="string">"flg frm .3 4101 0\n"</literal></expr>

;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name><operator>)</operator></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_riscv</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"riscv"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"RISC-V analysis plugin"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"GPL"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"riscv"</literal></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal><operator>|</operator><literal type="number">64</literal></expr>,

<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>riscv_op</name></expr>,

<expr><operator>.</operator><name>get_reg_profile</name> <operator>=</operator> <operator>&amp;</operator><name>get_reg_profile</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_riscv</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
