<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\p\anal_tms320c64x.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;capstone/capstone.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAPSTONE_TMS320C64X_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPSTONE_HAS_TMS320C64X</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPSTONE_HAS_TMS320C64X</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:warning>#<cpp:directive>warning</cpp:directive> Cannot find capstone-tms320c64x support</cpp:warning>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CS_API_MAJOR</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CAPSONT_HAS_TMS320C64X</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPSTONE_HAS_TMS320C64X</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CAPSTONE_HAS_TMS320C64X</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSOP</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>insn-&gt;detail-&gt;tms320c64x.operands[n]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSCC</name></cpp:macro> <cpp:value>insn-&gt;detail-&gt;tms320c64x.cc</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opex</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>csh</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>cs_tms320c64x</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>&amp;</operator><name><name>insn</name><operator>-&gt;</operator><name>detail</name><operator>-&gt;</operator><name>tms320c64x</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"operands\":["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>op_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>cs_tms320c64x_op</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TMS320C64X_OP_REG</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"reg\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320C64X_OP_IMM</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"imm\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"value\":%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320C64X_OP_MEM</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"mem\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>base</name></name> <operator>!=</operator> <name>SPARC_REG_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"base\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>cs_reg_name</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\"disp\":%"</literal><name>PFMT64d</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>disp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"type\":\"invalid\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"]}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tms320c64x_analop</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>csh</name></type> <name>handle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>omode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cs_insn</name> <modifier>*</modifier></type><name>insn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>omode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cs_close</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>omode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cs_open</name> <argument_list>(<argument><expr><name>CS_ARCH_TMS320C64X</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>CS_ERR_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cs_option</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CS_OPT_DETAIL</name></expr></argument>, <argument><expr><name>CS_OPT_ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>cs_disasm</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>R_ANAL_OP_MASK_OPEX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>opex</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>opex</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>insn</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TMS320C64X_INS_INVALID</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320C64X_INS_AND</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_ANDN</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320C64X_INS_NOT</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320C64X_INS_NEG</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320C64X_INS_SWAP2</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_SWAP4</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320C64X_INS_BNOP</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_NOP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320C64X_INS_CMPEQ</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_CMPEQ2</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_CMPEQ4</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_CMPGT</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_CMPGT2</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_CMPGTU4</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_CMPLT</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_CMPLTU</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320C64X_INS_B</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>INSOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>imm</name> <operator>+</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF00000000</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320C64X_INS_LDB</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_LDBU</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_LDDW</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_LDH</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_LDHU</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_LDNDW</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_LDNW</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_LDW</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_LMBD</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320C64X_INS_STB</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_STDW</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_STH</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_STNDW</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_STNW</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_STW</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320C64X_INS_OR</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320C64X_INS_SSUB</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_SUB</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_SUB2</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_SUB4</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_SUBAB</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_SUBABS4</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_SUBAH</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_SUBAW</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_SUBC</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_SUBU</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320C64X_INS_ADD</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_ADD2</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_ADD4</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_ADDAB</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_ADDAD</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_ADDAH</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_ADDAW</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_ADDK</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_ADDKPC</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_ADDU</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_SADD</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_SADD2</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_SADDU4</name></expr>:</case>

<case>case <expr><name>TMS320C64X_INS_SADDUS2</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>cs_free</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
