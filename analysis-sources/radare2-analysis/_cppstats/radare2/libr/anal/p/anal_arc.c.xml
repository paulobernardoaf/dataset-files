<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\p\anal_arc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_REG_ILINK1</name></cpp:macro> <cpp:value>0x1d</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_REG_ILINK2</name></cpp:macro> <cpp:value>0x1e</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_REG_BLINK</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_REG_LIMM</name></cpp:macro> <cpp:value>0x3e</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARC_REG_PCL</name></cpp:macro> <cpp:value>0x3f</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>arc_fields_t</name> <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut8</name></type> <name>subopcode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut8</name></type> <name>format</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut8</name></type> <name>format2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>a</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut16</name></type> <name>b</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut16</name></type> <name>c</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut8</name></type> <name>mode_aa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>mode_zz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>mode_m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>mode_n</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>st64</name></type> <name>imm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>st64</name></type> <name>limm</name></decl>;</decl_stmt> 

}</block></struct></type> <name>arc_fields</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>arccompact_dump_fields</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name><name>words</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>arc_fields</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"DEBUG: 0x%04llx: %08x op=0x%x subop=0x%x format=0x%x fields.a=0x%x fields.b=0x%x fields.c=0x%x imm=%i limm=%lli\n"</literal></expr></argument>,

<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>subopcode</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>limm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>r_read_me32_arc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>imm</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>maxsint</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxuint</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bits</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&gt;</operator> <name>maxsint</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>-</operator><name>maxuint</name> <operator>+</operator> <name>imm</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>imm</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEX_S7</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sex (7, imm);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEX_S8</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sex (8, imm);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEX_S9</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sex (9, imm);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEX_S10</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sex (10, imm);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEX_S12</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sex (12, imm);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEX_S13</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sex (13, imm);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEX_S21</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sex (21, imm);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEX_S25</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sex (25, imm);</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>map_cond2radare</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>cond</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><name>R_ANAL_COND_AL</name></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><name>R_ANAL_COND_EQ</name></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><name>R_ANAL_COND_NE</name></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><name>R_ANAL_COND_PL</name></expr>;</return>

<case>case <expr><literal type="number">4</literal></expr>:</case> <return>return <expr><name>R_ANAL_COND_MI</name></expr>;</return>

<case>case <expr><literal type="number">7</literal></expr>:</case> <return>return <expr><name>R_ANAL_COND_VS</name></expr>;</return>

<case>case <expr><literal type="number">8</literal></expr>:</case> <return>return <expr><name>R_ANAL_COND_VC</name></expr>;</return>

<case>case <expr><literal type="number">9</literal></expr>:</case> <return>return <expr><name>R_ANAL_COND_GT</name></expr>;</return>

<case>case <expr><literal type="number">0xa</literal></expr>:</case> <return>return <expr><name>R_ANAL_COND_GE</name></expr>;</return>

<case>case <expr><literal type="number">0xb</literal></expr>:</case> <return>return <expr><name>R_ANAL_COND_LT</name></expr>;</return>

<case>case <expr><literal type="number">0xc</literal></expr>:</case> <return>return <expr><name>R_ANAL_COND_LE</name></expr>;</return>

<case>case <expr><literal type="number">0xd</literal></expr>:</case> <return>return <expr><name>R_ANAL_COND_HI</name></expr>;</return>

<case>case <expr><literal type="number">0xe</literal></expr>:</case> <return>return <expr><name>R_ANAL_COND_LS</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

case 5: return R_ANAL_COND_?? - CS,C,LO - Carry set &amp; LO

case 6: return R_ANAL_COND_?? - CC,NC,HS - Carry clear &amp; HS

case 0xf: return R_ANAL_COND_?? - PNZ - Positive non-zero

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>arcompact_jump</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>jump</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>delay</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>jump</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>arcompact_jump_cond</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>jump</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>arcompact_jump</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>jump</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>map_cond2radare</name> <argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>arcompact_branch</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>delay</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>arcompact_jump</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>map_zz2refptr</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>mode_zz</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>mode_zz</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>arcompact_genops_jmp</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>arc_fields</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>basic_type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>type_ujmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>type_cjmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>type_ucjmp</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>basic_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>

<expr_stmt><expr><name>type_ujmp</name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type_cjmp</name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type_ucjmp</name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCJMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>

<expr_stmt><expr><name>type_ujmp</name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type_cjmp</name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CCALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type_ucjmp</name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCCALL</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></switch>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>a</name></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>ARC_REG_LIMM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>basic_type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arcompact_jump</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>limm</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>mode_n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>ARC_REG_ILINK1</name> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>ARC_REG_ILINK2</name> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>ARC_REG_BLINK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>mode_n</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type_ujmp</name></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>basic_type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arcompact_jump</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>mode_n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>basic_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>a</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name><name>f</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <call><name>SEX_S12</name> <argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arcompact_jump</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>mode_n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>mode_m</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>ARC_REG_LIMM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type_cjmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arcompact_jump_cond</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>limm</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>mode_n</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>ARC_REG_ILINK1</name> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>ARC_REG_ILINK2</name> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>ARC_REG_BLINK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CRET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>map_cond2radare</name> <argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>mode_n</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>map_cond2radare</name> <argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type_ucjmp</name></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type_cjmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arcompact_jump_cond</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>mode_n</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>arcompact_genops</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name><name>words</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>arc_fields</name></type> <name>fields</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>format</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00c00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x003f0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00000fc0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>a</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000003f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>|</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>mode_n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>b</name></name> <operator>==</operator> <name>ARC_REG_LIMM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>limm</name></name> <operator>=</operator> <name><name>words</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fields</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fields</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fields</name><operator>.</operator><name>a</name></name> <operator>==</operator> <name>ARC_REG_LIMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>limm</name></name> <operator>=</operator> <name><name>words</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fields</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>==</operator> <name>ARC_REG_LIMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>limm</name></name> <operator>=</operator> <name><name>words</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fields</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>fields</name><operator>.</operator><name>a</name></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>==</operator> <name>ARC_REG_LIMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>limm</name></name> <operator>=</operator> <name><name>words</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>imm</name></name> <operator>=</operator> <name><name>fields</name><operator>.</operator><name>c</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fields</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>imm</name></name> <operator>=</operator> <call><name>SEX_S12</name> <argument_list>(<argument><expr><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>|</operator> <name><name>fields</name><operator>.</operator><name>a</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x00</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fields</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>fields</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>fields</name><operator>.</operator><name>b</name></name> <operator>==</operator> <name>ARC_REG_PCL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name><name>fields</name><operator>.</operator><name>imm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="number">0x01</literal></expr>:</case> 

<case>case <expr><literal type="number">0x14</literal></expr>:</case> 

<case>case <expr><literal type="number">0x15</literal></expr>:</case> 

<case>case <expr><literal type="number">0x16</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x02</literal></expr>:</case> 

<case>case <expr><literal type="number">0x03</literal></expr>:</case> 

<case>case <expr><literal type="number">0x0e</literal></expr>:</case> 

<case>case <expr><literal type="number">0x17</literal></expr>:</case> 

<case>case <expr><literal type="number">0x18</literal></expr>:</case> 

<case>case <expr><literal type="number">0x19</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x04</literal></expr>:</case> 

<case>case <expr><literal type="number">0x06</literal></expr>:</case> 

<case>case <expr><literal type="number">0x10</literal></expr>:</case> 

<case>case <expr><literal type="number">0x13</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x05</literal></expr>:</case> 

<case>case <expr><literal type="number">0x0f</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x07</literal></expr>:</case> 

<case>case <expr><literal type="number">0x12</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x08</literal></expr>:</case> 

<case>case <expr><literal type="number">0x09</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0a</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>SEX_S12</name> <argument_list>(<argument><expr><name><name>fields</name><operator>.</operator><name>a</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name><name>fields</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fields</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>cond</name></name> <operator>=</operator> <name><name>fields</name><operator>.</operator><name>a</name></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>map_cond2radare</name> <argument_list>(<argument><expr><name><name>fields</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMOV</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fields</name><operator>.</operator><name>a</name></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>fields</name><operator>.</operator><name>c</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>==</operator> <name>ARC_REG_LIMM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>fields</name><operator>.</operator><name>limm</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0b</literal></expr>:</case> 

<case>case <expr><literal type="number">0x0c</literal></expr>:</case> 

<case>case <expr><literal type="number">0x0d</literal></expr>:</case> 

<case>case <expr><literal type="number">0x11</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1a</literal></expr>:</case> 

<case>case <expr><literal type="number">0x1b</literal></expr>:</case> 

<case>case <expr><literal type="number">0x1c</literal></expr>:</case> 

<case>case <expr><literal type="number">0x1d</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x21</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>mode_n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">0x20</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>mode_m</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arcompact_genops_jmp</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fields</name></expr></argument>, <argument><expr><name>R_ANAL_OP_TYPE_JMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x23</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>mode_n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">0x22</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>mode_m</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arcompact_genops_jmp</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fields</name></expr></argument>, <argument><expr><name>R_ANAL_OP_TYPE_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1e</literal></expr>:</case> 

<case>case <expr><literal type="number">0x1f</literal></expr>:</case> 

<case>case <expr><literal type="number">0x24</literal></expr>:</case> 

<case>case <expr><literal type="number">0x25</literal></expr>:</case> 

<case>case <expr><literal type="number">0x26</literal></expr>:</case> 

<case>case <expr><literal type="number">0x27</literal></expr>:</case> 

<case>case <expr><literal type="number">0x2c</literal></expr>:</case> 

<case>case <expr><literal type="number">0x2d</literal></expr>:</case> 

<case>case <expr><literal type="number">0x2e</literal></expr>:</case> 

<case>case <expr><literal type="number">0x38</literal></expr>:</case> 

<case>case <expr><literal type="number">0x39</literal></expr>:</case> 

<case>case <expr><literal type="number">0x3a</literal></expr>:</case> 

<case>case <expr><literal type="number">0x3b</literal></expr>:</case> 

<case>case <expr><literal type="number">0x3c</literal></expr>:</case> 

<case>case <expr><literal type="number">0x3d</literal></expr>:</case> 

<case>case <expr><literal type="number">0x3e</literal></expr>:</case> 

<case>case <expr><literal type="number">0x3f</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x28</literal></expr>:</case> 

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>imm</name></name> <operator>=</operator> <call><name>SEX_S13</name> <argument_list>(<argument><expr><operator>(</operator><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>|</operator> <operator>(</operator><name><name>fields</name><operator>.</operator><name>a</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name><name>fields</name><operator>.</operator><name>imm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>imm</name></name> <operator>=</operator> <name><name>fields</name><operator>.</operator><name>c</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>cond</name></name> <operator>=</operator> <name><name>fields</name><operator>.</operator><name>a</name></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>map_cond2radare</name> <argument_list>(<argument><expr><name><name>fields</name><operator>.</operator><name>a</name></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name><name>fields</name><operator>.</operator><name>imm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0x29</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x2a</literal></expr>:</case> 

<case>case <expr><literal type="number">0x2b</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_IO</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x2f</literal></expr>:</case> 

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>a</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<case>case <expr><literal type="number">4</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> 

<case>case <expr><literal type="number">6</literal></expr>:</case> 

<case>case <expr><literal type="number">7</literal></expr>:</case> 

<case>case <expr><literal type="number">8</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ABS</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xa</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xb</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xc</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XCHG</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x3f</literal></expr>:</case> 

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>b</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SWI</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0x30</literal></expr>:</case>

<case>case <expr><literal type="number">0x31</literal></expr>:</case>

<case>case <expr><literal type="number">0x32</literal></expr>:</case>

<case>case <expr><literal type="number">0x33</literal></expr>:</case>

<case>case <expr><literal type="number">0x34</literal></expr>:</case>

<case>case <expr><literal type="number">0x35</literal></expr>:</case>

<case>case <expr><literal type="number">0x36</literal></expr>:</case>

<case>case <expr><literal type="number">0x37</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>arccompact_dump_fields</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>words</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>arcompact_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name><name>words</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>arc_fields</name></type> <name>fields</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_read_be32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>words</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_read_be32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_read_me32_arc</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>words</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_read_me32_arc</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf8000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">27</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>fields</name><operator>.</operator><name>opcode</name></name> <operator>&gt;=</operator> <literal type="number">0x0c</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">2</literal></expr></then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>nopcode</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>format</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00010000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>a</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07fe0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000ffc0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000000f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>mode_n</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>limm</name></name> <operator>=</operator> <name><name>fields</name><operator>.</operator><name>a</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator> <name><name>fields</name><operator>.</operator><name>b</name></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>limm</name></name> <operator>=</operator> <call><name>SEX_S21</name> <argument_list>(<argument><expr><name><name>fields</name><operator>.</operator><name>limm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>cond</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>map_cond2radare</name> <argument_list>(<argument><expr><name><name>fields</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>limm</name></name> <operator>|=</operator> <operator>(</operator><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>limm</name></name> <operator>=</operator> <call><name>SEX_S25</name> <argument_list>(<argument><expr><name><name>fields</name><operator>.</operator><name>limm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>arcompact_branch</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>limm</name></name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>mode_n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>format</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00010000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>mode_n</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>format2</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>|</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00000fc0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>imm</name></name> <operator>=</operator> <call><name>SEX_S9</name> <argument_list>(<argument><expr><operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00fe0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>format2</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>b</name></name> <operator>==</operator> <name>ARC_REG_LIMM</name> <operator>||</operator> <name><name>fields</name><operator>.</operator><name>c</name></name> <operator>==</operator> <name>ARC_REG_LIMM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>limm</name></name> <operator>=</operator> <name><name>words</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>arcompact_branch</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>imm</name></name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>mode_n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>format2</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00020000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>a</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07fc0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000ffc0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000000f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>imm</name></name> <operator>=</operator> <name><name>fields</name><operator>.</operator><name>a</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>|</operator> <name><name>fields</name><operator>.</operator><name>b</name></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>format2</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>imm</name></name> <operator>=</operator> <call><name>SEX_S21</name> <argument_list>(<argument><expr><name><name>fields</name><operator>.</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>cond</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>map_cond2radare</name> <argument_list>(<argument><expr><name><name>fields</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CCALL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>imm</name></name> <operator>|=</operator> <operator>(</operator><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>imm</name></name> <operator>=</operator> <call><name>SEX_S25</name> <argument_list>(<argument><expr><name><name>fields</name><operator>.</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>arcompact_branch</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>imm</name></name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>mode_n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>a</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000003f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>|</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>imm</name></name> <operator>=</operator> <call><name>SEX_S9</name> <argument_list>(<argument><expr><operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>mode_zz</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x180</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>a</name></name> <operator>==</operator> <name>ARC_REG_PCL</name> <operator>||</operator> <name><name>fields</name><operator>.</operator><name>a</name></name> <operator>==</operator> <literal type="number">61</literal> <operator>||</operator> <operator>(</operator><name><name>fields</name><operator>.</operator><name>a</name></name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name><name>fields</name><operator>.</operator><name>a</name></name> <operator>&lt;=</operator> <literal type="number">0x2b</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>map_zz2refptr</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>mode_zz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>b</name></name> <operator>==</operator> <name>ARC_REG_LIMM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>limm</name></name> <operator>=</operator> <name><name>words</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>fields</name><operator>.</operator><name>limm</name></name> <operator>+</operator> <name><name>fields</name><operator>.</operator><name>imm</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fields</name><operator>.</operator><name>b</name></name> <operator>==</operator> <name>ARC_REG_PCL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name><name>fields</name><operator>.</operator><name>imm</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfc0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>|</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>imm</name></name> <operator>=</operator> <call><name>SEX_S9</name> <argument_list>(<argument><expr><operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>mode_zz</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x6</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>map_zz2refptr</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>mode_zz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>b</name></name> <operator>==</operator> <name>ARC_REG_LIMM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>limm</name></name> <operator>=</operator> <name><name>words</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>fields</name><operator>.</operator><name>limm</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>==</operator> <name>ARC_REG_LIMM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>limm</name></name> <operator>=</operator> <name><name>words</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>fields</name><operator>.</operator><name>limm</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>b</name></name> <operator>==</operator> <name>ARC_REG_PCL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name><name>fields</name><operator>.</operator><name>imm</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<return>return <expr><call><name>arcompact_genops</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<case>case <expr><literal type="number">8</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x003f0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>format</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00c00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00000fc0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>a</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000003f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>|</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>b</name></name> <operator>==</operator> <name>ARC_REG_LIMM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>limm</name></name> <operator>=</operator> <name><name>words</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fields</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fields</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fields</name><operator>.</operator><name>a</name></name> <operator>==</operator> <name>ARC_REG_LIMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>limm</name></name> <operator>=</operator> <name><name>words</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fields</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>==</operator> <name>ARC_REG_LIMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>limm</name></name> <operator>=</operator> <name><name>words</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fields</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>fields</name><operator>.</operator><name>a</name></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>==</operator> <name>ARC_REG_LIMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>limm</name></name> <operator>=</operator> <name><name>words</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x09</literal></expr>:</case>

<case>case <expr><literal type="number">0x0a</literal></expr>:</case>

<case>case <expr><literal type="number">0x0b</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0c</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00180000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0x0d</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00180000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0x0e</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00180000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00e00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal> <operator>|</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00070000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>==</operator> <name>ARC_REG_LIMM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000ffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0xf</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x001f0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00e00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>c</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arcompact_jump</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arcompact_jump</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCALL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arcompact_jump</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCALL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arcompact_jump</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<case>case <expr><literal type="number">5</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_NE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> 

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>b</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_EQ</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CRET</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_NE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CRET</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">6</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<case>case <expr><literal type="number">9</literal></expr>:</case>

<case>case <expr><literal type="number">0xa</literal></expr>:</case>

<case>case <expr><literal type="number">0x17</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xb</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xc</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xd</literal></expr>:</case> 

<case>case <expr><literal type="number">0xe</literal></expr>:</case> 

<case>case <expr><literal type="number">0xf</literal></expr>:</case> 

<case>case <expr><literal type="number">0x10</literal></expr>:</case> 

<case>case <expr><literal type="number">0x13</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CPL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x11</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ABS</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x12</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x14</literal></expr>:</case> 

<case>case <expr><literal type="number">0x15</literal></expr>:</case> 

<case>case <expr><literal type="number">0x16</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x18</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x19</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1a</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1b</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1c</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1d</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1e</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1f</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0x10</literal></expr>:</case> 

<case>case <expr><literal type="number">0x11</literal></expr>:</case> 

<case>case <expr><literal type="number">0x12</literal></expr>:</case> 

<case>case <expr><literal type="number">0x13</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x14</literal></expr>:</case> 

<case>case <expr><literal type="number">0x15</literal></expr>:</case> 

<case>case <expr><literal type="number">0x16</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x17</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00e00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> 

<case>case <expr><literal type="number">6</literal></expr>:</case> 

<case>case <expr><literal type="number">7</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0x18</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00e00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>b</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x001f0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>c</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<case>case <expr><literal type="number">0x11</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x001f0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>c</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<case>case <expr><literal type="number">0x11</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ILL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0x19</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x06000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1a</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name><name>fields</name><operator>.</operator><name>c</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>refptr</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1b</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1c</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00800000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1d</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>imm</name></name> <operator>=</operator> <call><name>SEX_S8</name> <argument_list>(<argument><expr><operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x007f0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arcompact_branch</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>imm</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1e</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name> <operator>=</operator> <operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x06000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>imm</name></name> <operator>=</operator> <call><name>SEX_S10</name> <argument_list>(<argument><expr><operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01ff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fields</name><operator>.</operator><name>subopcode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_EQ</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name>R_ANAL_COND_NE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>imm</name></name> <operator>=</operator> <call><name>SEX_S7</name> <argument_list>(<argument><expr><operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x003f0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>arcompact_branch</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>imm</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1f</literal></expr>:</case> 

<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>imm</name></name> <operator>=</operator> <call><name>SEX_S13</name> <argument_list>(<argument><expr><operator>(</operator><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07ff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arcompact_branch</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>imm</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>arccompact_dump_fields</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>words</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>arc_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>arcompact_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>basecode</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>basecode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x04</literal></expr>:</case> 

<case>case <expr><literal type="number">0x05</literal></expr>:</case> 

<case>case <expr><literal type="number">0x06</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><call><name>r_read_le32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x07ffff80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x07</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x08</literal></expr>:</case>

<case>case <expr><literal type="number">0x09</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0a</literal></expr>:</case>

<case>case <expr><literal type="number">0x0b</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0c</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0d</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0f</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x13</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ROR</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>archinfo</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_ARCHINFO_ALIGN</name></expr>:</case>

<return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><name>R_ANAL_ARCHINFO_MIN_OP_SIZE</name></expr>:</case>

<return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><name>R_ANAL_ARCHINFO_MAX_OP_SIZE</name></expr>:</case>

<return>return <expr><literal type="number">8</literal></expr>;</return>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p16</name> <init>=

<expr><literal type="string">"=PC pcl\n"</literal>

<literal type="string">"=SP sp\n"</literal>

<literal type="string">"=LR blink\n"</literal>

<literal type="string">"=A0 r0\n"</literal>

<literal type="string">"=A1 r1\n"</literal>

<literal type="string">"=A2 r2\n"</literal>

<literal type="string">"=A3 r3\n"</literal>

<literal type="string">"gpr r0 .32 0 0\n"</literal>

<literal type="string">"gpr r1 .32 4 0\n"</literal>

<literal type="string">"gpr r2 .32 8 0\n"</literal>

<literal type="string">"gpr r3 .32 12 0\n"</literal>

<literal type="string">"gpr r4 .32 16 0\n"</literal>

<literal type="string">"gpr r5 .32 20 0\n"</literal>

<literal type="string">"gpr r6 .32 24 0\n"</literal>

<literal type="string">"gpr r7 .32 28 0\n"</literal>

<literal type="string">"gpr r8 .32 32 0\n"</literal>

<literal type="string">"gpr r9 .32 36 0\n"</literal>

<literal type="string">"gpr r10 .32 40 0\n"</literal>

<literal type="string">"gpr r11 .32 44 0\n"</literal>

<literal type="string">"gpr r12 .32 48 0\n"</literal>

<literal type="string">"gpr r13 .32 52 0\n"</literal>

<literal type="string">"gpr r14 .32 56 0\n"</literal>

<literal type="string">"gpr r15 .32 60 0\n"</literal>

<literal type="string">"gpr r16 .32 64 0\n"</literal>

<literal type="string">"gpr r17 .32 68 0\n"</literal>

<literal type="string">"gpr r18 .32 72 0\n"</literal>

<literal type="string">"gpr r19 .32 76 0\n"</literal>

<literal type="string">"gpr r20 .32 80 0\n"</literal>

<literal type="string">"gpr r21 .32 84 0\n"</literal>

<literal type="string">"gpr r22 .32 88 0\n"</literal>

<literal type="string">"gpr r23 .32 92 0\n"</literal>

<literal type="string">"gpr r24 .32 96 0\n"</literal>

<literal type="string">"gpr r25 .32 100 0\n"</literal>

<literal type="string">"gpr gp .32 104 0\n"</literal>

<literal type="string">"gpr fp .32 108 0\n"</literal>

<literal type="string">"gpr sp .32 112 0\n"</literal>

<literal type="string">"gpr ilink1 .32 116 0\n"</literal>

<literal type="string">"gpr ilink2 .32 120 0\n"</literal>

<literal type="string">"gpr blink .32 124 0\n"</literal>

<literal type="string">"gpr lp_count .32 128 0\n"</literal>

<literal type="string">"gpr pcl .32 132 0\n"</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p16</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_arc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"arc"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"arc"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">16</literal> <operator>|</operator> <literal type="number">32</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"ARC code analysis plugin"</literal></expr>,

<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>arc_op</name></expr>,

<expr><operator>.</operator><name>archinfo</name> <operator>=</operator> <name>archinfo</name></expr>,

<expr><operator>.</operator><name>set_reg_profile</name> <operator>=</operator> <name>set_reg_profile</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_arc</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
