<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\p\anal_sh.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>API</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORD_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x",0x80000000,&amp;"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S16_EXT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x",DUP,0x8000,&amp;,?{,0xFFFFFFFFFFFF0000,|,}"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S32_EXT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x",DUP,0x80000000,&amp;,?{,0xFFFFFFFF00000000,|,}"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_T</name></cpp:macro> <cpp:value>"sr,0x1,&amp;,"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_T</name></cpp:macro> <cpp:value>"0x1,sr,|="</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLR_T</name></cpp:macro> <cpp:value>"0xFFFFFFFE,sr,&amp;="</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CLRT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x == 0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NOP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x == 0x0009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_RTS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x == 0x000b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SETT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x == 0x0018</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DIV0U</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x == 0x0019</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SLEEP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x == 0x001b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CLRMAC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x == 0x0028</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_RTE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x == 0x002b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_STCSR1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0CF) == 0x0002)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BSRF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &amp; 0xf0ff) == 0x0003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BRAF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xf0ff) == 0x0023)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVB_REG_TO_R0REL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x0004)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVW_REG_TO_R0REL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x0005)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVL_REG_TO_R0REL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x0006)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MULL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x0007)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVB_R0REL_TO_REG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x000C)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVW_R0REL_TO_REG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x000D)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVL_R0REL_TO_REG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x000E)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MACL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x000F)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x0029)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_STSMACH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x000A)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_STSMACL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x001A)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_STSPR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x002A)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVB_REG_TO_REGREF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x2000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVW_REG_TO_REGREF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x2001)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVL_REG_TO_REGREF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x2002)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_PUSHB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x2004)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_PUSHW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x2005)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_PUSHL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x2006)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DIV0S</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x2007)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_TSTRR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x2008)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_AND_REGS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x2009)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_XOR_REGS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x200A)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_OR_REGS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x200B)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CMPSTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x200C)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_XTRCT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x200D)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MULUW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x200E)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MULSW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x200F)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CMPEQ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x3000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CMPHS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x3002)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CMPGE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x3003)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CMPHI</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x3006)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CMPGT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x3007)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DIV1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x3004)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DMULU</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x3005)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DMULS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x300D)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SUB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x3008)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SUBC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x300A)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SUBV</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x300B)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ADD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x300C)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ADDC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x300E)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ADDV</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x300F)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MACW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x400F)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_JSR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xf0ff) == 0x400b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_JMP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xf0ff) == 0x402b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CMPPL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xf0ff) == 0x4015)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CMPPZ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xf0ff) == 0x4011)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_LDCSR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x400E)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_LDCGBR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x401E)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_LDCVBR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x402E)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_LDCLSR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x4007)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_LDCLSRGBR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x4017)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_LDCLSRVBR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x4027)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_LDSMACH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x400A)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_LDSMACL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x401A)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_LDSLMACH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x4006)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_LDSLMACL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x4016)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_LDSPR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x402A)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_LDSLPR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x4026)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ROTCR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x4025)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ROTCL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x4024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ROTL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x4004)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ROTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x4005)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_STSLMACL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x4012)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_STSLMACH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x4002)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_STCLSR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x4003)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_STCLGBR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x4013)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_STCLVBR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x4023)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_STSLPR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x4022)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_TASB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x401B)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0FF) == 0x4010)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVB_REGREF_TO_REG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x6000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVW_REGREF_TO_REG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x6001)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVL_REGREF_TO_REG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x6002)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOV_REGS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xf00f) == 0x6003)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVB_POP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x6004)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVW_POP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x6005)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVL_POP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x6006)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NOT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x6007)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SWAPB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x6008)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SWAPW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x6009)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NEG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x600B)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NEGC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00F) == 0x600A)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_EXT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF00C) == 0x600C)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVB_R0_REGDISP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xFF00) == 0x8000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVW_R0_REGDISP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xFF00) == 0x8100)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVB_REGDISP_R0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xFF00) == 0x8400)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVW_REGDISP_R0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xFF00) == 0x8500)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CMPIMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xFF00) == 0x8800)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xff00) == 0x8900)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xff00) == 0x8B00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BTS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xff00) == 0x8D00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BFS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xff00) == 0x8F00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BT_OR_BF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_BT(x)||IS_BTS(x)||IS_BF(x)||IS_BFS(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVB_R0_GBRREF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xFF00) == 0xC000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVW_R0_GBRREF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xFF00) == 0xC100)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVL_R0_GBRREF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xFF00) == 0xC200)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_TRAP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xFF00) == 0xC300)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVB_GBRREF_R0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xFF00) == 0xC400)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVW_GBRREF_R0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xFF00) == 0xC500)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVL_GBRREF_R0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xFF00) == 0xC600)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVA_PCREL_R0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xFF00) == 0xC700)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BINLOGIC_IMM_R0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xFC00) == 0xC800)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BINLOGIC_IMM_GBR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xFC00) == 0xCC00)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_BRA_OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &amp; 0x0fff)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_BTF_OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &amp; 0x00ff)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_TARGET_REG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; 8) &amp; 0x0f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_SOURCE_REG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; 4) &amp; 0x0f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PC_IDX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>disarm_12bit_offset</name> <parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>insoff</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><name>insoff</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>off</name> <operator>&amp;</operator> <literal type="number">0x0800</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0800</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>|=</operator> <operator>~</operator><literal type="number">0xFFF</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>off</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>disarm_8bit_offset</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>offs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><name>offs</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>off</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>|=</operator> <operator>~</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>off</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>pc</name> <operator>+</operator> <literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>regs</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="string">"r0"</literal></expr>,<expr><literal type="string">"r1"</literal></expr>,<expr><literal type="string">"r2"</literal></expr>,<expr><literal type="string">"r3"</literal></expr>,<expr><literal type="string">"r4"</literal></expr>,<expr><literal type="string">"r5"</literal></expr>,<expr><literal type="string">"r6"</literal></expr>,<expr><literal type="string">"r7"</literal></expr>,<expr><literal type="string">"r8"</literal></expr>,<expr><literal type="string">"r9"</literal></expr>,<expr><literal type="string">"r10"</literal></expr>,<expr><literal type="string">"r11"</literal></expr>,<expr><literal type="string">"r12"</literal></expr>,<expr><literal type="string">"r13"</literal></expr>,<expr><literal type="string">"r14"</literal></expr>,<expr><literal type="string">"r15"</literal></expr>,<expr><literal type="string">"pc"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>RAnalValue</name> <modifier>*</modifier></type><name>anal_fill_ai_rg</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalValue</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>regs</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnalValue</name> <modifier>*</modifier></type><name>anal_fill_im</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>st32</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalValue</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnalValue</name> <modifier>*</modifier></type><name>anal_fill_reg_disp_mem</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalValue</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <name>delta</name><operator>*</operator><name>size</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnalValue</name> <modifier>*</modifier></type><name>anal_fill_reg_ref</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalValue</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnalValue</name> <modifier>*</modifier></type><name>anal_fill_r0_reg_ref</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalValue</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>regdelta</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>regs</name><index>[<expr><name>reg</name></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>memref</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnalValue</name> <modifier>*</modifier></type><name>anal_pcrel_disp_mov</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>disp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalValue</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name><operator>==</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <name>disp</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <name>disp</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnalValue</name> <modifier>*</modifier></type><name>anal_regrel_jump</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalValue</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>regs</name><index>[<expr><name>reg</name></expr>]</index></name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>first_nibble_is_0</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>IS_BSRF</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UCALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_regrel_jump</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,SETD,pc,2,+,pr,=,r%d,2,+,pc,+="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_BRAF</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_regrel_jump</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,SETD,r%d,2,+,pc,+="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_RTS</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"pr,pc,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_RTE</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,SETD,r15,[4],pc,=,r15,4,+,[4],0xFFF0FFF,&amp;,sr,=,8,r15,+="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVB_REG_TO_R0REL</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_r0_reg_ref</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BYTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,0xFF,&amp;,r0,r%d,+,=[1]"</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVW_REG_TO_R0REL</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_r0_reg_ref</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,0xFFFF,&amp;,r0,r%d,+,=[2]"</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVL_REG_TO_R0REL</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_r0_reg_ref</name><argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LONG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,r0,r%d,+,=[4]"</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVB_R0REL_TO_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_r0_reg_ref</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BYTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r0,r%d,+,[1],r%d,=,0x000000FF,r%d,&amp;=,r%d,0x80,&amp;,?{,0xFFFFFF00,r%d,|=,}"</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVW_R0REL_TO_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_r0_reg_ref</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r0,r%d,+,[2],r%d,=,0x0000FFFF,r%d,&amp;=,r%d,0x8000,&amp;,?{,0xFFFF0000,r%d,|=,}"</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVL_R0REL_TO_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_r0_reg_ref</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LONG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r0,r%d,+,[4],r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_NOP</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_CLRT</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SETT</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x1,sr,|="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_CLRMAC</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0,mach,=,0,macl,="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_DIV0U</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_DIV</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFCFE,sr,&amp;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVT</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x1,sr,&amp;,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MULL</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,r%d,*,macl,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SLEEP</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"sleep_called,TRAP"</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_STSMACH</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"mach,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_STSMACL</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"macl,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_STSLMACL</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"macl,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_STCSR1</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"sr,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"gbr,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"vbr,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_STSPR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"pr,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MACL</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"mach,0x80000000,&amp;,!,"</literal> 

<call><name>S32_EXT</name><argument_list>(<argument><expr><literal type="string">"r%d,[4]"</literal></expr></argument>)</argument_list></call><literal type="string">","</literal> 

<call><name>S32_EXT</name><argument_list>(<argument><expr><literal type="string">"r%d,[4]"</literal></expr></argument>)</argument_list></call><literal type="string">","</literal> 

<literal type="string">"*,"</literal> 

<literal type="string">"macl,32,mach,&lt;&lt;,|,"</literal> 

<literal type="string">"+,"</literal> 

<literal type="string">"32,"</literal>

<call><name>S32_EXT</name><argument_list>(<argument><expr><literal type="string">"r%d,[4]"</literal></expr></argument>)</argument_list></call><literal type="string">","</literal> 

<call><name>S32_EXT</name><argument_list>(<argument><expr><literal type="string">"r%d,[4]"</literal></expr></argument>)</argument_list></call><literal type="string">","</literal> 

<literal type="string">"*,"</literal>

<literal type="string">"4,r%d,+=,"</literal> 

<literal type="string">"4,r%d,+=,"</literal> 

<literal type="string">"0xffffffff00000000,&amp;,&gt;&gt;,mach,=,"</literal> 

<literal type="string">"0xffffffff,&amp;,macl,=,"</literal>

<literal type="string">"0x2,sr,&amp;,!,?{,BREAK,},"</literal> 

<literal type="string">"0x00007fff,mach,&gt;,"</literal>

<literal type="string">"0x80000000,mach,&amp;,!,&amp;,"</literal>

<literal type="string">"?{,0x00007fff,mach,=,0xffffffff,macl,=,},"</literal> 

<literal type="string">"0xffff8000,mach,&lt;,"</literal>

<literal type="string">"0x80000000,mach,&amp;,!,!,&amp;,"</literal>

<literal type="string">"?{,0xffff8000,mach,=,0x0,macl,=,},"</literal></expr></argument> 

, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>movl_reg_rdisp</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_reg_disp_mem</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><name>LONG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,r%d,0x%x,+,=[4]"</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>first_nibble_is_2</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IS_MOVB_REG_TO_REGREF</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_reg_ref</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BYTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,r%d,=[1]"</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVW_REG_TO_REGREF</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_reg_ref</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,r%d,=[2]"</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVL_REG_TO_REGREF</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_reg_ref</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LONG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,r%d,=[4]"</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_AND_REGS</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,r%d,&amp;="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_XOR_REGS</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,r%d,^="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_OR_REGS</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,r%d,|="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_PUSHB</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,r%d,-=,r%d,r%d,=[1]"</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_PUSHW</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"2,r%d,-=,r%d,r%d,=[2]"</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_PUSHL</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"4,r%d,-=,r%d,r%d,=[4]"</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_TSTRR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ACMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,sr,|=,r%d,r%d,&amp;,?{,0xFFFFFFFE,sr,&amp;=,}"</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_CMPSTR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ACMP</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,24,r%d,r%d,^,&gt;&gt;,0xFF,&amp;,!,?{,1,sr,|=,},16,r%d,r%d,^,&gt;&gt;,0xFF,&amp;,!,?{,1,sr,|=,},8,r%d,r%d,^,&gt;&gt;,0xFF,&amp;,!,?{,1,sr,|=,},r%d,r%d,^,0xFF,&amp;,!,?{,1,sr,|=,}"</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_XTRCT</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"16,r%d,0xFFFF,&amp;,&lt;&lt;,16,r%d,0xFFFF0000,&amp;,&gt;&gt;,|,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_DIV0S</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_DIV</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFCFE,sr,&amp;=,r%d,0x80000000,&amp;,?{,0x200,sr,|=,},r%d,0x80000000,&amp;,?{,0x100,sr,|=,},sr,1,sr,&lt;&lt;,^,0x200,&amp;,?{,1,sr,|=,}"</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MULUW</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name><argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name><argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,0xFFFF,&amp;,r%d,0xFFFF,&amp;,*,macl,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MULSW</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name><argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name><argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><call><name>S16_EXT</name><argument_list>(<argument><expr><literal type="string">"r%d"</literal></expr></argument>)</argument_list></call> <literal type="string">","</literal> <call><name>S16_EXT</name><argument_list>(<argument><expr><literal type="string">"r%d"</literal></expr></argument>)</argument_list></call> <literal type="string">",*,macl,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>first_nibble_is_3</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IS_ADD</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,r%d,+="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_ADDC</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"sr,0x1,&amp;,0xFFFFFFFE,sr,&amp;=,r%d,+=,31,$c,sr,|,sr,:=,r%d,r%d,+=,31,$c,sr,|,sr,:="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_ADDV</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,r%d,r%d,+=,31,$o,sr,|="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SUB</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,r%d,-="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SUBC</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"sr,1,&amp;,"</literal> <name>CLR_T</name> <literal type="string">",r%d,-=,31,$b,sr,|,sr,:=,r%d,r%d,-=,31,$b,sr,|,sr,:="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SUBV</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><name>CLR_T</name> <literal type="string">",r%d,r%d,-=,31,$o,sr,|,sr,:="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_CMPEQ</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;,r%d,r%d,^,!,|,sr,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_CMPGE</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,r%d,r%d,&gt;=,?{,0x1,sr,|=,}"</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_CMPGT</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,r%d,r%d,&gt;,?{,0x1,sr,|=,}"</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_CMPHI</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,r%d,0x100000000,+,r%d,0x100000000,+,&gt;,?{,0x1,sr,|=,}"</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_CMPHS</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,r%d,0x100000000,+,r%d,0x100000000,+,&gt;=,?{,0x1,sr,|=,}"</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_DIV1</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_DIV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"1,sr,&gt;&gt;,sr,^,0x80,&amp;,"</literal> 

<literal type="string">"0xFFFFFF7F,sr,&amp;=,"</literal>

<literal type="string">"1,r%d,DUP,0x80000000,&amp;,?{,0x80,sr,|=,},&lt;&lt;,sr,0x1,&amp;,|,r%d,=,"</literal> 

<literal type="string">"DUP,!,!,?{,"</literal>

<literal type="string">"r%d,NUM,"</literal>

<literal type="string">"r%d,r%d,+=,"</literal>

<literal type="string">"r%d,&lt;,}{,"</literal> 

<literal type="string">"r%d,NUM,"</literal>

<literal type="string">"r%d,r%d,-=,"</literal>

<literal type="string">"r%d,&gt;,},"</literal> 

<literal type="string">"sr,0x80,&amp;,!,!,^,"</literal> 

<literal type="string">"sr,0x100,&amp;,?{,!,},"</literal>

<literal type="string">"0xFFFFFF7F,sr,&amp;=,"</literal> 

<literal type="string">"?{,0x80,sr,|=,},"</literal> 

<name>CLR_T</name><literal type="string">","</literal>

<literal type="string">"1,sr,&gt;&gt;,sr,^,0x80,&amp;,!,sr,|="</literal></expr></argument>, 

<argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GET_SOURCE_REG</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GET_SOURCE_REG</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_DMULU</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"32,r%d,r%d,*,DUP,0xFFFFFFFF,&amp;,macl,=,&gt;&gt;,mach,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_DMULS</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"32,r%d,r%d,0x80000000,&amp;,?{,0xFFFFFFFF00000000,+,},r%d,r%d,0x80000000,&amp;,?{,0xFFFFFFFF00000000,+,},*,DUP,0xFFFFFFFF,&amp;,macl,=,&gt;&gt;,mach,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>first_nibble_is_4</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch<condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xF0FF</literal></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0x4020</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,r%d,0x80000000,&amp;,?{,0x1,sr,|=,},1,r%d,&lt;&lt;="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x4021</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SAR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,r%d,0x1,&amp;,?{,0x1,sr,|=,},0,r%d,0x80000000,&amp;,?{,0x80000000,+,},1,r%d,&gt;&gt;=,r%d,|="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x4000</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,r%d,0x80000000,&amp;,?{,0x1,sr,|=,},1,r%d,&lt;&lt;="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x4008</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"2,r%d,&lt;&lt;="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x4018</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"8,r%d,&lt;&lt;="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x4028</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"16,r%d,&lt;&lt;="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x4001</literal></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,r%d,0x1,&amp;,?{,0x1,sr,|=,},1,r%d,&gt;&gt;="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x4009</literal></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"2,r%d,&gt;&gt;="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x4019</literal></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"8,r%d,&gt;&gt;="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x4029</literal></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"16,r%d,&gt;&gt;="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SHR</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>IS_JSR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_RCALL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,SETD,pc,2,+,pr,=,r%d,pc,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_JMP</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UJMP</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,SETD,r%d,pc,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_CMPPL</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,0,r%d,&gt;,?{,0x1,sr,|=,}"</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_CMPPZ</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,0,r%d,&gt;=,?{,0x1,sr,|=,}"</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_LDCLSR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,[4],0x0FFF0FFF,&amp;,sr,=,4,r%d,+="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_LDCLSRGBR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,[4],gbr,=,4,r%d,+="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_LDCLSRVBR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,[4],vbr,=,4,r%d,+="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_LDSLMACH</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,[4],mach,=,4,r%d,+="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_LDSLMACL</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,[4],macl,=,4,r%d,+="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_LDSLPR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,[4],pr,=,4,r%d,+="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_LDCSR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,0x0FFF0FFF,&amp;,sr,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_LDCGBR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,gbr,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_LDCVBR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,vbr,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_LDSMACH</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,mach,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_LDSMACL</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,macl,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_LDSPR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,pr,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_ROTR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,r%d,0x1,&amp;,sr,|=,0x1,r%d,&gt;&gt;&gt;,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name>R_ANAL_OP_TYPE_ROR</name></expr></then><else>:<expr><name>R_ANAL_OP_TYPE_ROL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_ROTL</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,0x1,r%d,&lt;&lt;&lt;,r%d,=,r%d,0x1,&amp;,sr,|="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name>R_ANAL_OP_TYPE_ROR</name></expr></then><else>:<expr><name>R_ANAL_OP_TYPE_ROL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_ROTCR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0,sr,0x1,&amp;,?{,0x80000000,},0xFFFFFFFE,sr,&amp;=,r%d,1,&amp;,sr,|=,1,r%d,&gt;&gt;=,r%d,|="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name>R_ANAL_OP_TYPE_ROR</name></expr></then><else>:<expr><name>R_ANAL_OP_TYPE_ROL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_ROTCL</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"sr,0x1,&amp;,0xFFFFFFFE,sr,&amp;=,r%d,0x80000000,&amp;,?{,1,sr,|=,},1,r%d,&lt;&lt;=,r%d,|="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name>R_ANAL_OP_TYPE_ROR</name></expr></then><else>:<expr><name>R_ANAL_OP_TYPE_ROL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_STCLSR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"4,r%d,-=,sr,r%d,=[4]"</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_STCLGBR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"4,r%d,-=,gbr,r%d,=[4]"</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_STCLVBR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"4,r%d,-=,vbr,r%d,=[4]"</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_STSLMACL</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"4,r%d,-=,macl,r%d,=[4]"</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_STSLMACH</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"4,r%d,-=,mach,r%d,=[4]"</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_STSLPR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"4,r%d,-=,pr,r%d,=[4]"</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_TASB</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,r%d,[1],!,?{,0x80,r%d,=[1],1,sr,|=,}"</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_DT</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,1,r%d,-=,$z,sr,|,sr,:="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MACW</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>,

<argument><expr><literal type="string">"0x2,sr,&amp;,!,?{,"</literal> 

<call><name>S16_EXT</name><argument_list>(<argument><expr><literal type="string">"r%d,[2]"</literal></expr></argument>)</argument_list></call><literal type="string">","</literal> 

<call><name>S16_EXT</name><argument_list>(<argument><expr><literal type="string">"r%d,[2]"</literal></expr></argument>)</argument_list></call><literal type="string">","</literal> 

<literal type="string">"*,"</literal>

<literal type="string">"macl,32,mach,&lt;&lt;,|,"</literal> 

<literal type="string">"+,"</literal> 

<literal type="string">"32,"</literal>

<call><name>S16_EXT</name><argument_list>(<argument><expr><literal type="string">"r%d,[2]"</literal></expr></argument>)</argument_list></call><literal type="string">","</literal> 

<call><name>S16_EXT</name><argument_list>(<argument><expr><literal type="string">"r%d,[2]"</literal></expr></argument>)</argument_list></call><literal type="string">","</literal> 

<literal type="string">"*,"</literal>

<literal type="string">"0xffffffff00000000,&amp;,&gt;&gt;,mach,=,"</literal> 

<literal type="string">"0xffffffff,&amp;,macl,=,"</literal>

<literal type="string">"}{,"</literal> 

<call><name>S16_EXT</name><argument_list>(<argument><expr><literal type="string">"r%d,[2]"</literal></expr></argument>)</argument_list></call><literal type="string">","</literal> 

<call><name>S16_EXT</name><argument_list>(<argument><expr><literal type="string">"r%d,[2]"</literal></expr></argument>)</argument_list></call><literal type="string">","</literal> 

<literal type="string">"*"</literal>

<literal type="string">"macl,+=,"</literal> 

<literal type="string">"31,$o,?{,"</literal> 

<literal type="string">"macl,0x80000000,&amp;,?{,"</literal>

<literal type="string">"0x7fffffff,macl,=,"</literal>

<literal type="string">"}{,"</literal>

<literal type="string">"0x80000000,macl,=,"</literal>

<literal type="string">"},"</literal>

<literal type="string">"},"</literal>

<literal type="string">"},"</literal>

<literal type="string">"2,r%d,+=,"</literal> 

<literal type="string">"2,r%d,+=,"</literal></expr></argument>, 

<argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>movl_rdisp_reg</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_reg_disp_mem</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><name>LONG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,0x%x,+,[4],r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>code</name><operator>&amp;</operator><literal type="number">0xF</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>first_nibble_is_6</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IS_MOV_REGS</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVB_REGREF_TO_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_reg_ref</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BYTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x000000FF,r%d,&amp;=,r%d,[1],DUP,0x80,&amp;,?{,0xFFFFFF00,|=,},r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVW_REGREF_TO_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_reg_ref</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x0000FFFF,r%d,&amp;=,r%d,[2],DUP,0x8000,&amp;,?{,0xFFFF0000,|=,},r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVL_REGREF_TO_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_reg_ref</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LONG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,[4],r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_EXT</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0xC</literal></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,0xFF,&amp;,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xD</literal></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,0xFFFF,&amp;,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xE</literal></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,0xFF,&amp;,DUP,0x80,&amp;,?{,0xFFFFFF00,|,},r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xF</literal></expr>:</case> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,0xFFFF,&amp;,DUP,0x8000,&amp;,?{,0xFFFF0000,|,},r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"TODO,NOT IMPLEMENTED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVB_POP</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,[1],DUP,0x80,&amp;,?{,0xFFFFFF00,|,},r%d,=,1,r%d,+="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVW_POP</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,[2],DUP,0x8000,&amp;,?{,0xFFFF0000,|,},r%d,=,2,r%d,+="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVL_POP</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,[4],r%d,=,4,r%d,+="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_NEG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,0,-,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_NEGC</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,sr,&amp;,0xFFFFFFFE,sr,&amp;=,r%d,+,0,-,31,$b,sr,|,sr,=,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_NOT</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFF,r%d,^,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SWAPB</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,0xFFFF0000,&amp;,8,r%d,0xFF,&amp;,&lt;&lt;,|,8,r%d,0xFF00,&amp;,&gt;&gt;,|,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SWAPW</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"16,r%d,0xFFFF,&amp;,&lt;&lt;,16,r%d,0xFFFF0000,&amp;,&gt;&gt;,|,r%d,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_imm</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_im</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><operator>(</operator><name>st8</name><operator>)</operator><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,DUP,0x80,&amp;,?{,0xFFFFFF00,|,},r%d,+="</literal></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>first_nibble_is_8</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IS_BT_OR_BF</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>disarm_8bit_offset</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><call><name>GET_BTF_OFFSET</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">2</literal></expr> ;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_BT</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"sr,1,&amp;,?{,0x%x,pc,=,}"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_BTS</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,SETD,sr,1,&amp;,?{,0x%x,pc,=,}"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_BFS</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,SETD,sr,1,&amp;,!,?{,0x%x,pc,=,}"</literal></expr></argument>,<argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_BF</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"sr,1,&amp;,!,?{,0x%x,pc,=,}"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVB_REGDISP_R0</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_reg_disp_mem</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><name>BYTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,0x%x,+,[1],DUP,0x80,&amp;,?{,0xFFFFFF00,|,},r0,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVW_REGDISP_R0</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_reg_disp_mem</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r%d,0x%x,+,[2],DUP,0x8000,&amp;,?{,0xFFFF0000,|,},r0,="</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_CMPIMM</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,0x%x,DUP,0x80,&amp;,?{,0xFFFFFF00,|,},r0,==,$z,sr,|,sr,:="</literal></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVB_R0_REGDISP</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_reg_disp_mem</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><name>BYTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r0,0xFF,&amp;,0x%x,r%d,+,=[1]"</literal></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVW_R0_REGDISP</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_reg_disp_mem</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r0,0xFFFF,&amp;,0x%x,r%d,+,=[2]"</literal></expr></argument>, <argument><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GET_SOURCE_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>movw_pcdisp_reg</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_value_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>base</name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>+</operator><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>memref</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,[2],r%d,=,r%d,0x8000,&amp;,?{,0xFFFF0000,r%d,|=,}"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>base</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bra</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>disarm_12bit_offset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>GET_BRA_OFFSET</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,SETD,0x%x,pc,="</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bsr</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>disarm_12bit_offset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>GET_BRA_OFFSET</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"1,SETD,pc,2,+,pr,=,0x%x,pc,="</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>first_nibble_is_c</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IS_TRAP</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SWI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"4,r15,-=,sr,r15,=[4],4,r15,-=,2,pc,-,r15,=[4],2,0x%x,&lt;&lt;,4,+,vbr,+,pc,="</literal></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVA_PCREL_R0</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LEA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_pcrel_disp_mov</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>LONG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,pc,+,r0,="</literal></expr></argument>, <argument><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_BINLOGIC_IMM_R0</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_im</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<switch>switch<condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0xC800</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ACMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,r0,0x%x,&amp;,!,?{,1,sr,|=,}"</literal></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xC900</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,r0,&amp;="</literal></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xCA00</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,r0,^="</literal></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xCB00</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,r0,|="</literal></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_BINLOGIC_IMM_GBR</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_im</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0xCC00</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ACMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0xFFFFFFFE,sr,&amp;=,r0,gbr,+,[1],0x%x,&amp;,!,?{,1,sr,|=,}"</literal></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xCD00</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r0,gbr,+,[1],0x%x,&amp;,r0,gbr,+,=[1]"</literal></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xCE00</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r0,gbr,+,[1],0x%x,^,r0,gbr,+,=[1]"</literal></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xCF00</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r0,gbr,+,[1],0x%x,|,r0,gbr,+,=[1]"</literal></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVB_R0_GBRREF</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r0,gbr,0x%x,+,=[1]"</literal></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVW_R0_GBRREF</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r0,gbr,0x%x,+,=[2]"</literal></expr></argument>, <argument><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVL_R0_GBRREF</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"r0,gbr,0x%x,+,=[4]"</literal></expr></argument>, <argument><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVB_GBRREF_R0</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"gbr,0x%x,+,[1],DUP,0x80,&amp;,?{,0xFFFFFF00,|,},r0,="</literal></expr></argument>, <argument><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVW_GBRREF_R0</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"gbr,0x%x,+,[2],DUP,0x8000,&amp;,?{,0xFFFF0000,|,},r0,="</literal></expr></argument>, <argument><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_MOVL_GBRREF_R0</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"gbr,0x%x,+,[4],r0,="</literal></expr></argument>, <argument><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>movl_pcdisp_reg</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_pcrel_disp_mov</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>LONG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,[4],r%d,="</literal></expr></argument>, <argument><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_imm_reg</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>anal_fill_ai_rg</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>anal_fill_im</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><operator>(</operator><name>st8</name><operator>)</operator><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_setf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x,r%d,=,r%d,0x80,&amp;,?{,0xFFFFFF00,r%d,|=,}"</literal></expr></argument>, <argument><expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_TARGET_REG</name> <argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fpu_insn</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>R_ANAL_OP_FAMILY_FPU</name></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>first_nibble_decode</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>RAnalOp</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>ut16</name></type></decl></parameter>)</parameter_list> <init>= <expr><block>{

<expr><name>first_nibble_is_0</name></expr></block></expr></init><operator>,</operator>

movl_reg_rdisp<operator>,</operator>

first_nibble_is_2<operator>,</operator>

first_nibble_is_3<operator>,</operator>

first_nibble_is_4<operator>,</operator>

movl_rdisp_reg<operator>,</operator>

first_nibble_is_6<operator>,</operator>

add_imm<operator>,</operator>

first_nibble_is_8<operator>,</operator>

movw_pcdisp_reg<operator>,</operator>

bra<operator>,</operator>

bsr<operator>,</operator>

first_nibble_is_c<operator>,</operator>

movl_pcdisp_reg<operator>,</operator>

mov_imm_reg<operator>,</operator>

fpu_insn</function_decl>

};

<function><type><specifier>static</specifier> <name>int</name></type> <name>sh_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>op_MSB</name></decl>, <decl><type ref="prev"/><name>op_LSB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>op_MSB</name> <operator>=</operator> <ternary><condition><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></then><else>: <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>op_LSB</name> <operator>=</operator> <ternary><condition><expr><name><name>anal</name><operator>-&gt;</operator><name>big_endian</name></name></expr>?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></then><else>: <expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>first_nibble_decode</name><index>[<expr><operator>(</operator><name>op_MSB</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>]</index></name><operator>(</operator><name>anal</name><operator>,</operator> <name>op</name><operator>,</operator> <operator>(</operator><name>ut16</name><operator>)</operator><operator>(</operator><name>op_MSB</name><operator>&lt;&lt;</operator><literal type="number">8</literal> <operator>|</operator> <name>op_LSB</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sh_set_reg_profile</name><parameter_list>(<parameter><decl><type><name>RAnal</name><modifier>*</modifier></type> <name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>=

<expr><literal type="string">"=PC pc\n"</literal>

<literal type="string">"=SN r0\n"</literal>

<literal type="string">"=SP r15\n"</literal>

<literal type="string">"=BP r14\n"</literal>

<literal type="string">"=A0 r4\n"</literal>

<literal type="string">"=A1 r5\n"</literal>

<literal type="string">"=A2 r6\n"</literal>

<literal type="string">"=A3 r7\n"</literal>

<literal type="string">"=R0 r0\n"</literal>

<literal type="string">"gpr r0 .32 0 0\n"</literal>

<literal type="string">"gpr r1 .32 4 0\n"</literal>

<literal type="string">"gpr r2 .32 8 0\n"</literal>

<literal type="string">"gpr r3 .32 12 0\n"</literal>

<literal type="string">"gpr r4 .32 16 0\n"</literal>

<literal type="string">"gpr r5 .32 20 0\n"</literal>

<literal type="string">"gpr r6 .32 24 0\n"</literal>

<literal type="string">"gpr r7 .32 28 0\n"</literal>

<literal type="string">"gpr r8 .32 32 0\n"</literal>

<literal type="string">"gpr r9 .32 36 0\n"</literal>

<literal type="string">"gpr r10 .32 40 0\n"</literal>

<literal type="string">"gpr r11 .32 44 0\n"</literal>

<literal type="string">"gpr r12 .32 48 0\n"</literal>

<literal type="string">"gpr r13 .32 52 0\n"</literal>

<literal type="string">"gpr r14 .32 56 0\n"</literal>

<literal type="string">"gpr r15 .32 60 0\n"</literal>

<literal type="string">"gpr pc .32 64 0\n"</literal>

<literal type="string">"gpr pr .32 68 0\n"</literal>

<literal type="string">"gpr sr .32 72 0\n"</literal>

<literal type="string">"gpr gbr .32 76 0\n"</literal>

<literal type="string">"gpr vbr .32 80 0\n"</literal>

<literal type="string">"gpr mach .32 84 0\n"</literal>

<literal type="string">"gpr macl .32 88 0\n"</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_reg_set_profile_string</name><argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>archinfo</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (q == R_ANAL_ARCHINFO_ALIGN) {

return 4;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">2</literal></expr>;</return> 

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_sh</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sh"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"SH-4 code analysis plugin"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"sh"</literal></expr>,

<expr><operator>.</operator><name>archinfo</name> <operator>=</operator> <name>archinfo</name></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,

<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>sh_op</name></expr>,

<expr><operator>.</operator><name>set_reg_profile</name> <operator>=</operator> <operator>&amp;</operator><name>sh_set_reg_profile</name></expr>,

<expr><operator>.</operator><name>esil</name> <operator>=</operator> <name>true</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_sh</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
