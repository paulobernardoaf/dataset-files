<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\p\anal_xap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../asm/arch/xap/dis.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>label_off</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>directive</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>d_operand</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lame</name> <init>= <expr><name>off</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>d_prefix</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name>off</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>d_prefix</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><name>off</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>-=</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>off</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&amp;</operator> <literal type="number">0x800000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>|=</operator> <literal type="number">0xff000000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>-=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>-=</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>d</name><operator>-&gt;</operator><name>d_off</name></name> <operator>+</operator> <name>off</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut16</name></type> <name>i2ut16</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>instruction</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>in</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xap_op</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RAnalOpMask</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>instruction</name></name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator>struct <name>instruction</name> <operator>*</operator><operator>)</operator><name>bytes</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>lol</name></decl>, <decl><type ref="prev"/><name>ins</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>directive</name></name></type> <name>d</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>state</name></name></type> <name>s</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anal</name> <operator>||</operator> <operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ins</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>lol</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>s_buf</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>s_off</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>s_out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>s_prefix</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>directive</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>d_inst</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>s_buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>d_inst</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>s_off</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>.</operator><name>d_off</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>s_off</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xap_decode</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>.</operator><name>d_operand</name></name> <operator>=</operator> <call><name>get_operand</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalOp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_UNK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>i2ut16</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>INST_NOP</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_NOP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INST_BRK</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INST_BC</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INST_BRXL</name></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_TRAP</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<switch>switch <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>in_opcode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<switch>switch <condition>(<expr><name>lol</name><operator>&amp;</operator><literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<case>case <expr><literal type="number">0xa</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<case>case <expr><literal type="number">0xe</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_POP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_PUSH</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case>

<switch>switch<condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>in_reg</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_DIV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>label_off</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0xb</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_OR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xc</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xd</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_XOR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xe</literal></expr>:</case>

<switch>switch <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>in_reg</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_JMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>label_off</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>label_off</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>label_off</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>label_off</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0xf</literal></expr>:</case>

<switch>switch <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>in_reg</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <call><name>label_off</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>jump</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>addr</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAnalPlugin</name></type> <name>r_anal_plugin_xap</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"xap"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"XAP code analysis plugin"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"xap"</literal></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">16</literal></expr>,

<expr><operator>.</operator><name>op</name> <operator>=</operator> <operator>&amp;</operator><name>xap_op</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ANAL</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_anal_plugin_xap</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
