<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\esil_dfg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>esil_dfg_reg_var_t</name> <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>from</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>to</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

}</block></struct></type> <name>EsilDFGRegVar</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_anal_esil_dfg_filter_t</name> <block>{

<decl_stmt><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>dfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RContRBTree</name> <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>results</name></decl>;</decl_stmt>

}</block></struct></type> <name>RAnalEsilDFGFilter</name>;</typedef>

<function><type><name>R_API</name> <name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>r_anal_esil_dfg_node_new</name><parameter_list>(<parameter><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>edf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalEsilDFGNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <call><name>r_strbuf_new</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name><name>edf</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_dfg_node_free</name> <parameter_list>(<parameter><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>free_me</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>free_me</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name><name>free_me</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>free_me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_rv_del_alloc_cmp</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>EsilDFGRegVar</name> <modifier>*</modifier></type><name>rv_incoming</name> <init>= <expr><operator>(</operator><name>EsilDFGRegVar</name> <operator>*</operator><operator>)</operator><name>incoming</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EsilDFGRegVar</name> <modifier>*</modifier></type><name>rv_in</name> <init>= <expr><operator>(</operator><name>EsilDFGRegVar</name> <operator>*</operator><operator>)</operator><name>in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>dfg</name> <init>= <expr><operator>(</operator><name>RAnalEsilDFG</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rv_incoming</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>from</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rv_in</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>from</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rv_in</name><operator>-&gt;</operator><name>from</name></name> <operator>==</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>from</name></name> <operator>&amp;&amp;</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>to</name></name> <operator>==</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rv_in</name><operator>-&gt;</operator><name>from</name></name> <operator>&lt;</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>from</name></name> <operator>&amp;&amp;</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>EsilDFGRegVar</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>EsilDFGRegVar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rv_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv_in</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>from</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>to</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>insert</name></name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rv_incoming</name><operator>-&gt;</operator><name>from</name></name> <operator>&lt;</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>from</name></name> <operator>&amp;&amp;</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>EsilDFGRegVar</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>EsilDFGRegVar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rv_incoming</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>from</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_queue_enqueue</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr><name>EsilDFGRegVar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rv_incoming</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>to</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_queue_enqueue</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rv_incoming</name><operator>-&gt;</operator><name>from</name></name> <operator>==</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>from</name></name> <operator>&amp;&amp;</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>EsilDFGRegVar</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>EsilDFGRegVar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rv_incoming</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>to</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_queue_enqueue</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rv_incoming</name><operator>-&gt;</operator><name>from</name></name> <operator>&lt;</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>from</name></name> <operator>&amp;&amp;</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>to</name></name> <operator>==</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>EsilDFGRegVar</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>EsilDFGRegVar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rv_incoming</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>from</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_queue_enqueue</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rv_in</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;=</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rv_in</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>from</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rv_in</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>to</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_rv_ins_cmp</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>EsilDFGRegVar</name> <modifier>*</modifier></type><name>rv_incoming</name> <init>= <expr><operator>(</operator><name>EsilDFGRegVar</name> <operator>*</operator><operator>)</operator><name>incoming</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EsilDFGRegVar</name> <modifier>*</modifier></type><name>rv_in</name> <init>= <expr><operator>(</operator><name>EsilDFGRegVar</name> <operator>*</operator><operator>)</operator><name>in</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>rv_incoming</name><operator>-&gt;</operator><name>from</name></name> <operator>-</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>from</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_edf_reg_set</name> <parameter_list>(<parameter><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>dfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>dfg</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name> <operator>&amp;&amp;</operator> <name>reg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>_reg_strlen</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_reg</name> <init>= <expr><call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>_reg_strlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_reg</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>_reg</name></expr></argument>, <argument><expr><literal type="string">"reg."</literal></expr></argument>, <argument><expr><name>_reg_strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>_reg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>_reg_strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdb_num_exists</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>, <argument><expr><name>_reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>EsilDFGRegVar</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>EsilDFGRegVar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>v</name> <init>= <expr><call><name>sdb_num_get</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>, <argument><expr><name>_reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>(</operator><name>UT64_MAX</name> <operator>^</operator> <name>UT32_MAX</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <name>UT32_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_queue_enqueue</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>r_queue_is_empty</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>r_queue_dequeue</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_rbtree_cont_delete</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>reg_vars</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>_rv_del_alloc_cmp</name></expr></argument>, <argument><expr><name>dfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dfg</name><operator>-&gt;</operator><name>insert</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_rbtree_cont_insert</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>reg_vars</name></name></expr></argument>, <argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>insert</name></name></expr></argument>, <argument><expr><name>_rv_ins_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>insert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>r_queue_is_empty</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>r_queue_dequeue</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>EsilDFGRegVar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>(</operator><name>UT64_MAX</name> <operator>^</operator> <name>UT32_MAX</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <name>UT32_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_rbtree_cont_insert</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>reg_vars</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>_rv_ins_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_rv_find_cmp</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>EsilDFGRegVar</name> <modifier>*</modifier></type><name>rv_incoming</name> <init>= <expr><operator>(</operator><name>EsilDFGRegVar</name> <operator>*</operator><operator>)</operator><name>incoming</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EsilDFGRegVar</name> <modifier>*</modifier></type><name>rv_in</name> <init>= <expr><operator>(</operator><name>EsilDFGRegVar</name> <operator>*</operator><operator>)</operator><name>in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>dfg</name> <init>= <expr><operator>(</operator><name>RAnalEsilDFG</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rv_incoming</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>from</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rv_in</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>from</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rv_in</name><operator>-&gt;</operator><name>from</name></name> <operator>&lt;=</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>from</name></name> <operator>&amp;&amp;</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;=</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rv_incoming</name><operator>-&gt;</operator><name>from</name></name> <operator>&lt;</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>from</name></name> <operator>&amp;&amp;</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>EsilDFGRegVar</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>EsilDFGRegVar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rv_incoming</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>from</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_queue_enqueue</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr><name>EsilDFGRegVar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rv_incoming</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>to</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_queue_enqueue</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rv_in</name><operator>-&gt;</operator><name>from</name></name> <operator>&lt;=</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>from</name></name> <operator>&amp;&amp;</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;</operator> <name><name>rv_incoming</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>EsilDFGRegVar</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>EsilDFGRegVar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rv_incoming</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>to</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_queue_enqueue</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>EsilDFGRegVar</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>EsilDFGRegVar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rv_incoming</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name><name>rv_in</name><operator>-&gt;</operator><name>from</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_queue_enqueue</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RGraphNode</name> <modifier>*</modifier></type><name>_edf_origin_reg_get</name><parameter_list>(<parameter><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>dfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>dfg</name> <operator>&amp;&amp;</operator> <name>reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>_reg_strlen</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_reg</name> <init>= <expr><call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>_reg_strlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_reg</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>_reg</name></expr></argument>, <argument><expr><literal type="string">"reg."</literal></expr></argument>, <argument><expr><name>_reg_strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>_reg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>_reg_strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdb_num_exists</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>, <argument><expr><name>_reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>origin_reg_strlen</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>origin_reg</name> <init>= <expr><call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>origin_reg_strlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>origin_reg</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>origin_reg</name></expr></argument>, <argument><expr><literal type="string">"ori."</literal></expr></argument>, <argument><expr><name>origin_reg_strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>origin_reg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>origin_reg_strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>origin_reg_node</name> <init>= <expr><call><name>sdb_ptr_get</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>, <argument><expr><name>origin_reg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>origin_reg_node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>origin_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>origin_reg_node</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>reg_node</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>dfg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>_origin_reg_node</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>dfg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>_origin_reg_node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">":var_%d"</literal></expr></argument>, <argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>_origin_reg_node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_ESIL_DFG_BLOCK_VAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>origin_reg_node</name> <operator>=</operator> <call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>_origin_reg_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>reg_node</name></expr></argument>, <argument><expr><name>origin_reg_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>, <argument><expr><name>origin_reg</name></expr></argument>, <argument><expr><name>origin_reg_node</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>origin_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>origin_reg_node</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RGraphNode</name> <modifier>*</modifier></type><name>_edf_reg_get</name><parameter_list>(<parameter><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>dfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>dfg</name> <operator>&amp;&amp;</operator> <name>reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>_reg_strlen</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_reg</name> <init>= <expr><call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>_reg_strlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_reg</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>_reg</name></expr></argument>, <argument><expr><literal type="string">"reg."</literal></expr></argument>, <argument><expr><name>_reg_strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>_reg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>_reg_strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdb_num_exists</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>, <argument><expr><name>_reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>EsilDFGRegVar</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>EsilDFGRegVar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>v</name> <init>= <expr><call><name>sdb_num_get</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>, <argument><expr><name>_reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>(</operator><name>UT64_MAX</name> <operator>^</operator> <name>UT32_MAX</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <name>UT32_MAX</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RQueue</name> <modifier>*</modifier></type><name>parts</name> <init>= <expr><call><name>r_queue_new</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_queue_enqueue</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>reg_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>r_queue_is_empty</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>r_queue_dequeue</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>EsilDFGRegVar</name> <modifier>*</modifier></type><name>part_rv</name> <init>= <expr><call><name>r_rbtree_cont_find</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>reg_vars</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>_rv_find_cmp</name></expr></argument>, <argument><expr><name>dfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>part_rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_queue_enqueue</name> <argument_list>(<argument><expr><name>parts</name></expr></argument>, <argument><expr><name><name>part_rv</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>reg_node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>reg_node</name> <operator>=</operator> <call><name>_edf_origin_reg_get</name> <argument_list>(<argument><expr><name>dfg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>part_rv</name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr><name>EsilDFGRegVar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>part_rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>part_rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>part_rv</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>reg_node</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_rbtree_cont_insert</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>reg_vars</name></name></expr></argument>, <argument><expr><name>part_rv</name></expr></argument>, <argument><expr><name>_rv_ins_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_queue_enqueue</name> <argument_list>(<argument><expr><name>parts</name></expr></argument>, <argument><expr><name>reg_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>part_rv</name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr><name>EsilDFGRegVar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>part_rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>part_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>part_rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>part_rv</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>reg_node</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_rbtree_cont_insert</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>reg_vars</name></name></expr></argument>, <argument><expr><name>part_rv</name></expr></argument>, <argument><expr><name>_rv_ins_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>reg_node</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>r_queue_is_empty</name><argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>r_queue_dequeue</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>parts</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>reg_node</name> <operator>=</operator> <call><name>r_queue_dequeue</name> <argument_list>(<argument><expr><name>parts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<block>{<block_content>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>_reg_node</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>dfg</name></expr></argument>, <argument><expr><literal type="string">"merge to "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_reg_node</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>r_queue_is_empty</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>r_queue_dequeue</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>_reg_node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">"%s:var_%d"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reg_node</name> <operator>=</operator> <call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>_reg_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg_node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_dfg_node_free</name> <argument_list>(<argument><expr><name>_reg_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>r_queue_is_empty</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>r_queue_dequeue</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>malloc_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><call><name>r_queue_dequeue</name><argument_list>(<argument><expr><name>parts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reg_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>r_queue_is_empty</name> <argument_list>(<argument><expr><name>parts</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<break>break;</break>

</block_content>}</block></switch>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>r_queue_free</name> <argument_list>(<argument><expr><name>parts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>reg_node</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_edf_var_set</name> <parameter_list>(<parameter><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>dfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>dfg</name> <operator>&amp;&amp;</operator> <name>var</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>_var_strlen</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_var</name> <init>= <expr><call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>_var_strlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_var</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>_var</name></expr></argument>, <argument><expr><literal type="string">"var."</literal></expr></argument>, <argument><expr><name>_var_strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>_var</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>_var_strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>ret</name> <init>= <expr><operator>!</operator><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>, <argument><expr><name>_var</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RGraphNode</name> <modifier>*</modifier></type><name>_edf_var_get</name> <parameter_list>(<parameter><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>dfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>dfg</name> <operator>&amp;&amp;</operator> <name>var</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>_var_strlen</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_var</name> <init>= <expr><call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>_var_strlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_var</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>_var</name></expr></argument>, <argument><expr><literal type="string">"var."</literal></expr></argument>, <argument><expr><name>_var_strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>_var</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>_var_strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>sdb_ptr_get</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>, <argument><expr><name>_var</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>edf_consume_2_set_reg</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>edf_consume_2_push_1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>edf_consume_1_push_1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>AddConstraintStringUseNewCB</name>) <parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_node_str</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>edf_use_new_push_1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op_string</name></decl></parameter>, <parameter><decl><type><name>AddConstraintStringUseNewCB</name></type> <name>cb</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>AddConstraintStringConsume1UseOldNewCB</name>) <parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>consume_str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_node_str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_node_str</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>edf_consume_1_use_old_new_push_1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op_string</name></decl></parameter>, <parameter><decl><type><name>AddConstraintStringConsume1UseOldNewCB</name></type> <name>cb</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>edf_eq_weak</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>edf</name> <init>= <expr><operator>(</operator><name>RAnalEsilDFG</name> <operator>*</operator><operator>)</operator><name><name>esil</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>o_old</name> <init>= <expr><name><name>edf</name><operator>-&gt;</operator><name>old</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>o_new</name> <init>= <expr><name><name>edf</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>edf_consume_2_set_reg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>edf</name><operator>-&gt;</operator><name>old</name></name> <operator>=</operator> <ternary><condition><expr><name>o_old</name></expr> ?</condition><then> <expr><name>o_old</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>edf</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <ternary><condition><expr><name>o_new</name></expr> ?</condition><then> <expr><name>o_new</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>edf_zf_constraint</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_node_str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">":(%s==0)"</literal></expr></argument>, <argument><expr><name>new_node_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>edf_zf</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>edf_use_new_push_1</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"$z"</literal></expr></argument>, <argument><expr><name>edf_zf_constraint</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>edf_pf_constraint</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_node_str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">":parity_of(%s)"</literal></expr></argument>, <argument><expr><name>new_node_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>edf_pf</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>edf_use_new_push_1</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"$p"</literal></expr></argument>, <argument><expr><name>edf_pf_constraint</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>edf_cf_constraint</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>consume</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">":((%s&amp;mask(%s&amp;0x3f))&lt;(%s&amp;mask(%s&amp;0x3f)))"</literal></expr></argument>,

<argument><expr><name>n</name></expr></argument>, <argument><expr><name>consume</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>consume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>edf_cf</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>edf_consume_1_use_old_new_push_1</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"$c"</literal></expr></argument>, <argument><expr><name>edf_cf_constraint</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>edf_bf_constraint</name><parameter_list>(<parameter><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>consume</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">":((%s&amp;mask((%s+0x3f)&amp;0x3f))&lt;(%s&amp; mask((%s+0x3f)&amp;0x3f)))"</literal></expr></argument>,

<argument><expr><name>o</name></expr></argument>, <argument><expr><name>consume</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>consume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>edf_bf</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>edf_consume_1_use_old_new_push_1</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"$b"</literal></expr></argument>, <argument><expr><name>edf_bf_constraint</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_edf_consume_2_set_reg</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>use_origin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op_string</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>current_opstr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>edf</name> <init>= <expr><operator>(</operator><name>RAnalEsilDFG</name> <operator>*</operator><operator>)</operator><name><name>esil</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>r_anal_esil_pop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>r_anal_esil_pop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name> <operator>||</operator> <operator>!</operator><name>dst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_type</name> <init>= <expr><call><name>r_anal_esil_get_parm_type</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_type</name> <operator>==</operator> <name>R_ANAL_ESIL_PARM_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_type</name> <init>= <expr><call><name>r_anal_esil_get_parm_type</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>src_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src_type</name> <operator>==</operator> <name>R_ANAL_ESIL_PARM_REG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src_node</name> <operator>=</operator> <call><name>_edf_reg_get</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src_type</name> <operator>==</operator> <name>R_ANAL_ESIL_PARM_NUM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n_value</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>ec_node</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ec_node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_ESIL_DFG_BLOCK_CONST</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>ec_node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">":const_%d"</literal></expr></argument>, <argument><expr><name><name>edf</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_node</name> <operator>=</operator> <call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>ec_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>n_value</name></expr></argument>, <argument><expr><name>src_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>src_node</name> <operator>=</operator> <call><name>_edf_var_get</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>dst_node</name> <init>= <expr><ternary><condition><expr><name>use_origin</name></expr> ?</condition><then> <expr><call><name>_edf_origin_reg_get</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_edf_reg_get</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>old_dst_node</name> <init>= <expr><name>dst_node</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src_node</name> <operator>||</operator> <operator>!</operator><name>dst_node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>eop_node</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>eop_node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">",%s,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>op_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eop_node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_ESIL_DFG_BLOCK_GENERATIVE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>op_node</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>eop_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>dst_node</name></expr></argument>, <argument><expr><name>op_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>src_node</name></expr></argument>, <argument><expr><name>op_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>edf</name><operator>-&gt;</operator><name>old</name></name> <operator>=</operator> <name>old_dst_node</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_ESIL_DFG_BLOCK_RESULT</name> <operator>|</operator> <name>R_ANAL_ESIL_DFG_BLOCK_VAR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">":var_%d"</literal></expr></argument>, <argument><expr><name><name>edf</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_node</name> <operator>=</operator> <call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>op_node</name></expr></argument>, <argument><expr><name>dst_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_edf_reg_set</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>edf</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>dst_node</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>edf_consume_2_use_set_reg</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>_edf_consume_2_set_reg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>edf_consume_2_set_reg</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>_edf_consume_2_set_reg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>edf_consume_2_push_1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op_string</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>current_opstr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>edf</name> <init>= <expr><operator>(</operator><name>RAnalEsilDFG</name> <operator>*</operator><operator>)</operator><name><name>esil</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><call><name>r_anal_esil_pop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>, <macro><name>r_anal_esil_pop</name> <argument_list>(<argument>esil</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>eop_node</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>eop_node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">",%s,%s"</literal></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>op_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eop_node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_ESIL_DFG_BLOCK_RESULT</name> <operator>|</operator> <name>R_ANAL_ESIL_DFG_BLOCK_GENERATIVE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>op_node</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>eop_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name><name>src_node</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_type</name> <init>= <expr><call><name>r_anal_esil_get_parm_type</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src_type</name> <operator>==</operator> <name>R_ANAL_ESIL_PARM_REG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>src_node</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>_edf_reg_get</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src_type</name> <operator>==</operator> <name>R_ANAL_ESIL_PARM_NUM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n_value</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>ec_node</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ec_node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_ESIL_DFG_BLOCK_CONST</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>ec_node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">":const_%d"</literal></expr></argument>, <argument><expr><name><name>edf</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_node</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>ec_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>n_value</name></expr></argument>, <argument><expr><name><name>src_node</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>src_node</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>_edf_var_get</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name><name>src_node</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>op_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><literal type="string">"result_"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_ESIL_DFG_BLOCK_RESULT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>edf</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>result_node</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>op_node</name></expr></argument>, <argument><expr><name>result_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_edf_var_set</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_push</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>edf_consume_1_push_1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op_string</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>current_opstr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>edf</name> <init>= <expr><operator>(</operator><name>RAnalEsilDFG</name> <operator>*</operator><operator>)</operator><name><name>esil</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>r_anal_esil_pop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>eop_node</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>eop_node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">",%s"</literal></expr></argument>, <argument><expr><name>op_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eop_node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_ESIL_DFG_BLOCK_RESULT</name> <operator>|</operator> <name>R_ANAL_ESIL_DFG_BLOCK_GENERATIVE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>op_node</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>eop_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_type</name> <init>= <expr><call><name>r_anal_esil_get_parm_type</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>src_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src_type</name> <operator>==</operator> <name>R_ANAL_ESIL_PARM_REG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src_node</name> <operator>=</operator> <call><name>_edf_reg_get</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src_type</name> <operator>==</operator> <name>R_ANAL_ESIL_PARM_NUM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n_value</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>ec_node</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ec_node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_ESIL_DFG_BLOCK_CONST</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>ec_node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">":const_%d"</literal></expr></argument>, <argument><expr><name><name>edf</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_node</name> <operator>=</operator> <call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>ec_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>n_value</name></expr></argument>, <argument><expr><name>src_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>src_node</name> <operator>=</operator> <call><name>_edf_var_get</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>src_node</name></expr></argument>, <argument><expr><name>op_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><literal type="string">"result_"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_ESIL_DFG_BLOCK_RESULT</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>edf</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>result_node</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>op_node</name></expr></argument>, <argument><expr><name>result_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_edf_var_set</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_push</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>edf_consume_2_set_mem</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op_string</name> <init>= <expr><name><name>esil</name><operator>-&gt;</operator><name>current_opstr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>edf</name> <init>= <expr><operator>(</operator><name>RAnalEsilDFG</name> <operator>*</operator><operator>)</operator><name><name>esil</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>r_anal_esil_pop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>r_anal_esil_pop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name> <operator>||</operator> <operator>!</operator><name>dst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_type</name> <init>= <expr><call><name>r_anal_esil_get_parm_type</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_type</name> <init>= <expr><call><name>r_anal_esil_get_parm_type</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>src_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src_type</name> <operator>==</operator> <name>R_ANAL_ESIL_PARM_REG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src_node</name> <operator>=</operator> <call><name>_edf_reg_get</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src_type</name> <operator>==</operator> <name>R_ANAL_ESIL_PARM_NUM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n_value</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>ec_node</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ec_node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_ESIL_DFG_BLOCK_CONST</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>ec_node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">":const_%d"</literal></expr></argument>, <argument><expr><name><name>edf</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_node</name> <operator>=</operator> <call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>ec_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>n_value</name></expr></argument>, <argument><expr><name>src_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>src_node</name> <operator>=</operator> <call><name>_edf_var_get</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>dst_node</name> <init>= <expr><call><name>_edf_reg_get</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dst_node</name> <operator>=</operator> <call><name>_edf_var_get</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_node</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dst_type</name> <operator>==</operator> <name>R_ANAL_ESIL_PARM_REG</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n_reg</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>ev_node</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ev_node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_ESIL_DFG_BLOCK_VAR</name> <operator>|</operator> <name>R_ANAL_ESIL_DFG_BLOCK_PTR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>ev_node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">":var_ptr_%d"</literal></expr></argument>, <argument><expr><name><name>edf</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_node</name> <operator>=</operator> <call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>ev_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>n_reg</name></expr></argument>, <argument><expr><name>dst_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src_node</name> <operator>||</operator> <operator>!</operator><name>dst_node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>eop_node</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>eop_node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">",%s,%s"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>op_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eop_node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_ESIL_DFG_BLOCK_GENERATIVE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>op_node</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>eop_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>dst_node</name></expr></argument>, <argument><expr><name>op_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>src_node</name></expr></argument>, <argument><expr><name>op_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_ESIL_DFG_BLOCK_VAR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">":var_mem_%d"</literal></expr></argument>, <argument><expr><name><name>edf</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_node</name> <operator>=</operator> <call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>op_node</name></expr></argument>, <argument><expr><name>dst_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>edf_use_new_push_1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op_string</name></decl></parameter>, <parameter><decl><type><name>AddConstraintStringUseNewCB</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>edf</name> <init>= <expr><operator>(</operator><name>RAnalEsilDFG</name> <operator>*</operator><operator>)</operator><name><name>esil</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>op_node</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>op_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>latest_new</name> <init>= <expr><name><name>edf</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>latest_new</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><literal type="string">"result_"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_ESIL_DFG_BLOCK_RESULT</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>edf</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>e_new_node</name> <init>= <expr><operator>(</operator><name>RAnalEsilDFGNode</name> <operator>*</operator><operator>)</operator><name><name>latest_new</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cb</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>e_new_node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>result_node</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_edf_var_set</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>latest_new</name></expr></argument>, <argument><expr><name>op_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>op_node</name></expr></argument>, <argument><expr><name>result_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_anal_esil_push</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>edf_consume_1_use_old_new_push_1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op_string</name></decl></parameter>, <parameter><decl><type><name>AddConstraintStringConsume1UseOldNewCB</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>edf</name> <init>= <expr><operator>(</operator><name>RAnalEsilDFG</name> <operator>*</operator><operator>)</operator><name><name>esil</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>r_anal_esil_pop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>eop_node</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

eop_node-&gt;type = R_ANAL_ESIL_DFG_BLOCK_GENERATIVE;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>eop_node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">",%s"</literal></expr></argument>, <argument><expr><name>op_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>op_node</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>eop_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_type</name> <init>= <expr><call><name>r_anal_esil_get_parm_type</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>src_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src_type</name> <operator>==</operator> <name>R_ANAL_ESIL_PARM_REG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src_node</name> <operator>=</operator> <call><name>_edf_reg_get</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src_type</name> <operator>==</operator> <name>R_ANAL_ESIL_PARM_NUM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n_value</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>ec_node</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ec_node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_ESIL_DFG_BLOCK_CONST</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>ec_node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">":const_%d"</literal></expr></argument>, <argument><expr><name><name>edf</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_node</name> <operator>=</operator> <call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>ec_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>n_value</name></expr></argument>, <argument><expr><name>src_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>src_node</name> <operator>=</operator> <call><name>_edf_var_get</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>src_node</name></expr></argument>, <argument><expr><name>op_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>latest_new</name> <init>= <expr><name><name>edf</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>latest_old</name> <init>= <expr><name><name>edf</name><operator>-&gt;</operator><name>old</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>r_anal_esil_dfg_node_new</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><literal type="string">"result_"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_ANAL_ESIL_DFG_BLOCK_RESULT</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>edf</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>e_src_node</name> <init>= <expr><operator>(</operator><name>RAnalEsilDFGNode</name> <operator>*</operator><operator>)</operator><name><name>src_node</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>e_new_node</name> <init>= <expr><operator>(</operator><name>RAnalEsilDFGNode</name> <operator>*</operator><operator>)</operator><name><name>latest_new</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>e_old_node</name> <init>= <expr><operator>(</operator><name>RAnalEsilDFGNode</name> <operator>*</operator><operator>)</operator><name><name>latest_old</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cb</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>e_src_node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>e_new_node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>e_old_node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>result_node</name> <init>= <expr><call><name>r_graph_add_node</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_edf_var_set</name> <argument_list>(<argument><expr><name>edf</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>latest_new</name></expr></argument>, <argument><expr><name>op_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>latest_old</name></expr></argument>, <argument><expr><name>op_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name><name>edf</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>op_node</name></expr></argument>, <argument><expr><name>result_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_anal_esil_push</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>r_anal_esil_dfg_new</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>regs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>regs</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>dfg</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalEsilDFG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dfg</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>flow</name></name> <operator>=</operator> <call><name>r_graph_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dfg</name><operator>-&gt;</operator><name>flow</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>regs</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dfg</name><operator>-&gt;</operator><name>regs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_graph_free</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name> <operator>=</operator> <call><name>r_queue_new</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_free</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dfg</name><operator>-&gt;</operator><name>reg_vars</name></name> <operator>=</operator> <call><name>r_rbtree_cont_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dfg</name><operator>-&gt;</operator><name>reg_vars</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_queue_free</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_free</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>ator</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>regs-&gt;allregs</argument>, <argument>ator</argument>, <argument>ri</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>from</name> <init>= <expr><name><name>ri</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>to</name> <init>= <expr><name>from</name> <operator>+</operator> <name><name>ri</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>v</name> <init>= <expr><name>to</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name>from</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>reg_strlen</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>reg_strlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"reg."</literal></expr></argument>, <argument><expr><name>reg_strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>reg_strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>dfg</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_esil_dfg_free</name><parameter_list>(<parameter><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>dfg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dfg</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dfg</name><operator>-&gt;</operator><name>flow</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>r_graph_get_nodes (dfg-&gt;flow)</argument>, <argument>iter</argument>, <argument>n</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><name>RListFree</name><operator>)</operator><name>_dfg_node_free</name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_graph_free</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_rbtree_cont_free</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>reg_vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_queue_free</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>todo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>r_anal_esil_dfg_expr</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>dfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>expr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name> <init>= <expr><call><name>r_anal_esil_new</name> <argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>esil</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name></name> <operator>=</operator> <name>anal</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>edf</name> <init>= <expr><ternary><condition><expr><name>dfg</name></expr> ?</condition><then> <expr><name>dfg</name></expr> </then><else>: <expr><call><name>r_anal_esil_dfg_new</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>edf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_esil_free</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><name>edf_consume_2_set_reg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_REG_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">":="</literal></expr></argument>, <argument><expr><name>edf_eq_weak</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_REG_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"$z"</literal></expr></argument>, <argument><expr><name>edf_zf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"$p"</literal></expr></argument>, <argument><expr><name>edf_pf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"$c"</literal></expr></argument>, <argument><expr><name>edf_cf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"$b"</literal></expr></argument>, <argument><expr><name>edf_bf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"^="</literal></expr></argument>, <argument><expr><name>edf_consume_2_use_set_reg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name> <operator>|</operator> <name>R_ANAL_ESIL_OP_TYPE_REG_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"-="</literal></expr></argument>, <argument><expr><name>edf_consume_2_use_set_reg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name> <operator>|</operator> <name>R_ANAL_ESIL_OP_TYPE_REG_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"+="</literal></expr></argument>, <argument><expr><name>edf_consume_2_use_set_reg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name> <operator>|</operator> <name>R_ANAL_ESIL_OP_TYPE_REG_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"*="</literal></expr></argument>, <argument><expr><name>edf_consume_2_use_set_reg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name> <operator>|</operator> <name>R_ANAL_ESIL_OP_TYPE_REG_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"/="</literal></expr></argument>, <argument><expr><name>edf_consume_2_use_set_reg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name> <operator>|</operator> <name>R_ANAL_ESIL_OP_TYPE_REG_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&amp;="</literal></expr></argument>, <argument><expr><name>edf_consume_2_use_set_reg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name> <operator>|</operator> <name>R_ANAL_ESIL_OP_TYPE_REG_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"|="</literal></expr></argument>, <argument><expr><name>edf_consume_2_use_set_reg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name> <operator>|</operator> <name>R_ANAL_ESIL_OP_TYPE_REG_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"^="</literal></expr></argument>, <argument><expr><name>edf_consume_2_use_set_reg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name> <operator>|</operator> <name>R_ANAL_ESIL_OP_TYPE_REG_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>edf_consume_2_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>edf_consume_2_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>, <argument><expr><name>edf_consume_2_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>, <argument><expr><name>edf_consume_2_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>edf_consume_2_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"%"</literal></expr></argument>, <argument><expr><name>edf_consume_2_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><name>edf_consume_2_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>edf_consume_2_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;"</literal></expr></argument>, <argument><expr><name>edf_consume_2_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;"</literal></expr></argument>, <argument><expr><name>edf_consume_2_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;&gt;"</literal></expr></argument>, <argument><expr><name>edf_consume_2_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;&gt;"</literal></expr></argument>, <argument><expr><name>edf_consume_2_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>, <argument><expr><name>edf_consume_1_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"[1]"</literal></expr></argument>, <argument><expr><name>edf_consume_1_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MEM_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"[2]"</literal></expr></argument>, <argument><expr><name>edf_consume_1_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MEM_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"[4]"</literal></expr></argument>, <argument><expr><name>edf_consume_1_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MEM_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"[8]"</literal></expr></argument>, <argument><expr><name>edf_consume_1_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MEM_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"[16]"</literal></expr></argument>, <argument><expr><name>edf_consume_1_push_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MEM_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"=[1]"</literal></expr></argument>, <argument><expr><name>edf_consume_2_set_mem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MEM_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"=[2]"</literal></expr></argument>, <argument><expr><name>edf_consume_2_set_mem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MEM_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"=[4]"</literal></expr></argument>, <argument><expr><name>edf_consume_2_set_mem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MEM_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"=[8]"</literal></expr></argument>, <argument><expr><name>edf_consume_2_set_mem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>R_ANAL_ESIL_OP_TYPE_MEM_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>edf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_parse</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_free</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>edf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_dfg_node_filter_insert_cmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>incoming_node</name> <init>= <expr><operator>(</operator><name>RAnalEsilDFGNode</name> <operator>*</operator><operator>)</operator><name>incoming</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>in_node</name> <init>= <expr><operator>(</operator><name>RAnalEsilDFGNode</name> <operator>*</operator><operator>)</operator><name>in</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>incoming_node</name><operator>-&gt;</operator><name>idx</name></name> <operator>-</operator> <name><name>in_node</name><operator>-&gt;</operator><name>idx</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_dfg_rev_dfs_cb</name><parameter_list>(<parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>RGraphVisitor</name> <modifier>*</modifier></type><name>vi</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>RAnalEsilDFGNode</name> <operator>*</operator><operator>)</operator><name><name>n</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGFilter</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>RAnalEsilDFGFilter</name> <operator>*</operator><operator>)</operator><name><name>vi</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_ESIL_DFG_BLOCK_CONST</name></expr>:</case>

<case>case <expr><name>R_ANAL_ESIL_DFG_BLOCK_VAR</name></expr>:</case>

<case>case <expr><name>R_ANAL_ESIL_DFG_BLOCK_PTR</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>R_ANAL_ESIL_DFG_BLOCK_GENERATIVE</name></expr>:</case>

<expr_stmt><expr><call><name>r_rbtree_cont_insert</name> <argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>_dfg_node_filter_insert_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ESIL_DFG_BLOCK_RESULT</name></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>previous</name> <init>= <expr><operator>(</operator><name>RGraphNode</name> <operator>*</operator><operator>)</operator><call><name>r_list_get_top</name> <argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>in_nodes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>previous</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_ptr_set</name> <argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>results</name></name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>condrets_strtok</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>tok</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>tok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>str</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RStrBuf</name> <modifier>*</modifier></type><name>get_resolved_expr</name><parameter_list>(<parameter><decl><type><name>RAnalEsilDFGFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>expr</name></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>expr</name></expr>;</init> <condition><expr><operator>(</operator><name>q</name> <operator>=</operator> <call><name>condrets_strtok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name>q</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>gn</name> <init>= <expr><call><name>sdb_ptr_get</name> <argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>results</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gn</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">",%s,"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>get_resolved_expr</name> <argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>(</operator><name>RAnalEsilDFGNode</name> <operator>*</operator><operator>)</operator><name><name>gn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">",%s,"</literal></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RStrBuf</name> <modifier>*</modifier></type><name>r_anal_esil_dfg_filter</name><parameter_list>(<parameter><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>dfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dfg</name> <operator>||</operator> <operator>!</operator><name>reg</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>resolve_me</name> <init>= <expr><call><name>_edf_reg_get</name> <argument_list>(<argument><expr><name>dfg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>resolve_me</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGFilter</name></type> <name>filter</name> <init>= <expr><block>{ <expr><name>dfg</name></expr>, <expr><call><name>r_rbtree_cont_new</name> <argument_list>()</argument_list></call></expr>, <macro><name>sdb_new0</name> <argument_list>()</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>filtered</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphVisitor</name></type> <name>vi</name> <init>= <expr><block>{ <expr><name>_dfg_rev_dfs_cb</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>filter</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_graph_dfs_node_reverse</name> <argument_list>(<argument><expr><name><name>dfg</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>resolve_me</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBIter</name></type> <name>ator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFGNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<macro><name>r_rbtree_cont_foreach</name> <argument_list>(<argument>filter.tree</argument>, <argument>ator</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>resolved</name> <init>= <expr><call><name>get_resolved_expr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><name>filtered</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_free</name> <argument_list>(<argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sanitized</name> <init>= <expr><call><name>r_str_replace</name> <argument_list>(<argument><expr><call><name>r_str_replace</name> <argument_list>(<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">",,"</literal></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">",,"</literal></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><name>filtered</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>sanitized</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>sanitized</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>sanitized</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sanitized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_rbtree_cont_free</name> <argument_list>(<argument><expr><name><name>filter</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name><name>filter</name><operator>.</operator><name>results</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>filtered</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RStrBuf</name> <modifier>*</modifier></type><name>r_anal_esil_dfg_filter_expr</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalEsilDFG</name> <modifier>*</modifier></type><name>dfg</name> <init>= <expr><call><name>r_anal_esil_dfg_expr</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dfg</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>filtered</name> <init>= <expr><call><name>r_anal_esil_dfg_filter</name> <argument_list>(<argument><expr><name>dfg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_esil_dfg_free</name> <argument_list>(<argument><expr><name>dfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>filtered</name></expr>;</return>

</block_content>}</block></function>

</unit>
