<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\reflines.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mid_down_refline</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((r)-&gt;from &gt; (r)-&gt;to &amp;&amp; (a) &lt; (r)-&gt;from &amp;&amp; (a) &gt; (r)-&gt;to)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mid_up_refline</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((r)-&gt;from &lt; (r)-&gt;to &amp;&amp; (a) &gt; (r)-&gt;from &amp;&amp; (a) &lt; (r)-&gt;to)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mid_refline</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(mid_down_refline (a, r) || mid_up_refline (a, r))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in_refline</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(mid_refline (a, r) || (a) == (r)-&gt;from || (a) == (r)-&gt;to)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>refline_end</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_from</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalRefline</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

}</block></struct></type> <name>ReflineEnd</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_asc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>refline_end</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>refline_end</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>val</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>val</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_by_ref_lvl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RAnalRefline</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RAnalRefline</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>level</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>level</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ReflineEnd</name> <modifier>*</modifier></type><name>refline_end_new</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_from</name></decl></parameter>, <parameter><decl><type><name>RAnalRefline</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ReflineEnd</name> <modifier>*</modifier></type><name>re</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>refline_end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>re</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>re</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>re</name><operator>-&gt;</operator><name>is_from</name></name> <operator>=</operator> <name>is_from</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>re</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>

<return>return <expr><name>re</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>add_refline</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>sten</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ReflineEnd</name> <modifier>*</modifier></type><name>re1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>re2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalRefline</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalRefline</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>to</name></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>*</operator><name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>to</name> <operator>&gt;</operator> <name>addr</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>re1</name> <operator>=</operator> <call><name>refline_end_new</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>re1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_add_sorted</name> <argument_list>(<argument><expr><name>sten</name></expr></argument>, <argument><expr><name>re1</name></expr></argument>, <argument><expr><operator>(</operator><name>RListComparator</name><operator>)</operator><name>cmp_asc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>re2</name> <operator>=</operator> <call><name>refline_end_new</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>to</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>re2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>re1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_add_sorted</name> <argument_list>(<argument><expr><name>sten</name></expr></argument>, <argument><expr><name>re2</name></expr></argument>, <argument><expr><operator>(</operator><name>RListComparator</name><operator>)</operator><name>cmp_asc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_reflines_free</name> <parameter_list>(<parameter><decl><type><name>RAnalRefline</name> <modifier>*</modifier></type><name>rl</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_anal_reflines_get</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nlines</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linescall</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sten</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalOp</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>refline_end</name></name> <modifier>*</modifier></type><name>el</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>free_levels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>opc</name> <init>= <expr><name>addr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sten</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sten</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>list_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_break_push</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_cons_is_breaked</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nlines</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nlines</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nlines</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>maxreflines</name></name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&gt;</operator> <name><name>anal</name><operator>-&gt;</operator><name>maxreflines</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>RAnalMetaItem</name> <modifier>*</modifier></type><name>mi</name> <init>= <expr><call><name>r_meta_find_any_except</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>R_META_TYPE_COMMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mi</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>mi</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name><name>mi</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_meta_item_free</name> <argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>is_valid_offset</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>r_anal_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_BASIC</name> <operator>|</operator> <name>R_ANAL_OP_MASK_HINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>__next</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_OP_TYPE_CALL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>linescall</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>R_ANAL_OP_TYPE_CJMP</name></expr>:</case>

<case>case <expr><name>R_ANAL_OP_TYPE_JMP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>linesout</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>op</name><operator>.</operator><name>jump</name></name> <operator>&gt;</operator> <name>opc</name> <operator>+</operator> <name>len</name> <operator>||</operator> <name><name>op</name><operator>.</operator><name>jump</name></name> <operator>&lt;</operator> <name>opc</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>op</name><operator>.</operator><name>jump</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>res</name> <operator>=</operator> <call><name>add_refline</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>sten</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>jump</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>sten_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_OP_TYPE_SWITCH</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>RAnalCaseOp</name> <modifier>*</modifier></type><name>caseop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>op</name><operator>.</operator><name>switch_op</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>op.switch_op-&gt;cases</argument>, <argument>iter</argument>, <argument>caseop</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>linesout</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>op</name><operator>.</operator><name>jump</name></name> <operator>&gt;</operator> <name>opc</name> <operator>+</operator> <name>len</name> <operator>||</operator> <name><name>op</name><operator>.</operator><name>jump</name></name> <operator>&lt;</operator> <name>opc</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>res</name> <operator>=</operator> <call><name>add_refline</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>sten</name></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>switch_op</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>caseop</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>sten_err</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

<label><name>__next</name>:</label>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_break_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>free_levels</name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>ut8</name></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>free_levels</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>sten_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>sten</argument>, <argument>iter</argument>, <argument>el</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>el</name><operator>-&gt;</operator><name>is_from</name></name> <operator>&amp;&amp;</operator> <name><name>el</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>el</name><operator>-&gt;</operator><name>is_from</name></name> <operator>&amp;&amp;</operator> <name><name>el</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>min</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>free_levels</name><index>[<expr><name>min</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>free_levels</name><index>[<expr><operator>++</operator><name>min</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>free_levels</name><index>[<expr><name><name>el</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>level</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&gt;</operator> <name><name>el</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>level</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>level</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>free_levels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>sten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

<label><name>sten_err</name>:</label>

<label><name>list_err</name>:</label>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>sten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_reflines_middle</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>list</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalRefline</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>to</name></name> <operator>&gt;</operator> <name>addr</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>to</name></name> <operator>&lt;</operator> <name>addr</name> <operator>+</operator> <name>len</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>get_corner_char</name><parameter_list>(<parameter><decl><type><name>RAnalRefline</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_middle_before</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>from</name></name> <operator>==</operator> <name><name>ref</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="string">"@"</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name><name>ref</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_middle_before</name></expr>)</condition> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>from</name></name> <operator>&gt;</operator> <name><name>ref</name><operator>-&gt;</operator><name>to</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">"|"</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>from</name></name> <operator>&gt;</operator> <name><name>ref</name><operator>-&gt;</operator><name>to</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"."</literal></expr> </then><else>: <expr><literal type="string">"`"</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name><name>ref</name><operator>-&gt;</operator><name>from</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_middle_before</name></expr>)</condition> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>from</name></name> <operator>&gt;</operator> <name><name>ref</name><operator>-&gt;</operator><name>to</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"|"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>from</name></name> <operator>&gt;</operator> <name><name>ref</name><operator>-&gt;</operator><name>to</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"`"</literal></expr> </then><else>: <expr><literal type="string">","</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_spaces</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wide</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wide</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name>level</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><call><name>r_str_pad</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>pos</name> <operator>-</operator> <name>level</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_append_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_level</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>RAnalRefline</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wide</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wide</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sz</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><call><name>r_str_pad</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_append_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pdlen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pdlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name>pd</name></expr></argument>, <argument><expr><name>pdlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>refline_kept</name><parameter_list>(<parameter><decl><type><name>RAnalRefline</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>middle_after</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>middle_after</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>direction</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>from</name></name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>to</name></name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalRefStr</name> <modifier>*</modifier></type><name>r_anal_reflines_str</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opts</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name>_core</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>cons</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalRefline</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>wide</name> <init>= <expr><name>opts</name> <operator>&amp;</operator> <name>R_ANAL_REFLINE_TYPE_WIDE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_level</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>middle_before</name> <init>= <expr><name>opts</name> <operator>&amp;</operator> <name>R_ANAL_REFLINE_TYPE_MIDDLE_BEFORE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>middle_after</name> <init>= <expr><name>opts</name> <operator>&amp;</operator> <name>R_ANAL_REFLINE_TYPE_MIDDLE_AFTER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>col_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>cons</name> <operator>&amp;&amp;</operator> <name>anal</name> <operator>&amp;&amp;</operator> <name><name>anal</name><operator>-&gt;</operator><name>reflines</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>lvls</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lvls</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>anal-&gt;reflines</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>cons</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>breaked</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>lvls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>in_refline</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>refline_kept</name> <argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>middle_after</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_add_sorted</name> <argument_list>(<argument><expr><name>lvls</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ref</name></expr></argument>, <argument><expr><operator>(</operator><name>RListComparator</name><operator>)</operator><name>cmp_by_ref_lvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_append_string</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_append_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>lvls</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>cons</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>breaked</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>lvls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>from</name></name> <operator>==</operator> <name>addr</name> <operator>||</operator> <name><name>ref</name><operator>-&gt;</operator><name>to</name></name> <operator>==</operator> <name>addr</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>middle_after</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>corner</name> <init>= <expr><call><name>get_corner_char</name> <argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>middle_before</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>ch</name> <init>= <expr><ternary><condition><expr><name><name>ref</name><operator>-&gt;</operator><name>from</name></name> <operator>==</operator> <name>addr</name></expr> ?</condition><then> <expr><literal type="char">'='</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>ch_col</name> <init>= <expr><ternary><condition><expr><name><name>ref</name><operator>-&gt;</operator><name>from</name></name> <operator>&gt;=</operator> <name><name>ref</name><operator>-&gt;</operator><name>to</name></name></expr> ?</condition><then> <expr><literal type="char">'t'</literal></expr></then><else>: <expr><literal type="char">'d'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>from</name></name> <operator>&gt;=</operator> <name><name>ref</name><operator>-&gt;</operator><name>to</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"t"</literal></expr> </then><else>: <expr><literal type="string">"d"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pos</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch_pos</name> <init>= <expr><name>max_level</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>ref</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wide</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch_pos</name> <operator>=</operator> <name>ch_pos</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ch_pos</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>corner</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ch_pos</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>col</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_level</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ch_pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>wide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_level</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ch_pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ch_col</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>wide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>add_spaces</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>wide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_spaces</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>wide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_append_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>corner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_append_string</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>middle_before</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_level</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>wide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_level</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ch_col</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>wide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>middle_before</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <ternary><condition><expr><name><name>ref</name><operator>-&gt;</operator><name>to</name></name> <operator>==</operator> <name>addr</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <ternary><condition><expr><name>middle_before</name></expr> ?</condition><then> <expr><name><name>ref</name><operator>-&gt;</operator><name>level</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pos</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_spaces</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>wide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_spaces</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>wide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>from</name></name> <operator>&gt;=</operator> <name><name>ref</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_append_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_append_string</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_append_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_append_string</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_level</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_level</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>add_spaces</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>wide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_spaces</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>wide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_buf_to_string</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col_str</name> <operator>=</operator> <call><name>r_buf_to_string</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>!</operator><name>col_str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>lvls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>lineswidth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lw</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>lineswidth</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>lw</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_cpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <name>l</name> <operator>-</operator> <name>lw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_cpy</name> <argument_list>(<argument><expr><name>col_str</name></expr></argument>, <argument><expr><name>col_str</name> <operator>+</operator> <name>l</name> <operator>-</operator> <name>lw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>pfx</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>lw</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>pfx</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>pfx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lw</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>pfx</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lw</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>pfx</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lw</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pfx</name><index>[<expr><name>lw</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_prepend</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pfx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col_str</name> <operator>=</operator> <call><name>r_str_prepend</name> <argument_list>(<argument><expr><name>col_str</name></expr></argument>, <argument><expr><name>pfx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>prev_col</name> <init>= <expr><name><name>col_str</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>col_str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arr_col</name> <init>= <expr><ternary><condition><expr><name>prev_col</name> <operator>==</operator> <literal type="char">'t'</literal></expr> ?</condition><then> <expr><literal type="string">"tt "</literal></expr></then><else>: <expr><literal type="string">"dd "</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>dir</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-&gt; "</literal></expr>

</then><else>: <expr><ternary><condition><expr><operator>(</operator><name>dir</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"=&lt; "</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col_str</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>col_str</name></expr></argument>, <argument><expr><name>arr_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>lvls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalRefStr</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalRefStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <name>col_str</name></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_reflines_str_free</name><parameter_list>(<parameter><decl><type><name>RAnalRefStr</name> <modifier>*</modifier></type><name>refstr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>refstr</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>refstr</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>refstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
