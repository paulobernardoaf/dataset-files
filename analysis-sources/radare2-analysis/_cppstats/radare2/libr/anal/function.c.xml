<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\function.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>if (anal-&gt;verbose)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_functions_block_cb</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>block-&gt;fcns</argument>, <argument>iter</argument>, <argument>fcn</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_anal_get_functions_in</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_blocks_foreach_in</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>get_functions_block_cb</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__fcn_exists</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid function address (-1) '%s'\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"TODO: Empty function name, we must auto generate one\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>ht_pp_find</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ht_name_fun</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;&amp;</operator> <name>found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid function name '%s' at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ht_addr_fun</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;&amp;</operator> <name>found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Function already defined in 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalFunction</name> <modifier>*</modifier></type><name>r_anal_function_new</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalFunction</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fcn</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>anal</name></name> <operator>=</operator> <name>anal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>fmod</name></name> <operator>=</operator> <name>R_ANAL_FQUALIFIER_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <call><name>r_str_constpool_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>anal</name><operator>-&gt;</operator><name>constpool</name></name></expr></argument>, <argument><expr><call><name>r_anal_cc_default</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>diff</name></name> <operator>=</operator> <call><name>r_anal_diff_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>has_changed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>bp_frame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>is_noreturn</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<return>return <expr><name>fcn</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_function_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><name>_fcn</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_fcn</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn-&gt;bbs</argument>, <argument>iter</argument>, <argument>block</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><name><name>fcn</name><operator>-&gt;</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ht_up_delete</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ht_addr_fun</name></name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ht_pp_delete</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ht_name_fun</name></name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_diff_free</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>diff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_add_function</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>__fcn_exists</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>on_fcn_new</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>on_fcn_new</name></name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>flg_fcn_set</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>flg_fcn_set</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><call><name>r_anal_function_size_from_entry</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>is_noreturn</name></name> <operator>=</operator> <call><name>r_anal_noreturn_at_addr</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ht_pp_insert</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ht_name_fun</name></name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ht_up_insert</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ht_addr_fun</name></name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalFunction</name> <modifier>*</modifier></type><name>r_anal_create_function</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>RAnalDiff</name> <modifier>*</modifier></type><name>diff</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_function_new</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fcn</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <call><name>r_str_constpool_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>anal</name><operator>-&gt;</operator><name>constpool</name></name></expr></argument>, <argument><expr><call><name>r_anal_cc_default</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fcnprefix</name> <init>= <expr><ternary><condition><expr><name><name>anal</name><operator>-&gt;</operator><name>coreb</name><operator>.</operator><name>cfgGet</name></name></expr> ?</condition><then> <expr><call><name><name>anal</name><operator>-&gt;</operator><name>coreb</name><operator>.</operator><name>cfgGet</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>coreb</name><operator>.</operator><name>core</name></name></expr></argument>, <argument><expr><literal type="string">"anal.fcnprefix"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fcnprefix</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fcnprefix</name> <operator>=</operator> <literal type="string">"fcn"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>fcnprefix</name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>diff</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>diff</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>diff</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>diff</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_anal_add_function</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_function_free</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>fcn</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_function_delete</name><parameter_list>(<parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalFunction</name> <modifier>*</modifier></type><name>r_anal_get_function_at</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ht_addr_fun</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;&amp;</operator> <name>found</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>f</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_function_relocate</name><parameter_list>(<parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_anal_get_function_at</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ht_up_delete</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>ht_addr_fun</name></name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ht_up_insert</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>ht_addr_fun</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_function_rename</name><parameter_list>(<parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><name><name>fcn</name><operator>-&gt;</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>existing</name> <init>= <expr><call><name>ht_pp_find</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ht_name_fun</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>existing</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>existing</name> <operator>==</operator> <name>fcn</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newname</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newname</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>in_tree</name> <init>= <expr><call><name>ht_pp_delete</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ht_name_fun</name></name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>newname</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in_tree</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ht_pp_insert</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>ht_name_fun</name></name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_function_add_block</name><parameter_list>(<parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_anal_block_ref</name> <argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>bb</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_max</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_max</name></name> <operator>=</operator> <name><name>bb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>bb</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bb</name><operator>-&gt;</operator><name>addr</name></name> <operator>&lt;</operator> <name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name> <operator>=</operator> <name><name>bb</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fcn</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>on_fcn_bb_new</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>fcn</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>on_fcn_bb_new</name></name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_function_remove_block</name><parameter_list>(<parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name> <operator>!=</operator> <name>UT64_MAX</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name> <operator>==</operator> <name><name>bb</name><operator>-&gt;</operator><name>addr</name></name> <operator>||</operator> <name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_max</name></name> <operator>==</operator> <name><name>bb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>bb</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ensure_fcn_range</name><parameter_list>(<parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>minval</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>maxval</name> <init>= <expr><name>UT64_MIN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn-&gt;bbs</argument>, <argument>iter</argument>, <argument>block</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>addr</name></name> <operator>&lt;</operator> <name>minval</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>minval</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>maxval</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxval</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name> <operator>=</operator> <name>minval</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_max</name></name> <operator>=</operator> <ternary><condition><expr><name>minval</name> <operator>==</operator> <name>UT64_MAX</name></expr> ?</condition><then> <expr><name>UT64_MAX</name></expr> </then><else>: <expr><name>maxval</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_anal_function_linear_size</name><parameter_list>(<parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>ensure_fcn_range</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_max</name></name> <operator>-</operator> <name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_anal_function_min_addr</name><parameter_list>(<parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>ensure_fcn_range</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_anal_function_max_addr</name><parameter_list>(<parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>ensure_fcn_range</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_max</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_anal_function_size_from_entry</name><parameter_list>(<parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>ensure_fcn_range</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_min</name></name> <operator>==</operator> <name>UT64_MAX</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>fcn</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>_max</name></name> <operator>-</operator> <name><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_anal_function_realsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sz</name></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn-&gt;bbs</argument>, <argument>iter</argument>, <argument>bb</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>sz</name> <operator>+=</operator> <name><name>bb</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sz</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fcn_in_cb</name><parameter_list>(<parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>block-&gt;fcns</argument>, <argument>iter</argument>, <argument>fcn</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fcn</name> <operator>==</operator> <name>user</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_function_contains</name><parameter_list>(<parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>!</operator><call><name>r_anal_blocks_foreach_in</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>fcn_in_cb</name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
