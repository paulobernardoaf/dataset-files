<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\jmptbl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_parse.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_list.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JMPTBL_MAXSZ</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_case</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>switch_addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset_sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>case_addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>case_addr_loc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_meta_set_data_at</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>case_addr_loc</name></expr></argument>, <argument><expr><name>offset_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_hint_set_immbase</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>case_addr_loc</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_xrefs_set</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>switch_addr</name></expr></argument>, <argument><expr><name>case_addr</name></expr></argument>, <argument><expr><name>R_ANAL_REF_TYPE_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_block_add_switch_case</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>switch_addr</name></expr></argument>, <argument><expr><name>case_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>set</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>flagname</name><index>[<expr><literal type="number">0x30</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>flagname</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>flagname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"case.0x%"</literal><name>PFMT64x</name> <literal type="string">".%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>switch_addr</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>set</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name>flagname</name></expr></argument>, <argument><expr><name>case_addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_switch</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>switch_addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>jmptbl_addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>cases_count</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>default_case_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">0x30</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"switch table (%"</literal><name>PFMT64u</name><literal type="string">" cases) at 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>cases_count</name></expr></argument>, <argument><expr><name>jmptbl_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_meta_set_string</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>R_META_TYPE_COMMENT</name></expr></argument>, <argument><expr><name>switch_addr</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>set</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"switch.0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>switch_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>set</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>switch_addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>default_case_addr</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"case.default.0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>switch_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>set</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>flb</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>default_case_addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_jmptbl</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>jmpaddr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>tablesize</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>default_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>depth</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>try_walkthrough_jmptbl</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>jmpaddr</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tablesize</name></expr></argument>, <argument><expr><name>tablesize</name></expr></argument>, <argument><expr><name>default_addr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>try_walkthrough_jmptbl</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>jmptbl_loc</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>jmptbl_off</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jmptbl_size</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>default_case</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ret0</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>ret0</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>jmptbl_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>jmptbl_size</name> <operator>=</operator> <name>JMPTBL_MAXSZ</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>jmptbl_loc</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Invalid JumpTable location 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>jmptbl_loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jmptbl_size</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>jmptbl_size</name></expr></argument> &gt;</argument_list></name> <name>ST32_MAX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Invalid JumpTable size at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>jmpptr</name></decl>, <decl><type ref="prev"/><name>offs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>jmptbl</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name>jmptbl_size</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jmptbl</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_arm</name> <init>= <expr><name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>arch</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><literal type="string">"arm"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>jmptbl_loc</name></expr></argument>, <argument><expr><name>jmptbl</name></expr></argument>, <argument><expr><name>jmptbl_size</name> <operator>*</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>offs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>offs</name> <operator>+</operator> <name>sz</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>jmptbl_size</name> <operator>*</operator> <name>sz</name></expr>;</condition> <incr><expr><name>offs</name> <operator>+=</operator> <name>sz</name></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name>sz</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>jmpptr</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>ut8</name><operator>)</operator><call><name>r_read_le8</name> <argument_list>(<argument><expr><name>jmptbl</name> <operator>+</operator> <name>offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>jmpptr</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><call><name>r_read_le16</name> <argument_list>(<argument><expr><name>jmptbl</name> <operator>+</operator> <name>offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>jmpptr</name> <operator>=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>jmptbl</name> <operator>+</operator> <name>offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name>jmpptr</name> <operator>=</operator> <call><name>r_read_le64</name> <argument_list>(<argument><expr><name>jmptbl</name> <operator>+</operator> <name>offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break> 

<default>default:</default>

<expr_stmt><expr><name>jmpptr</name> <operator>=</operator> <call><name>r_read_le64</name> <argument_list>(<argument><expr><name>jmptbl</name> <operator>+</operator> <name>offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>jmpptr</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>jmpptr</name> <operator>==</operator> <name>UT32_MAX</name> <operator>||</operator> <name>jmpptr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>is_arm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>jmpptr</name> <operator>=</operator> <name>ip</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>jmpptr</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sz</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>is_arm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>jmpptr</name> <operator>=</operator> <name>ip</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>jmpptr</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>is_valid_offset</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>jmpptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>jmpdelta</name> <init>= <expr><operator>(</operator><name>st32</name><operator>)</operator><name>jmpptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>jmpptr</name> <operator>=</operator> <name>jmptbl_off</name> <operator>+</operator> <name>jmpdelta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>is_valid_offset</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>jmpptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>jmpptr</name> <argument_list type="generic">&lt; <argument><expr><name><name>anal</name><operator>-&gt;</operator><name>limit</name><operator>-&gt;</operator><name>from</name></name> <operator>||</operator> <name>jmpptr</name></expr></argument> &gt;</argument_list></name> <name><name>anal</name><operator>-&gt;</operator><name>limit</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>apply_case</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>jmpptr</name></expr></argument>, <argument><expr><name>offs</name> <operator>/</operator> <name>sz</name></expr></argument>, <argument><expr><name>jmptbl_loc</name> <operator>+</operator> <name>offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_anal_fcn_bb</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>jmpptr</name></expr></argument>, <argument><expr><name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>offs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>default_case</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>default_case</name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>apply_switch</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>jmptbl_loc</name></expr></argument>, <argument><expr><name>offs</name> <operator>/</operator> <name>sz</name></expr></argument>, <argument><expr><name>default_case</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>jmptbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>try_get_delta_jmptbl_info</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>jmp_addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>lea_addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>table_size</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>default_case</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>isValid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>foundCmp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalOp</name></type> <name>tmp_aop</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lea_addr</name> <operator>&gt;</operator> <name>jmp_addr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>search_sz</name> <init>= <expr><name>jmp_addr</name> <operator>-</operator> <name>lea_addr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>search_sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>lea_addr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>search_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name>search_sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_aop</name></expr></argument>, <argument><expr><name>lea_addr</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>search_sz</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>R_ANAL_OP_MASK_BASIC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>foundCmp</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tmp_aop</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>R_ANAL_OP_TYPE_CJMP</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>default_case</name> <operator>=</operator> <ternary><condition><expr><name><name>tmp_aop</name><operator>.</operator><name>jump</name></name> <operator>==</operator> <name><name>tmp_aop</name><operator>.</operator><name>jump</name></name> <operator>+</operator> <name>len</name></expr> ?</condition><then> <expr><name><name>tmp_aop</name><operator>.</operator><name>fail</name></name></expr> </then><else>: <expr><name><name>tmp_aop</name><operator>.</operator><name>jump</name></name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>type</name> <init>= <expr><name><name>tmp_aop</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_TYPE_MASK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tmp_aop</name><operator>.</operator><name>val</name></name> <operator>==</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>tmp_aop</name><operator>.</operator><name>refptr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>isValid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>table_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tmp_aop</name><operator>.</operator><name>refptr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>isValid</name> <operator>=</operator> <name><name>tmp_aop</name><operator>.</operator><name>val</name></name> <operator>&lt;</operator> <literal type="number">0x200</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>table_size</name> <operator>=</operator> <name><name>tmp_aop</name><operator>.</operator><name>val</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>isValid</name> <operator>=</operator> <name><name>tmp_aop</name><operator>.</operator><name>refptr</name></name> <operator>&lt;</operator> <literal type="number">0x200</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>table_size</name> <operator>=</operator> <name><name>tmp_aop</name><operator>.</operator><name>refptr</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>foundCmp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>isValid</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>walkthrough_arm_jmptbl_style</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>jmptbl_loc</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>jmptbl_size</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>default_case</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret0</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>offs</name></decl>, <decl><type ref="prev"/><name>jmpptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ret0</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>jmptbl_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>jmptbl_size</name> <operator>=</operator> <name>JMPTBL_MAXSZ</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>offs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>offs</name> <operator>+</operator> <name>sz</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>jmptbl_size</name> <operator>*</operator> <name>sz</name></expr>;</condition> <incr><expr><name>offs</name> <operator>+=</operator> <name>sz</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>jmpptr</name> <operator>=</operator> <name>jmptbl_loc</name> <operator>+</operator> <name>offs</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_case</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>jmpptr</name></expr></argument>, <argument><expr><name>offs</name> <operator>/</operator> <name>sz</name></expr></argument>, <argument><expr><name>jmptbl_loc</name> <operator>+</operator> <name>offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_anal_fcn_bb</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>jmpptr</name></expr></argument>, <argument><expr><name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>offs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>default_case</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>default_case</name> <operator>==</operator> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>default_case</name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>apply_switch</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>jmptbl_loc</name></expr></argument>, <argument><expr><name>offs</name> <operator>/</operator> <name>sz</name></expr></argument>, <argument><expr><name>default_case</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>try_get_jmptbl_info</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>my_bb</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>table_size</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>default_case</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>isValid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>tmp_bb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev_bb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prev_bb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name><name>anal</name><operator>-&gt;</operator><name>binb</name><operator>.</operator><name>get_vsect_at</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>binb</name><operator>.</operator><name>bin</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>in_plt</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">".plt"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_plt</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"_stubs"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>in_plt</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in_plt</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn-&gt;bbs</argument>, <argument>iter</argument>, <argument>tmp_bb</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tmp_bb</name><operator>-&gt;</operator><name>jump</name></name> <operator>==</operator> <name><name>my_bb</name><operator>-&gt;</operator><name>addr</name></name> <operator>||</operator> <name><name>tmp_bb</name><operator>-&gt;</operator><name>fail</name></name> <operator>==</operator> <name><name>my_bb</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prev_bb</name> <operator>=</operator> <name>tmp_bb</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prev_bb</name> <operator>||</operator> <operator>!</operator><name><name>prev_bb</name><operator>-&gt;</operator><name>jump</name></name> <operator>||</operator> <operator>!</operator><name><name>prev_bb</name><operator>-&gt;</operator><name>fail</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>anal</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: [anal.jmp.tbl] Missing predecesessor cjmp bb at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>default_case</name> <operator>=</operator> <ternary><condition><expr><name><name>prev_bb</name><operator>-&gt;</operator><name>jump</name></name> <operator>==</operator> <name><name>my_bb</name><operator>-&gt;</operator><name>addr</name></name></expr> ?</condition><then> <expr><name><name>prev_bb</name><operator>-&gt;</operator><name>fail</name></name></expr> </then><else>: <expr><name><name>prev_bb</name><operator>-&gt;</operator><name>jump</name></name></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalOp</name></type> <name>tmp_aop</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bb_buf</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>prev_bb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bb_buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>prev_bb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name>bb_buf</name></expr></argument>, <argument><expr><name><name>prev_bb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>isValid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalHint</name> <modifier>*</modifier></type><name>hint</name> <init>= <expr><call><name>r_anal_hint_get</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hint</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>val</name> <init>= <expr><name><name>hint</name><operator>-&gt;</operator><name>val</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_hint_free</name> <argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>table_size</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>prev_bb</name><operator>-&gt;</operator><name>op_pos_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>prev_pos</name> <init>= <expr><name><name>prev_bb</name><operator>-&gt;</operator><name>op_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>op_addr</name> <init>= <expr><name><name>prev_bb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>prev_pos</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_pos</name> <operator>&gt;=</operator> <name><name>prev_bb</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buflen</name> <init>= <expr><name><name>prev_bb</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>prev_pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_anal_op</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_aop</name></expr></argument>, <argument><expr><name>op_addr</name></expr></argument>,

<argument><expr><name>bb_buf</name> <operator>+</operator> <name>prev_pos</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>,

<argument><expr><name>R_ANAL_OP_MASK_BASIC</name> <operator>|</operator> <name>R_ANAL_OP_MASK_HINT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>type</name> <init>= <expr><name><name>tmp_aop</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <name>R_ANAL_OP_TYPE_MASK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>type</name> <operator>!=</operator> <name>R_ANAL_OP_TYPE_CMP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_aop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tmp_aop</name><operator>.</operator><name>val</name></name> <operator>==</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>tmp_aop</name><operator>.</operator><name>refptr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>isValid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>table_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tmp_aop</name><operator>.</operator><name>refptr</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tmp_aop</name><operator>.</operator><name>val</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>isValid</name> <operator>=</operator> <name><name>tmp_aop</name><operator>.</operator><name>val</name></name> <operator>&lt;</operator> <literal type="number">0x200</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>table_size</name> <operator>=</operator> <name><name>tmp_aop</name><operator>.</operator><name>val</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>isValid</name> <operator>=</operator> <name><name>tmp_aop</name><operator>.</operator><name>refptr</name></name> <operator>&lt;</operator> <literal type="number">0x200</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>table_size</name> <operator>=</operator> <name><name>tmp_aop</name><operator>.</operator><name>refptr</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_anal_op_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_aop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bb_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>isValid</name></expr>;</return>

</block_content>}</block></function>

</unit>
