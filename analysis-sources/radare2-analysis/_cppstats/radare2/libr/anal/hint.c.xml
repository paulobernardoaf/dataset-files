<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\hint.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>r_anal_ranged_hint_record_base_t</name> <block>{

<decl_stmt><decl><type><name>RBNode</name></type> <name>rb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>

}</block></struct></type> <name>RAnalRangedHintRecordBase</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_anal_arch_hint_record_t</name> <block>{

<decl_stmt><decl><type><name>RAnalRangedHintRecordBase</name></type> <name>base</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arch</name></decl>;</decl_stmt> 

}</block></struct></type> <name>RAnalArchHintRecord</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_anal_bits_hint_record_t</name> <block>{

<decl_stmt><decl><type><name>RAnalRangedHintRecordBase</name></type> <name>base</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt> 

}</block></struct></type> <name>RAnalBitsHintRecord</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ranged_hint_record_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>incoming</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBNode</name> <modifier>*</modifier></type><name>in_tree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>ut64</name> <operator>*</operator><operator>)</operator><name>incoming</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RAnalRangedHintRecordBase</name> <modifier>*</modifier></type><name>in_tree_record</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><name>in_tree</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>RAnalRangedHintRecordBase</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&lt;</operator> <name><name>in_tree_record</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>addr</name> <operator>&gt;</operator> <name><name>in_tree_record</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>addr_hint_record_fini</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalAddrHintRecord</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><name>element</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_TYPE_OFFSET</name></expr>:</case>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>type_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_SYNTAX</name></expr>:</case>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_OPCODE</name></expr>:</case>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_ESIL</name></expr>:</case>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>addr_hint_record_ht_free</name><parameter_list>(<parameter><decl><type><name>HtUPKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_vector_free</name> <argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bits_hint_record_free_rb</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>container_of</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>RAnalRangedHintRecordBase</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>arch_hint_record_free_rb</name><parameter_list>(<parameter><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalArchHintRecord</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><operator>(</operator><name>RAnalArchHintRecord</name> <operator>*</operator><operator>)</operator><call><name>container_of</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>RAnalRangedHintRecordBase</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_anal_hint_storage_init</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>addr_hints</name></name> <operator>=</operator> <call><name>ht_up_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>addr_hint_record_ht_free</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>arch_hints</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>bits_hints</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_anal_hint_storage_fini</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>ht_up_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>addr_hints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_rbtree_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>arch_hints</name></name></expr></argument>, <argument><expr><name>arch_hint_record_free_rb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_rbtree_free</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>bits_hints</name></name></expr></argument>, <argument><expr><name>bits_hint_record_free_rb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_clear</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_hint_storage_fini</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_hint_storage_init</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>HtUP</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>

}</block></struct></type> <name>DeleteRangeCtx</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>addr_hint_range_delete_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>DeleteRangeCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>addr</name></name> <operator>||</operator> <name>key</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ht_up_delete</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_del</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ht_up_delete</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>addr_hints</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_hint_unset_arch</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_hint_unset_bits</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>DeleteRangeCtx</name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name><name>a</name><operator>-&gt;</operator><name>addr_hints</name></name></expr>, <expr><name>addr</name></expr>, <expr><name>size</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ht_up_foreach</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>addr_hints</name></name></expr></argument>, <argument><expr><name>addr_hint_range_delete_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_rbtree_lower_bound</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>arch_hints</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>ranged_hint_record_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalRangedHintRecordBase</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>RAnalRangedHintRecordBase</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>addr</name> <operator>+</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_hint_unset_arch</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_rbtree_lower_bound</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>bits_hints</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>ranged_hint_record_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalRangedHintRecordBase</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>container_of</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>RAnalRangedHintRecordBase</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>addr</name> <operator>+</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_hint_unset_bits</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unset_addr_hint_record</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalAddrHintType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>records</name> <init>= <expr><call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>addr_hints</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>records</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>records</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalAddrHintRecord</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><call><name>r_vector_index_ptr</name> <argument_list>(<argument><expr><name>records</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>addr_hint_record_fini</name> <argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_vector_remove_at</name> <argument_list>(<argument><expr><name>records</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnalAddrHintRecord</name> <modifier>*</modifier></type><name>ensure_addr_hint_record</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalAddrHintType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RVector</name> <modifier>*</modifier></type><name>records</name> <init>= <expr><call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>addr_hints</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>records</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>records</name> <operator>=</operator> <call><name>r_vector_new</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalAddrHintRecord</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>addr_hint_record_fini</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>records</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ht_up_insert</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>addr_hints</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>records</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<macro><name>r_vector_foreach</name> <argument_list>(<argument>records</argument>, <argument>pos</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalAddrHintRecord</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><name>pos</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>record</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>RAnalAddrHintRecord</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><call><name>r_vector_push</name> <argument_list>(<argument><expr><name>records</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<return>return <expr><name>record</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_HINT</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>setcode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { RAnalAddrHintRecord *r = ensure_addr_hint_record (a, type, addr); if (!r) { break; } setcode } while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>RAnalRangedHintRecordBase</name> <modifier>*</modifier></type><name>ensure_ranged_hint_record</name><parameter_list>(<parameter><decl><type><name>RBTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_rbtree_find</name> <argument_list>(<argument><expr><operator>*</operator><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>ranged_hint_record_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>container_of</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>RAnalRangedHintRecordBase</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalRangedHintRecordBase</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>record</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_rbtree_insert</name> <argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>record</name><operator>-&gt;</operator><name>rb</name></name></expr></argument>, <argument><expr><name>ranged_hint_record_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>record</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_offset</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>typeoff</name></decl></parameter>)</parameter_list> <block>{<block_content>

<macro><name>SET_HINT</name> <argument_list>(<argument>R_ANAL_ADDR_HINT_TYPE_TYPE_OFFSET</argument>,

<argument>free (r-&gt;type_offset);

r-&gt;type_offset = strdup (typeoff);</argument>

)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_nword</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nword</name></decl></parameter>)</parameter_list> <block>{<block_content>

<macro><name>SET_HINT</name> <argument_list>(<argument>R_ANAL_ADDR_HINT_TYPE_NWORD</argument>, <argument>r-&gt;nword = nword;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_jump</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>jump</name></decl></parameter>)</parameter_list> <block>{<block_content>

<macro><name>SET_HINT</name> <argument_list>(<argument>R_ANAL_ADDR_HINT_TYPE_JUMP</argument>, <argument>r-&gt;jump = jump;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_fail</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>fail</name></decl></parameter>)</parameter_list> <block>{<block_content>

<macro><name>SET_HINT</name> <argument_list>(<argument>R_ANAL_ADDR_HINT_TYPE_FAIL</argument>, <argument>r-&gt;fail = fail;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_newbits</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<macro><name>SET_HINT</name> <argument_list>(<argument>R_ANAL_ADDR_HINT_TYPE_NEW_BITS</argument>, <argument>r-&gt;newbits = bits;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_high</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>SET_HINT</name> <argument_list>(<argument><expr><name>R_ANAL_ADDR_HINT_TYPE_HIGH</name></expr></argument>,)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_immbase</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>base</name></expr>)</condition> <block>{<block_content>

<macro><name>SET_HINT</name> <argument_list>(<argument>R_ANAL_ADDR_HINT_TYPE_IMMBASE</argument>, <argument>r-&gt;immbase = base;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>unset_addr_hint_record</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_ANAL_ADDR_HINT_TYPE_IMMBASE</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_pointer</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<macro><name>SET_HINT</name> <argument_list>(<argument>R_ANAL_ADDR_HINT_TYPE_PTR</argument>, <argument>r-&gt;ptr = ptr;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_ret</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<macro><name>SET_HINT</name> <argument_list>(<argument>R_ANAL_ADDR_HINT_TYPE_RET</argument>, <argument>r-&gt;retval = val;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_syntax</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>syn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<macro><name>SET_HINT</name> <argument_list>(<argument>R_ANAL_ADDR_HINT_TYPE_SYNTAX</argument>,

<argument>free (r-&gt;syntax);

r-&gt;syntax = strdup (syn);</argument>

)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_opcode</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<macro><name>SET_HINT</name> <argument_list>(<argument>R_ANAL_ADDR_HINT_TYPE_OPCODE</argument>,

<argument>free (r-&gt;opcode);

r-&gt;opcode = strdup (opcode);</argument>

)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_esil</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<macro><name>SET_HINT</name> <argument_list>(<argument>R_ANAL_ADDR_HINT_TYPE_ESIL</argument>,

<argument>free (r-&gt;esil);

r-&gt;esil = strdup (esil);</argument>

)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_type</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<macro><name>SET_HINT</name> <argument_list>(<argument>R_ANAL_ADDR_HINT_TYPE_OPTYPE</argument>, <argument>r-&gt;optype = type;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_size</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<macro><name>SET_HINT</name> <argument_list>(<argument>R_ANAL_ADDR_HINT_TYPE_SIZE</argument>, <argument>r-&gt;size = size;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_stackframe</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<macro><name>SET_HINT</name> <argument_list>(<argument>R_ANAL_ADDR_HINT_TYPE_STACKFRAME</argument>, <argument>r-&gt;stackframe = size;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_val</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<macro><name>SET_HINT</name> <argument_list>(<argument>R_ANAL_ADDR_HINT_TYPE_VAL</argument>, <argument>r-&gt;val = v;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_arch</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arch</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalArchHintRecord</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><operator>(</operator><name>RAnalArchHintRecord</name> <operator>*</operator><operator>)</operator><call><name>ensure_ranged_hint_record</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>arch_hints</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalArchHintRecord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>record</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <ternary><condition><expr><name>arch</name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_set_bits</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalBitsHintRecord</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><operator>(</operator><name>RAnalBitsHintRecord</name> <operator>*</operator><operator>)</operator><call><name>ensure_ranged_hint_record</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>bits_hints</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalBitsHintRecord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>record</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>hint_cbs</name><operator>.</operator><name>on_bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>hint_cbs</name><operator>.</operator><name>on_bits</name></name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_size</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>unset_addr_hint_record</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_ANAL_ADDR_HINT_TYPE_SIZE</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_esil</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>unset_addr_hint_record</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_ANAL_ADDR_HINT_TYPE_ESIL</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_opcode</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>unset_addr_hint_record</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_ANAL_ADDR_HINT_TYPE_OPCODE</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_high</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>unset_addr_hint_record</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_ANAL_ADDR_HINT_TYPE_HIGH</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_immbase</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>unset_addr_hint_record</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_ANAL_ADDR_HINT_TYPE_IMMBASE</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_nword</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>unset_addr_hint_record</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_ANAL_ADDR_HINT_TYPE_NWORD</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_syntax</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>unset_addr_hint_record</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_ANAL_ADDR_HINT_TYPE_SYNTAX</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_pointer</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>unset_addr_hint_record</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_ANAL_ADDR_HINT_TYPE_PTR</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_ret</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>unset_addr_hint_record</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_ANAL_ADDR_HINT_TYPE_RET</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_offset</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>unset_addr_hint_record</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_ANAL_ADDR_HINT_TYPE_TYPE_OFFSET</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_jump</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>unset_addr_hint_record</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_ANAL_ADDR_HINT_TYPE_JUMP</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_fail</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>unset_addr_hint_record</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_ANAL_ADDR_HINT_TYPE_FAIL</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_newbits</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>unset_addr_hint_record</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_ANAL_ADDR_HINT_TYPE_NEW_BITS</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_val</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>unset_addr_hint_record</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_ANAL_ADDR_HINT_TYPE_VAL</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_type</name> <parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>unset_addr_hint_record</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_ANAL_ADDR_HINT_TYPE_OPTYPE</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_stackframe</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>unset_addr_hint_record</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>R_ANAL_ADDR_HINT_TYPE_STACKFRAME</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_arch</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_rbtree_delete</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>arch_hints</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>ranged_hint_record_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>arch_hint_record_free_rb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_unset_bits</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_rbtree_delete</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>bits_hints</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>ranged_hint_record_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bits_hint_record_free_rb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_hint_free</name><parameter_list>(<parameter><decl><type><name>RAnalHint</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>R_NULLABLE</name> <name>R_BORROW</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_anal_hint_arch_at</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <name>ut64</name> <modifier>*</modifier></type><name>hint_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_rbtree_upper_bound</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>arch_hints</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>ranged_hint_record_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hint_addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>hint_addr</name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalArchHintRecord</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><operator>(</operator><name>RAnalArchHintRecord</name> <operator>*</operator><operator>)</operator><call><name>container_of</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>RAnalRangedHintRecordBase</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hint_addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>hint_addr</name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>addr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>record</name><operator>-&gt;</operator><name>arch</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_hint_bits_at</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>R_NULLABLE</name> <name>ut64</name> <modifier>*</modifier></type><name>hint_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>r_rbtree_upper_bound</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>bits_hints</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>ranged_hint_record_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hint_addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>hint_addr</name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalBitsHintRecord</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><operator>(</operator><name>RAnalBitsHintRecord</name> <operator>*</operator><operator>)</operator><call><name>container_of</name> <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>RAnalRangedHintRecordBase</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hint_addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>hint_addr</name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>addr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>record</name><operator>-&gt;</operator><name>bits</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>R_NULLABLE</name> <specifier>const</specifier> <name>RVector</name> <modifier>*</modifier></type><name>r_anal_addr_hints_at</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>addr_hints</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>RAnalAddrHintRecordsCb</name></type> <name>cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>

}</block></struct></type> <name>AddrHintForeachCtx</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>addr_hint_foreach_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>AddrHintForeachCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_addr_hints_foreach</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalAddrHintRecordsCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>AddrHintForeachCtx</name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>cb</name></expr>, <expr><name>user</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ht_up_foreach</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>addr_hints</name></name></expr></argument>, <argument><expr><name>addr_hint_foreach_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_arch_hints_foreach</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalArchHintCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBIter</name></type> <name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalRangedHintRecordBase</name> <modifier>*</modifier></type><name>record</name></decl>;</decl_stmt>

<macro><name>r_rbtree_foreach</name> <argument_list>(<argument>anal-&gt;arch_hints</argument>, <argument>iter</argument>, <argument>record</argument>, <argument>RAnalRangedHintRecordBase</argument>, <argument>rb</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>cont</name> <init>= <expr><call><name>cb</name> <argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RAnalArchHintRecord</name> <operator>*</operator><operator>)</operator><name>record</name><operator>)</operator><operator>-&gt;</operator><name>arch</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cont</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_bits_hints_foreach</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalBitsHintCb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBIter</name></type> <name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalRangedHintRecordBase</name> <modifier>*</modifier></type><name>record</name></decl>;</decl_stmt>

<macro><name>r_rbtree_foreach</name> <argument_list>(<argument>anal-&gt;bits_hints</argument>, <argument>iter</argument>, <argument>record</argument>, <argument>RAnalRangedHintRecordBase</argument>, <argument>rb</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>cont</name> <init>= <expr><call><name>cb</name> <argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RAnalBitsHintRecord</name> <operator>*</operator><operator>)</operator><name>record</name><operator>)</operator><operator>-&gt;</operator><name>bits</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cont</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hint_merge</name><parameter_list>(<parameter><decl><type><name>RAnalHint</name> <modifier>*</modifier></type><name>hint</name></decl></parameter>, <parameter><decl><type><name>RAnalAddrHintRecord</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_IMMBASE</name></expr>:</case>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>immbase</name></name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>immbase</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_JUMP</name></expr>:</case>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>jump</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_FAIL</name></expr>:</case>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>fail</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_STACKFRAME</name></expr>:</case>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>stackframe</name></name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>stackframe</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_PTR</name></expr>:</case>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_NWORD</name></expr>:</case>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>nword</name></name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>nword</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_RET</name></expr>:</case>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>retval</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_NEW_BITS</name></expr>:</case>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>new_bits</name></name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>newbits</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_SIZE</name></expr>:</case>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_SYNTAX</name></expr>:</case>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>syntax</name></name> <operator>=</operator> <ternary><condition><expr><name><name>record</name><operator>-&gt;</operator><name>syntax</name></name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_OPTYPE</name></expr>:</case>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>optype</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_OPCODE</name></expr>:</case>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <ternary><condition><expr><name><name>record</name><operator>-&gt;</operator><name>opcode</name></name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_TYPE_OFFSET</name></expr>:</case>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <ternary><condition><expr><name><name>record</name><operator>-&gt;</operator><name>type_offset</name></name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>type_offset</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_ESIL</name></expr>:</case>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>esil</name></name> <operator>=</operator> <ternary><condition><expr><name><name>record</name><operator>-&gt;</operator><name>esil</name></name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>esil</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_HIGH</name></expr>:</case>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>high</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_ADDR_HINT_TYPE_VAL</name></expr>:</case>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalHint</name> <modifier>*</modifier></type><name>r_anal_hint_get</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalHint</name> <modifier>*</modifier></type><name>hint</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalHint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hint</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>stackframe</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RVector</name> <modifier>*</modifier></type><name>records</name> <init>= <expr><call><name>r_anal_addr_hints_at</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>records</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalAddrHintRecord</name> <modifier>*</modifier></type><name>record</name></decl>;</decl_stmt>

<macro><name>r_vector_foreach</name> <argument_list>(<argument>records</argument>, <argument>record</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>hint_merge</name> <argument_list>(<argument><expr><name>hint</name></expr></argument>, <argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arch</name> <init>= <expr><call><name>r_anal_hint_arch_at</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <ternary><condition><expr><name>arch</name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <call><name>r_anal_hint_bits_at</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>records</name> <operator>||</operator> <call><name>r_vector_empty</name> <argument_list>(<argument><expr><name>records</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>hint</name><operator>-&gt;</operator><name>arch</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>hint</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>hint</name></expr>;</return>

</block_content>}</block></function>

</unit>
