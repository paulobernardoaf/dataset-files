<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\cond.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_anal_cond_tostring</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>cc</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_COND_EQ</name></expr>:</case> <return>return <expr><literal type="string">"eq"</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_NV</name></expr>:</case> <return>return <expr><literal type="string">"nv"</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_NE</name></expr>:</case> <return>return <expr><literal type="string">"ne"</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_HS</name></expr>:</case> <return>return <expr><literal type="string">"hs"</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_LO</name></expr>:</case> <return>return <expr><literal type="string">"lo"</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_MI</name></expr>:</case> <return>return <expr><literal type="string">"mi"</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_PL</name></expr>:</case> <return>return <expr><literal type="string">"pl"</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_VS</name></expr>:</case> <return>return <expr><literal type="string">"vs"</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_VC</name></expr>:</case> <return>return <expr><literal type="string">"vc"</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_HI</name></expr>:</case> <return>return <expr><literal type="string">"hi"</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_LS</name></expr>:</case> <return>return <expr><literal type="string">"ls"</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_GE</name></expr>:</case> <return>return <expr><literal type="string">"ge"</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_LT</name></expr>:</case> <return>return <expr><literal type="string">"lt"</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_GT</name></expr>:</case> <return>return <expr><literal type="string">"gt"</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_LE</name></expr>:</case> <return>return <expr><literal type="string">"le"</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_AL</name></expr>:</case> <return>return <expr><literal type="string">"al"</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="string">"??"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalCond</name> <modifier>*</modifier></type><name>r_anal_cond_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<return>return <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalCond</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_cond_fini</name> <parameter_list>(<parameter><decl><type><name>RAnalCond</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_value_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_value_free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_cond_free</name> <parameter_list>(<parameter><decl><type><name>RAnalCond</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_cond_fini</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalCond</name> <modifier>*</modifier></type><name>r_anal_cond_clone</name><parameter_list>(<parameter><decl><type><name>RAnalCond</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalCond</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RAnalCond</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RAnalCond</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>condstring</name><parameter_list>(<parameter><decl><type><name>RAnalCond</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>condstr_single</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"!"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"0&lt;"</literal></expr>, <expr><literal type="string">"0&lt;="</literal></expr>, <expr><literal type="string">"0&gt;"</literal></expr>, <expr><literal type="string">"0&gt;="</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>condstr</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"=="</literal></expr>, <expr><literal type="string">"!="</literal></expr>, <expr><literal type="string">"&gt;="</literal></expr>, <expr><literal type="string">"&gt;"</literal></expr>, <expr><literal type="string">"&lt;="</literal></expr>, <expr><literal type="string">"&lt;"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cond</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cond</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>condstr</name><index>[<expr><name><name>cond</name><operator>-&gt;</operator><name>type</name></name> <operator>%</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name><name>condstr_single</name><index>[<expr><name><name>cond</name><operator>-&gt;</operator><name>type</name></name> <operator>%</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_cond_eval</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>RAnalCond</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>st64</name></type> <name>arg0</name> <init>= <expr><operator>(</operator><name>st64</name><operator>)</operator> <call><name>r_anal_value_to_ut64</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>cond</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cond</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>st64</name></type> <name>arg1</name> <init>= <expr><operator>(</operator><name>st64</name><operator>)</operator> <call><name>r_anal_value_to_ut64</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>cond</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>cond</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_COND_EQ</name></expr>:</case> <return>return <expr><name>arg0</name> <operator>==</operator> <name>arg1</name></expr>;</return>

<case>case <expr><name>R_ANAL_COND_NE</name></expr>:</case> <return>return <expr><name>arg0</name> <operator>!=</operator> <name>arg1</name></expr>;</return>

<case>case <expr><name>R_ANAL_COND_GE</name></expr>:</case> <return>return <expr><name>arg0</name> <operator>&gt;=</operator> <name>arg1</name></expr>;</return>

<case>case <expr><name>R_ANAL_COND_GT</name></expr>:</case> <return>return <expr><name>arg0</name> <operator>&gt;</operator> <name>arg1</name></expr>;</return>

<case>case <expr><name>R_ANAL_COND_LE</name></expr>:</case> <return>return <expr><name>arg0</name> <operator>&lt;=</operator> <name>arg1</name></expr>;</return>

<case>case <expr><name>R_ANAL_COND_LT</name></expr>:</case> <return>return <expr><name>arg0</name> <operator>&lt;</operator> <name>arg1</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name><name>cond</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_COND_EQ</name></expr>:</case> <return>return <expr><operator>!</operator><name>arg0</name></expr>;</return>

<case>case <expr><name>R_ANAL_COND_NE</name></expr>:</case> <return>return <expr><name>arg0</name></expr>;</return>

<case>case <expr><name>R_ANAL_COND_GT</name></expr>:</case> <return>return <expr><name>arg0</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_GE</name></expr>:</case> <return>return <expr><name>arg0</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_LT</name></expr>:</case> <return>return <expr><name>arg0</name><operator>&lt;</operator><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>R_ANAL_COND_LE</name></expr>:</case> <return>return <expr><name>arg0</name><operator>&lt;=</operator><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_anal_cond_to_string</name><parameter_list>(<parameter><decl><type><name>RAnalCond</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cnd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cond</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cnd</name> <operator>=</operator> <call><name>condstring</name> <argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>r_anal_value_to_string</name> <argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val1</name> <operator>=</operator> <call><name>r_anal_value_to_string</name> <argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val0</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>R_ANAL_COND_SINGLE</name> <argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val0len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>val0</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>out</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>val0len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>val0len</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>cnd</name></expr></argument>, <argument><expr><name>val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val1</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val0len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>val0</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>val1</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>out</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>val0len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>val0len</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s"</literal></expr></argument>, <argument><expr><name>val0</name></expr></argument>, <argument><expr><name>cnd</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>out</name></expr>?</condition><then> <expr><name>out</name></expr></then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalCond</name> <modifier>*</modifier></type><name>r_anal_cond_new_from_op</name><parameter_list>(<parameter><decl><type><name>RAnalOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalCond</name> <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cond</name> <operator>=</operator> <call><name>r_anal_cond_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>cond</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalCond</name> <modifier>*</modifier></type><name>r_anal_cond_new_from_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalCond</name> <modifier>*</modifier></type><name>cond</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RAnalCond</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>cond</name></expr>;</return>

</block_content>}</block></function>

</unit>
