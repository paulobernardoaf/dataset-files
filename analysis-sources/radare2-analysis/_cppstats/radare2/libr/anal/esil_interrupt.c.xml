<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\esil_interrupt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sdb.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_interrupt_free_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalEsilInterrupt</name> <modifier>*</modifier></type><name>intr</name> <init>= <expr><operator>(</operator><name>RAnalEsilInterrupt</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>intr</name> <operator>&amp;&amp;</operator> <name><name>intr</name><operator>-&gt;</operator><name>handler</name></name> <operator>&amp;&amp;</operator> <name><name>intr</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>fini</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>intr</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>fini</name></name> <argument_list>(<argument><expr><name><name>intr</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>intr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_set_interrupt</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>RAnalEsilInterrupt</name> <modifier>*</modifier></type><name>intr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>intr</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>num</name></name></expr> ?</condition><then>

<expr><call><name>dict_set</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>interrupts</name></name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>intr</name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><operator>(</operator><name><name>esil</name><operator>-&gt;</operator><name>intr0</name></name> <operator>=</operator> <name>intr</name><operator>,</operator> <name>true</name><operator>)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnalEsilInterrupt</name> <modifier>*</modifier></type><name>_get_interrupt</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>intr_num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>intr_num</name></expr> ?</condition><then>

<expr><operator>(</operator><name>RAnalEsilInterrupt</name> <operator>*</operator><operator>)</operator><call><name>dict_getu</name><argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>interrupts</name></name></expr></argument>, <argument><expr><name>intr_num</name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><name><name>esil</name><operator>-&gt;</operator><name>intr0</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_del_interrupt</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>intr_num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>intr_num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dict_del</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>interrupts</name></name></expr></argument>, <argument><expr><name>intr_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>intr0</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_esil_interrupts_init</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>interrupts</name></name> <operator>=</operator> <call><name>dict_new</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>intr0</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RAnalEsilInterrupt</name> <modifier>*</modifier></type><name>r_anal_esil_interrupt_new</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>src_id</name></decl></parameter>, <parameter><decl><type><name>RAnalEsilInterruptHandler</name> <modifier>*</modifier></type><name>ih</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>esil</name> <operator>&amp;&amp;</operator> <name>ih</name> <operator>&amp;&amp;</operator> <name><name>ih</name><operator>-&gt;</operator><name>cb</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalEsilInterrupt</name> <modifier>*</modifier></type><name>intr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalEsilInterrupt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>intr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>ih</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ih</name><operator>-&gt;</operator><name>init</name></name> <operator>&amp;&amp;</operator> <name><name>ih</name><operator>-&gt;</operator><name>fini</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <call><name><name>ih</name><operator>-&gt;</operator><name>init</name></name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>src_id</name></name> <operator>=</operator> <name>src_id</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_claim_source</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>src_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>intr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_esil_interrupt_free</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>RAnalEsilInterrupt</name> <modifier>*</modifier></type><name>intr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>intr</name> <operator>&amp;&amp;</operator> <name>esil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_del_interrupt</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>intr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>intr</name><operator>-&gt;</operator><name>user</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>intr</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>fini</name></name> <argument_list>(<argument><expr><name><name>intr</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_esil_release_source</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>src_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>intr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_esil_set_interrupt</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>RAnalEsilInterrupt</name> <modifier>*</modifier></type><name>intr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>esil</name> <operator>&amp;&amp;</operator> <name><name>esil</name><operator>-&gt;</operator><name>interrupts</name></name> <operator>&amp;&amp;</operator> <name>intr</name> <operator>&amp;&amp;</operator> <name><name>intr</name><operator>-&gt;</operator><name>handler</name></name> <operator>&amp;&amp;</operator> <name><name>intr</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>cb</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalEsilInterrupt</name> <modifier>*</modifier></type><name>o_intr</name> <init>= <expr><call><name>_get_interrupt</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>o_intr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_esil_interrupt_free</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>o_intr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>_set_interrupt</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>intr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_esil_fire_interrupt</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>intr_num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>esil</name><operator>-&gt;</operator><name>cmd</name></name> <operator>&amp;&amp;</operator> <call><name><name>esil</name><operator>-&gt;</operator><name>cmd</name></name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>cmd_intr</name></name></expr></argument>, <argument><expr><name>intr_num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>esil</name><operator>-&gt;</operator><name>interrupts</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"no interrupts initialized\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalEsilInterrupt</name> <modifier>*</modifier></type><name>intr</name> <init>= <expr><call><name>_get_interrupt</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>intr_num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (!intr) {

eprintf ("Warning no interrupt handler registered for 0x%x\n", intr_num);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>intr</name> <operator>&amp;&amp;</operator> <name><name>intr</name><operator>-&gt;</operator><name>handler</name></name> <operator>&amp;&amp;</operator> <name><name>intr</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>cb</name></name><operator>)</operator></expr> ?</condition><then>

<expr><call><name><name>intr</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>intr_num</name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_esil_load_interrupts</name> <parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>RAnalEsilInterruptHandler</name> <modifier>*</modifier></type><name><name>handlers</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>src_id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalEsilInterrupt</name> <modifier>*</modifier></type><name>intr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>esil</name> <operator>&amp;&amp;</operator> <name><name>esil</name><operator>-&gt;</operator><name>interrupts</name></name> <operator>&amp;&amp;</operator> <name>handlers</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>handlers</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>intr</name> <operator>=</operator> <call><name>_get_interrupt</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>handlers</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>intr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_esil_interrupt_free</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>intr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>intr</name> <operator>=</operator> <call><name>r_anal_esil_interrupt_new</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>src_id</name></expr></argument>, <argument><expr><name><name>handlers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>intr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_interrupt</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>intr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_anal_esil_load_interrupts_from_lib</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>src_id</name> <init>= <expr><call><name>r_anal_esil_load_source</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src_id</name></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalEsilInterruptHandler</name> <modifier>*</modifier><modifier>*</modifier></type><name>handlers</name> <init>= <expr><operator>(</operator><name>RAnalEsilInterruptHandler</name> <operator>*</operator><operator>*</operator><operator>)</operator>\

<call><name>r_lib_dl_sym</name> <argument_list>(<argument><expr><call><name>r_anal_esil_get_source</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>src_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"interrupts"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handlers</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_esil_release_source</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>src_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_anal_esil_load_interrupts</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>handlers</name></expr></argument>, <argument><expr><name>src_id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_esil_interrupts_fini</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>esil</name> <operator>&amp;&amp;</operator> <name><name>esil</name><operator>-&gt;</operator><name>interrupts</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_interrupt_free_cb</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>intr0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>intr0</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>interrupts</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>_interrupt_free_cb</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_free</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>interrupts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>interrupts</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
