<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\esil2reil.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REIL_TEMP_PREFIX</name></cpp:macro> <cpp:value>"V"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REIL_REG_PREFIX</name></cpp:macro> <cpp:value>"R_"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGBUFSZ</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>reil_flag_spew_inst</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ops</name><index>[]</index></name> <init>= <expr><block>{ <macro><name>FOREACHOP</name><argument_list>(<argument>REIL_OP_STRING</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>esil_internal_sizeof_reg</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>esil</name> <operator>||</operator> <operator>!</operator><name><name>esil</name><operator>-&gt;</operator><name>anal</name></name> <operator>||</operator> <operator>!</operator><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name> <operator>||</operator> <operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>r_reg_get</name><argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><operator>(</operator><name>ut8</name><operator>)</operator><name><name>i</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAnalReilArgType</name></type> <name>reil_get_arg_type</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>REIL_TEMP_PREFIX</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>REIL_TEMP_PREFIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ARG_TEMP</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>r_anal_esil_get_parm_type</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_ESIL_PARM_REG</name></expr>:</case>

<return>return <expr><name>ARG_REG</name></expr>;</return>

<case>case <expr><name>R_ANAL_ESIL_PARM_NUM</name></expr>:</case>

<return>return <expr><name>ARG_CONST</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>ARG_NONE</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reil_push_arg</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_esil_push</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>reil_pop_arg</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp_buf</name><index>[<expr><name>REGBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_anal_esil_pop</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>R_NEW0</name><argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tmp_buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tmp_buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>tmp_buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>reil_get_arg_type</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ARG_REG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>esil_internal_sizeof_reg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ARG_CONST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>op</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>reil_get_arg_type</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>op</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_next_temp_reg</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>REGBUFSZ</name></expr></argument>, <argument><expr><name>REIL_TEMP_PREFIX</name><literal type="string">"_%02"</literal><name>PFMT64u</name></expr></argument>,

<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>reilNextTemp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>reilNextTemp</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reil_make_arg</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalReilArgType</name></type> <name>type</name> <init>= <expr><call><name>reil_get_arg_type</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reil_free_inst</name><parameter_list>(<parameter><decl><type><name>RAnalReilInst</name> <modifier>*</modifier></type><name>ins</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reil_print_inst</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>RAnalReilInst</name> <modifier>*</modifier></type><name>ins</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins</name> <operator>||</operator> <operator>!</operator><name>esil</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name><argument_list>(<argument><expr><literal type="string">"%04"</literal><name>PFMT64x</name><literal type="string">".%02"</literal><name>PFMT64x</name><literal type="string">": %8s"</literal></expr></argument>,

<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>seq_num</name></name><operator>++</operator></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name><name>ins</name><operator>-&gt;</operator><name>opcode</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" ,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>ARG_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%10s "</literal></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>ARG_REG</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_buf</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>REIL_REG_PREFIX</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%10s:%02d"</literal></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%10s:%02d"</literal></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>cb_printf</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reil_cast_size</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp_buf</name><index>[<expr><name>REGBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilInst</name> <modifier>*</modifier></type><name>ins</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name> <operator>||</operator> <operator>!</operator><name>dst</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>dst</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>REGBUFSZ</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0:%d"</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_push</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>REIL_OR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name><argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_next_temp_reg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_print_inst</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_eq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilInst</name> <modifier>*</modifier></type><name>ins</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp_buf</name><index>[<expr><name>REGBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilArgType</name></type> <name>src_type</name></decl>, <decl><type ref="prev"/><name>dst_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src_type</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src_type</name> <operator>==</operator> <name>ARG_ESIL_INTERNAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_flag_spew_inst</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src_type</name> <operator>==</operator> <name>ARG_REG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>REIL_STR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name><argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_next_temp_reg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>=</operator> <name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_print_inst</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>( <argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst_type</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src_type</name> <operator>!=</operator> <name>ARG_ESIL_INTERNAL</name> <operator>&amp;&amp;</operator> <name>dst_type</name> <operator>==</operator> <name>ARG_REG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>REIL_STR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_next_temp_reg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>=</operator> <name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_print_inst</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_snprintf</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>old</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>old</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>,

<argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_snprintf</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>lastsz</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>REIL_JCC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_push</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"1:1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_print_inst</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_cast_size</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>REIL_STR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_print_inst</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>reil_binop</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>RAnalReilOpcode</name></type> <name>opcode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilInst</name> <modifier>*</modifier></type><name>ins</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp_buf</name><index>[<expr><name>REGBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>dst_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>op1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>op2</name> <operator>=</operator> <call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>op2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>op1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name><argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_next_temp_reg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_size</name> <operator>=</operator> <name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_size</name> <operator>&lt;</operator> <name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dst_size</name> <operator>=</operator> <name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>REIL_LT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dst_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>=</operator> <name>dst_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_print_inst</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_free_inst</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>reil_bineqop</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>RAnalReilOpcode</name></type> <name>opcode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>reil_binop</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>reil_eq</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_add</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_binop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_ADD</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_addeq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_bineqop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_ADD</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mul</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_binop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_MUL</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_muleq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_bineqop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_MUL</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_sub</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_binop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_SUB</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_subeq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_bineqop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_SUB</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_div</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_binop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_DIV</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_diveq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_bineqop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_DIV</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_xor</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_binop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_XOR</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_xoreq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_bineqop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_XOR</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_and</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_binop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_AND</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_andeq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_bineqop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_AND</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_or</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_binop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_OR</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_oreq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_bineqop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_OR</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_lsl</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_binop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_SHL</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_lsleq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_bineqop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_SHL</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_lsr</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_binop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_SHR</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_lsreq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_bineqop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_SHR</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_smaller</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_binop</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_LT</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_cmp</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilInst</name> <modifier>*</modifier></type><name>ins</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp_buf</name><index>[<expr><name>REGBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>op1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>op2</name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>REIL_EQ</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>op2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>op1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_next_temp_reg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_print_inst</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_snprintf</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>old</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>,

<argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_snprintf</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>old</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>,

<argument><expr><name><name>op2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>op2</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>op2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>lastsz</name></name> <operator>=</operator> <name><name>op2</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>r_reg_get</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><name><name>op1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>lastsz</name></name> <operator>=</operator> <name><name>op1</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_smaller_equal</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>op1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>op2</name> <operator>=</operator> <call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_smaller</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_cmp</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_or</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name><argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name><argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_larger</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op2</name> <init>= <expr><call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op1</name> <init>= <expr><call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_smaller</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_larger_equal</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>op1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>op2</name> <operator>=</operator> <call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_smaller_equal</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_dec</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_sub</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_deceq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op1</name> <init>= <expr><call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op1</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_dec</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_eq</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_inc</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_add</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_inceq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_inc</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_eq</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_neg</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp_buf</name><index>[<expr><name>REGBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilInst</name> <modifier>*</modifier></type><name>ins</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>REIL_EQ</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_next_temp_reg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>&lt;</operator> <name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>=</operator> <name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_print_inst</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_negeq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_neg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_eq</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_not</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp_buf</name><index>[<expr><name>REGBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilInst</name> <modifier>*</modifier></type><name>ins</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>REIL_NOT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_next_temp_reg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>=</operator> <name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_print_inst</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_if</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilInst</name> <modifier>*</modifier></type><name>ins</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>op1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>op2</name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>REIL_JCC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>op1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>op2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_print_inst</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_if_end</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_peek</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilInst</name> <modifier>*</modifier></type><name>ins</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp_buf</name><index>[<expr><name>REGBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op1</name> <init>= <expr><call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op1</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>REIL_LDM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>op1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name><argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name><argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_next_temp_reg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>=</operator> <name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_print_inst</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_free_inst</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_peekn</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op1</name> <init>= <expr><call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op1</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_peek</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op1</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>op2</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op2</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>n</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op2</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ARG_TEMP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_next_temp_reg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>op2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_cast_size</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>lastsz</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_peek1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_peekn</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_peek2</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_peekn</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_peek4</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_peekn</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_peek8</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_peekn</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_poken</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp_buf</name><index>[<expr><name>REGBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilInst</name> <modifier>*</modifier></type><name>ins</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>op1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>op2</name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op1</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ARG_ESIL_INTERNAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>REIL_LDM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>op2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name><argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name><argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_next_temp_reg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>=</operator> <name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_print_inst</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_snprintf</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>old</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>old</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>,

<argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_snprintf</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>,

<argument><expr><name><name>op2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>op2</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>lastsz</name></name> <operator>=</operator> <name>n</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>reil_flag_spew_inst</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>op1</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ins</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>REIL_STM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RAnalReilArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reil_free_inst</name> <argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_make_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>ins</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_print_inst</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_free_inst</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_poke</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>reil_poken</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_poke1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_poken</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_poke2</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_poken</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_poke4</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_poken</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_poke8</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_poken</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_bineq_n</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>RAnalReilOpcode</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>op1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>op2</name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <call><name>reil_pop_arg</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>reil_peekn</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>reil_binop</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>reil_poken</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_oreq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_OR</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_oreq1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_OR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_oreq2</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_OR</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_oreq4</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_OR</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_oreq8</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_OR</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_andeq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_AND</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_andeq1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_AND</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_andeq2</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_AND</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_andeq4</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_AND</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_andeq8</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_AND</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_xoreq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_XOR</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_xoreq1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_XOR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_xoreq2</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_XOR</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_xoreq4</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_XOR</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_xoreq8</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_XOR</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_addeq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_ADD</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_addeq1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_ADD</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_addeq2</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_ADD</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_addeq4</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_ADD</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_addeq8</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_ADD</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_subeq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_SUB</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_subeq1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_SUB</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_subeq2</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_SUB</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_subeq4</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_SUB</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_subeq8</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_SUB</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_muleq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_MUL</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_muleq1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_MUL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_muleq2</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_MUL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_muleq4</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_MUL</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_muleq8</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_MUL</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_inceq_n</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op1</name> <init>= <expr><call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op1</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_ADD</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_inceq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>reil_mem_inceq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_inceq1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_inceq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_inceq2</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_inceq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_inceq4</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_inceq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_inceq8</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_inceq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>reil_mem_deceq_n</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op1</name> <init>= <expr><call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op1</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <call><name>reil_mem_bineq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>REIL_SUB</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_deceq</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>reil_mem_deceq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_deceq1</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_deceq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_deceq2</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_deceq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_deceq4</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_deceq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>reil_mem_deceq8</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>reil_mem_deceq_n</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>reil_generate_mask</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_lsl</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_dec</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reil_generate_borrow_flag</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>bit</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op1</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_and</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_add</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_and</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_generate_mask</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_push</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>old</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_and</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_push</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_and</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_larger</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reil_generate_carry_flag</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>bit</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op1</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_and</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_generate_mask</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_push</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>old</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_and</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_push</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_and</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_smaller</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reil_generate_partity_flag</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_esil_push</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_and</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_lsr</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_lsr</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_xor</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_lsr</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_lsr</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_xor</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_xor</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_lsr</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_lsr</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_xor</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_lsr</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_xor</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_xor</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_xor</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_and</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_not</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reil_generate_signature</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>lastsz</name></name> <operator>||</operator> <name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>lastsz</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalReilArg</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>lastsz</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_lsl</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_push</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_and</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>reil_pop_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>lastsz</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_push_arg</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_lsr</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reil_generate_overflow_flag</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>lastsz</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name> <argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reil_generate_borrow_flag</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>lastsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_generate_carry_flag</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>lastsz</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_xor</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reil_flag_spew_inst</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>bit</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>flag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'z'</literal></expr>:</case> 

<expr_stmt><expr><call><name>r_anal_esil_push</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><call><name>r_num_get</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>flag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_generate_borrow_flag</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><call><name>r_num_get</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>flag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reil_generate_carry_flag</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case>

<expr_stmt><expr><call><name>reil_generate_overflow_flag</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><call><name>reil_generate_partity_flag</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_anal_esil_pushnum</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><call><name>reil_generate_signature</name><argument_list>(<argument><expr><name>esil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return;</return>

</block_content>}</block></switch>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>setup_reil_ins</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>addr</name></name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>seq_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_anal_esil_to_reil_setup</name><parameter_list>(<parameter><decl><type><name>RAnalEsil</name> <modifier>*</modifier></type><name>esil</name></decl></parameter>, <parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>romem</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stats</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>esil</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name></name> <operator>=</operator> <name>anal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>trap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>trap_code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>hook_command</name></name> <operator>=</operator> <name>setup_reil_ins</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name></name> <operator>=</operator> <call><name>R_NEW0</name><argument_list>(<argument><expr><name>RAnalReil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>esil</name><operator>-&gt;</operator><name>Reil</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>reilNextTemp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>seq_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>r_reg_get_name</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>, <argument><expr><call><name>r_reg_get_name_idx</name> <argument_list>(<argument><expr><literal type="string">"PC"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>esil</name><operator>-&gt;</operator><name>Reil</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_mem_ro</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><name>romem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_UNK</name></cpp:macro> <cpp:value>R_ANAL_ESIL_OP_TYPE_UNKNOWN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_CTR</name></cpp:macro> <cpp:value>R_ANAL_ESIL_OP_TYPE_CONTROL_FLOW</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_MATH</name></cpp:macro> <cpp:value>R_ANAL_ESIL_OP_TYPE_MATH</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_REGW</name></cpp:macro> <cpp:value>R_ANAL_ESIL_OP_TYPE_REG_WRITE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_MEMW</name></cpp:macro> <cpp:value>R_ANAL_ESIL_OP_TYPE_MEM_WRITE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_MEMR</name></cpp:macro> <cpp:value>R_ANAL_ESIL_OP_TYPE_MEM_READ</cpp:value></cpp:define>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><name>reil_eq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_REGW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>reil_add</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"+="</literal></expr></argument>, <argument><expr><name>reil_addeq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_REGW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>reil_sub</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"-="</literal></expr></argument>, <argument><expr><name>reil_subeq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_REGW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><name>reil_mul</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"*="</literal></expr></argument>, <argument><expr><name>reil_muleq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_REGW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>reil_div</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"/="</literal></expr></argument>, <argument><expr><name>reil_diveq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_REGW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>reil_xor</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"^="</literal></expr></argument>, <argument><expr><name>reil_xoreq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_REGW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>, <argument><expr><name>reil_or</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"|="</literal></expr></argument>, <argument><expr><name>reil_oreq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_REGW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>, <argument><expr><name>reil_and</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&amp;="</literal></expr></argument>, <argument><expr><name>reil_andeq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_REGW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;"</literal></expr></argument>, <argument><expr><name>reil_lsl</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;="</literal></expr></argument>, <argument><expr><name>reil_lsleq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_REGW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;"</literal></expr></argument>, <argument><expr><name>reil_lsr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;="</literal></expr></argument>, <argument><expr><name>reil_lsreq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_REGW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"++="</literal></expr></argument>, <argument><expr><name>reil_inceq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_REGW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"++"</literal></expr></argument>, <argument><expr><name>reil_inc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"--="</literal></expr></argument>, <argument><expr><name>reil_deceq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_REGW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><name>reil_dec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>, <argument><expr><name>reil_neg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"!="</literal></expr></argument>, <argument><expr><name>reil_negeq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"=="</literal></expr></argument>, <argument><expr><name>reil_cmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>, <argument><expr><name>reil_smaller</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><name>reil_larger</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&lt;="</literal></expr></argument>, <argument><expr><name>reil_smaller_equal</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&gt;="</literal></expr></argument>, <argument><expr><name>reil_larger_equal</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><name>reil_peek</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MEMR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"=[]"</literal></expr></argument>, <argument><expr><name>reil_poke</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"|=[]"</literal></expr></argument>, <argument><expr><name>reil_mem_oreq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"^=[]"</literal></expr></argument>, <argument><expr><name>reil_mem_xoreq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&amp;=[]"</literal></expr></argument>, <argument><expr><name>reil_mem_andeq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"+=[]"</literal></expr></argument>, <argument><expr><name>reil_mem_addeq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"-=[]"</literal></expr></argument>, <argument><expr><name>reil_mem_subeq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"*=[]"</literal></expr></argument>, <argument><expr><name>reil_mem_muleq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"++=[]"</literal></expr></argument>, <argument><expr><name>reil_mem_inceq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"--=[]"</literal></expr></argument>, <argument><expr><name>reil_mem_deceq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"=[1]"</literal></expr></argument>, <argument><expr><name>reil_poke1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"=[2]"</literal></expr></argument>, <argument><expr><name>reil_poke2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"=[4]"</literal></expr></argument>, <argument><expr><name>reil_poke4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"=[8]"</literal></expr></argument>, <argument><expr><name>reil_poke8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"[1]"</literal></expr></argument>, <argument><expr><name>reil_peek1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MEMR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"[2]"</literal></expr></argument>, <argument><expr><name>reil_peek2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MEMR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"[4]"</literal></expr></argument>, <argument><expr><name>reil_peek4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MEMR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"[8]"</literal></expr></argument>, <argument><expr><name>reil_peek8</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MEMR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"|=[1]"</literal></expr></argument>, <argument><expr><name>reil_mem_oreq1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"|=[2]"</literal></expr></argument>, <argument><expr><name>reil_mem_oreq2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"|=[4]"</literal></expr></argument>, <argument><expr><name>reil_mem_oreq4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"|=[8]"</literal></expr></argument>, <argument><expr><name>reil_mem_oreq8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"^=[1]"</literal></expr></argument>, <argument><expr><name>reil_mem_xoreq1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"^=[2]"</literal></expr></argument>, <argument><expr><name>reil_mem_xoreq2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"^=[4]"</literal></expr></argument>, <argument><expr><name>reil_mem_xoreq4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"^=[8]"</literal></expr></argument>, <argument><expr><name>reil_mem_xoreq8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&amp;=[1]"</literal></expr></argument>, <argument><expr><name>reil_mem_andeq1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&amp;=[2]"</literal></expr></argument>, <argument><expr><name>reil_mem_andeq2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&amp;=[4]"</literal></expr></argument>, <argument><expr><name>reil_mem_andeq4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"&amp;=[8]"</literal></expr></argument>, <argument><expr><name>reil_mem_andeq8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"+=[1]"</literal></expr></argument>, <argument><expr><name>reil_mem_addeq1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"+=[2]"</literal></expr></argument>, <argument><expr><name>reil_mem_addeq2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"+=[4]"</literal></expr></argument>, <argument><expr><name>reil_mem_addeq4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"+=[8]"</literal></expr></argument>, <argument><expr><name>reil_mem_addeq8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"-=[1]"</literal></expr></argument>, <argument><expr><name>reil_mem_subeq1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"-=[2]"</literal></expr></argument>, <argument><expr><name>reil_mem_subeq2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"-=[4]"</literal></expr></argument>, <argument><expr><name>reil_mem_subeq4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"-=[8]"</literal></expr></argument>, <argument><expr><name>reil_mem_subeq8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"*=[1]"</literal></expr></argument>, <argument><expr><name>reil_mem_muleq1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"*=[2]"</literal></expr></argument>, <argument><expr><name>reil_mem_muleq2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"*=[4]"</literal></expr></argument>, <argument><expr><name>reil_mem_muleq4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"*=[8]"</literal></expr></argument>, <argument><expr><name>reil_mem_muleq8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"++=[1]"</literal></expr></argument>, <argument><expr><name>reil_mem_inceq1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"++=[2]"</literal></expr></argument>, <argument><expr><name>reil_mem_inceq2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"++=[4]"</literal></expr></argument>, <argument><expr><name>reil_mem_inceq4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"++=[8]"</literal></expr></argument>, <argument><expr><name>reil_mem_inceq8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"--=[1]"</literal></expr></argument>, <argument><expr><name>reil_mem_deceq1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"--=[2]"</literal></expr></argument>, <argument><expr><name>reil_mem_deceq2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"--=[4]"</literal></expr></argument>, <argument><expr><name>reil_mem_deceq4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"--=[8]"</literal></expr></argument>, <argument><expr><name>reil_mem_deceq8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_MATH</name> <operator>|</operator> <name>OT_MEMR</name> <operator>|</operator> <name>OT_MEMW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"?{"</literal></expr></argument>, <argument><expr><name>reil_if</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OT_CTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_esil_set_op</name><argument_list>(<argument><expr><name>esil</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>, <argument><expr><name>reil_if_end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OT_CTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
