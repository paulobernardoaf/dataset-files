<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\sign.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_sign.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_search.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_hash.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>R_LIB_VERSION</name> <argument_list>(<argument><expr><name>r_sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGN_DIFF_MATCH_BYTES_THRESHOLD</name></cpp:macro> <cpp:value>1.0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGN_DIFF_MATCH_GRAPH_THRESHOLD</name></cpp:macro> <cpp:value>1.0</cpp:value></cpp:define>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getRealRef</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_flag_get_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>list</argument>, <argument>iter</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"sym."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>

</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_sign_fcn_vars</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>fcn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>coreb</name><operator>.</operator><name>core</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalVar</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>reg_vars</name> <init>= <expr><call><name>r_anal_var_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>R_ANAL_VAR_KIND_REG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>spv_vars</name> <init>= <expr><call><name>r_anal_var_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>R_ANAL_VAR_KIND_SPV</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>bpv_vars</name> <init>= <expr><call><name>r_anal_var_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>R_ANAL_VAR_KIND_BPV</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bpv_vars</argument>, <argument>iter</argument>, <argument>var</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"b%d"</literal></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>r_list_foreach</name> <argument_list>(<argument>spv_vars</argument>, <argument>iter</argument>, <argument>var</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"s%d"</literal></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>r_list_foreach</name> <argument_list>(<argument>reg_vars</argument>, <argument>iter</argument>, <argument>var</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"r%d"</literal></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>reg_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>bpv_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>spv_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_sign_fcn_types</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>fcn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>args_expr</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"func.%s.args"</literal></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ret_type</name> <init>= <expr><call><name>sdb_const_get</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"func.%s.ret"</literal></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fcntypes</name> <init>= <expr><call><name>sdb_const_get</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><name>args_expr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fcntypes</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret_type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"func.%s.ret=%s"</literal></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>ret_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>fcntypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"func.%s.args=%d"</literal></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>sdb_const_get</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_types</name></name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"func.%s.arg.%d"</literal></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"func.%s.arg.%d=\"%s\""</literal></expr></argument>, <argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>args_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_sign_fcn_xrefs</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalRef</name> <modifier>*</modifier></type><name>refi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>fcn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>coreb</name><operator>.</operator><name>core</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>xrefs</name> <init>= <expr><call><name>r_anal_function_get_xrefs</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>xrefs</argument>, <argument>iter</argument>, <argument>refi</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>refi</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_REF_TYPE_CODE</name> <operator>||</operator> <name><name>refi</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_REF_TYPE_CALL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><call><name>getRealRef</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>refi</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>xrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_sign_fcn_refs</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalRef</name> <modifier>*</modifier></type><name>refi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>fcn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>coreb</name><operator>.</operator><name>core</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><call><name>r_anal_function_get_refs</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>refs</argument>, <argument>iter</argument>, <argument>refi</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>refi</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_REF_TYPE_CODE</name> <operator>||</operator> <name><name>refi</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_REF_TYPE_CALL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><call><name>getRealRef</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>refi</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>zign_types_to_list</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>types</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>quoted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>types</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>quoted</name> <operator>=</operator> <operator>!</operator><name>quoted</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>types</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>quoted</name><operator>)</operator> <operator>||</operator> <name><name>types</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>types</name> <operator>+</operator> <name>prev</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>token</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_deserialize</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vars</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>types</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nrefs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nvars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>it</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>v</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>k2</name> <init>= <expr><call><name>r_str_new</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>v2</name> <init>= <expr><call><name>r_str_new</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>k2</name> <operator>||</operator> <operator>!</operator><name>v2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>r_str_split</name> <argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"zign"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid entry in the zigns database\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <call><name>r_spaces_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>, <argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>r_str_split</name> <argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word</name> <init>= <expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>word</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>word</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <name>word</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>word</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Corrupted zignatures database (%s)\n"</literal></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RSignType</name></type> <name>st</name> <init>= <expr><operator>(</operator><name>RSignType</name><operator>)</operator><operator>*</operator><name>word</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_SIGN_ANAL</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_SIGN_NAME</name></expr>:</case>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>realname</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_SIGN_COMMENT</name></expr>:</case>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_SIGN_GRAPH</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RSignGraph</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>graph</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSignGraph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_hex_str2bin</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name><name>it</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_SIGN_OFFSET</name></expr>:</case>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <call><name>atoll</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_SIGN_REFS</name></expr>:</case>

<expr_stmt><expr><name>refs</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nrefs</name> <operator>=</operator> <call><name>r_str_split</name> <argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nrefs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrefs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_SIGN_XREFS</name></expr>:</case>

<expr_stmt><expr><name>refs</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nrefs</name> <operator>=</operator> <call><name>r_str_split</name> <argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nrefs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>xrefs</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrefs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>xrefs</name></name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_SIGN_VARS</name></expr>:</case>

<expr_stmt><expr><name>vars</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nvars</name> <operator>=</operator> <call><name>r_str_split</name> <argument_list>(<argument><expr><name>vars</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nvars</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>vars</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nvars</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>vars</name></name></expr></argument>, <argument><expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>vars</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_SIGN_TYPES</name></expr>:</case>

<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>types</name></name> <operator>=</operator> <call><name>zign_types_to_list</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_SIGN_BBHASH</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSignHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>hash</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_SIGN_BYTES</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Missing bytes-size command before bytes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_hex_str2bin</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_SIGN_BYTES_MASK</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Missing bytes-size command before bytes-mask\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_hex_str2bin</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_SIGN_BYTES_SIZE</name></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSignBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unsupported (%s)\n"</literal></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>w</name> <operator>==</operator> <name>n</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>serializeKey</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RSpace</name> <modifier>*</modifier></type><name>space</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>R_SIGN_KEY_MAXSZ</name></expr></argument>, <argument><expr><literal type="string">"zign|%s|%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>space</name></expr>?</condition><then> <expr><name><name>space</name><operator>-&gt;</operator><name>name</name></name></expr></then><else>: <expr><literal type="string">"*"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>serializeKeySpaceStr</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>space</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>R_SIGN_KEY_MAXSZ</name></expr></argument>, <argument><expr><literal type="string">"zign|%s|%s"</literal></expr></argument>, <argument><expr><name>space</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hexbytes</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hexmask</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hexgraph</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xrefs</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>var</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vars</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>types</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignBytes</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignGraph</name> <modifier>*</modifier></type><name>graph</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>graph</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignHash</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>hash</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>serializeKey</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>bytes</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hexbytes</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hexmask</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hexbytes</name> <operator>||</operator> <operator>!</operator><name>hexmask</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hexbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hexmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name><name>bytes</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_hex_bin2str</name> <argument_list>(<argument><expr><name><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>hexbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bytes</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name><name>bytes</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_hex_bin2str</name> <argument_list>(<argument><expr><name><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>hexmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>graph</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hexgraph</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RSignGraph</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hexgraph</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_hex_bin2str</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name>graph</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RSignGraph</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>hexgraph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>it-&gt;refs</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>refs</name> <operator>=</operator> <call><name>r_str_appendch</name> <argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>refs</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>it-&gt;xrefs</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>xrefs</name> <operator>=</operator> <call><name>r_str_appendch</name> <argument_list>(<argument><expr><name>xrefs</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xrefs</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>xrefs</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>it-&gt;vars</argument>, <argument>iter</argument>, <argument>var</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vars</name> <operator>=</operator> <call><name>r_str_appendch</name> <argument_list>(<argument><expr><name>vars</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vars</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>vars</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>it-&gt;types</argument>, <argument>iter</argument>, <argument>type</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>r_str_appendch</name> <argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>RStrBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><call><name>r_strbuf_new</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"|s:%d|b:%s|m:%s"</literal></expr></argument>, <argument><expr><name><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>hexbytes</name></expr></argument>, <argument><expr><name>hexmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>addr</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"|%c:%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name>R_SIGN_OFFSET</name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>graph</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"|%c:%s"</literal></expr></argument>, <argument><expr><name>R_SIGN_GRAPH</name></expr></argument>, <argument><expr><name>hexgraph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>refs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"|%c:%s"</literal></expr></argument>, <argument><expr><name>R_SIGN_REFS</name></expr></argument>, <argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xrefs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"|%c:%s"</literal></expr></argument>, <argument><expr><name>R_SIGN_XREFS</name></expr></argument>, <argument><expr><name>xrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vars</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"|%c:%s"</literal></expr></argument>, <argument><expr><name>R_SIGN_VARS</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>types</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"|%c:%s"</literal></expr></argument>, <argument><expr><name>R_SIGN_TYPES</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>comment</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"|%c:%s"</literal></expr></argument>, <argument><expr><name>R_SIGN_COMMENT</name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>realname</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"|%c:%s"</literal></expr></argument>, <argument><expr><name>R_SIGN_NAME</name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>&amp;&amp;</operator> <name><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"|%c:%s"</literal></expr></argument>, <argument><expr><name>R_SIGN_BBHASH</name></expr></argument>, <argument><expr><name><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_strbuf_length</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>R_SIGN_VAL_MAXSZ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Signature limit reached for 0x%08"</literal><name>PFMT64x</name><literal type="string">" (%s)\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_strbuf_drain</name> <argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>R_SIGN_VAL_MAXSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hexbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hexmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hexgraph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>xrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mergeItem</name><parameter_list>(<parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ref</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>var</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSignBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>space</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>graph</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSignGraph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>dst</name><operator>-&gt;</operator><name>graph</name></name> <operator>=</operator> <operator>*</operator><name><name>src</name><operator>-&gt;</operator><name>graph</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>comment</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>realname</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>realname</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>addr</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>refs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>src-&gt;refs</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><call><name>r_str_new</name> <argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>vars</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>vars</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>src-&gt;vars</argument>, <argument>iter</argument>, <argument>var</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>vars</name></name></expr></argument>, <argument><expr><call><name>r_str_new</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>types</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>types</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>src-&gt;types</argument>, <argument>iter</argument>, <argument>type</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>types</name></name></expr></argument>, <argument><expr><call><name>r_str_new</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>hash</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>hash</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSignHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>hash</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>addItem</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><name>R_SIGN_KEY_MAXSZ</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>val</name><index>[<expr><name>R_SIGN_VAL_MAXSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>curval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>curit</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>curit</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>serialize</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curval</name> <operator>=</operator> <call><name>sdb_const_get</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curval</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_sign_deserialize</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>curit</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>curval</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: cannot deserialize zign\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mergeItem</name> <argument_list>(<argument><expr><name>curit</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serialize</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>curit</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>curit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>addHash</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSignHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>hash</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_SIGN_BBHASH</name></expr>:</case>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>addItem</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>addBBHash</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSignHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>hash</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>digest_hex</name> <init>= <expr><call><name>r_sign_calc_bbhash</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>digest_hex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>digest_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name> <operator>=</operator> <name>digest_hex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>addItem</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>addBytes</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_mem_is_zero</name> <argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: zero mask\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSignBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>addItem</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name>it</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_add_hash</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>name</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>R_SIGN_BBHASH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: hash type unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>digestsize</name> <init>= <expr><call><name>r_hash_size</name> <argument_list>(<argument><expr><name>R_ZIGN_HASH</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>digestsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: invalid hash size: %d (%s digest size is %d)\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ZIGN_HASH</name></expr></argument>, <argument><expr><name>digestsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>addHash</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_add_bb_hash</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>fcn</name> <operator>&amp;&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>addBBHash</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_add_bytes</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>name</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bytes</name> <operator>&amp;&amp;</operator> <name>mask</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>addBytes</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_add_anal</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>name</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bytes</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>mask</name> <init>= <expr><call><name>r_anal_mask</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>addBytes</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_add_graph</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>RSignGraph</name></type> <name>graph</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name> <operator>||</operator> <operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>graph</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSignGraph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>it</name><operator>-&gt;</operator><name>graph</name></name> <operator>=</operator> <name>graph</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>addItem</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_add_comment</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comment</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>name</name> <operator>&amp;&amp;</operator> <name>comment</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><call><name>addItem</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_add_name</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>realname</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>name</name> <operator>&amp;&amp;</operator> <name>realname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>it</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>realname</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>realname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><call><name>addItem</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_add_addr</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>name</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>!=</operator> <name>UT64_MAX</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><call><name>addItem</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_add_vars</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>vars</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>name</name> <operator>&amp;&amp;</operator> <name>vars</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>vars</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>vars</argument>, <argument>iter</argument>, <argument>var</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>vars</name></name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><call><name>addItem</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_add_types</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>types</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>name</name> <operator>&amp;&amp;</operator> <name>types</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>types</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>types</argument>, <argument>iter</argument>, <argument>type</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>types</name></name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><call><name>addItem</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_add_refs</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>refs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>name</name> <operator>&amp;&amp;</operator> <name>refs</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>refs</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><call><name>addItem</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_add_xrefs</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>xrefs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>name</name> <operator>&amp;&amp;</operator> <name>xrefs</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>xrefs</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>xrefs</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>xrefs</name></name></expr></argument>, <argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><call><name>addItem</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>ctxDeleteCB</name> <block>{

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>R_SIGN_KEY_MAXSZ</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>deleteBySpaceCB</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxDeleteCB</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>ctxDeleteCB</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_remove</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_delete</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxDeleteCB</name></name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>k</name><index>[<expr><name>R_SIGN_KEY_MAXSZ</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name> <operator>||</operator> <operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_reset</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>anal</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serializeKey</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>deleteBySpaceCB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>serializeKey</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>sdb_remove</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>matchBytes</name><parameter_list>(<parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>result</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>bytes</name></name> <operator>||</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>min_size</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>a</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>b</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>min_size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>combined_mask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>combined_mask</name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>min_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>combined_mask</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>combined_mask</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name>min_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>min_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>combined_mask</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <name><name>b</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>combined_mask</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_mem_cmp_mask</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>combined_mask</name></expr></argument>, <argument><expr><name>min_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name>combined_mask</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>min_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>min_size</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>combined_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMILARITY</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) == (b) ? 1.0 : (R_MAX ((a),(b)) == 0.0 ? 0.0 : (double) R_MIN ((a), (b)) / (double) R_MAX ((a), (b))))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>double</name></type> <name>matchGraph</name><parameter_list>(<parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>graph</name></name> <operator>||</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0.0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>total</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name>SIMILARITY</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name>SIMILARITY</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>nbbs</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>nbbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name>SIMILARITY</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>ebbs</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>ebbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name>SIMILARITY</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name>SIMILARITY</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>bbsum</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>bbsum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>total</name> <operator>/</operator> <literal type="number">5.0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_diff</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignOptions</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>other_space_name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>k</name><index>[<expr><name>R_SIGN_KEY_MAXSZ</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>other_space_name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>current_space</name> <init>= <expr><call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_space</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>other_space</name> <init>= <expr><call><name>r_spaces_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>, <argument><expr><name>other_space_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>other_space</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>serializeKey</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>current_space</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>current_zigns</name> <init>= <expr><call><name>sdb_foreach_match</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>serializeKey</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>other_space</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>other_zigns</name> <init>= <expr><call><name>sdb_foreach_match</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Diff %d %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ls_length</name> <argument_list>(<argument><expr><name>current_zigns</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ls_length</name> <argument_list>(<argument><expr><name>other_zigns</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>la</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>la</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>current_zigns</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_sign_deserialize</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>la</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name>lb</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lb</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>other_zigns</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_sign_deserialize</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>lb</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>current_zigns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>other_zigns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>itr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>itr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>si2</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>la</argument>, <argument>itr</argument>, <argument>si</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"imp."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>lb</argument>, <argument>itr2</argument>, <argument>si2</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>si2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"imp."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>bytesScore</name> <init>= <expr><call><name>matchBytes</name> <argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name>si2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>graphScore</name> <init>= <expr><call><name>matchGraph</name> <argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name>si2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bytesMatch</name> <init>= <expr><name>bytesScore</name> <operator>&gt;=</operator> <operator>(</operator><ternary><condition><expr><name>options</name></expr> ?</condition><then> <expr><name><name>options</name><operator>-&gt;</operator><name>bytes_diff_threshold</name></name></expr> </then><else>: <expr><name>SIGN_DIFF_MATCH_BYTES_THRESHOLD</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>graphMatch</name> <init>= <expr><name>graphScore</name> <operator>&gt;=</operator> <operator>(</operator><ternary><condition><expr><name>options</name></expr> ?</condition><then> <expr><name><name>options</name><operator>-&gt;</operator><name>graph_diff_threshold</name></name></expr> </then><else>: <expr><name>SIGN_DIFF_MATCH_GRAPH_THRESHOLD</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesMatch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" 0x%08"</literal><name>PFMT64x</name> <literal type="string">" %02.5lf B %s\n"</literal></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>si2</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>bytesScore</name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>graphMatch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" 0x%08"</literal><name>PFMT64x</name><literal type="string">" %02.5lf G %s\n"</literal></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>si2</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>graphScore</name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>la</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>current_zigns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>other_zigns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>la</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_diff_by_name</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignOptions</name> <modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>other_space_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>not_matching</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>k</name><index>[<expr><name>R_SIGN_KEY_MAXSZ</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>other_space_name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>current_space</name> <init>= <expr><call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_space</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>other_space</name> <init>= <expr><call><name>r_spaces_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>, <argument><expr><name>other_space_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>other_space</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>serializeKey</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>current_space</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>current_zigns</name> <init>= <expr><call><name>sdb_foreach_match</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>serializeKey</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>other_space</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SdbList</name> <modifier>*</modifier></type><name>other_zigns</name> <init>= <expr><call><name>sdb_foreach_match</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Diff by name %d %d (%s)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ls_length</name> <argument_list>(<argument><expr><name>current_zigns</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ls_length</name> <argument_list>(<argument><expr><name>other_zigns</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>not_matching</name></expr> ?</condition><then> <expr><literal type="string">"not matching"</literal></expr> </then><else>: <expr><literal type="string">"matching"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbKv</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>la</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>la</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>current_zigns</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_sign_deserialize</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>la</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name>lb</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>la</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>other_zigns</argument>, <argument>iter</argument>, <argument>kv</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_sign_deserialize</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>lb</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>current_zigns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>other_zigns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>itr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>itr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>si2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>current_space_name_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>current_space</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>other_space_name_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>other_space</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>la</argument>, <argument>itr</argument>, <argument>si</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"imp."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>lb</argument>, <argument>itr2</argument>, <argument>si2</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <name>current_space_name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>si2</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <name>other_space_name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>bytesScore</name> <init>= <expr><call><name>matchBytes</name> <argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name>si2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>graphScore</name> <init>= <expr><call><name>matchGraph</name> <argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name>si2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bytesMatch</name> <init>= <expr><name>bytesScore</name> <operator>&gt;=</operator> <operator>(</operator><ternary><condition><expr><name>options</name></expr> ?</condition><then> <expr><name><name>options</name><operator>-&gt;</operator><name>bytes_diff_threshold</name></name></expr> </then><else>: <expr><name>SIGN_DIFF_MATCH_BYTES_THRESHOLD</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>graphMatch</name> <init>= <expr><name>graphScore</name> <operator>&gt;=</operator> <operator>(</operator><ternary><condition><expr><name>options</name></expr> ?</condition><then> <expr><name><name>options</name><operator>-&gt;</operator><name>graph_diff_threshold</name></name></expr> </then><else>: <expr><name>SIGN_DIFF_MATCH_GRAPH_THRESHOLD</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bytesMatch</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>not_matching</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>bytesMatch</name> <operator>&amp;&amp;</operator> <name>not_matching</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" 0x%08"</literal><name>PFMT64x</name><literal type="string">" %02.5f B %s\n"</literal></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>si2</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>bytesScore</name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>graphMatch</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>not_matching</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>graphMatch</name> <operator>&amp;&amp;</operator> <name>not_matching</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" 0x%08"</literal><name>PFMT64x</name><literal type="string">" %02.5f G %s\n"</literal></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>si2</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>graphScore</name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>la</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>current_zigns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>other_zigns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>la</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>ctxListCB</name> <block>{

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>ctxGetListCB</name> <block>{

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>listBytes</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RSignBytes</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>masked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>masked</name> <operator>+=</operator> <name><name>bytes</name><operator>-&gt;</operator><name>mask</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>strbytes</name> <init>= <expr><call><name>r_hex_bin2strdup</name> <argument_list>(<argument><expr><name><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strbytes</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>strmask</name> <init>= <expr><call><name>r_hex_bin2strdup</name> <argument_list>(<argument><expr><name><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strmask</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>strbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>masked</name> <operator>==</operator> <name><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"za %s b %s\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>strbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"za %s b %s:%s\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>strbytes</name></expr></argument>, <argument><expr><name>strmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" b(%d/%d)"</literal></expr></argument>, <argument><expr><name>masked</name></expr></argument>, <argument><expr><name><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"bytes"</literal></expr></argument>, <argument><expr><name>strbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"mask"</literal></expr></argument>, <argument><expr><name>strbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" bytes: %s\n"</literal></expr></argument>, <argument><expr><name>strbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" mask: %s\n"</literal></expr></argument>, <argument><expr><name>strmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>strbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>strmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>listGraph</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RSignGraph</name> <modifier>*</modifier></type><name>graph</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>graph</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" g(cc=%d,nb=%d,e=%d,eb=%d,h=%d)"</literal></expr></argument>,

<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>nbbs</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>ebbs</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>bbsum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"za %s g cc=%d nbbs=%d edges=%d ebbs=%d bbsum=%d\n"</literal></expr></argument>,

<argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>nbbs</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>ebbs</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>bbsum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ko</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kN</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"cc"</literal></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kN</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"nbbs"</literal></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>nbbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kN</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"edges"</literal></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kN</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"ebbs"</literal></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>ebbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kN</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"bbsum"</literal></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>bbsum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" graph: cc=%d nbbs=%d edges=%d ebbs=%d bbsum=%d\n"</literal></expr></argument>,

<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>nbbs</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>ebbs</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>bbsum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>listComment</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>comment</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n ; %s\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"comments"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" comment: 0x%08"</literal> <name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>listRealname</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>realname</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"za %s n %s\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"afn %s @ 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"realname"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" realname: %s\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>listOffset</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"za %s o 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_kN</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" addr: 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>listVars</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"za %s v "</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" vars(%d)"</literal></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>vars</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ka</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"vars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" vars: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>it-&gt;vars</argument>, <argument>iter</argument>, <argument>var</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>!=</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_s</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_list_type_header</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"za %s t "</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" types(%d)"</literal></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>types</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ka</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" types: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_function_args_json</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg_type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg_name</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arg_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>arg_name</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>arg_name</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len_arg_name</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>arg_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arg_name</name><index>[<expr><name>len_arg_name</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>arg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>arg_type</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_type_json</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_type</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str_type</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>str_type</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>str_type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>str_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_function_args_json</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>pj</name></expr></argument>, <argument><expr><name>str_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_list_separator</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_ka</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"args"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_list_type_body</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>it-&gt;types</argument>, <argument>iter</argument>, <argument>type</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>print_list_separator</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>pj</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>print_type_json</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>pj</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>listTypes</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>print_list_type_header</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>pj</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_list_type_body</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>pj</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>listXRefs</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"za %s x "</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" xrefs(%d)"</literal></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>xrefs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ka</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"xrefs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>xrefs</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>xrefs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" xrefs: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>it-&gt;xrefs</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>!=</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_s</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>listRefs</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"za %s r "</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" refs(%d)"</literal></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ka</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"refs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>refs</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" refs: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>it-&gt;refs</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>!=</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_s</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>listHash</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>hash</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" h(%08x)"</literal></expr></argument>, <argument><expr><call><name>r_str_hash</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"za %s h %s\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><call><name>pj_ko</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"bbhash"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" bbhash: %s\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>listCB</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxListCB</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>ctxListCB</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_sign_deserialize</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: cannot deserialize zign\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name><name>it</name><operator>-&gt;</operator><name>space</name></name> <operator>&amp;&amp;</operator> <name>cur</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"zs %s\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>space</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"zs *\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal> <name>PFMT64x</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name> <init>= <expr><call><name>r_str_pad</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">30</literal> <operator>-</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><literal type="string">"zignspace"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>space</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>space</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"(%s) "</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>space</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s:\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>listBytes</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><literal type="string">"bytes"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>listGraph</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ko</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><literal type="string">"graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>addr</name></name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>listOffset</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_kN</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>realname</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>listRealname</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>comment</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>listComment</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>refs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>listRefs</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ka</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><literal type="string">"refs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>xrefs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>listXRefs</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ka</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><literal type="string">"xrefs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>vars</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>listVars</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ka</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><literal type="string">"vars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>types</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>listTypes</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ka</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><literal type="string">"types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>hash</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>listHash</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ko</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr>;</expr_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_sign_list</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pj</name> <operator>=</operator> <call><name>pj_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxListCB</name></name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>a</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>format</name></expr>, <expr><name>pj</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>listCB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>pj_string</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_free</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>listGetCB</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxGetListCB</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_sign_deserialize</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_sign_get_list</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxGetListCB</name></name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>a</name></expr>, <macro><name>r_list_newf</name> <argument_list>(<argument>(RListFree)r_sign_item_free</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>listGetCB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>ctx</name><operator>.</operator><name>list</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmpaddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>RAnalBlock</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>_a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name> <init>= <expr><name>_b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_sign_calc_bbhash</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bbi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>digest_hex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>r_hash_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>R_ZIGN_HASH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmpaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_hash_do_begin</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>R_ZIGN_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn-&gt;bbs</argument>, <argument>iter</argument>, <argument>bbi</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name><name>bbi</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>a</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>bbi</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bbi</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_hash_do_sha256</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bbi</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_hash_do_end</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>R_ZIGN_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>digest_hex</name> <operator>=</operator> <call><name>r_hex_bin2strdup</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><call><name>r_hash_size</name> <argument_list>(<argument><expr><name>R_ZIGN_HASH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>digest_hex</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>ctxCountForCB</name> <block>{

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RSpace</name> <modifier>*</modifier></type><name>space</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>countForCB</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxCountForCB</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>ctxCountForCB</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_sign_deserialize</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>space</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: cannot deserialize zign\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_sign_space_count_for</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RSpace</name> <modifier>*</modifier></type><name>space</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxCountForCB</name></name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>a</name></expr>, <expr><name>space</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>countForCB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>ctx</name><operator>.</operator><name>count</name></name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>ctxUnsetForCB</name> <block>{

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RSpace</name> <modifier>*</modifier></type><name>space</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unsetForCB</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxUnsetForCB</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>ctxUnsetForCB</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>nk</name><index>[<expr><name>R_SIGN_KEY_MAXSZ</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nv</name><index>[<expr><name>R_SIGN_VAL_MAXSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_sign_deserialize</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>space</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>space</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serialize</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>nk</name></expr></argument>, <argument><expr><name>nv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_remove</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>nk</name></expr></argument>, <argument><expr><name>nv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: cannot deserialize zign\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_sign_space_unset_for</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RSpace</name> <modifier>*</modifier></type><name>space</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxUnsetForCB</name></name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>a</name></expr>, <expr><name>space</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>unsetForCB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>ctxRenameForCB</name> <block>{

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>oprefix</name><index>[<expr><name>R_SIGN_KEY_MAXSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>nprefix</name><index>[<expr><name>R_SIGN_KEY_MAXSZ</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>renameForCB</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxRenameForCB</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>ctxRenameForCB</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>nk</name><index>[<expr><name>R_SIGN_KEY_MAXSZ</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nv</name><index>[<expr><name>R_SIGN_VAL_MAXSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zigname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oprefix</name></name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oprefix</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>zigname</name> <operator>=</operator> <name>k</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oprefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>nk</name></expr></argument>, <argument><expr><name>R_SIGN_KEY_MAXSZ</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nprefix</name></name></expr></argument>, <argument><expr><name>zigname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>nv</name></expr></argument>, <argument><expr><name>R_SIGN_VAL_MAXSZ</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_remove</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>nk</name></expr></argument>, <argument><expr><name>nv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_sign_space_rename_for</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RSpace</name> <modifier>*</modifier></type><name>space</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nname</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>space</name> <operator>&amp;&amp;</operator> <name>oname</name> <operator>&amp;&amp;</operator> <name>nname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxRenameForCB</name></name></type> <name>ctx</name> <init>= <expr><block>{<expr><operator>.</operator><name>anal</name> <operator>=</operator> <name>a</name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>serializeKeySpaceStr</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>oname</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>oprefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serializeKeySpaceStr</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>nname</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>nprefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>renameForCB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>ctxForeachCB</name> <block>{

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignForeachCallback</name></type> <name>cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>foreachCB</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxForeachCB</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>ctxForeachCB</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_sign_deserialize</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RSpace</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>r_spaces_current</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>zign_spaces</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>==</operator> <name><name>it</name><operator>-&gt;</operator><name>space</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: cannot deserialize zign\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_foreach</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignForeachCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>cb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxForeachCB</name></name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>a</name></expr>, <expr><name>cb</name></expr>, <expr><name>user</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>foreachCB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RSignSearch</name> <modifier>*</modifier></type><name>r_sign_search_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RSignSearch</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSignSearch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>search</name></name> <operator>=</operator> <call><name>r_search_new</name> <argument_list>(<argument><expr><name>R_SEARCH_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>r_sign_item_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_sign_search_free</name><parameter_list>(<parameter><decl><type><name>RSignSearch</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ss</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_search_free</name> <argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>search</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>searchHitCB</name><parameter_list>(<parameter><decl><type><name>RSearchKeyword</name> <modifier>*</modifier></type><name>kw</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RSignSearch</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><operator>(</operator><name>RSignSearch</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>ss</name><operator>-&gt;</operator><name>cb</name></name></expr>?</condition><then> <expr><call><name><name>ss</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><operator>(</operator><name>RSignItem</name> <operator>*</operator><operator>)</operator> <name><name>kw</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>ctxAddSearchKwCB</name> <block>{

<decl_stmt><decl><type><name>RSignSearch</name> <modifier>*</modifier></type><name>ss</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minsz</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>addSearchKwCB</name><parameter_list>(<parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxAddSearchKwCB</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>ctxAddSearchKwCB</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignSearch</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ss</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignBytes</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSearchKeyword</name> <modifier>*</modifier></type><name>kw</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot find bytes for this signature: %s\n"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>minsz</name></name> <operator>&amp;&amp;</operator> <name><name>bytes</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>minsz</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it2</name> <init>= <expr><call><name>r_sign_item_dup</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>it2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>it2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>kw</name> <operator>=</operator> <call><name>r_search_keyword_new</name> <argument_list>(<argument><expr><name><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>it2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_search_kw_add</name> <argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>search</name></name></expr></argument>, <argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_sign_search_init</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignSearch</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minsz</name></decl></parameter>, <parameter><decl><type><name>RSignSearchCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxAddSearchKwCB</name></name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>ss</name></expr>, <expr><name>minsz</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>ss</name> <operator>&amp;&amp;</operator> <name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_search_reset</name> <argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>search</name></name></expr></argument>, <argument><expr><name>R_SEARCH_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_sign_foreach</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>addSearchKwCB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_search_begin</name> <argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>search</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_search_set_callback</name> <argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>search</name></name></expr></argument>, <argument><expr><name>searchHitCB</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_sign_search_update</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RSignSearch</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>ss</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_search_update</name> <argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>search</name></name></expr></argument>, <argument><expr><operator>*</operator><name>at</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>matchCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>a</name> <operator>-</operator> <name>b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name>a</name> <operator>/</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>R_ABS</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>m</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fcnMetricsCmp</name><parameter_list>(<parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RSignGraph</name> <modifier>*</modifier></type><name>graph</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>graph</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ebbs</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>cc</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>graph</name><operator>-&gt;</operator><name>cc</name></name> <operator>!=</operator> <call><name>r_anal_function_complexity</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>nbbs</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>graph</name><operator>-&gt;</operator><name>nbbs</name></name> <operator>!=</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>edges</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>graph</name><operator>-&gt;</operator><name>edges</name></name> <operator>!=</operator> <call><name>r_anal_function_count_edges</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ebbs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>ebbs</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>graph</name><operator>-&gt;</operator><name>ebbs</name></name> <operator>!=</operator> <name>ebbs</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>bbsum</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>matchCount</name> <argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>bbsum</name></name></expr></argument>, <argument><expr><call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>ctxFcnMatchCB</name> <block>{

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignGraphMatchCallback</name></type> <name>cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mincc</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>graphMatchCB</name><parameter_list>(<parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxFcnMatchCB</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>ctxFcnMatchCB</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignGraph</name> <modifier>*</modifier></type><name>graph</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>graph</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>graph</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>cc</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mincc</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fcnMetricsCmp</name> <argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fcn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fcn</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_match_graph</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mincc</name></decl></parameter>, <parameter><decl><type><name>RSignGraphMatchCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>fcn</name> <operator>&amp;&amp;</operator> <name>cb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxFcnMatchCB</name></name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>a</name></expr>, <expr><name>fcn</name></expr>, <expr><name>cb</name></expr>, <expr><name>user</name></expr>, <expr><name>mincc</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_sign_foreach</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>graphMatchCB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>addrMatchCB</name><parameter_list>(<parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxFcnMatchCB</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>ctxFcnMatchCB</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>addr</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fcn</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fcn</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_match_addr</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>RSignOffsetMatchCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>fcn</name> <operator>&amp;&amp;</operator> <name>cb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxFcnMatchCB</name></name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>a</name></expr>, <expr><name>fcn</name></expr>, <expr><name>cb</name></expr>, <expr><name>user</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_sign_foreach</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>addrMatchCB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hashMatchCB</name><parameter_list>(<parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxFcnMatchCB</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>ctxFcnMatchCB</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignHash</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>hash</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hash</name> <operator>||</operator> <operator>!</operator><name><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name> <operator>||</operator> <name><name>hash</name><operator>-&gt;</operator><name>bbhash</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>digest_hex</name> <init>= <expr><call><name>r_sign_calc_bbhash</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fcn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>digest_hex</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name></expr></argument>, <argument><expr><name>digest_hex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fcn</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>digest_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_match_hash</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>RSignHashMatchCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>fcn</name> <operator>&amp;&amp;</operator> <name>cb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxFcnMatchCB</name></name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>a</name></expr>, <expr><name>fcn</name></expr>, <expr><name>cb</name></expr>, <expr><name>user</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_sign_foreach</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>hashMatchCB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>refsMatchCB</name><parameter_list>(<parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxFcnMatchCB</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>ctxFcnMatchCB</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ref_a</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref_b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>retval</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>refs</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>refs</name> <operator>=</operator> <call><name>r_sign_fcn_refs</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fcn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>refs</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ref_a</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_b</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref_a</name> <operator>||</operator> <operator>!</operator><name>ref_b</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ref_a</name> <operator>!=</operator> <name>ref_b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>ref_a</name></expr></argument>, <argument><expr><name>ref_b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fcn</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_match_refs</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>RSignRefsMatchCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>fcn</name> <operator>&amp;&amp;</operator> <name>cb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxFcnMatchCB</name></name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>a</name></expr>, <expr><name>fcn</name></expr>, <expr><name>cb</name></expr>, <expr><name>user</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_sign_foreach</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>refsMatchCB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>varsMatchCB</name><parameter_list>(<parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxFcnMatchCB</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>ctxFcnMatchCB</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>vars</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_a</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>var_b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>retval</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>vars</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vars</name> <operator>=</operator> <call><name>r_sign_fcn_vars</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fcn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vars</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>var_a</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>vars</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>var_b</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>vars</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_a</name> <operator>||</operator> <operator>!</operator><name>var_b</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>var_a</name> <operator>!=</operator> <name>var_b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>var_a</name></expr></argument>, <argument><expr><name>var_b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fcn</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_match_vars</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>RSignVarsMatchCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>fcn</name> <operator>&amp;&amp;</operator> <name>cb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxFcnMatchCB</name></name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>a</name></expr>, <expr><name>fcn</name></expr>, <expr><name>cb</name></expr>, <expr><name>user</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_sign_foreach</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>varsMatchCB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>typesMatchCB</name><parameter_list>(<parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxFcnMatchCB</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>ctxFcnMatchCB</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>types</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type_a</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>type_b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>retval</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>it</name><operator>-&gt;</operator><name>types</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>r_sign_fcn_types</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fcn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>types</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>type_a</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>types</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type_b</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>type_a</name> <operator>||</operator> <operator>!</operator><name>type_b</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type_a</name> <operator>!=</operator> <name>type_b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>type_a</name></expr></argument>, <argument><expr><name>type_b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name> <argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fcn</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_match_types</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl></parameter>, <parameter><decl><type><name>RSignVarsMatchCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>fcn</name> <operator>&amp;&amp;</operator> <name>cb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ctxFcnMatchCB</name></name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>a</name></expr>, <expr><name>fcn</name></expr>, <expr><name>cb</name></expr>, <expr><name>user</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_sign_foreach</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>typesMatchCB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RSignItem</name> <modifier>*</modifier></type><name>r_sign_item_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSignItem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RSignItem</name> <modifier>*</modifier></type><name>r_sign_item_dup</name><parameter_list>(<parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>realname</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>realname</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>comment</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>space</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSignBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ret</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ret</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ret</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>graph</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSignGraph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ret</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>ret</name><operator>-&gt;</operator><name>graph</name></name> <operator>=</operator> <operator>*</operator><name><name>it</name><operator>-&gt;</operator><name>graph</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>it-&gt;refs</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><call><name>r_str_new</name> <argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>xrefs</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>it-&gt;xrefs</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>xrefs</name></name></expr></argument>, <argument><expr><call><name>r_str_new</name> <argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_sign_item_free</name><parameter_list>(<parameter><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>bytes</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>hash</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>hash</name><operator>-&gt;</operator><name>bbhash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>realname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>loadCB</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>RAnal</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>nk</name><index>[<expr><name>R_SIGN_KEY_MAXSZ</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nv</name><index>[<expr><name>R_SIGN_VAL_MAXSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSignItem</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_sign_item_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>it</name> <operator>&amp;&amp;</operator> <call><name>r_sign_deserialize</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>serialize</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>nk</name></expr></argument>, <argument><expr><name>nv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>, <argument><expr><name>nk</name></expr></argument>, <argument><expr><name>nv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: cannot deserialize zign\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_sign_item_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_sign_path</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>abs</name> <init>= <expr><call><name>r_file_abspath</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>abs</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_file_is_regular</name> <argument_list>(<argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>abs</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>zign_path</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>zign_path</name></name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>abs</name> <operator>=</operator> <call><name>r_file_abspath</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_file_is_regular</name> <argument_list>(<argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>abs</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>home</name> <init>= <expr><call><name>r_str_home</name> <argument_list>(<argument><expr><name>R2_HOME_ZIGNS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>abs</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>home</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_file_is_regular</name> <argument_list>(<argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>abs</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>abs</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><call><name>R_JOIN_3_PATHS</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>R2_ZIGNS</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>r_sys_prefix</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_file_is_regular</name> <argument_list>(<argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>abs</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_load</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name> <operator>||</operator> <operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>r_sign_path</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: file %s does not exist\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>sdb_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_foreach</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>loadCB</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_close</name> <argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_load_gz</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>r_sign_path</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: file %s does not exist\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>r_file_gzslurp</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: cannot decompress file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmpfile</name> <operator>=</operator> <call><name>r_file_temp</name> <argument_list>(<argument><expr><literal type="string">"r2zign"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: cannot create temp file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_file_dump</name> <argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: cannot dump file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_sign_load</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: cannot load file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_file_rm</name> <argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"error: cannot delete temp file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_sign_save</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>file</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sdb_isempty</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"WARNING: no zignatures to save\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>sdb_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_merge</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>sdb_zigns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><call><name>sdb_sync</name> <argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_close</name> <argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RSignOptions</name> <modifier>*</modifier></type><name>r_sign_options_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bytes_thresh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>graph_thresh</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RSignOptions</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSignOptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>options</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>bytes_diff_threshold</name></name> <operator>=</operator> <call><name>r_num_get_float</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bytes_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>graph_diff_threshold</name></name> <operator>=</operator> <call><name>r_num_get_float</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>graph_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>bytes_diff_threshold</name></name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>bytes_diff_threshold</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>bytes_diff_threshold</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>bytes_diff_threshold</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>graph_diff_threshold</name></name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>graph_diff_threshold</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>graph_diff_threshold</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>graph_diff_threshold</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>options</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_sign_options_free</name><parameter_list>(<parameter><decl><type><name>RSignOptions</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
