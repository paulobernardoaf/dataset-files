<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\anal\rtti_itanium.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_flag.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMI_CLASS_TYPE_INFO_NAME</name></cpp:macro> <cpp:value>"obj.vtable_for___cxxabiv1::__vmi_class_type_info"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_TYPE_INFO_NAME</name></cpp:macro> <cpp:value>"obj.vtable_for___cxxabiv1::__class_type_info"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_CLASS_TYPE_INFO_NAME</name></cpp:macro> <cpp:value>"obj.vtable_for___cxxabiv1::__si_class_type_info"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_BUF_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>class_type_info_t</name> <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>vtable_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>name_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

}</block></struct></type> <name>class_type_info</name>;</typedef>

<typedef>typedef <type><struct>struct <name>base_class_type_info_t</name> <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>base_class_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>flags</name></decl>;</decl_stmt>

<enum>enum <name>flags_masks_e</name> <block>{

<decl><name>base_is_virtual</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,

<decl><name>base_is_public</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>

}</block> <decl><name>flags_masks</name></decl>;</enum>

}</block></struct></type> <name>base_class_type_info</name>;</typedef>

<typedef>typedef <type><struct>struct <name>si_class_type_info_t</name> <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>vtable_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>name_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>base_class_addr</name></decl>;</decl_stmt>

}</block></struct></type> <name>si_class_type_info</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vmi_class_type_info_t</name> <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>vtable_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>name_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vmi_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vmi_base_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>base_class_type_info</name> <modifier>*</modifier></type><name>vmi_bases</name></decl>;</decl_stmt>

<enum>enum <name>vmi_flags_masks_e</name> <block>{

<decl><name>non_diamond_repeat_mask</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,

<decl><name>diamond_shaped_mask</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,

<decl><name>non_public_base_mask</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>,

<decl><name>public_base_mask</name> <init>= <expr><literal type="number">0x8</literal></expr></init></decl>

}</block> <decl><name>vmi_flags_masks</name></decl>;</enum>

}</block></struct></type> <name>vmi_class_type_info</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_itanium_class_type_info_fini</name> <parameter_list>(<parameter><decl><type><name>class_type_info</name> <modifier>*</modifier></type><name>cti</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cti</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>cti</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rtti_itanium_read_class_type_info</name> <parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>class_type_info</name> <modifier>*</modifier></type><name>cti</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>at</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cti</name><operator>-&gt;</operator><name>vtable_addr</name></name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cti</name><operator>-&gt;</operator><name>name_addr</name></name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><name>NAME_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>name_len</name> <init>= <expr><call><name>r_str_len_utf8</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cti</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cti</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>cti</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_itanium_vmi_class_type_info_fini</name> <parameter_list>(<parameter><decl><type><name>vmi_class_type_info</name> <modifier>*</modifier></type><name>vmi_cti</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vmi_cti</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_bases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rtti_itanium_read_vmi_class_type_info</name> <parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>vmi_class_type_info</name> <modifier>*</modifier></type><name>vmi_cti</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>at</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vtable_addr</name></name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>name_addr</name></name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><name>NAME_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>name_len</name> <init>= <expr><call><name>r_str_len_utf8</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vmi_cti</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_flags</name></name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>+=</operator> <literal type="number">0x4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>at</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>at</name></expr></argument> &gt;</argument_list></name> <literal type="number">0xfffff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error reading vmi_base_count\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_base_count</name></name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_bases</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>base_class_type_info</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_base_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_bases</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>tmp_addr</name> <init>= <expr><name>addr</name> <operator>+</operator> <literal type="number">0x4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_base_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>tmp_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_bases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>base_class_addr</name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_addr</name> <operator>+=</operator> <name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>tmp_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_bases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_addr</name> <operator>+=</operator> <name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_itanium_si_class_type_info_fini</name> <parameter_list>(<parameter><decl><type><name>si_class_type_info</name> <modifier>*</modifier></type><name>si_cti</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>si_cti</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>si_cti</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rtti_itanium_read_si_class_type_info</name> <parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>si_class_type_info</name> <modifier>*</modifier></type><name>si_cti</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>at</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>si_cti</name><operator>-&gt;</operator><name>vtable_addr</name></name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>si_cti</name><operator>-&gt;</operator><name>name_addr</name></name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><name>NAME_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>name_len</name> <init>= <expr><call><name>r_str_len_utf8</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>si_cti</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>si_cti</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>si_cti</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>si_cti</name><operator>-&gt;</operator><name>base_class_addr</name></name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_itanium_print_class_type_info</name> <parameter_list>(<parameter><decl><type><name>class_type_info</name> <modifier>*</modifier></type><name>cti</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%sType Info at 0x%08"</literal><name>PFMT64x</name> <literal type="string">":\n"</literal>

<literal type="string">"%s Reference to RTTI's type class: 0x%08"</literal><name>PFMT32x</name> <literal type="string">"\n"</literal>

<literal type="string">"%s Reference to type's name: 0x%08"</literal><name>PFMT32x</name> <literal type="string">"\n"</literal>

<literal type="string">"%s Type Name: %s\n"</literal></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>cti</name><operator>-&gt;</operator><name>vtable_addr</name></name></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>cti</name><operator>-&gt;</operator><name>name_addr</name></name></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>cti</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_itanium_print_class_type_info_json</name> <parameter_list>(<parameter><decl><type><name>class_type_info</name> <modifier>*</modifier></type><name>cti</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"{\"type_info\": {\"found_at\":%"</literal><name>PFMT32u</name><literal type="string">",\"ref_to_type_class\":%"</literal><name>PFMT32u</name><literal type="string">","</literal>

<literal type="string">"\"ref_to_type_name\": %"</literal><name>PFMT32u</name><literal type="string">"}}"</literal></expr></argument>,

<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>cti</name><operator>-&gt;</operator><name>vtable_addr</name></name></expr></argument>, <argument><expr><name><name>cti</name><operator>-&gt;</operator><name>name_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_itanium_print_vmi_class_type_info</name> <parameter_list>(<parameter><decl><type><name>vmi_class_type_info</name> <modifier>*</modifier></type><name>vmi_cti</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%sVMI Type Info at 0x%08"</literal><name>PFMT64x</name> <literal type="string">":\n"</literal>

<literal type="string">"%s Reference to RTTI's type class: 0x%08"</literal><name>PFMT32x</name> <literal type="string">"\n"</literal>

<literal type="string">"%s Reference to type's name: 0x%08"</literal><name>PFMT32x</name> <literal type="string">"\n"</literal>

<literal type="string">"%s Type Name: %s\n"</literal>

<literal type="string">"%s Flags: 0x%x"</literal> <literal type="string">"\n"</literal>

<literal type="string">"%s Count of base classes: 0x%x"</literal> <literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vtable_addr</name></name></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>name_addr</name></name></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_flags</name></name></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_base_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_base_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name><argument_list>(<argument><expr><literal type="string">"%s Base class type descriptor address: 0x%08"</literal><name>PFMT32x</name> <literal type="string">"\n"</literal>

<literal type="string">"%s Base class flags: 0x%x"</literal> <literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_bases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>base_class_addr</name></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_bases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_itanium_print_vmi_class_type_info_json</name> <parameter_list>(<parameter><decl><type><name>vmi_class_type_info</name> <modifier>*</modifier></type><name>vmi_cti</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"{\"vmi_type_info\": {\"found_at\":%"</literal><name>PFMT32u</name><literal type="string">",\"ref_to_type_class\":%"</literal><name>PFMT32u</name><literal type="string">","</literal>

<literal type="string">"\"ref_to_type_name\":%"</literal><name>PFMT32u</name><literal type="string">",\"flags\":%"</literal><name>PFMT32d</name><literal type="string">","</literal>

<literal type="string">"\"count_of_base_classes\":%"</literal><name>PFMT32d</name><literal type="string">","</literal></expr></argument>,

<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vtable_addr</name></name></expr></argument>, <argument><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>name_addr</name></name></expr></argument>, <argument><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_flags</name></name></expr></argument>,

<argument><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_base_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\"base_classes\":["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_base_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name><argument_list>(<argument><expr><literal type="string">"{\"type_desc_addr\":%"</literal><name>PFMT32u</name><literal type="string">",\"flags\":%"</literal><name>PFMT32d</name><literal type="string">"}"</literal></expr></argument>,

<argument><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_bases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>base_class_addr</name></expr></argument>,

<argument><expr><name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_bases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>vmi_cti</name><operator>-&gt;</operator><name>vmi_base_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"]}}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_itanium_print_si_class_type_info</name> <parameter_list>(<parameter><decl><type><name>si_class_type_info</name> <modifier>*</modifier></type><name>si_cti</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%sSI Type Info at 0x%08"</literal><name>PFMT64x</name> <literal type="string">":\n"</literal>

<literal type="string">"%s Reference to RTTI's type class: 0x%08"</literal><name>PFMT32x</name> <literal type="string">"\n"</literal>

<literal type="string">"%s Reference to type's name: 0x%08"</literal><name>PFMT32x</name> <literal type="string">"\n"</literal>

<literal type="string">"%s Type Name: %s\n"</literal>

<literal type="string">"%s Reference to parent's type name: 0x%08"</literal><name>PFMT32x</name> <literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>si_cti</name><operator>-&gt;</operator><name>vtable_addr</name></name></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>si_cti</name><operator>-&gt;</operator><name>name_addr</name></name></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>si_cti</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>si_cti</name><operator>-&gt;</operator><name>base_class_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtti_itanium_print_si_class_type_info_json</name> <parameter_list>(<parameter><decl><type><name>si_class_type_info</name> <modifier>*</modifier></type><name>si_cti</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"{\"si_type_info\": {\"found_at\":%"</literal><name>PFMT32u</name><literal type="string">",\"ref_to_type_class\":%"</literal><name>PFMT32u</name><literal type="string">","</literal>

<literal type="string">"\"ref_to_type_name\": %"</literal><name>PFMT32u</name><literal type="string">",\"ref_to_parent_type_name\":%"</literal><name>PFMT32u</name><literal type="string">"}}"</literal></expr></argument>,

<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>si_cti</name><operator>-&gt;</operator><name>vtable_addr</name></name></expr></argument>, <argument><expr><name><name>si_cti</name><operator>-&gt;</operator><name>name_addr</name></name></expr></argument>, <argument><expr><name><name>si_cti</name><operator>-&gt;</operator><name>base_class_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_rtti_itanium_print_class_type_info</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>class_type_info</name></type> <name>cti</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rtti_itanium_read_class_type_info</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cti</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to parse Type Info at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rtti_itanium_print_class_type_info_json</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cti</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>rtti_itanium_print_class_type_info</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cti</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>rtti_itanium_class_type_info_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_rtti_itanium_print_si_class_type_info</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>si_class_type_info</name></type> <name>si_cti</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rtti_itanium_read_si_class_type_info</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si_cti</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to parse Type Info at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rtti_itanium_print_si_class_type_info_json</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>si_cti</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>rtti_itanium_print_si_class_type_info</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>si_cti</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>rtti_itanium_si_class_type_info_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>si_cti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_rtti_itanium_print_vmi_class_type_info</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>vmi_class_type_info</name></type> <name>vmi_cti</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rtti_itanium_read_vmi_class_type_info</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vmi_cti</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to parse Type Info at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rtti_itanium_print_vmi_class_type_info_json</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>vmi_cti</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>rtti_itanium_print_vmi_class_type_info</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>vmi_cti</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>rtti_itanium_vmi_class_type_info_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>vmi_cti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rtti_itanium_print_class_type_info_recurse</name><parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>atAddress</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>use_json</name> <init>= <expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>colRefAddr</name> <init>= <expr><name>atAddress</name> <operator>-</operator> <name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut64</name></type> <name>colAddr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut64</name></type> <name>class_type_offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>colRefAddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colAddr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>-&gt;</operator><name>read_addr</name></name> <argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>class_type_offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>coreb</name><operator>.</operator><name>core</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>class_type_offset</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>context</name><operator>-&gt;</operator><name>word_size</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>flag</name></decl>;</decl_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name><name>context</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>flag_get</name></name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>class_type_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No RTTI found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_cmp</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>VMI_CLASS_TYPE_INFO_NAME</name></expr></argument>, <argument><expr><call><name>r_str_len_utf8</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>vmi_class_type_info</name></type> <name>vmi_cti</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rtti_itanium_read_vmi_class_type_info</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vmi_cti</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to parse Type Info at 0x%08"</literal><name>PFMT64x</name><literal type="string">" (referenced from 0x%08"</literal><name>PFMT64x</name><literal type="string">")\n"</literal></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>, <argument><expr><name>colRefAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtti_itanium_vmi_class_type_info_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>vmi_cti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_json</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rtti_itanium_print_vmi_class_type_info_json</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>vmi_cti</name></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>rtti_itanium_print_vmi_class_type_info</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>vmi_cti</name></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>rtti_itanium_vmi_class_type_info_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>vmi_cti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_cmp</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>SI_CLASS_TYPE_INFO_NAME</name></expr></argument>, <argument><expr><call><name>r_str_len_utf8</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>si_class_type_info</name></type> <name>si_cti</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rtti_itanium_read_si_class_type_info</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si_cti</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to parse Type Info at 0x%08"</literal><name>PFMT64x</name><literal type="string">" (referenced from 0x%08"</literal><name>PFMT64x</name><literal type="string">")\n"</literal></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>, <argument><expr><name>colRefAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtti_itanium_si_class_type_info_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>si_cti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_json</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rtti_itanium_print_si_class_type_info_json</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>si_cti</name></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>rtti_itanium_print_si_class_type_info</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>si_cti</name></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>rtti_itanium_si_class_type_info_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>si_cti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_cmp</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>CLASS_TYPE_INFO_NAME</name></expr></argument>, <argument><expr><call><name>r_str_len_utf8</name> <argument_list>(<argument><expr><name><name>flag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>class_type_info</name></type> <name>cti</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rtti_itanium_read_class_type_info</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cti</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to parse Type Info at 0x%08"</literal><name>PFMT64x</name><literal type="string">" (referenced from 0x%08"</literal><name>PFMT64x</name><literal type="string">")\n"</literal></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>, <argument><expr><name>colRefAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_json</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rtti_itanium_print_class_type_info_json</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cti</name></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>rtti_itanium_print_class_type_info</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cti</name></expr></argument>, <argument><expr><name>colAddr</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>rtti_itanium_class_type_info_fini</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_anal_rtti_itanium_print_at_vtable</name> <parameter_list>(<parameter><decl><type><name>RVTableContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>rtti_itanium_print_class_type_info_recurse</name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
