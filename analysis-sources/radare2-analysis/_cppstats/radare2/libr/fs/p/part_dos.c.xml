<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\fs\p\part_dos.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<macro><name>R_PACKED</name> <argument_list>(

<argument>typedef struct {

ut8 flag; 

ut8 start_head;

ut8 start_sector;

ut8 start_cylinder;

ut8 type;

ut8 end_head;

ut8 end_sector;

ut8 end_cylinder;

ut32 start; 

ut32 length; 

}</argument>)</argument_list></macro> <expr_stmt><expr><name>DOS_ENTRY</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>typedef struct {

ut8 code[<literal type="number">446</literal>]; 

DOS_ENTRY entries[<literal type="number">4</literal>];

ut16 aa55; 

}</argument>)</argument_list></macro> <expr_stmt><expr><name>MBR</name></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fs_part_dos</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>disk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MBR</name></type> <name>mbr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFS</name> <modifier>*</modifier></type><name>fs</name> <init>= <expr><operator>(</operator><name>RFS</name><operator>*</operator><operator>)</operator><name>disk</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFSPartition</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFSPartitionIterator</name></type> <name>iterate</name> <init>= <expr><operator>(</operator><name>RFSPartitionIterator</name><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><operator>(</operator><name>RList</name><operator>*</operator><operator>)</operator><name>closure</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mbr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>mbr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>fs</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>read_at</name></name> <argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>mbr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>mbr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mbr</name><operator>.</operator><name>aa55</name></name> <operator>!=</operator> <literal type="number">0xaa55</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid DOS signature at 0x%x\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>r_offsetof</name> <argument_list>(<argument><expr><name>MBR</name></expr></argument>, <argument><expr><name>aa55</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>aend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DOS_ENTRY</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>&amp;</operator><name><name>mbr</name><operator>.</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>*=</operator> <literal type="number">512</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>aend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>aend</name> <operator>+=</operator> <name><name>e</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>aend</name> <operator>*=</operator> <literal type="number">512</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <call><name>r_fs_partition_new</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>aend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>iterate</name> <argument_list>(<argument><expr><name>disk</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
