<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\fs\fs_file.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_fs.h&gt;</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>RFSFile</name><modifier>*</modifier></type> <name>r_fs_file_new</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name><modifier>*</modifier></type> <name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RFSFile</name><modifier>*</modifier></type> <name>file</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RFSFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>root</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>r_str_rchr</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>last</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>file</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_fs_file_free</name><parameter_list>(<parameter><decl><type><name>RFSFile</name><modifier>*</modifier></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name><modifier>*</modifier></type> <name>r_fs_file_copy_abs_path</name><parameter_list>(<parameter><decl><type><name>RFSFile</name><modifier>*</modifier></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RFSRoot</name><modifier>*</modifier></type> <name>r_fs_root_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>delta</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RFSRoot</name><modifier>*</modifier></type> <name>root</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RFSRoot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>root</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>root</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>path</name></name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>

<return>return <expr><name>root</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_fs_root_free</name><parameter_list>(<parameter><decl><type><name>RFSRoot</name><modifier>*</modifier></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>root</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>p</name></name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>umount</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>root</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>umount</name></name> <argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RFSPartition</name><modifier>*</modifier></type> <name>r_fs_partition_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RFSPartition</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RFSPartition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_fs_partition_free</name><parameter_list>(<parameter><decl><type><name>RFSPartition</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
