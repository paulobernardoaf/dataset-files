<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\test_str.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>test_r_str_replace_char_once</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"hello world"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_str_replace_char_once</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"hexlo world"</literal></expr></argument>, <argument><expr><literal type="string">"error, replace char once failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_str_replace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>r_str_replace</name> <argument_list>(<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"hello world"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"hell"</literal></expr></argument>, <argument><expr><literal type="string">"ihell"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ihello world"</literal></expr></argument>, <argument><expr><literal type="string">"error, replace char multi failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"hello world"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"hell"</literal></expr></argument>, <argument><expr><literal type="string">"ihell"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ihello world"</literal></expr></argument>, <argument><expr><literal type="string">"error, replace char multi failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"hello world"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" world"</literal></expr></argument>, <argument><expr><literal type="string">"error, replace char multi failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"hello world"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"helloello world"</literal></expr></argument>, <argument><expr><literal type="string">"error, replace char multi failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"hello horld"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"helloello helloorld"</literal></expr></argument>, <argument><expr><literal type="string">"error, replace char multi failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"hello horld"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"helloello horld"</literal></expr></argument>, <argument><expr><literal type="string">"error, replace char multi failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_str_replace_char</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"hello world"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"hexxo worxd"</literal></expr></argument>, <argument><expr><literal type="string">"error, replace char multi failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_str_bits64</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_str_bits64</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"00000000"</literal></expr></argument>, <argument><expr><literal type="string">"binary of 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_str_bits64</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"00000001"</literal></expr></argument>, <argument><expr><literal type="string">"binary of 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_str_bits64</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"00000010"</literal></expr></argument>, <argument><expr><literal type="string">"binary of 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_str_rwx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rwx</name> <init>= <expr><call><name>r_str_rwx</name> <argument_list>(<argument><expr><literal type="string">"rwx"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rw</name> <init>= <expr><call><name>r_str_rwx</name> <argument_list>(<argument><expr><literal type="string">"rw-"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rx</name> <init>= <expr><call><name>r_str_rwx</name> <argument_list>(<argument><expr><literal type="string">"rx"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>none</name> <init>= <expr><call><name>r_str_rwx</name> <argument_list>(<argument><expr><literal type="string">"---"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>number</name> <init>= <expr><call><name>r_str_rwx</name> <argument_list>(<argument><expr><literal type="string">"999"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rx_number</name> <init>= <expr><call><name>r_str_rwx</name> <argument_list>(<argument><expr><literal type="string">"5"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rwx_number</name> <init>= <expr><call><name>r_str_rwx</name> <argument_list>(<argument><expr><literal type="string">"7"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>rwx</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"rwx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>rw</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"rw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>rx</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"rx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>none</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"no permissions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>number</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"large input number string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>rx_number</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"rx number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>rwx_number</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"rwx number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_str_rwx_i</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>rwx</name> <init>= <expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>rw</name> <init>= <expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>rx</name> <init>= <expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>invalid_mode</name> <init>= <expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><literal type="number">898</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>invalid_mode_neg</name> <init>= <expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>rwx</name></expr></argument>, <argument><expr><literal type="string">"rwx"</literal></expr></argument>, <argument><expr><literal type="string">"rwx = 7 mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>rw</name></expr></argument>, <argument><expr><literal type="string">"rw-"</literal></expr></argument>, <argument><expr><literal type="string">"rw = 6 mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>rx</name></expr></argument>, <argument><expr><literal type="string">"r-x"</literal></expr></argument>, <argument><expr><literal type="string">"rx = 5 mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>invalid_mode</name></expr></argument>, <argument><expr><literal type="string">"---"</literal></expr></argument>, <argument><expr><literal type="string">"invalid permissions mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>invalid_mode_neg</name></expr></argument>, <argument><expr><literal type="string">"---"</literal></expr></argument>, <argument><expr><literal type="string">"invalid permissions mode (negative value)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_str_bool</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>one</name> <init>= <expr><call><name>r_str_bool</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>zero</name> <init>= <expr><call><name>r_str_bool</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fifty</name> <init>= <expr><call><name>r_str_bool</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>negative</name> <init>= <expr><call><name>r_str_bool</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"one"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>fifty</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"large positive value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>negative</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"negative number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_str_case</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str1_mixedcase</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"mIxEdCaSe"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str2_mixedcase</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"mIxEdCaSe"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>str1_mixedcase</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>str2_mixedcase</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str1_mixedcase</name></expr></argument>, <argument><expr><literal type="string">"MIXEDCASE"</literal></expr></argument>, <argument><expr><literal type="string">"upcase"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str2_mixedcase</name></expr></argument>, <argument><expr><literal type="string">"mixedcase"</literal></expr></argument>, <argument><expr><literal type="string">"downcase"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>non_alphanum_1</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"c00lstring!"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>non_alphanum_2</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"c00lstrinG!"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>non_alphanum_1</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>non_alphanum_2</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>non_alphanum_1</name></expr></argument>, <argument><expr><literal type="string">"C00LSTRING!"</literal></expr></argument>, <argument><expr><literal type="string">"upcase, nonalpanum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>non_alphanum_2</name></expr></argument>, <argument><expr><literal type="string">"c00lstring!"</literal></expr></argument>, <argument><expr><literal type="string">"downcase, nonalpanum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str1_mixedcase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str2_mixedcase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>non_alphanum_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>non_alphanum_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_str_split</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>hi</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"hello world"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_str_split</name> <argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"split on space"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>hello</name> <init>= <expr><name>hi</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>world</name> <init>= <expr><name>hi</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>hello</name></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><literal type="string">"first string in split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>world</name></expr></argument>, <argument><expr><literal type="string">"world"</literal></expr></argument>, <argument><expr><literal type="string">"second string in split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_str_tokenize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>hi</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"hello world"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_str_word_set0</name> <argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"tokenize hello world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>hello</name> <init>= <expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>world</name> <init>= <expr><call><name>r_str_word_get0</name> <argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>hello</name></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><literal type="string">"first string in split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>world</name></expr></argument>, <argument><expr><literal type="string">"world"</literal></expr></argument>, <argument><expr><literal type="string">"second string in split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_str_char_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_str_char_count</name> <argument_list>(<argument><expr><literal type="string">"poop"</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"number of p in poop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_str_word_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_str_word_count</name> <argument_list>(<argument><expr><literal type="string">"let's test\nradare2 \t libraries!"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><literal type="string">"words in a string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_str_ichr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>test</name> <init>= <expr><literal type="string">"rrrrrradare2"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>out</name> <init>= <expr><call><name>r_str_ichr</name> <argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"adare2"</literal></expr></argument>,

<argument><expr><literal type="string">"string after the first non-r character in rrrrrradare2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_str_lchr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>test</name> <init>= <expr><literal type="string">"radare2"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>out</name> <init>= <expr><call><name>r_str_lchr</name> <argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"re2"</literal></expr></argument>, <argument><expr><literal type="string">"pointer to last r in radare2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_sub_str_lchr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>test</name> <init>= <expr><literal type="string">"raddddare2d"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>out</name> <init>= <expr><call><name>r_sub_str_lchr</name> <argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"dare2d"</literal></expr></argument>, <argument><expr><literal type="string">"pointer to last d in range in radddddare2d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_sub_str_rchr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>test</name> <init>= <expr><literal type="string">"raddddare2d"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>out</name> <init>= <expr><call><name>r_sub_str_rchr</name> <argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"ddddare2d"</literal></expr></argument>, <argument><expr><literal type="string">"pointer to first d in range in radddddare2d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_str_rchr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>test</name> <init>= <expr><literal type="string">"raddddare2d"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>out</name> <init>= <expr><call><name>r_str_rchr</name> <argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"2d"</literal></expr></argument>, <argument><expr><literal type="string">"pointer to last p in range in raddddare2d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_rchr</name> <argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"non NULL value returned"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>test</name> <operator>+</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_rchr</name> <argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"dare2d"</literal></expr></argument>, <argument><expr><literal type="string">"pointer to last d in range in raddddare2d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>test</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_str_rchr</name> <argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"non NULL value of out"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_str_ansi_len</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_str_ansi_len</name> <argument_list>(<argument><expr><literal type="string">"radare2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"len(ascii only)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_str_ansi_len</name> <argument_list>(<argument><expr><literal type="string">"r\x1b[38;2;208;80;0madare2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"len(ascii + ansi ending with m)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_str_ansi_len</name> <argument_list>(<argument><expr><literal type="string">"r\x1b[0Jadare2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"len(ascii + ansi ending with J)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_str_ansi_len</name> <argument_list>(<argument><expr><literal type="string">"r\x1b[42;42Hadare2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"len(ascii + ansi ending with H)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <macro><name>r_str_ansi_len</name> <argument_list>(<argument><literal type="string">"r\xc3\xa4""</literal>dare2<literal type="string">");

mu_assert_eq (len, 8, "</literal>len(ascii + <literal type="number">2</literal> byte utf-<literal type="number">8</literal> counted as <literal type="number">2</literal> chars)<literal type="string">");

len = r_str_ansi_len ("</literal>radar\xe2\x82\xac<literal type="string">""</literal><literal type="number">2</literal><literal type="string">");

mu_assert_eq (len, 9, "</literal>len(ascii + <literal type="number">3</literal> byte utf-<literal type="number">8</literal> counted as <literal type="number">3</literal> chars)<literal type="string">");

len = r_str_ansi_len ("</literal>radar\xf0\x9d\x84\x9e<literal type="string">""</literal><literal type="number">2</literal><literal type="string">");

mu_assert_eq (len, 10, "</literal>len(ascii + <literal type="number">4</literal> byte utf-<literal type="number">8</literal> counted as <literal type="number">4</literal> chars)<literal type="string">");

mu_end;

}

bool test_r_str_len_utf8_ansi(void) {

int len;

len = r_str_len_utf8_ansi ("</literal>radare2<literal type="string">");

mu_assert_eq (len, 7, "</literal>len(ascii only)<literal type="string">");

len = r_str_len_utf8_ansi ("</literal>r\x1b[<literal type="number">38</literal>;<literal type="number">2</literal>;<literal type="number">208</literal>;<literal type="number">80</literal>;<literal type="number">0madare2</literal><literal type="string">");

mu_assert_eq (len, 7, "</literal>len(ascii + ansi ending with m)<literal type="string">");

len = r_str_len_utf8_ansi ("</literal>r\x1b[<literal type="number">0Jadare2</literal><literal type="string">");

mu_assert_eq (len, 7, "</literal>len(ascii + ansi ending with J)<literal type="string">");

len = r_str_len_utf8_ansi ("</literal>r\x1b[<literal type="number">42</literal>;<literal type="number">42Hadare2</literal><literal type="string">");

mu_assert_eq (len, 7, "</literal>len(ascii + ansi ending with H)<literal type="string">");

len = r_str_len_utf8_ansi ("</literal>r\xc3\xa4<literal type="string">""</literal>dare2<literal type="string">");

mu_assert_eq (len, 7, "</literal>len(ascii + <literal type="number">2</literal> byte utf-<literal type="number">8</literal> counted as <literal type="number">1</literal> char)<literal type="string">");

len = r_str_len_utf8_ansi ("</literal>radar\xe2\x82\xac<literal type="string">""</literal><literal type="number">2</literal><literal type="string">");

mu_assert_eq (len, 7, "</literal>len(ascii + <literal type="number">3</literal> byte utf-<literal type="number">8</literal> counted as <literal type="number">1</literal> char)<literal type="string">");

len = r_str_len_utf8_ansi ("</literal>radar\xf0\x9d\x84\x9e<literal type="string">""</literal><literal type="number">2</literal><literal type="string">");

mu_assert_eq (len, 7, "</literal>len(ascii + <literal type="number">4</literal> byte utf-<literal type="number">8</literal> counted as <literal type="number">1</literal> char)<literal type="string">");

mu_end;

}

bool test_r_str_utf8_charsize(void) {

char s[16] = "</literal>\x61\xc3\xa1\xe6\x97\xa5\xf0\x9f\x91\x8c\xf0\x9f\x91\x8c\x8c<literal type="string">"; // aÃ¡æ¥ð

int sz;

sz = r_str_utf8_charsize (s);

mu_assert_eq (sz, 1, "</literal><literal type="number">1</literal> byte UTF-<literal type="number">8</literal><literal type="string">");

sz = r_str_utf8_charsize (s + 1);

mu_assert_eq (sz, 2, "</literal><literal type="number">2</literal> byte UTF-<literal type="number">8</literal><literal type="string">");

sz = r_str_utf8_charsize (s + 3);

mu_assert_eq (sz, 3, "</literal><literal type="number">3</literal> byte UTF-<literal type="number">8</literal><literal type="string">");

sz = r_str_utf8_charsize (s + 6);

mu_assert_eq (sz, 4, "</literal><literal type="number">4</literal> byte UTF-<literal type="number">8</literal><literal type="string">");

sz = r_str_utf8_charsize (s + 10);

mu_assert_eq (sz, 0, "</literal>Malformed UTF-<literal type="number">8</literal><literal type="string">");

mu_end;

}

bool test_r_str_utf8_charsize_prev(void) {

char s[16] = "</literal>\x61\xc3\xa1\xe6\x97\xa5\xf0\x9f\x91\x8c\xf0\x9f\x91\x8c\x8c<literal type="string">"; // aÃ¡æ¥ð

int sz;

sz = r_str_utf8_charsize_last (s);

mu_assert_eq (sz, 0, "</literal>Malformed UTF-<literal type="number">8</literal><literal type="string">");

sz = r_str_utf8_charsize_prev (s + 10, 10);

mu_assert_eq (sz, 4, "</literal><literal type="number">4</literal> byte UTF-<literal type="number">8</literal><literal type="string">");

sz = r_str_utf8_charsize_prev (s + 6, 6);

mu_assert_eq (sz, 3, "</literal><literal type="number">3</literal> byte UTF-<literal type="number">8</literal><literal type="string">");

sz = r_str_utf8_charsize_prev (s + 3, 3);

mu_assert_eq (sz, 2, "</literal><literal type="number">2</literal> byte UTF-<literal type="number">8</literal><literal type="string">");

sz = r_str_utf8_charsize_prev (s + 1, 1);

mu_assert_eq (sz, 1, "</literal><literal type="number">1</literal> byte UTF-<literal type="number">8</literal><literal type="string">");

mu_end;

}

bool test_r_str_sanitize_sdb_key(void) {

char *s = r_str_sanitize_sdb_key("</literal>rada.re2&lt;is&gt;::Cool<literal type="string">");

mu_assert_streq (s, "</literal>rada_re2_is_::Cool<literal type="string">", "</literal>sanitize<literal type="string">");

free (s);

mu_end;

}

bool test_r_str_unescape(void) {

char buf[] = "</literal>Hello\\x31World\\n<literal type="string">";

r_str_unescape (buf);

mu_assert_streq (buf, "</literal>Hello1World\n<literal type="string">", "</literal>unescaped<literal type="string">");

mu_end;

}

bool test_r_str_newf(void) {

char *a = r_str_newf ("</literal>hello<literal type="string">");

mu_assert_streq (a, "</literal>hello<literal type="string">", "</literal>oops<literal type="string">");

free (a);

a = r_str_newf ("</literal>%s/%s<literal type="string">", "</literal>hello<literal type="string">", "</literal>world<literal type="string">");

mu_assert_streq (a, "</literal>hello/world<literal type="string">", "</literal>oops<literal type="string">");

free (a);

a = r_str_newf ("</literal>%s/%s<literal type="string">", "</literal>hello<literal type="string">", "</literal>world<literal type="string">");

a = r_str_appendf (a, "</literal>..%s/%s<literal type="string">", "</literal>cow<literal type="string">", "</literal>low<literal type="string">");

a = r_str_appendf (a, "</literal>PWN<literal type="string">");

mu_assert_streq (a, "</literal>hello/world..cow/lowPWN<literal type="string">", "</literal>oops<literal type="string">");

free (a);

mu_end;

}

bool test_r_str_constpool(void) {

RStrConstPool pool;

bool s = r_str_constpool_init (&amp;pool);

mu_assert ("</literal>pool init success<literal type="string">", s);

const char *a_ref = "</literal>deliverance<literal type="string">";

const char *a_pooled = r_str_constpool_get (&amp;pool, a_ref);

mu_assert_ptrneq (a_pooled, a_ref, "</literal>pooled != ref<literal type="string">");

mu_assert_streq (a_pooled, a_ref, "</literal>pooled == ref (strcmp)<literal type="string">");

const char *a_pooled2 = r_str_constpool_get (&amp;pool, a_ref);

mu_assert_ptreq (a_pooled2, a_pooled, "</literal>same on re-get<literal type="string">");

char *a_ref_cpy = strdup (a_ref);

a_pooled2 = r_str_constpool_get (&amp;pool, a_ref_cpy);

free (a_ref_cpy);

mu_assert_ptreq (a_pooled2, a_pooled, "</literal>same on re-get with different ptr<literal type="string">");

const char *b_ref = "</literal>damnation<literal type="string">";

const char *b_pooled = r_str_constpool_get (&amp;pool, b_ref);

mu_assert_ptrneq (b_pooled, b_ref, "</literal>pooled != ref (second)<literal type="string">");

mu_assert_streq (b_pooled, b_ref, "</literal>pooled == ref (strcmp, second)<literal type="string">");

r_str_constpool_fini (&amp;pool);

mu_end;

}

bool test_r_str_format_msvc_argv() {

// Examples from http://daviddeley.com/autohotkey/parameters/parameters.htm#WINCRULES

const char *a = "</literal>CallMePancake<literal type="string">";

char *str = r_str_format_msvc_argv (1, &amp;a);

mu_assert_streq (str, "</literal>CallMePancake<literal type="string">", "</literal>no escaping<literal type="string">");

free (str);

a = "</literal>Call Me Pancake<literal type="string">";

str = r_str_format_msvc_argv (1, &amp;a);

mu_assert_streq (str, "</literal>\<literal type="string">"Call Me Pancake\""</literal></argument>, <argument><literal type="string">"just quoting"</literal></argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="string">"CallMe\"Pancake"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_format_msvc_argv</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"CallMe\\\"Pancake"</literal></expr></argument>, <argument><expr><literal type="string">"just escaping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="string">"CallMePancake\\"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_format_msvc_argv</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"CallMePancake\\"</literal></expr></argument>, <argument><expr><literal type="string">"no escaping of backslashes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="string">"Call Me Pancake\\"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_format_msvc_argv</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"\"Call Me Pancake\\\\\""</literal></expr></argument>, <argument><expr><literal type="string">"escaping of backslashes before closing quote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="string">"CallMe\\\"Pancake"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_format_msvc_argv</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"CallMe\\\\\\\"Pancake"</literal></expr></argument>, <argument><expr><literal type="string">"escaping of backslashes before literal quote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="string">"Call Me\\\"Pancake"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_format_msvc_argv</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"\"Call Me\\\\\\\"Pancake\""</literal></expr></argument>, <argument><expr><literal type="string">"escaping of backslashes before literal quote in quote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>args</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"rm"</literal></expr>, <expr><literal type="string">"-rf"</literal></expr>, <expr><literal type="string">"\\"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_str_format_msvc_argv</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"rm -rf \\"</literal></expr></argument>, <argument><expr><literal type="string">"multiple args"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_newf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_replace_char_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_replace_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_bits64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_rwx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_rwx_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_bool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_case</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_tokenize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_char_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_ichr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_lchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_sub_str_lchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_sub_str_rchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_rchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_ansi_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_len_utf8_ansi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_utf8_charsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_utf8_charsize_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_sanitize_sdb_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_unescape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_constpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_str_format_msvc_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>all_tests</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
