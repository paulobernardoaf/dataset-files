<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\test_glob.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>test_r_glob</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_str_glob</name> <argument_list>(<argument><expr><literal type="string">"foo.c"</literal></expr></argument>, <argument><expr><literal type="string">"*.c"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"foo.c -&gt; *.c -&gt; 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_str_glob</name> <argument_list>(<argument><expr><literal type="string">"foo.c"</literal></expr></argument>, <argument><expr><literal type="string">"*.d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"foo.c -&gt; *.d -&gt; 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_str_glob</name> <argument_list>(<argument><expr><literal type="string">"foo.c"</literal></expr></argument>, <argument><expr><literal type="string">"foo*"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"foo.c -&gt; foo* -&gt; 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_str_glob</name> <argument_list>(<argument><expr><literal type="string">"foo.c"</literal></expr></argument>, <argument><expr><literal type="string">"*oo*"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"foo.c -&gt; *oo* -&gt; 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_str_glob</name> <argument_list>(<argument><expr><literal type="string">"foo.c"</literal></expr></argument>, <argument><expr><literal type="string">"*uu*"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"foo.c -&gt; *uu* -&gt; 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_str_glob</name> <argument_list>(<argument><expr><literal type="string">"foo.c"</literal></expr></argument>, <argument><expr><literal type="string">"f*c*"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"foo.c -&gt; f*c* -&gt; 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_str_glob</name> <argument_list>(<argument><expr><literal type="string">"foo.c"</literal></expr></argument>, <argument><expr><literal type="string">"f*d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"foo.c -&gt; f*d -&gt; 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mu_run_test</name><argument_list>(<argument><expr><name>test_r_glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>all_tests</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
