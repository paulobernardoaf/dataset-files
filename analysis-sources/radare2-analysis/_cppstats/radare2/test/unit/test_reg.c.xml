<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\test_reg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_reg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>test_r_reg_set_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>r_reg_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"r_reg_new () failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_name</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>R_REG_NAME_PC</name></expr></argument>, <argument><expr><literal type="string">"eip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>r_reg_get_name</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>R_REG_NAME_PC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"eip"</literal></expr></argument>, <argument><expr><literal type="string">"PC register alias is eip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_free</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_reg_set_profile_string</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>r_reg_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"r_reg_new () failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"=PC eip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>r_reg_get_name</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>R_REG_NAME_PC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"eip"</literal></expr></argument>, <argument><expr><literal type="string">"PC register alias is eip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"gpr eax .32 24 0"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"define eax register"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"eax"</literal></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"set eax register value to 1234"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>value</name> <init>= <expr><call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"eax"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>, <argument><expr><literal type="string">"get eax register value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_free</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_reg_get_value_gpr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>r_reg_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"r_reg_new () failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>,

<argument><expr><literal type="string">"gpr eax .32 0 0\n\

gpr ax .16 0 0\n\

gpr ah .8 1 0\n\

gpr al .8 0 0\n\

gpr ebx .32 40 0\n\

gpr bx .16 40 0\n\

gpr bh .8 41 0\n\

gpr bl .8 40 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"eax"</literal></expr></argument>, <argument><expr><literal type="number">0x01234567</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"set eax register value to 0x01234567"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"eax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0x01234567</literal></expr></argument>, <argument><expr><literal type="string">"get eax register value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"ax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0x4567</literal></expr></argument>, <argument><expr><literal type="string">"get ax register value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"ah"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0x45</literal></expr></argument>, <argument><expr><literal type="string">"get ah register value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"al"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0x67</literal></expr></argument>, <argument><expr><literal type="string">"get al register value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"ebx"</literal></expr></argument>, <argument><expr><literal type="number">0x89ab0000</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"set ebx register value to 0x89ab0000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"ebx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0x89ab0000</literal></expr></argument>, <argument><expr><literal type="string">"get ebx register value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"bh"</literal></expr></argument>, <argument><expr><literal type="number">0xcd</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"set bh register value to 0xcd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"bl"</literal></expr></argument>, <argument><expr><literal type="number">0xef</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"set bh register value to 0xef"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"bx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0xcdef</literal></expr></argument>, <argument><expr><literal type="string">"get bx register value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_free</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_reg_get_value_flag</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>r_reg_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"r_reg_new () failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>,

<argument><expr><literal type="string">"gpr eflags .32 0 0 c1p.a.zstido.n.rv\n\

gpr flags .16 0 0\n\

gpr cf .1 .0 0 carry\n\

gpr pf .1 .2 0 parity\n\

gpr af .1 .4 0 adjust\n\

gpr zf .1 .6 0 zero\n\

gpr sf .1 .7 0 sign\n\

gpr tf .1 .8 0 trap\n\

gpr if .1 .9 0 interrupt\n\

gpr df .1 .10 0 direction\n\

gpr of .1 .11 0 overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"eflags"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_FLG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_value</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0x00000346</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"cf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"get cf flag value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"pf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"get pf flag value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"af"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"get af flag value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"zf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"get zf flag value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"sf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"get sf flag value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"tf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"get tf flag value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>r_reg_getv</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"df"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"get df flag value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_free</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_reg_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>r_reg_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"r_reg_new () failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>,

<argument><expr><literal type="string">"gpr eax .32 24 0\n\

fpu sf0 .32 304 0\n\

xmm xmm0 .64 160 4"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>success</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"define eax, sf0 and xmm0 register"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"sf0"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_FPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"sf0"</literal></expr></argument>, <argument><expr><literal type="string">"found sf0 as R_REG_TYPE_FPU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>R_REG_TYPE_FPU</name></expr></argument>, <argument><expr><literal type="string">"sf0 type is R_REG_TYPE_FPU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"xmm0"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_XMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"xmm0"</literal></expr></argument>, <argument><expr><literal type="string">"found xmm0 as R_REG_TYPE_XMM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>R_REG_TYPE_XMM</name></expr></argument>, <argument><expr><literal type="string">"xmm0 type is R_REG_TYPE_XMM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"xmm0"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"xmm0"</literal></expr></argument>, <argument><expr><literal type="string">"found xmm0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>R_REG_TYPE_XMM</name></expr></argument>, <argument><expr><literal type="string">"xmm0 type is R_REG_TYPE_XMM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_free</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_reg_get_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>r_reg_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"r_reg_new () failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>,

<argument><expr><literal type="string">"gpr eax .32 24 0\n\

fpu sf0 .32 304 0\n\

xmm@fpu xmm0 .64 160 4"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>success</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"define eax, sf0 and xmm0 register"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>R_REG_TYPE_XMM</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>(</operator><name><name>reg</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>R_REG_TYPE_FPU</name></expr>]</index></name><operator>.</operator><name>maskregstype</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><literal type="string">"xmm0 stored as R_REG_TYPE_FPU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>r_reg_get_list</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>R_REG_TYPE_XMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"sf0 and xmm0 stored as R_REG_TYPE_FPU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_free</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_reg_get_pack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RRegItem</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>r_reg_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_notnull</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"r_reg_new () failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>,

<argument><expr><literal type="string">"xmm xmm0 .128 0 16\n\

xmm xmm0h .64 0 8\n\

xmm xmm0l .64 8 8\n\

xmm xmm1 .128 16 16\n\

xmm xmm1h .64 16 8\n\

xmm xmm1l .64 24 8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"xmm0"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_XMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_pack</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">0x0011223344556677</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>r_reg_get_pack</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0x0011223344556677</literal></expr></argument>,

<argument><expr><literal type="string">"get xmm0 value at index 0 and bitsize 64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>r_reg_get_pack</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0x44556677</literal></expr></argument>,

<argument><expr><literal type="string">"get xmm0 value at index 1 and bitsize 32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_pack</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0xdeadbeef</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>r_reg_get_pack</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0xdeadbeef</literal></expr></argument>,

<argument><expr><literal type="string">"get xmm0 value at index 2 and bitsize 32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"xmm1"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_XMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_pack</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">0x8899aabbccddeeff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_reg_get</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="string">"xmm1l"</literal></expr></argument>, <argument><expr><name>R_REG_TYPE_XMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>r_reg_get_pack</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0xccddeeff</literal></expr></argument>,

<argument><expr><literal type="string">"get xmm1l value at index 0 and bitsize 32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_free</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_reg_set_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_reg_set_profile_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_reg_get_value_gpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_reg_get_value_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_reg_get</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_reg_get_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_reg_get_pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>all_tests</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
