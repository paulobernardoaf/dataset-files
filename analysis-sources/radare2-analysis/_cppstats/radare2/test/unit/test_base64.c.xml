<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\test_base64.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>test_r_base64_decode_dyn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>hello</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>r_base64_decode_dyn</name> <argument_list>(<argument><expr><literal type="string">"aGVsbG8="</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name><argument_list>(<argument><expr><name>hello</name></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><literal type="string">"base64_decode_dyn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hello</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_base64_decode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>hello</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>r_base64_decode</name> <argument_list>(<argument><expr><name>hello</name></expr></argument>, <argument><expr><literal type="string">"aGVsbG8="</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"valid base64 decoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>hello</name></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><literal type="string">"base64 decoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hello</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_base64_decode_invalid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>hello</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>r_base64_decode</name> <argument_list>(<argument><expr><name>hello</name></expr></argument>, <argument><expr><literal type="string">"\x01\x02\x03\x04\x00"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"invalid base64 decoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hello</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_r_base64_encode_dyn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>hello</name> <init>= <expr><call><name>r_base64_encode_dyn</name><argument_list>(<argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name><argument_list>(<argument><expr><name>hello</name></expr></argument>, <argument><expr><literal type="string">"aGVsbG8="</literal></expr></argument>, <argument><expr><literal type="string">"base64_encode_dyn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hello</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_r_base64_encode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>hello</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_base64_encode</name><argument_list>(<argument><expr><name>hello</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><literal type="string">"hello"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_streq</name><argument_list>(<argument><expr><name>hello</name></expr></argument>, <argument><expr><literal type="string">"aGVsbG8="</literal></expr></argument>, <argument><expr><literal type="string">"base64_encode_dyn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hello</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mu_run_test</name><argument_list>(<argument><expr><name>test_r_base64_decode_dyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name><argument_list>(<argument><expr><name>test_r_base64_decode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name><argument_list>(<argument><expr><name>test_r_base64_decode_invalid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name><argument_list>(<argument><expr><name>test_r_base64_encode_dyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name><argument_list>(<argument><expr><name>test_r_base64_encode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>all_tests</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
