<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\test_anal_block.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"minunit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_anal_block_invars.inl"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_invariants</name></cpp:macro> <cpp:value>block_check_invariants</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_leaks</name></cpp:macro> <cpp:value>block_check_leaks</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>blocks_count</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBIter</name></type> <name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<macro><name>r_rbtree_foreach</name><argument_list>(<argument>anal-&gt;bb_tree</argument>, <argument>iter</argument>, <argument>block</argument>, <argument>RAnalBlock</argument>, <argument>_rb</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert_invariants</name><parameter_list>(<parameter><type><name>anal</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!check_invariants (anal)) { return false; } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert_leaks</name><parameter_list>(<parameter><type><name>anal</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!check_leaks (anal)) { return false; } } while (0)</cpp:value></cpp:define>

<function><type><name>bool</name></type> <name>test_r_anal_block_create</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>r_anal_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>blocks_count</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"initial count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"created block"</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="string">"created addr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="string">"created size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"created initial ref"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>blocks_count</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"count after create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block2</name> <init>= <expr><call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x133f</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"created block (overlap)"</literal></expr></argument>, <argument><expr><name>block2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block2</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0x133f</literal></expr></argument>, <argument><expr><literal type="string">"created addr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block2</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">"created size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block2</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"created initial ref"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>blocks_count</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"count after create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block3</name> <init>= <expr><call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"no double create on same start"</literal></expr></argument>, <argument><expr><operator>!</operator><name>block3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>blocks_count</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"count after failed create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name>block2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_leaks</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_free</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_anal_block_contains</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalBlock</name></type> <name>dummy</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <literal type="number">0x1337</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"contains before"</literal></expr></argument>, <argument><expr><operator>!</operator><call><name>r_anal_block_contains</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"contains start"</literal></expr></argument>, <argument><expr><call><name>r_anal_block_contains</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"contains inside"</literal></expr></argument>, <argument><expr><call><name>r_anal_block_contains</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><literal type="number">0x1339</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"contains last"</literal></expr></argument>, <argument><expr><call><name>r_anal_block_contains</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal> <operator>+</operator> <literal type="number">42</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"contains after"</literal></expr></argument>, <argument><expr><operator>!</operator><call><name>r_anal_block_contains</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal> <operator>+</operator> <literal type="number">42</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_anal_block_split</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>r_anal_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>blocks_count</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"count after create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0xdeadbeef</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <literal type="number">0xc0ffee</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>ninstr</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_bb_set_offset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_bb_set_offset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_bb_set_offset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_bb_set_offset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_bb_set_offset</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>second</name> <init>= <expr><call><name>r_anal_block_split</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="string">"nop split on first addr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>blocks_count</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"count after nop split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"ref after nop split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>second</name> <operator>=</operator> <call><name>r_anal_block_split</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0x1339</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_ptrneq</name> <argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="string">"non-nop split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>blocks_count</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"count after non-nop split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="string">"first addr after split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"first size after split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>second</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0x1339</literal></expr></argument>, <argument><expr><literal type="string">"first addr after split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>second</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="string">"first size after split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>, <argument><expr><name><name>second</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="string">"first jump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>fail</name></name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>, <argument><expr><literal type="string">"first fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>second</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>, <argument><expr><literal type="number">0xdeadbeef</literal></expr></argument>, <argument><expr><literal type="string">"second jump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>second</name><operator>-&gt;</operator><name>fail</name></name></expr></argument>, <argument><expr><literal type="number">0xc0ffee</literal></expr></argument>, <argument><expr><literal type="string">"second fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>ninstr</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"first ninstr after split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_anal_bb_offset_inst</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"first op_pos[0]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_anal_bb_offset_inst</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"first op_pos[1]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>second</name><operator>-&gt;</operator><name>ninstr</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"second ninstr after split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_anal_bb_offset_inst</name> <argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"second op_pos[0]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_anal_bb_offset_inst</name> <argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"second op_pos[1]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_anal_bb_offset_inst</name> <argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="string">"second op_pos[2]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_leaks</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_free</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_anal_block_split_in_function</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>r_anal_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_create_function</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="string">"bbowner"</literal></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>blocks_count</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"count after create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_function_add_block</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"block refs after adding to function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>second</name> <init>= <expr><call><name>r_anal_block_split</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0x1339</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_ptrneq</name> <argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="string">"non-nop split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>blocks_count</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"count after non-nop split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"first block refs after adding to function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>second</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"second block refs after adding to function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"function has first block after split"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"function has second block after split"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"second block is in function after split"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"second block is in function after split"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name><name>second</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_leaks</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_free</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_anal_block_merge</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>r_anal_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>second</name> <init>= <expr><call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal> <operator>+</operator> <literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">624</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>blocks_count</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"count after create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>second</name><operator>-&gt;</operator><name>jump</name></name> <operator>=</operator> <literal type="number">0xdeadbeef</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>second</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <literal type="number">0xc0ffee</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>first</name><operator>-&gt;</operator><name>ninstr</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_bb_set_offset</name> <argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_bb_set_offset</name> <argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_bb_set_offset</name> <argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>second</name><operator>-&gt;</operator><name>ninstr</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_bb_set_offset</name> <argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_bb_set_offset</name> <argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_bb_set_offset</name> <argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_bb_set_offset</name> <argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>r_anal_block_merge</name> <argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"merge success"</literal></expr></argument>, <argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>blocks_count</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"count after merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>first</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="string">"addr after merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>first</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">666</literal></expr></argument>, <argument><expr><literal type="string">"size after merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>first</name><operator>-&gt;</operator><name>jump</name></name></expr></argument>, <argument><expr><literal type="number">0xdeadbeef</literal></expr></argument>, <argument><expr><literal type="string">"jump after merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>first</name><operator>-&gt;</operator><name>fail</name></name></expr></argument>, <argument><expr><literal type="number">0xc0ffee</literal></expr></argument>, <argument><expr><literal type="string">"fail after merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>first</name><operator>-&gt;</operator><name>ninstr</name></name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"ninstr after merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_anal_bb_offset_inst</name> <argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"offset 0 after merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_anal_bb_offset_inst</name> <argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="string">"offset 1 after merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_anal_bb_offset_inst</name> <argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"offset 2 after merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_anal_bb_offset_inst</name> <argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">42</literal><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"offset 3 after merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_anal_bb_offset_inst</name> <argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">42</literal><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"offset 4 after merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_anal_bb_offset_inst</name> <argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">42</literal><operator>+</operator><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"offset 5 after merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_anal_bb_offset_inst</name> <argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">42</literal><operator>+</operator><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="string">"offset 6 after merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_free</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_anal_block_merge_in_function</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>r_anal_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_create_function</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="string">"bbowner"</literal></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>second</name> <init>= <expr><call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal> <operator>+</operator> <literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">624</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>blocks_count</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"count after create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_function_add_block</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_function_add_block</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>r_anal_block_merge</name> <argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"merge success"</literal></expr></argument>, <argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>blocks_count</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"count after merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fcn bbs after merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>first</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"bb functions after merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"function has merged block"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"merged block is in function"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name><name>first</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_free</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_anal_block_delete</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>r_anal_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_create_function</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="string">"bbowner"</literal></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>blocks_count</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"count after create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_function_add_block</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"refs after adding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fcn bbs after add"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"bb fcns after add"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_delete_block</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"refs after delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>bbs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"fcn bbs after delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"bb fcns after delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_free</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_anal_block_set_size</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>r_anal_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_create_function</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="string">"bbowner"</literal></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_function_add_block</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_set_size</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="string">"size after set_size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>second</name> <init>= <expr><call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal><operator>+</operator><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_function_add_block</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_set_size</name> <argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>second</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><literal type="string">"size after set_size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_set_size</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><literal type="string">"size after set_size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_free</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_anal_block_relocate</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>r_anal_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><call><name>r_anal_create_function</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="string">"bbowner"</literal></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_function_add_block</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>r_anal_block_relocate</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0x200</literal></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"relocate success"</literal></expr></argument>, <argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0x200</literal></expr></argument>, <argument><expr><literal type="string">"addr after relocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><literal type="string">"size after relocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>second</name> <init>= <expr><call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x1337</literal><operator>+</operator><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_function_add_block</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>r_anal_block_relocate</name> <argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><literal type="number">0x400</literal></expr></argument>, <argument><expr><literal type="number">0x123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"relocate success"</literal></expr></argument>, <argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>second</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0x400</literal></expr></argument>, <argument><expr><literal type="string">"addr after relocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>second</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0x123</literal></expr></argument>, <argument><expr><literal type="string">"size after relocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>r_anal_block_relocate</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0x400</literal></expr></argument>, <argument><expr><literal type="number">0x333</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"relocate fail on same addr"</literal></expr></argument>, <argument><expr><operator>!</operator><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0x200</literal></expr></argument>, <argument><expr><literal type="string">"addr after failed relocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><literal type="string">"size after failed relocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>r_anal_block_relocate</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0x500</literal></expr></argument>, <argument><expr><literal type="number">0x333</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"relocate success"</literal></expr></argument>, <argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0x500</literal></expr></argument>, <argument><expr><literal type="string">"addr after failed relocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0x333</literal></expr></argument>, <argument><expr><literal type="string">"size after failed relocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>r_anal_block_relocate</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><literal type="number">0x333</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"relocate success"</literal></expr></argument>, <argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><literal type="string">"addr after failed relocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0x333</literal></expr></argument>, <argument><expr><literal type="string">"size after failed relocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_free</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_anal_block_query</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>r_anal_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXSIZE</name></cpp:macro> <cpp:value>0x300</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPACE</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLES</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name><name>blocks</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>SPACE</name></expr></argument>, <argument><expr><call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><call><name>r_anal_get_block_at</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r_anal_get_block_at"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SAMPLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>SPACE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>addr</name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block</name> <operator>=</operator> <name><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mu_assert_ptreq</name> <argument_list>(<argument><expr><call><name>r_anal_get_block_at</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="string">"r_anal_get_block_at"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SAMPLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>SPACE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>r_anal_get_blocks_in</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>in</argument>, <argument>it</argument>, <argument>block</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"block refd in returned list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>size_t</name></type> <name>linear_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_anal_block_contains</name> <argument_list>(<argument><expr><name><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>linear_found</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"intersect linear found in list"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>r_list_length</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>linear_found</name></expr></argument>, <argument><expr><literal type="string">"r_anal_get_blocks_in count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SAMPLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>rand</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>SPACE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>MAXSIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>r_anal_get_blocks_intersect</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>in</argument>, <argument>it</argument>, <argument>block</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"block refd in returned list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>size_t</name></type> <name>linear_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block</name> <operator>||</operator> <name>addr</name> <operator>+</operator> <name>size</name> <operator>&lt;=</operator> <name><name>block</name><operator>-&gt;</operator><name>addr</name></name> <operator>||</operator> <name>addr</name> <operator>&gt;=</operator> <name><name>block</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>linear_found</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"in linear found in list"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>r_list_length</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>linear_found</name></expr></argument>, <argument><expr><literal type="string">"r_anal_get_blocks_intersect count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert_leaks</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_free</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>addr_list_cb</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>test_r_anal_block_successors</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>r_anal_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name><name>blocks</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blocks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blocks</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blocks</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blocks</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x110</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blocks</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x120</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blocks</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x130</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blocks</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0x140</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blocks</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0xa0</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blocks</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>r_anal_create_block</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>, <argument><expr><literal type="number">0xc0</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_invariants</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>jump</name> <operator>=</operator> <literal type="number">0x30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>fail</name> <operator>=</operator> <literal type="number">0x50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blocks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>jump</name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blocks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>fail</name> <operator>=</operator> <literal type="number">0x50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blocks</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>jump</name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalSwitchOp</name> <modifier>*</modifier></type><name>sop</name> <init>= <expr><call><name>r_anal_switch_op_new</name> <argument_list>(<argument><expr><literal type="number">0x55</literal></expr></argument>, <argument><expr><literal type="number">0x13</literal></expr></argument>, <argument><expr><literal type="number">0x15</literal></expr></argument>, <argument><expr><literal type="number">0x42</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>sop</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>sop</name><operator>-&gt;</operator><name>min_val</name></name></expr></argument>, <argument><expr><literal type="number">0x13</literal></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>sop</name><operator>-&gt;</operator><name>max_val</name></name></expr></argument>, <argument><expr><literal type="number">0x15</literal></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>sop</name><operator>-&gt;</operator><name>def_val</name></name></expr></argument>, <argument><expr><literal type="number">0x42</literal></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_switch_op_add_case</name> <argument_list>(<argument><expr><name>sop</name></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_switch_op_add_case</name> <argument_list>(<argument><expr><name>sop</name></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0x110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_switch_op_add_case</name> <argument_list>(<argument><expr><name>sop</name></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0x120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_switch_op_add_case</name> <argument_list>(<argument><expr><name>sop</name></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x130</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_switch_op_add_case</name> <argument_list>(<argument><expr><name>sop</name></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0x140</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blocks</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>switch_op</name> <operator>=</operator> <name>sop</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_anal_block_successor_addrs_foreach</name> <argument_list>(<argument><expr><name><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>addr_list_cb</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"jump/fail successors count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"jmp successor"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0x30</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"fail successor"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0x50</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_block_successor_addrs_foreach</name> <argument_list>(<argument><expr><name><name>blocks</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>addr_list_cb</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"switch successors count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"jmp successor"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"case successor"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0x100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"case successor"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0x110</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"case successor"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0x120</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"case successor"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0x130</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"case successor"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0x140</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>r_anal_block_recurse_list</name> <argument_list>(<argument><expr><name><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>result</argument>, <argument>it</argument>, <argument>block</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"block refd in returned list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>mu_assert_eq</name> <argument_list>(<argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"recursive successors count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"recursive successor"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"recursive successor"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"recursive successor"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"recursive successor"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"recursive successor"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"recursive successor"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"recursive successor"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_assert</name> <argument_list>(<argument><expr><literal type="string">"recursive successor"</literal></expr></argument>, <argument><expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>blocks</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RAnalBlock</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_block_unref</name> <argument_list>(<argument><expr><name><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert_leaks</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_free</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mu_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>all_tests</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_anal_block_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_anal_block_contains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_anal_block_split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_anal_block_split_in_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_anal_block_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_anal_block_merge_in_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_anal_block_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_anal_block_set_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_anal_block_relocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_anal_block_query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mu_run_test</name> <argument_list>(<argument><expr><name>test_r_anal_block_successors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tests_passed</name> <operator>!=</operator> <name>tests_run</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gettimeofday</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name> <init>= <expr><ternary><condition><expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>strtoul</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"seed for test_anal_block: %u\n"</literal></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>all_tests</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
