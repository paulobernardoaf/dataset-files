<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\legacy_unit\anal\test_x86im.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x86/x86im/x86im.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>anal_op</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>x86im_instr_object</name></type> <name>io</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>data</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_hex_str2bin</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>x86im_dec</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>, <argument><expr><ternary><condition><expr><name>bits</name> <operator>==</operator> <literal type="number">32</literal></expr> ?</condition><then> <expr><name>X86IM_IO_MODE_32BIT</name></expr> </then><else>: <expr><name>X86IM_IO_MODE_64BIT</name></expr></else></ternary></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>X86IM_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"X86IM io struct\n"</literal>

<literal type="string">"---------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"mode: 0x%lx\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"flags: 0x%lx\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"id: 0x%lx\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"grp: 0x%lx\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>grp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"mnm: 0x%lx\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>mnm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"len: 0x%lx\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"def_opsz: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>def_opsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"def_adsz: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>def_adsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"opcode: 0x%x 0x%x 0x%x\n"</literal></expr></argument>,

<argument><expr><name><name>io</name><operator>.</operator><name>opcode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>opcode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>opcode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"opcode_count: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>opcode_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"prefix: 0x%hx\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"prefix_values: 0x%x 0x%x 0x%x 0x%x\n"</literal></expr></argument>,

<argument><expr><name><name>io</name><operator>.</operator><name>prefix_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>prefix_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>io</name><operator>.</operator><name>prefix_values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>prefix_values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"prefix_count: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>prefix_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"prefix_order: 0x%lx\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>prefix_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"rexp: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>rexp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"somimp: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>somimp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"n3did: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>n3did</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"seg: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>seg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"w_bit: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>w_bit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"s_bit: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>s_bit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"d_bit: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>d_bit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"gg_fld: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>gg_fld</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"tttn_fld: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>tttn_fld</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"selector: 0x%hx\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>selector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"imm_size: 0x%lx\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>imm_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"imm: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"disp_size: 0x%lx\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>disp_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"disp: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>disp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"mem_flags: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>mem_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"mem_am: 0x%hx\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>mem_am</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"mem_size: 0x%hx\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>mem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"mem_base: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>mem_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"mem_index: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"mem_scale: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>mem_scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"modrm: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>modrm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"sib: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>sib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"rop: 0x%lx 0x%lx 0x%lx 0x%lx \n"</literal></expr></argument>,

<argument><expr><name><name>io</name><operator>.</operator><name>rop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>rop</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>rop</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>rop</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"rop_count: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>.</operator><name>rop_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: Unknown opcode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Usage: %s opcode [bits]\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>anal_op</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
