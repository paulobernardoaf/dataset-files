<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\legacy_unit\reg\regdiff.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_reg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_print.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reg_profile</name> <init>= 

<expr><literal type="string">"gpr eax .32 0 0\n"</literal>

<literal type="string">"gpr ecx .32 4 0\n"</literal>

<literal type="string">"gpr edx .32 8 0\n"</literal>

<literal type="string">"gpr ebx .32 12 0\n"</literal>

<literal type="string">"gpr esp .32 16 0\n"</literal>

<literal type="string">"gpr ebp .32 20 0\n"</literal>

<literal type="string">"gpr esi .32 24 0\n"</literal>

<literal type="string">"gpr edi .32 28 0\n"</literal>

<literal type="string">"gpr eip .32 32 0\n"</literal>

<literal type="string">"gpr eflags .32 36 0\n"</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<literal type="string">"seg cs .32 40 0\n"</literal>

<literal type="string">"seg ss .32 44 0\n"</literal>

<literal type="string">"seg ds .32 48 0\n"</literal>

<literal type="string">"seg es .32 52 0\n"</literal>

<literal type="string">"seg fs .32 56 0\n"</literal>

<literal type="string">"seg gs .32 60 0\n"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<literal type="string">"gpr st0 .80 64 0\n"</literal>

<literal type="string">"gpr st1 .80 74 0\n"</literal>

<literal type="string">"gpr st2 .80 84 0\n"</literal>

<literal type="string">"gpr st3 .80 94 0\n"</literal>

<literal type="string">"gpr st4 .80 104 0\n"</literal>

<literal type="string">"gpr st5 .80 114 0\n"</literal>

<literal type="string">"gpr st6 .80 124 0\n"</literal>

<literal type="string">"gpr st7 .80 134 0\n"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"gpr fctrl .32 144 0\n"</literal>

<literal type="string">"gpr fstat .32 148 0\n"</literal>

<literal type="string">"gpr ftag .32 152 0\n"</literal>

<literal type="string">"gpr fiseg .32 156 0\n"</literal>

<literal type="string">"gpr fioff .32 160 0\n"</literal>

<literal type="string">"gpr foseg .32 164 0\n"</literal>

<literal type="string">"gpr fooff .32 168 0\n"</literal>

<literal type="string">"gpr fop .32 172 0\n"</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<literal type="string">"gpr xmm0 .128 176 0\n"</literal>

<literal type="string">"gpr xmm1 .128 192 0\n"</literal>

<literal type="string">"gpr xmm2 .128 208 0\n"</literal>

<literal type="string">"gpr xmm3 .128 224 0\n"</literal>

<literal type="string">"gpr xmm4 .128 240 0\n"</literal>

<literal type="string">"gpr xmm5 .128 256 0\n"</literal>

<literal type="string">"gpr xmm6 .128 272 0\n"</literal>

<literal type="string">"gpr xmm7 .128 288 0\n"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"gpr mxcsr .32 304 0\n"</literal></expr></init></decl>

;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpregs</name><parameter_list>(<parameter><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_reg_get_bytes</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_print_hexdump</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>type</name> <init>= <expr><name>R_REG_TYPE_GPR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>r_reg_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RReg</name> <modifier>*</modifier></type><name>reg2</name> <init>= <expr><call><name>r_reg_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>reg_profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_set_profile_string</name> <argument_list>(<argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg_profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_reg_setv</name> <argument_list>(<argument><expr><name>reg2</name></expr></argument>, <argument><expr><literal type="string">"ecx"</literal></expr></argument>, <argument><expr><literal type="number">0xdeadbeef</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RRegItem</name><modifier>*</modifier></type> <name>current</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><call><name>r_reg_get_bytes</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>R_REG_TYPE_GPR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"arena: %d\n"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>!=</operator> <literal type="number">308</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ARENA SIZE IS WRONG\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dumpregs</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dumpregs</name> <argument_list>(<argument><expr><name>reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>r_reg_next_diff</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,

<argument><expr><name><name>reg2</name><operator>-&gt;</operator><name>regset</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name><name>arena</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>,

<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Reg: &lt;%s&gt;\n"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
