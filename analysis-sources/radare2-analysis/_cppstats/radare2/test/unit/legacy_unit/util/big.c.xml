<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\legacy_unit\util\big.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../big.c"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RNumBig</name></type> <name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>n3</name></decl>, <decl><type ref="prev"/><name>zero</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_big_set_st</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_set_str</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>, <argument><expr><literal type="string">"-3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"n3last = %d\n"</literal></expr></argument>, <argument><expr><name><name>n3</name><operator>.</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name><name>n3</name><operator>.</operator><name>dgts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>n3</name><operator>.</operator><name>dgts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_mul</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_print</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_set_st</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_set_st</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_print</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_set_st</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>, <argument><expr><literal type="number">923459999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_mul</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_mul</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_mul</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_print</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_set_st64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><literal type="number">9999923459999999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_set_st64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>, <argument><expr><literal type="number">9999992345999999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_mul</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_mul</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_mul</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_print</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"a = %d b = %d\n"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_set_st</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_set_st</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"addition -- "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_print</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"r_big_cmp a ? b = %d\n"</literal></expr></argument>,<argument><expr><call><name>r_big_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_sub</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"subtraction -- "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_print</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_mul</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"multiplication -- "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_print</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_set_st</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_big_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"division -- NaN \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_big_div</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"division -- "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_big_print</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

</unit>
