<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\test\unit\legacy_unit\util\test_graph.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>topo_sorting</name><parameter_list>(<parameter><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>RGraphVisitor</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>order</name> <init>= <expr><operator>(</operator><name>RList</name> <operator>*</operator><operator>)</operator><name><name>vis</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_prepend</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>act</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>ita</name> <init>= <expr><call><name>r_list_iterator</name><argument_list>(<argument><expr><name>act</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>ite</name> <init>= <expr><call><name>r_list_iterator</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>r_list_iter_next</name><argument_list>(<argument><expr><name>ita</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>r_list_iter_next</name><argument_list>(<argument><expr><name>ite</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>r_list_iter_get</name><argument_list>(<argument><expr><name>ita</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>r_list_iter_get</name><argument_list>(<argument><expr><name>ite</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[-][%s] test failed (actual: %d; expected: %d)\n"</literal></expr></argument>, <argument><expr><name>descr</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ita</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ite</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>diff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[+][%s] test passed (lists have same elements)\n"</literal></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[-][%s] test failed (one list shorter or different)\n"</literal></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>check</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>exp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[+][%s] test passed (actual: %d; expected: %d)\n"</literal></expr></argument>, <argument><expr><name>descr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[-][%s] test failed (actual: %d; expected: %d)\n"</literal></expr></argument>, <argument><expr><name>descr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_ptr</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>act</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>act</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>exp</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RGraph</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>r_graph_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>n_nodes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"n_nodes.start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_node</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>n_nodes</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"n_nodes.insert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_reset</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>n_nodes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"n_nodes.reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>gn</name> <init>= <expr><call><name>r_graph_add_node</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check_ptr</name><argument_list>(<argument><expr><call><name>r_graph_get_node</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gn</name></expr></argument>, <argument><expr><literal type="string">"get_node.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>gn2</name> <init>= <expr><call><name>r_graph_add_node</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check_ptr</name><argument_list>(<argument><expr><call><name>r_graph_get_node</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>gn2</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gn2</name></expr></argument>, <argument><expr><literal type="string">"get_node.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>, <argument><expr><name>gn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><call><name>r_graph_adjacent</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>, <argument><expr><name>gn2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"is_adjacent.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>exp_gn_neigh</name> <init>= <expr><call><name>r_list_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_gn_neigh</name></expr></argument>, <argument><expr><name>gn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_list</name><argument_list>(<argument><expr><call><name>r_graph_get_neighbours</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>exp_gn_neigh</name></expr></argument>, <argument><expr><literal type="string">"get_neighbours.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>gn3</name> <init>= <expr><call><name>r_graph_add_node</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>, <argument><expr><name>gn3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_gn_neigh</name></expr></argument>, <argument><expr><name>gn3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_list</name><argument_list>(<argument><expr><call><name>r_graph_get_neighbours</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>exp_gn_neigh</name></expr></argument>, <argument><expr><literal type="string">"get_neighbours.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name><argument_list>(<argument><expr><name>exp_gn_neigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>gn4</name> <init>= <expr><call><name>r_graph_add_node</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>gn5</name> <init>= <expr><call><name>r_graph_add_node</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>gn6</name> <init>= <expr><call><name>r_graph_add_node</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>gn7</name> <init>= <expr><call><name>r_graph_add_node</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>gn8</name> <init>= <expr><call><name>r_graph_add_node</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>gn9</name> <init>= <expr><call><name>r_graph_add_node</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RGraphNode</name> <modifier>*</modifier></type><name>gn10</name> <init>= <expr><call><name>r_graph_add_node</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>exp_nodes</name> <init>= <expr><call><name>r_list_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_nodes</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_nodes</name></expr></argument>, <argument><expr><name>gn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_nodes</name></expr></argument>, <argument><expr><name>gn3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_nodes</name></expr></argument>, <argument><expr><name>gn4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_nodes</name></expr></argument>, <argument><expr><name>gn5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_nodes</name></expr></argument>, <argument><expr><name>gn6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_nodes</name></expr></argument>, <argument><expr><name>gn7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_nodes</name></expr></argument>, <argument><expr><name>gn8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_nodes</name></expr></argument>, <argument><expr><name>gn9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_nodes</name></expr></argument>, <argument><expr><name>gn10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RList</name> <modifier>*</modifier></type><name>nodes</name> <init>= <expr><call><name>r_graph_get_nodes</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>n_nodes</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"n_nodes.again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_list</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>exp_nodes</name></expr></argument>, <argument><expr><literal type="string">"get_all_nodes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name><argument_list>(<argument><expr><name>exp_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn2</name></expr></argument>, <argument><expr><name>gn3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn2</name></expr></argument>, <argument><expr><name>gn4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn2</name></expr></argument>, <argument><expr><name>gn5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn3</name></expr></argument>, <argument><expr><name>gn5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn5</name></expr></argument>, <argument><expr><name>gn7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn7</name></expr></argument>, <argument><expr><name>gn9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn9</name></expr></argument>, <argument><expr><name>gn10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn4</name></expr></argument>, <argument><expr><name>gn6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn6</name></expr></argument>, <argument><expr><name>gn8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn6</name></expr></argument>, <argument><expr><name>gn9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn8</name></expr></argument>, <argument><expr><name>gn10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn5</name></expr></argument>, <argument><expr><name>gn4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn6</name></expr></argument>, <argument><expr><name>gn7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn7</name></expr></argument>, <argument><expr><name>gn8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn8</name></expr></argument>, <argument><expr><name>gn9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>n_edges</name></name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="string">"n_edges"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_del_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn8</name></expr></argument>, <argument><expr><name>gn9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><call><name>r_graph_adjacent</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn8</name></expr></argument>, <argument><expr><name>gn9</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"is_adjacent.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>n_edges</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"n_edges.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn9</name></expr></argument>, <argument><expr><name>gn8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>n_edges</name></name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="string">"n_edges.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><call><name>r_graph_adjacent</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn9</name></expr></argument>, <argument><expr><name>gn8</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"is_adjacent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_del_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn9</name></expr></argument>, <argument><expr><name>gn8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn8</name></expr></argument>, <argument><expr><name>gn9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><call><name>r_graph_adjacent</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn9</name></expr></argument>, <argument><expr><name>gn8</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"is_adjacent.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><call><name>r_graph_adjacent</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn8</name></expr></argument>, <argument><expr><name>gn9</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"is_adjacent.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RGraphVisitor</name></type> <name>vis</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vis</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>r_list_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vis</name><operator>.</operator><name>finish_node</name></name> <operator>=</operator> <operator>(</operator><name>RGraphNodeCallback</name><operator>)</operator><name>topo_sorting</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_dfs_node</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>exp_order</name> <init>= <expr><call><name>r_list_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_order</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_order</name></expr></argument>, <argument><expr><name>gn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_order</name></expr></argument>, <argument><expr><name>gn3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_order</name></expr></argument>, <argument><expr><name>gn5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_order</name></expr></argument>, <argument><expr><name>gn4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_order</name></expr></argument>, <argument><expr><name>gn6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_order</name></expr></argument>, <argument><expr><name>gn7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_order</name></expr></argument>, <argument><expr><name>gn8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_order</name></expr></argument>, <argument><expr><name>gn9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_order</name></expr></argument>, <argument><expr><name>gn10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_list</name><argument_list>(<argument><expr><name><name>vis</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>exp_order</name></expr></argument>, <argument><expr><literal type="string">"topo_order"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name><argument_list>(<argument><expr><name>exp_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name><argument_list>(<argument><expr><operator>(</operator><name>RList</name> <operator>*</operator><operator>)</operator><name><name>vis</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>exp_innodes</name> <init>= <expr><call><name>r_list_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_innodes</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_innodes</name></expr></argument>, <argument><expr><name>gn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_list</name><argument_list>(<argument><expr><call><name>r_graph_innodes</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>exp_innodes</name></expr></argument>, <argument><expr><literal type="string">"in_nodes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name><argument_list>(<argument><expr><name>exp_innodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>exp_allnodes</name> <init>= <expr><call><name>r_list_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_allnodes</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_allnodes</name></expr></argument>, <argument><expr><name>gn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name><argument_list>(<argument><expr><name>exp_allnodes</name></expr></argument>, <argument><expr><name>gn5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_list</name><argument_list>(<argument><expr><call><name>r_graph_all_neighbours</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>exp_allnodes</name></expr></argument>, <argument><expr><literal type="string">"in/out_nodes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name><argument_list>(<argument><expr><name>exp_allnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_del_node</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_del_node</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>n_nodes</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"n_nodes.del_node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name> <argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>n_edges</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"n_edges.del_node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_graph_free</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
